{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.36.0",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@docTopic",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@include",
          "syntaxKind": "block",
          "allowMultiple": true
        }
      ],
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "preact-prop-helpers!",
  "docComment": "/**\n * # Preact Prop Helpers\n *\n * A selection of custom hooks for Preact.\n * ```md\n * ## `useMergedProps`\n * ### `useMergedClasses`\n * ### `useMergedRefs`\n * ### `useMergedStyles`\n * ### `useMergedChildren`\n * ```\n *\n * @include\n *\n * {@link useMergedProps}\n *\n * ## `useCompleteListNavigation`\n *\n * @include\n *\n * {@link useCompleteListNavigation}\n *\n * @packageDocumentation\n */\n",
  "name": "preact-prop-helpers",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "preact-prop-helpers!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!assertEmptyObject:function(1)",
          "docComment": "/**\n * Does nothing at runtime -- type checking only.\n *\n * Throws a (Typescript compiler) error if the passed object is anything but the empty object {}.\n *\n * Use this to ensure that your spread operators work correctly and cover all cases.\n *\n * @param _a - The remaining spread parameters of a given object that you expect to be empty (because you properly accounted for all the properties that exist in it, and want to ensure it stays that way)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertEmptyObject<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(_a: "
            },
            {
              "kind": "Content",
              "text": "[keyof T] extends [never] ? T : `Unhandled keys in this rest spread object!`"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/assert.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_a",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assertEmptyObject"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!AsyncHandler:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AsyncHandler<EventType, CaptureType> = "
            },
            {
              "kind": "Content",
              "text": "((c: CaptureType, e: EventType) => ("
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void> | void))"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-async-handler.tsx",
          "releaseTag": "Public",
          "name": "AsyncHandler",
          "typeParameters": [
            {
              "typeParameterName": "EventType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CaptureType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!binarySearch:function(1)",
          "docComment": "/**\n * Your usual binary search implementation.\n *\n * It's used here to quickly find a good spot to start searching for our next typeahead candidate.\n *\n * @param array - The array to search through\n *\n * @param wanted - The value you'd like to find\n *\n * @param comparator - Compares `wanted` with the current value in `array`\n *\n * @returns A non-negative value if `wanted` was found, and a negative number if not. The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function binarySearch<T, U, F extends "
            },
            {
              "kind": "Content",
              "text": "(lhs: U, rhs: T) => number"
            },
            {
              "kind": "Content",
              "text": ">(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", wanted: "
            },
            {
              "kind": "Content",
              "text": "U"
            },
            {
              "kind": "Content",
              "text": ", comparator: "
            },
            {
              "kind": "Content",
              "text": "F"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "wanted",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "comparator",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "F",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "binarySearch"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!Compare:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Compare<M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(lhs: M, rhs: M) => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "name": "Compare",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!CompleteGridNavigationContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CompleteGridNavigationRowContext<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", _CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildrenContext",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenContext:interface"
            },
            {
              "kind": "Content",
              "text": "<RM>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildContext",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildContext",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenHaveFocusContext",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusContext:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionContext",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RovingTabIndexChildContext",
              "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationRowContext",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CompleteGridNavigationContext",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 13,
              "endIndex": 15
            },
            {
              "startIndex": 16,
              "endIndex": 17
            },
            {
              "startIndex": 18,
              "endIndex": 19
            },
            {
              "startIndex": 20,
              "endIndex": 22
            },
            {
              "startIndex": 23,
              "endIndex": 24
            },
            {
              "startIndex": 25,
              "endIndex": 26
            },
            {
              "startIndex": 27,
              "endIndex": 28
            },
            {
              "startIndex": 29,
              "endIndex": 30
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!CompleteGridNavigationRowContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CompleteGridNavigationCellContext<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildrenContext",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenContext:interface"
            },
            {
              "kind": "Content",
              "text": "<CM>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RovingTabIndexChildContext",
              "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationCellContext",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CompleteGridNavigationRowContext",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 12
            },
            {
              "startIndex": 13,
              "endIndex": 14
            },
            {
              "startIndex": 15,
              "endIndex": 16
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!CompleteListNavigationContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CompleteListNavigationContext<_ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildrenContext",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenContext:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildContext",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildContext",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenHaveFocusContext",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusContext:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionContext",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RovingTabIndexChildContext",
              "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "_ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CompleteListNavigationContext",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 12
            },
            {
              "startIndex": 13,
              "endIndex": 14
            },
            {
              "startIndex": 15,
              "endIndex": 17
            },
            {
              "startIndex": 18,
              "endIndex": 19
            },
            {
              "startIndex": 20,
              "endIndex": 21
            },
            {
              "startIndex": 22,
              "endIndex": 23
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!CompositionEventType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CompositionEventType<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.TargetedCompositionEvent",
              "canonicalReference": "preact!JSXInternal.TargetedCompositionEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "CompositionEventType",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!CSSProperties:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CSSProperties = "
            },
            {
              "kind": "Reference",
              "text": "JSX.CSSProperties",
              "canonicalReference": "preact!JSXInternal.CSSProperties:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "CSSProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!debounceRendering:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function debounceRendering(f: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "f",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "debounceRendering"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!defaultCompare:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function defaultCompare(lhs: "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", rhs: "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "lhs",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "rhs",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "defaultCompare"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!DismissListenerTypes:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DismissListenerTypes = "
            },
            {
              "kind": "Content",
              "text": "\"backdrop\" | \"lost-focus\" | \"escape\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "releaseTag": "Public",
          "name": "DismissListenerTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!DropFile:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DropFile extends "
            },
            {
              "kind": "Reference",
              "text": "DropFileMetadata",
              "canonicalReference": "preact-prop-helpers!DropFileMetadata:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-droppable.tsx",
          "releaseTag": "Public",
          "name": "DropFile",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!DropFile#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!DropFile#lastModified:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lastModified: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lastModified",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!DropFile#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!DropFile#size:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!DropFileMetadata:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DropFileMetadata "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-droppable.tsx",
          "releaseTag": "Public",
          "name": "DropFileMetadata",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!DropFileMetadata#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "preact-prop-helpers!DroppableFileError:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DroppableFileError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-droppable.tsx",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "DroppableFileError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "preact-prop-helpers!DroppableFileError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DroppableFileError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(fileName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", base: "
                },
                {
                  "kind": "Reference",
                  "text": "DOMException",
                  "canonicalReference": "!DOMException:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fileName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "preact-prop-helpers!DroppableFileError#errorType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorType: "
                },
                {
                  "kind": "Reference",
                  "text": "DroppableFileErrorType",
                  "canonicalReference": "preact-prop-helpers!~DroppableFileErrorType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "errorType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "preact-prop-helpers!DroppableFileError#fileName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fileName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fileName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!ElementProps:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ElementProps<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.HTMLAttributes",
              "canonicalReference": "preact!JSXInternal.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "ElementProps",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!ElementSize:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ElementSize "
            }
          ],
          "fileUrlPath": "src/observers/use-element-size.tsx",
          "releaseTag": "Public",
          "name": "ElementSize",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#clientHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#clientLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientLeft: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#clientTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientTop: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#clientWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#offsetHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#offsetLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetLeft: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#offsetTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetTop: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#offsetWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#scrollHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#scrollLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollLeft: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#scrollTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollTop: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ElementSize#scrollWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!enableLoggingPropConflicts:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enableLoggingPropConflicts(log2: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "console",
              "canonicalReference": "!console:var"
            },
            {
              "kind": "Content",
              "text": "[\"log\"]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-merged-props.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "log2",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "enableLoggingPropConflicts"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!EnhancedEventHandler:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EnhancedEventHandler<E extends "
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": ", Detail> = "
            },
            {
              "kind": "Content",
              "text": "(e: "
            },
            {
              "kind": "Reference",
              "text": "TargetedEnhancedEvent",
              "canonicalReference": "preact-prop-helpers!TargetedEnhancedEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E, Detail>) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/event.tsx",
          "releaseTag": "Public",
          "name": "EnhancedEventHandler",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Detail",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!enhanceEvent:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enhanceEvent<E extends "
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": ", Detail extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(e: "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ", detail: "
            },
            {
              "kind": "Content",
              "text": "Detail"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TargetedEnhancedEvent",
              "canonicalReference": "preact-prop-helpers!TargetedEnhancedEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E, Detail>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/event.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "e",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "detail",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Detail",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "enhanceEvent"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!EventDetail:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventDetail = "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "EventDetail",
              "canonicalReference": "preact-prop-helpers!EventDetail:var"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/event.tsx",
          "releaseTag": "Public",
          "name": "EventDetail",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "preact-prop-helpers!EventDetail:var",
          "docComment": "/**\n * Quick and easy way to add extra information to an event that was fired.\n *\n * For example, \"this was a click event, but it has information about what list item was pressed too.\"\n *\n * Get that extra information from the [EventDetail] symbol.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EventDetail: "
            },
            {
              "kind": "Content",
              "text": "unique symbol"
            }
          ],
          "fileUrlPath": "src/util/event.tsx",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "EventDetail",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!EventType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventType<T extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": ", E extends "
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.TargetedEvent",
              "canonicalReference": "preact!JSXInternal.TargetedEvent:type"
            },
            {
              "kind": "Content",
              "text": "<T, E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "EventType",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!ExtendMerge:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ExtendMerge<A, B> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in (keyof A) | (keyof B)]: K extends keyof A ? (K extends keyof B ? (A[K] & B[K]) : A[K]) : K extends keyof B ? B[K] : unknown;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "ExtendMerge",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!findBackupFocus:function(1)",
          "docComment": "/**\n * When an element unmounts, default HTML behavior is to just send focus to the body, which is wildly unhelpful. It means you lose your place in the keyboard tab order.\n *\n * If you still have access to the element that's unmounting, or perhaps its parent from beforehand, this will find the next suitable element to send focus to instead of the body.\n *\n * **Important**: This function is linear on the number of DOM nodes in your document, so it's not particularly fast. Only call it once when you need its value, not every time tab focus changed or something.\n *\n * @param unmountingElement - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findBackupFocus(unmountingElement: "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/focus.tsx",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "unmountingElement",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "findBackupFocus"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!findFirstFocusable:function(1)",
          "docComment": "/**\n * Returns the first focusable element contained within the given node, or null if none are found.\n *\n * @param element - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findFirstFocusable<T extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "!Node:interface"
            },
            {
              "kind": "Content",
              "text": ">(element: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-focus-trap.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "element",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "findFirstFocusable"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!findFirstTabbable:function(1)",
          "docComment": "/**\n * Returns the first tabbable element contained within the given node, or null if none are found.\n *\n * @param element - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findFirstTabbable<T extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "!Node:interface"
            },
            {
              "kind": "Content",
              "text": ">(element: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-focus-trap.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "element",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "findFirstTabbable"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!focus_2:function(1)",
          "docComment": "/**\n * If you want a single place to put a debugger for tracking focus, here:\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function focus(e: "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/focus.tsx",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "e",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "focus_2"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!FocusEventType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FocusEventType<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.TargetedFocusEvent",
              "canonicalReference": "preact!JSXInternal.TargetedFocusEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "FocusEventType",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!generateRandomId:function(1)",
          "docComment": "/**\n * Returns a randomly-generated ID with an optional prefix. Note that if the prefix is *explicitly* set to \"\", then IDs that are not valid under HTML4 may be generated. Oh no.\n *\n * (This is here, in this particular file, to avoid circular dependencies because useBeforeLayoutEffect also needs random IDs for its own reasons)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateRandomId(prefix?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/random-id.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "prefix",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "generateRandomId"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!GetAttribute:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetAttribute<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "<K extends keyof "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>>(prop: K) => "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>[K]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "name": "GetAttribute",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!getBuildMode:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBuildMode(): "
            },
            {
              "kind": "Content",
              "text": "\"production\" | \"development\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/mode.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getBuildMode"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!GetClass:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetClass = "
            },
            {
              "kind": "Content",
              "text": "(cls: string) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "name": "GetClass",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!getDocument:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDocument(element?: "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "!Node:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "!Document:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-document-class.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "element",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getDocument"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!getFromLocalStorage:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFromLocalStorage<Key extends "
            },
            {
              "kind": "Content",
              "text": "(keyof "
            },
            {
              "kind": "Reference",
              "text": "PersistentStates",
              "canonicalReference": "preact-prop-helpers!PersistentStates:interface"
            },
            {
              "kind": "Content",
              "text": ") & string"
            },
            {
              "kind": "Content",
              "text": ">(key: "
            },
            {
              "kind": "Content",
              "text": "Key"
            },
            {
              "kind": "Content",
              "text": ", converter?: "
            },
            {
              "kind": "Content",
              "text": "((input: string) => "
            },
            {
              "kind": "Reference",
              "text": "PersistentStates",
              "canonicalReference": "preact-prop-helpers!PersistentStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key])"
            },
            {
              "kind": "Content",
              "text": ", storage?: "
            },
            {
              "kind": "Reference",
              "text": "Storage",
              "canonicalReference": "!Storage:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PersistentStates",
              "canonicalReference": "preact-prop-helpers!PersistentStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key] | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-persistent-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "converter",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "storage",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getFromLocalStorage"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!GetHighestChildIndex:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetHighestChildIndex = "
            },
            {
              "kind": "Content",
              "text": "() => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "name": "GetHighestChildIndex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!GetIndex:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetIndex = "
            },
            {
              "kind": "Content",
              "text": "(row: "
            },
            {
              "kind": "Reference",
              "text": "VNode",
              "canonicalReference": "preact-prop-helpers!VNode:type"
            },
            {
              "kind": "Content",
              "text": ") => (number | null | undefined)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "name": "GetIndex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!GetValid:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetValid = "
            },
            {
              "kind": "Content",
              "text": "(index: number) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "name": "GetValid",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridChildCellInfo<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "GridChildCellInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridChildRowInfo<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", _CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "GridChildRowInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!GridChildRowInfo#setTabbableColumnIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTabbableColumnIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "SetTabbableIndex",
                  "canonicalReference": "preact-prop-helpers!SetTabbableIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTabbableColumnIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 5,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridSingleSelectChildCellInfo<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "gcci",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "GridSingleSelectChildCellInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridSingleSelectChildRowInfo<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "gcri",
              "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "GridSingleSelectChildRowInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 5,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildCellInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridSingleSelectSortableChildCellInfo<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "GridSingleSelectSortableChildCellInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildRowInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridSingleSelectSortableChildRowInfo<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "GridSingleSelectSortableChildRowInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 5,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!hideCallCount:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hideCallCount(hook: "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": " | \"all\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/use-call-count.tsx",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hook",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "hideCallCount"
        },
        {
          "kind": "Variable",
          "canonicalReference": "preact-prop-helpers!ImperativeElement:var",
          "docComment": "/**\n * Easy access to an HTMLElement that can be controlled imperatively.\n *\n * The HTMLElement rendered is controlled by the `tag` prop (e.g. \"span\", \"div\").\n *\n * The `handle` prop should be e.g. `useRef<ImperativeHandle<HTMLDivElement>>(null)`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ImperativeElement: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ImperativeElementU",
              "canonicalReference": "preact-prop-helpers!~ImperativeElementU:function"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ImperativeElement",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!ImperativeElementProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImperativeElementProps<T extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "HTMLElementTagNameMap",
              "canonicalReference": "!HTMLElementTagNameMap:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElementTagNameMap",
              "canonicalReference": "!HTMLElementTagNameMap:interface"
            },
            {
              "kind": "Content",
              "text": "[T]>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ImperativeElementProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeElementProps#handle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handle: "
                },
                {
                  "kind": "Reference",
                  "text": "Ref",
                  "canonicalReference": "preact!Ref:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImperativeHandle",
                  "canonicalReference": "preact-prop-helpers!ImperativeHandle:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElementTagNameMap",
                  "canonicalReference": "!HTMLElementTagNameMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeElementProps#tag:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tag: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 4,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!ImperativeHandle:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImperativeHandle<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ImperativeHandle",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#dangerouslyAppendHTML:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dangerouslyAppendHTML: "
                },
                {
                  "kind": "Reference",
                  "text": "DangerouslyAppendHTML",
                  "canonicalReference": "preact-prop-helpers!~DangerouslyAppendHTML:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dangerouslyAppendHTML",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#dangerouslySetInnerHTML:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dangerouslySetInnerHTML: "
                },
                {
                  "kind": "Reference",
                  "text": "DangerouslySetInnerHTML",
                  "canonicalReference": "preact-prop-helpers!~DangerouslySetInnerHTML:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dangerouslySetInnerHTML",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#getAttribute:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAttribute: "
                },
                {
                  "kind": "Reference",
                  "text": "GetAttribute",
                  "canonicalReference": "preact-prop-helpers!GetAttribute:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getAttribute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#hasClass:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasClass: "
                },
                {
                  "kind": "Reference",
                  "text": "GetClass",
                  "canonicalReference": "preact-prop-helpers!GetClass:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasClass",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#setAttribute:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAttribute: "
                },
                {
                  "kind": "Reference",
                  "text": "SetAttribute",
                  "canonicalReference": "preact-prop-helpers!SetAttribute:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setAttribute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#setChildren:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setChildren: "
                },
                {
                  "kind": "Reference",
                  "text": "SetChildren",
                  "canonicalReference": "preact-prop-helpers!SetChildren:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setChildren",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#setClass:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setClass: "
                },
                {
                  "kind": "Reference",
                  "text": "SetClass",
                  "canonicalReference": "preact-prop-helpers!SetClass:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setClass",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#setEventHandler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setEventHandler: "
                },
                {
                  "kind": "Reference",
                  "text": "SetEventHandler",
                  "canonicalReference": "preact-prop-helpers!SetEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setEventHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle#setStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStyle: "
                },
                {
                  "kind": "Reference",
                  "text": "SetStyle",
                  "canonicalReference": "preact-prop-helpers!SetStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!KeyboardEventType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type KeyboardEventType<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.TargetedKeyboardEvent",
              "canonicalReference": "preact!JSXInternal.TargetedKeyboardEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "KeyboardEventType",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!LinearNavigationResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LinearNavigationResult "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-linear-navigation.tsx",
          "releaseTag": "Public",
          "name": "LinearNavigationResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LinearNavigationResult#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Content",
                  "text": "\"normal\" | \"past-start\" | \"past-end\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LinearNavigationResult#valueUnmangled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "valueUnmangled: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "valueUnmangled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LogicalDirectionInfo "
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "releaseTag": "Public",
          "name": "LogicalDirectionInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo#blockDirection:member",
              "docComment": "/**\n * Represents the direction text flows, line by line.\n *\n * * `ttb` for `horizontal-tb`, regardless of direction * `rtl` for `vertical-rl` & `sideways-rl`, regardless of direction * `ltr` for `vertical-lr` & `sideways-lr`, regardless of direction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blockDirection: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalDirection",
                  "canonicalReference": "preact-prop-helpers!PhysicalDirection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "blockDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo#blockOrientation:member",
              "docComment": "/**\n * Simplified version of `blockDirection`:\n *\n * * `vertical` for `horizontal-tb` * `horizontal` for all others\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blockOrientation: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalOrientation",
                  "canonicalReference": "preact-prop-helpers!PhysicalOrientation:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "blockOrientation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo#blockSize:member",
              "docComment": "/**\n * Represents how you can *physically* refer to the size of the element in the *block* size.\n *\n * * `height` for `horizontal-tb`, regardless of direction * `width` for all others\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blockSize: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalSize",
                  "canonicalReference": "preact-prop-helpers!PhysicalSize:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "blockSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo#inlineDirection:member",
              "docComment": "/**\n * Represents the direction text flows, glyph by glyph. By far the most complex property.\n *\n * |`writing-mode`|`direction`|Result| |-----|-----|-----| |`horizontal-tb`|`ltr`|`ltr`| |`horizontal-tb`|`rtl`|`rtl`| |`vertical-rl` & `sideways-rl`|`ltr`|`ttb`| |`vertical-rl` & `sideways-rl`|`rtl`|`btt`| |`vertical-lr`|`ltr`|`ttb`| |`vertical-lr`|`rtl`|`btt`| |`sideways-lr`|`ltr`|`btt`| |`sideways-lr`|`rtl`|`ttb`|\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inlineDirection: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalDirection",
                  "canonicalReference": "preact-prop-helpers!PhysicalDirection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "inlineDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo#inlineOrientation:member",
              "docComment": "/**\n * Simplified version of `inlineDirection`:\n *\n * * `horizontal` for `horizontal-tb` * `vertical` for all others\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inlineOrientation: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalOrientation",
                  "canonicalReference": "preact-prop-helpers!PhysicalOrientation:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "inlineOrientation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo#inlineSize:member",
              "docComment": "/**\n * Represents how you can *physically* refer to the size of the element in the *inline* size.\n *\n * * `width` for `horizontal-tb`, regardless of direction * `height` for all others\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inlineSize: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalSize",
                  "canonicalReference": "preact-prop-helpers!PhysicalSize:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "inlineSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo#leftRightDirection:member",
              "docComment": "/**\n * For each glyph, its \"left\" side (think of this relative to `writing-mode` but *not* relative to `direction`, or alternatively what `text-align: left` means) to its \"right\" side *physically* goes from:\n *\n * * `ltr` for `horizontal-tb` * `ttb` for `vertical-rl`, `vertical-lr`, & `sideways-rl` * `btt` for `sideways-lr`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leftRightDirection: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalDirection",
                  "canonicalReference": "preact-prop-helpers!PhysicalDirection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "leftRightDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo#overUnderDirection:member",
              "docComment": "/**\n * For each glyph, ascenders to descenders *physically* go:\n *\n * * `ttb` for `horizontal-tb` * `rtl` for `vertical-rl`, `vertical-lr`, & `sideways-rl` * `ltr` for `sideways-lr`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overUnderDirection: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalDirection",
                  "canonicalReference": "preact-prop-helpers!PhysicalDirection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "overUnderDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!LogicalElementSize:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LogicalElementSize "
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "releaseTag": "Public",
          "name": "LogicalElementSize",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#clientBlockInset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientBlockInset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientBlockInset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#clientBlockSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientBlockSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientBlockSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#clientInlineInset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientInlineInset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientInlineInset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#clientInlineSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientInlineSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "clientInlineSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#offsetBlockInset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetBlockInset: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetBlockInset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#offsetBlockSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetBlockSize: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetBlockSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#offsetInlineInset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetInlineInset: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetInlineInset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#offsetInlineSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetInlineSize: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offsetInlineSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#scrollBlockInset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollBlockInset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollBlockInset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#scrollBlockSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollBlockSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollBlockSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#scrollInlineInset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollInlineInset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollInlineInset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!LogicalElementSize#scrollInlineSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollInlineSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollInlineSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!LogicalOrientation:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogicalOrientation = "
            },
            {
              "kind": "Content",
              "text": "\"inline\" | \"block\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "releaseTag": "Public",
          "name": "LogicalOrientation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!MakeSingleSelectionDeclarativeParameters:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MakeSingleSelectionDeclarativeParameters<P> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<P, \"singleSelectionParameters\"> & "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionDeclarativeParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionDeclarativeParameters:interface"
            },
            {
              "kind": "Content",
              "text": " & {\n    singleSelectionParameters: "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>[\"singleSelectionParameters\"], \"ariaPropName\" | \"selectionMode\">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "name": "MakeSingleSelectionDeclarativeParameters",
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!MakeSingleSelectionDeclarativeReturnType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MakeSingleSelectionDeclarativeReturnType<R> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<R, \"singleSelectionReturn\">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "name": "MakeSingleSelectionDeclarativeReturnType",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface",
          "docComment": "/**\n * Information that children and parents use to communicate with each other.\n *\n * Other hooks will inherit from this to provide more complicated behavior.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ManagedChildInfo<T extends "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ManagedChildInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo#index:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!ManagedChildren:interface",
          "docComment": "/**\n * Abstraction over the managed children\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ManagedChildren<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ManagedChildren",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ManagedChildren#arraySlice:member",
              "docComment": "/**\n * **UNSTABLE**, also internal-use only, also TODO need a workaround for this for sortable children, or at least properly name it.\n *\n * WHAT THIS DOES:\n *\n * This function takes the children, slices the array containing them, and, *crutially*, fills in any holes in the array with a pseudo-child that just contains an index.\n *\n * This behavior, to be clear, is only necessary for sorting and rearranging because sorting and rearranging require knowing perfectly which index maps to which. We don't need any other missing information in the array besides the missing index.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "arraySlice: "
                },
                {
                  "kind": "Content",
                  "text": "() => M[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "arraySlice",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!ManagedChildren#forEach:member",
              "docComment": "/**\n * STABLE\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEach: "
                },
                {
                  "kind": "Content",
                  "text": "(f: (child: M) => void) => void | \"break\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "forEach",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!ManagedChildren#getAt:member(1)",
              "docComment": "/**\n * STABLE\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAt(index: "
                },
                {
                  "kind": "Content",
                  "text": "M[\"index\"]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "M | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getAt"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!ManagedChildren#getHighestIndex:member(1)",
              "docComment": "/**\n * STABLE\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHighestIndex(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHighestIndex"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!mergeFunctions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mergeFunctions<T extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => (void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>)"
            },
            {
              "kind": "Content",
              "text": ", U extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => (void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>)"
            },
            {
              "kind": "Content",
              "text": ">(lhs: "
            },
            {
              "kind": "Content",
              "text": "T | null | undefined"
            },
            {
              "kind": "Content",
              "text": ", rhs: "
            },
            {
              "kind": "Content",
              "text": "U | null | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | U | ((...args: "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<[void, void]> | undefined) | null | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-merged-props.tsx",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "lhs",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "rhs",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mergeFunctions"
        },
        {
          "kind": "Variable",
          "canonicalReference": "preact-prop-helpers!monitorCallCount:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "monitorCallCount: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "callCountU",
              "canonicalReference": "preact-prop-helpers!~callCountU:function"
            }
          ],
          "fileUrlPath": "src/util/use-call-count.tsx",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "monitorCallCount",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!MouseEventType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MouseEventType<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.TargetedMouseEvent",
              "canonicalReference": "preact!JSXInternal.TargetedMouseEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "MouseEventType",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!Nullable:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Nullable<T = "
            },
            {
              "kind": "Content",
              "text": "null"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "null | undefined | T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "Nullable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!OmitStrong:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OmitStrong<T, K extends "
            },
            {
              "kind": "Content",
              "text": "keyof T"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<T, K>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "OmitStrong",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!OnAfterChildLayoutEffect:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OnAfterChildLayoutEffect<T extends "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "((causers: "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<T>) => void)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "name": "OnAfterChildLayoutEffect",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!OnChildrenMountChange:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OnChildrenMountChange<T extends "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "((mounted: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, unmounted: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>) => void)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "name": "OnChildrenMountChange",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!OnParamValueChanged:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OnParamValueChanged<T> = "
            },
            {
              "kind": "Reference",
              "text": "OnPassiveStateChange",
              "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
            },
            {
              "kind": "Content",
              "text": "<T, never>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-search-param-state.tsx",
          "releaseTag": "Public",
          "name": "OnParamValueChanged",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type",
          "docComment": "/**\n * Responds to a change in a value, unlike `PassiveStateUpdater` which causes the updates\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OnPassiveStateChange<S, R> = "
            },
            {
              "kind": "Content",
              "text": "((value: S, prevValue: S | undefined, reason?: R) => (void | (() => void)))"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "releaseTag": "Public",
          "name": "OnPassiveStateChange",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!OnTabbableIndexChange:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OnTabbableIndexChange = "
            },
            {
              "kind": "Content",
              "text": "(tabbableIndex: number | null) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "releaseTag": "Public",
          "name": "OnTabbableIndexChange",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PassiveStateUpdater:type",
          "docComment": "/**\n * Takes a new value or a function that updates a value, unlike `OnPassiveStateChange` which reacts to those updates\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PassiveStateUpdater<S, R> = "
            },
            {
              "kind": "Content",
              "text": "((value: S | ((prevState: S | undefined) => S), reason?: R) => void)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "releaseTag": "Public",
          "name": "PassiveStateUpdater",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!PersistentStates:interface",
          "docComment": "/**\n * All types allowed by `usePersistentState`.\n *\n * Use module augmentation to add new properties to this object that `usePersistentState` will correctly understand:\n *\n * ```` declare module 'preact-prop-helpers' { interface PersistentStates { numberState: number; stringState: string; } } ````\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PersistentStates "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-persistent-state.tsx",
          "releaseTag": "Public",
          "name": "PersistentStates",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PhysicalDirection:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PhysicalDirection = "
            },
            {
              "kind": "Content",
              "text": "\"ltr\" | \"rtl\" | \"ttb\" | \"btt\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "releaseTag": "Public",
          "name": "PhysicalDirection",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PhysicalOrientation:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PhysicalOrientation = "
            },
            {
              "kind": "Content",
              "text": "\"horizontal\" | \"vertical\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "releaseTag": "Public",
          "name": "PhysicalOrientation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PhysicalSize:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PhysicalSize = "
            },
            {
              "kind": "Content",
              "text": "\"width\" | \"height\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "releaseTag": "Public",
          "name": "PhysicalSize",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PointerEventType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PointerEventType<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.TargetedPointerEvent",
              "canonicalReference": "preact!JSXInternal.TargetedPointerEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "PointerEventType",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PortalChildUpdater:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PortalChildUpdater<S> = "
            },
            {
              "kind": "Content",
              "text": "(value: ((prevState: S) => S)) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-portal-children.tsx",
          "releaseTag": "Public",
          "name": "PortalChildUpdater",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PressChangeEventReason:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PressChangeEventReason<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "MouseEventType",
              "canonicalReference": "preact-prop-helpers!MouseEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E> | "
            },
            {
              "kind": "Reference",
              "text": "KeyboardEventType",
              "canonicalReference": "preact-prop-helpers!KeyboardEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E> | "
            },
            {
              "kind": "Reference",
              "text": "TouchEventType",
              "canonicalReference": "preact-prop-helpers!TouchEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E> | "
            },
            {
              "kind": "Reference",
              "text": "PointerEventType",
              "canonicalReference": "preact-prop-helpers!PointerEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E> | "
            },
            {
              "kind": "Reference",
              "text": "FocusEventType",
              "canonicalReference": "preact-prop-helpers!FocusEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-press.tsx",
          "releaseTag": "Public",
          "name": "PressChangeEventReason",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 13
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PressEventReason:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PressEventReason<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "MouseEventType",
              "canonicalReference": "preact-prop-helpers!MouseEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E> | "
            },
            {
              "kind": "Reference",
              "text": "KeyboardEventType",
              "canonicalReference": "preact-prop-helpers!KeyboardEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E> | "
            },
            {
              "kind": "Reference",
              "text": "TouchEventType",
              "canonicalReference": "preact-prop-helpers!TouchEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E> | "
            },
            {
              "kind": "Reference",
              "text": "PointerEventType",
              "canonicalReference": "preact-prop-helpers!PointerEventType:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-press.tsx",
          "releaseTag": "Public",
          "name": "PressEventReason",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 11
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!ProvideBatchedAnimationFrames:function(1)",
          "docComment": "/**\n * When a bunch of unrelated components all use `requestAnimationFrame`, yes, this actually is faster. I wish it wasn't. It's lame.\n *\n * @param param0 - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ProvideBatchedAnimationFrames({ children }: "
            },
            {
              "kind": "Content",
              "text": "{\n    children: "
            },
            {
              "kind": "Reference",
              "text": "ComponentChildren",
              "canonicalReference": "preact!ComponentChildren:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "import(\"preact\")."
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "preact!JSXInternal.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/timing/use-animation-frame.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ children }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "ProvideBatchedAnimationFrames"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!PushPortalChild:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PushPortalChild = "
            },
            {
              "kind": "Content",
              "text": "(child: "
            },
            {
              "kind": "Reference",
              "text": "VNode",
              "canonicalReference": "preact-prop-helpers!VNode:type"
            },
            {
              "kind": "Content",
              "text": ") => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-portal-children.tsx",
          "releaseTag": "Public",
          "name": "PushPortalChild",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!RemovePortalChild:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RemovePortalChild = "
            },
            {
              "kind": "Content",
              "text": "(index: number) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-portal-children.tsx",
          "releaseTag": "Public",
          "name": "RemovePortalChild",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!returnFalse:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function returnFalse(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "returnFalse"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!returnNull:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function returnNull(): "
            },
            {
              "kind": "Content",
              "text": "null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "returnNull"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!returnsFunction:function(1)",
          "docComment": "/**\n * Summary of returnsFunction\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function returnsFunction(): "
            },
            {
              "kind": "Content",
              "text": "() => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/temp.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "returnsFunction"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!returnTrue:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function returnTrue(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "returnTrue"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!returnUndefined:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function returnUndefined(): "
            },
            {
              "kind": "Content",
              "text": "undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "returnUndefined"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!returnZero:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function returnZero(): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "returnZero"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RovingTabIndexChildContext "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "releaseTag": "Public",
          "name": "RovingTabIndexChildContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext#rovingTabIndexContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexContext: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        untabbable: boolean;\n        untabbableBehavior: \"focus-parent\" | \"leave-child-focused\";\n        parentFocusSelf: () => void;\n        giveParentFocusedElement(element: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "): void;\n        setTabbableIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "SetTabbableIndex",
                  "canonicalReference": "preact-prop-helpers!SetTabbableIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        getInitiallyTabbedIndex(): number | null;\n        reevaluateClosestFit: (requestedIndex?: number) => void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!runImmediately:function(1)",
          "docComment": "/**\n * An alternative to use for `customDebounceRendering` that causes `usePassiveState` to run changes without waiting a tick.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runImmediately(f: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "f",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "runImmediately"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!SearchParamStates:interface",
          "docComment": "/**\n * All types allowed by `useSearchParamState`.\n *\n * Use module augmentation to add new properties to this object that `useSearchParamState` will correctly understand:\n *\n * ```` declare module 'preact-prop-helpers' { interface SearchParamStates { numberState: number; stringState: string; } } ````\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SearchParamStates "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-search-param-state.tsx",
          "releaseTag": "Public",
          "name": "SearchParamStates",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SelectedIndexChangeEvent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SelectedIndexChangeEvent = "
            },
            {
              "kind": "Reference",
              "text": "TargetedEnhancedEvent",
              "canonicalReference": "preact-prop-helpers!TargetedEnhancedEvent:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": ", {\n    selectedIndex: number;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "name": "SelectedIndexChangeEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SelectedIndexChangeHandler:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SelectedIndexChangeHandler = "
            },
            {
              "kind": "Reference",
              "text": "EnhancedEventHandler",
              "canonicalReference": "preact-prop-helpers!EnhancedEventHandler:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": ", {\n    selectedIndex: number;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "name": "SelectedIndexChangeHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SetAttribute:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetAttribute<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "<K extends keyof "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>>(prop: K, value: "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<T>[K] | null) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "name": "SetAttribute",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SetChildren:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetChildren = "
            },
            {
              "kind": "Content",
              "text": "((children: string | null) => void)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "name": "SetChildren",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SetClass:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetClass = "
            },
            {
              "kind": "Content",
              "text": "(cls: string, enabled: boolean) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "name": "SetClass",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SetEventHandler:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetEventHandler = "
            },
            {
              "kind": "Content",
              "text": "<K extends keyof "
            },
            {
              "kind": "Reference",
              "text": "HTMLElementEventMap",
              "canonicalReference": "!HTMLElementEventMap:interface"
            },
            {
              "kind": "Content",
              "text": ">(type: K, listener: null | ((this: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", ev: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElementEventMap",
              "canonicalReference": "!HTMLElementEventMap:interface"
            },
            {
              "kind": "Content",
              "text": "[K]) => void), options: "
            },
            {
              "kind": "Reference",
              "text": "AddEventListenerOptions",
              "canonicalReference": "!AddEventListenerOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "name": "SetEventHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SetParamWithHistory:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetParamWithHistory<T> = "
            },
            {
              "kind": "Content",
              "text": "(value: T | ((prevValue: T) => T), reason?: \"push\" | \"replace\") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-search-param-state.tsx",
          "releaseTag": "Public",
          "name": "SetParamWithHistory",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!setPressVibrate:function(1)",
          "docComment": "/**\n * This function can be used to enable/disable button vibration pulses on an app-wide scale.\n *\n * @param func - The function to run when a button is tapped. (Default is `() => navigator.vibrate(10)` in browsers that support it, a noop otherwise)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPressVibrate(func: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-press.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setPressVibrate"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SetStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetStyle = "
            },
            {
              "kind": "Content",
              "text": "<T extends (keyof "
            },
            {
              "kind": "Reference",
              "text": "CSSStyleDeclaration",
              "canonicalReference": "!CSSStyleDeclaration:interface"
            },
            {
              "kind": "Content",
              "text": ") & string>(prop: T, value: "
            },
            {
              "kind": "Reference",
              "text": "CSSProperties",
              "canonicalReference": "preact-prop-helpers!CSSProperties:type"
            },
            {
              "kind": "Content",
              "text": "[T] | null) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "name": "SetStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!SetTabbableIndex:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetTabbableIndex = "
            },
            {
              "kind": "Content",
              "text": "(updater: "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PassiveStateUpdater",
              "canonicalReference": "preact-prop-helpers!PassiveStateUpdater:type"
            },
            {
              "kind": "Content",
              "text": "<number | null, "
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": ">>[0], reason: "
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined, fromUserInteraction: boolean) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "releaseTag": "Public",
          "name": "SetTabbableIndex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!storeToLocalStorage:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function storeToLocalStorage<Key extends "
            },
            {
              "kind": "Content",
              "text": "(keyof "
            },
            {
              "kind": "Reference",
              "text": "PersistentStates",
              "canonicalReference": "preact-prop-helpers!PersistentStates:interface"
            },
            {
              "kind": "Content",
              "text": ") & string"
            },
            {
              "kind": "Content",
              "text": ">(key: "
            },
            {
              "kind": "Content",
              "text": "Key"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Reference",
              "text": "PersistentStates",
              "canonicalReference": "preact-prop-helpers!PersistentStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]"
            },
            {
              "kind": "Content",
              "text": ", converter?: "
            },
            {
              "kind": "Content",
              "text": "((input: "
            },
            {
              "kind": "Reference",
              "text": "PersistentStates",
              "canonicalReference": "preact-prop-helpers!PersistentStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]) => string)"
            },
            {
              "kind": "Content",
              "text": ", storage?: "
            },
            {
              "kind": "Reference",
              "text": "Storage",
              "canonicalReference": "!Storage:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-persistent-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": false
            },
            {
              "parameterName": "converter",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 13
              },
              "isOptional": true
            },
            {
              "parameterName": "storage",
              "parameterTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "storeToLocalStorage"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!TargetedEnhancedEvent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TargetedEnhancedEvent<E extends "
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": ", Detail> = "
            },
            {
              "kind": "Content",
              "text": "E & {\n    ["
            },
            {
              "kind": "Reference",
              "text": "EventDetail",
              "canonicalReference": "preact-prop-helpers!EventDetail:var"
            },
            {
              "kind": "Content",
              "text": "]: Detail;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/event.tsx",
          "releaseTag": "Public",
          "name": "TargetedEnhancedEvent",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Detail",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "preact-prop-helpers!TestClass:class",
          "docComment": "/**\n * Summary of TestClass\n *\n * @remarks\n *\n * Extra remarks\n *\n * @typeParam T - A type parameter\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TestClass<T> extends "
            },
            {
              "kind": "Reference",
              "text": "TestClassBase",
              "canonicalReference": "preact-prop-helpers!~TestClassBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/util/temp.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "TestClass",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "preact-prop-helpers!TestClass:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TestClass` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "preact-prop-helpers!TestClass#abstractFrob:member(1)",
              "docComment": "/**\n * Summary of frob (implemented)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstractFrob(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "abstractFrob"
            },
            {
              "kind": "Method",
              "canonicalReference": "preact-prop-helpers!TestClass#foo:member(1)",
              "docComment": "/**\n * Summary of foo\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "foo<T>(): "
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "foo"
            },
            {
              "kind": "Method",
              "canonicalReference": "preact-prop-helpers!TestClass#frob:member(1)",
              "docComment": "/**\n * Summary of frob (overridden)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frob(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "frob"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "preact-prop-helpers!TestEnum:enum",
          "docComment": "/**\n * Summary of TestEnum\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum TestEnum "
            }
          ],
          "fileUrlPath": "src/util/temp.tsx",
          "releaseTag": "Public",
          "name": "TestEnum",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "preact-prop-helpers!TestEnum.A:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "A = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "A"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "preact-prop-helpers!TestEnum.B:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "B = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "B"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "preact-prop-helpers!TestEnum.C:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "C = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "C"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "preact-prop-helpers!TestEnum.D:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "D = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "D"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "preact-prop-helpers!TestEnum.E:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "E = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "E"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "preact-prop-helpers!TestEnum.F:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "F = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "F"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!TouchEventType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TouchEventType<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "JSX.TargetedTouchEvent",
              "canonicalReference": "preact!JSXInternal.TargetedTouchEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "TouchEventType",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!tryNavigateToIndex:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function tryNavigateToIndex({ isValid, highestChildIndex, searchDirection, indexDemangler, indexMangler, targetUnmangled }: "
            },
            {
              "kind": "Reference",
              "text": "TryNavigateToIndexParameters",
              "canonicalReference": "preact-prop-helpers!TryNavigateToIndexParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LinearNavigationResult",
              "canonicalReference": "preact-prop-helpers!LinearNavigationResult:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-linear-navigation.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ isValid, highestChildIndex, searchDirection, indexDemangler, indexMangler, targetUnmangled }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "tryNavigateToIndex"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!TryNavigateToIndexParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TryNavigateToIndexParameters "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-linear-navigation.tsx",
          "releaseTag": "Public",
          "name": "TryNavigateToIndexParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!TryNavigateToIndexParameters#highestChildIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "highestChildIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "highestChildIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!TryNavigateToIndexParameters#indexDemangler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indexDemangler: "
                },
                {
                  "kind": "Content",
                  "text": "(n: number) => number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "indexDemangler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!TryNavigateToIndexParameters#indexMangler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indexMangler: "
                },
                {
                  "kind": "Content",
                  "text": "(n: number) => number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "indexMangler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!TryNavigateToIndexParameters#isValid:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isValid(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isValid"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!TryNavigateToIndexParameters#searchDirection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchDirection: "
                },
                {
                  "kind": "Content",
                  "text": "1 | -1"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "searchDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!TryNavigateToIndexParameters#targetUnmangled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetUnmangled: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "targetUnmangled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!TypeAliasBase:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TypeAliasBase = "
            },
            {
              "kind": "Content",
              "text": "'foo'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/temp.tsx",
          "releaseTag": "Public",
          "name": "TypeAliasBase",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!TypeAliasDerived:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TypeAliasDerived = "
            },
            {
              "kind": "Reference",
              "text": "TypeAliasBase",
              "canonicalReference": "preact-prop-helpers!TypeAliasBase:type"
            },
            {
              "kind": "Content",
              "text": " | 'bar'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/temp.tsx",
          "releaseTag": "Public",
          "name": "TypeAliasDerived",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!UpdatePortalChild:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdatePortalChild = "
            },
            {
              "kind": "Content",
              "text": "(index: number, child: "
            },
            {
              "kind": "Reference",
              "text": "VNode",
              "canonicalReference": "preact-prop-helpers!VNode:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-portal-children.tsx",
          "releaseTag": "Public",
          "name": "UpdatePortalChild",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useActiveElement:function(1)",
          "docComment": "/**\n * Allows you to inspect which element in the `document` currently has focus, which was most recently focused if none are currently, and whether or not the window has focus by returning the following functions: * `getActiveElement()` * `getLastActiveElement()` * `getWindowFocused()`\n *\n * (The document's body receiving focus, like it does when you click on an empty area, is counted as no element having focus for all intents and purposes)\n *\n * This is a passive hook, so by default it returns getter functions that report this information but the component will not re-render by default when the active element changes.\n *\n * If you need the component to re-render when the active element changes, use the `on*Change` arguments to set some state on your end.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useActiveElement({ "
            },
            {
              "kind": "Reference",
              "text": "activeElementParameters",
              "canonicalReference": "preact-prop-helpers!UseActiveElementParameters#activeElementParameters"
            },
            {
              "kind": "Content",
              "text": ": { onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, getDocument, getWindow } }: "
            },
            {
              "kind": "Reference",
              "text": "UseActiveElementParameters",
              "canonicalReference": "preact-prop-helpers!UseActiveElementParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseActiveElementReturnType",
              "canonicalReference": "preact-prop-helpers!UseActiveElementReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-active-element.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ activeElementParameters: { onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, getDocument, getWindow } }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "useActiveElement"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseActiveElementParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseActiveElementParameters "
            }
          ],
          "fileUrlPath": "src/observers/use-active-element.tsx",
          "releaseTag": "Public",
          "name": "UseActiveElementParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseActiveElementParameters#activeElementParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activeElementParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onActiveElementChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null, "
                },
                {
                  "kind": "Reference",
                  "text": "FocusEvent",
                  "canonicalReference": "!FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | null | undefined;\n        onLastActiveElementChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "FocusEvent",
                  "canonicalReference": "!FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | null | undefined;\n        onWindowFocusedChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean, "
                },
                {
                  "kind": "Reference",
                  "text": "FocusEvent",
                  "canonicalReference": "!FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | null | undefined;\n        getDocument(): "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "!Document:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        getWindow?: ((document: "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "!Document:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Window",
                  "canonicalReference": "!Window:interface"
                },
                {
                  "kind": "Content",
                  "text": ") | null | undefined;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "activeElementParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 24
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseActiveElementReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseActiveElementReturnType "
            }
          ],
          "fileUrlPath": "src/observers/use-active-element.tsx",
          "releaseTag": "Public",
          "name": "UseActiveElementReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseActiveElementReturnType#activeElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activeElementReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getActiveElement: () => "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null;\n        getLastActiveElement: () => "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        getWindowFocused: () => boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "activeElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useAnimationFrame:function(1)",
          "docComment": "/**\n * The (optionally non-stable) `callback` you provide will start running every frame after the component mounts.\n *\n * Passing `null` is fine and simply stops the effect until you restart it by providing a non-null callback.\n *\n * **This hook does not return anything at all, including no prop-modifying hooks**\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useAnimationFrame({ callback }: "
            },
            {
              "kind": "Reference",
              "text": "UseAnimationFrameParameters",
              "canonicalReference": "preact-prop-helpers!UseAnimationFrameParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/timing/use-animation-frame.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ callback }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "useAnimationFrame"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseAnimationFrameParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseAnimationFrameParameters "
            }
          ],
          "fileUrlPath": "src/timing/use-animation-frame.tsx",
          "releaseTag": "Public",
          "name": "UseAnimationFrameParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAnimationFrameParameters#callback:member",
              "docComment": "/**\n * Callback with effectively the same rules as `requestAnimationFrame`\n *\n * Doesn't need to be stable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callback: "
                },
                {
                  "kind": "Content",
                  "text": "null | ((msSinceLast: number) => void)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useAsync:function(1)",
          "docComment": "/**\n * Given an async function, returns a function that's suitable for non-async APIs, along with other information about the current run's status.\n *\n * See also `useAsyncHandler` for a version that's specialized for DOM event handlers.\n *\n * When called multiple times in quick succession, (i.e. before the handler has finished), this works like Lodash's `throttle` function with the `wait` option always set to however long the handler takes to complete. A second call to the sync function will be throttled until the first call has finished. The return value of the function is the result of the previous invocation, or `undefined` on the first call.\n *\n * The handler is only ever delayed if one is currently running, so, e.g. for iOS touch events the first call happens in the same event handler (which means things like calls to `element.focus()` will work as intended, since that fails when the event is \"split up\")\n *\n * Finally, because the sync handler may be invoked on a delay, any property references on the arguments provided might be stale by the time it's actually invoked (e.g. accessing `event.currentTarget.checked` is not stable across time because it's a \"live\" value -- you almost always want the value that it had at the original time the handler was called). The `capture` option allows you to save that kind of dynamic data at the time it runs; the `AP` and `SP` type parameters likewise control the parameters the async handler and sync handler expect respectively.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useAsync<AP extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ", R, SP extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "AP"
            },
            {
              "kind": "Content",
              "text": ">(asyncHandler2: "
            },
            {
              "kind": "Reference",
              "text": "AsyncFunctionType",
              "canonicalReference": "preact-prop-helpers!~AsyncFunctionType:type"
            },
            {
              "kind": "Content",
              "text": "<AP, R> | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "UseAsyncParameters",
              "canonicalReference": "preact-prop-helpers!UseAsyncParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<AP, SP>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseAsyncReturnType",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<SP, R>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-async.tsx",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "asyncHandler2",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "AP",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SP",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "useAsync"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useAsyncEffect:function(1)",
          "docComment": "/**\n * Combines the semantics of `useAsync` and `useEffect`.\n *\n * More specifically, if an event would run again, but the previous async event is still running, then we'll wait until it finishes to run the new effect. And while waiting, further new effect runs will bump old ones off, only remembering the most recent request.\n *\n * @returns All values from `useAsync`, except for `syncHandler`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useAsyncEffect<I extends "
            },
            {
              "kind": "Reference",
              "text": "Inputs",
              "canonicalReference": "preact-hooks!Inputs:type"
            },
            {
              "kind": "Content",
              "text": ">(effect: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<(void | (() => void))>"
            },
            {
              "kind": "Content",
              "text": ", inputs?: "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseAsyncParameters",
              "canonicalReference": "preact-prop-helpers!UseAsyncParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<[void], [void]>, \"capture\">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    pending: boolean;\n    debouncingSync: boolean;\n    debouncingAsync: boolean;\n    callCount: number;\n    settleCount: number;\n    resolveCount: number;\n    rejectCount: number;\n    result: void | (() => void) | undefined;\n    hasResult: boolean;\n    error: unknown;\n    hasError: boolean;\n    invocationResult: \"sync\" | \"async\" | \"throw\" | null;\n    flushDebouncedPromise: () => void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-async-effect.tsx",
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effect",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "inputs",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useAsyncEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useAsyncHandler:function(1)",
          "docComment": "/**\n * Given an asyncronous event handler, returns a syncronous one that works on the DOM, along with some other information related to the current state. Does not modify any props.\n *\n * Note that because the handler you provide may be called with a delay, and because the value of, e.g., an `<input>` element will likely be stale by the time the delay is over, a `capture` function is necessary in order to capture the relevant information from the DOM. Any other simple event data, like `mouseX` or `shiftKey` can stay on the event itself and don't need to be captured &ndash; it's never stale.\n * ```tsx\n * const asyncOnInput = async (value: number, e: Event) => {\n *     [...] // Ex. send to a server and setState when done\n * };\n * const {\n *     // A sync version of asyncOnInput\n *     syncHandler,\n *     // True while the handler is running\n *     pending,\n *     // The error thrown, if any\n *     error,\n *     // Show this value while the operation's pending\n *     currentCapture,\n *     // And others, see `UseAsyncHandlerReturnType`\n *     ...rest\n * } = useAsyncHandler<HTMLInputElement>()(asyncOnInput, {\n *     // Pass in the capture function that saves event data\n *     // from being stale.\n *     capture: e => {\n *         // `capture` can have side-effects because\n *         // it's called exactly once per invocation\n *         e.preventDefault();\n *\n *         // Save this value so that it's never stale\n *         return e.currentTarget.valueAsNumber;\n *     }\n * });\n *\n * const onInput = pending? null : syncHandler;\n * ```\n *\n * The handler is automatically throttled to only run one at a time. If the handler is called, and then before it finishes, is called again, it will be put on hold until the current one finishes, at which point the second one will run. If the handler is called a third time before the first has finished, it will *replace* the second, so only the most recently called iteration of the handler will run.\n *\n * You may optionally *also* specify debounce and throttle parameters that wait until the syncronous handler has not been called for the specified number of milliseconds, at which point we *actually* run the asyncronous handler according to the logic in the previous paragraph. This is in *addition* to throttling the handler, and does not replace that behavior.\n *\n * @see\n *\n * useAsync A more general version of this hook that can work with any type of handler, not just DOM event handlers.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useAsyncHandler<EventType, CaptureType>({ asyncHandler, "
            },
            {
              "kind": "Reference",
              "text": "capture",
              "canonicalReference": "preact-prop-helpers!UseAsyncHandlerParameters#capture"
            },
            {
              "kind": "Content",
              "text": ": originalCapture, ...restAsyncOptions }: "
            },
            {
              "kind": "Reference",
              "text": "UseAsyncHandlerParameters",
              "canonicalReference": "preact-prop-helpers!UseAsyncHandlerParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<EventType, CaptureType>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseAsyncHandlerReturnType",
              "canonicalReference": "preact-prop-helpers!UseAsyncHandlerReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<EventType, CaptureType>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-async-handler.tsx",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ asyncHandler, capture: originalCapture, ...restAsyncOptions }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "EventType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CaptureType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useAsyncHandler"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseAsyncHandlerParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseAsyncHandlerParameters<EventType, CaptureType> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseAsyncParameters",
              "canonicalReference": "preact-prop-helpers!UseAsyncParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<[CaptureType, EventType], [EventType]>, \"capture\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-async-handler.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "EventType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CaptureType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseAsyncHandlerParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncHandlerParameters#asyncHandler:member",
              "docComment": "/**\n * The function (either async or sync) that you want to convert to a regular, sync event handler.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asyncHandler: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncHandler",
                  "canonicalReference": "preact-prop-helpers!AsyncHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<EventType, CaptureType> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "asyncHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncHandlerParameters#capture:member",
              "docComment": "/**\n * What transient information is captured by this event and presented as the first argument of the event handler?\n *\n * The \"capture\" parameter answers this question. To implement a checkbox, for example, return `target.checked`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "capture: "
                },
                {
                  "kind": "Content",
                  "text": "(event: EventType) => CaptureType"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "capture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseAsyncHandlerReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseAsyncHandlerReturnType<EventType, CaptureType> extends "
            },
            {
              "kind": "Reference",
              "text": "UseAsyncReturnType",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<[EventType], void>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-async-handler.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "EventType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CaptureType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseAsyncHandlerReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncHandlerReturnType#currentCapture:member",
              "docComment": "/**\n * The most recently captured value. In other words, represents what the current value would be if this operation were synchronous and and couldn't fail. It's useful to pretend this is the actual value for an input field, for example, so that the value doesn't \"snap back\" while you're waiting for the handler to finish.\n *\n * Something like `value={pending? currentCapture : value}` is good for checkboxes, something like `value={(pending || hasFocus)? currentCapture : value} for text fields.\n *\n * @see\n *\n * hasCapture\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentCapture: "
                },
                {
                  "kind": "Content",
                  "text": "CaptureType | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "currentCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncHandlerReturnType#getCurrentCapture:member(1)",
              "docComment": "/**\n * The above, but stable, if you need the current capture without it being an explicit dependency. **STABLE**\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurrentCapture(): "
                },
                {
                  "kind": "Content",
                  "text": "(CaptureType | undefined)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCurrentCapture"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncHandlerReturnType#hasCapture:member",
              "docComment": "/**\n * Because you're allowed to have `CaptureType` extend `undefined`, you might need this.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCapture: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasCapture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseAsyncParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseAsyncParameters<AP extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ", SP extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "AP"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-async.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "AP",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SP",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "UseAsyncParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncParameters#capture:member",
              "docComment": "/**\n * When an async function is debounced due to one already running, it will run on a delay and, as a result, the original arguments that were passed to it may need to be adjusted to account for that.\n *\n * For example, during `onInput`, the `value` of that event isn't stored in the event itself, it's stored in the `HTMLInputElement` that raised it. So when our handler actually runs a few seconds later, it'll read the **next** `event.currentTarget.value`, instead of the one from a few seconds ago that actually raised the event!\n *\n * If the arguments to your handler require referencing data in the arguments that may become \"stale\" by the time the function actually runs (generally event handlers and other things that reference the properties of existing objects), the `capture` parameter allows you to transform the parameters you were given when the request to run was initially made into parameters that you have guaranteed will still be good by the time the handler actually runs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "capture?: "
                },
                {
                  "kind": "Reference",
                  "text": "CaptureFunctionType",
                  "canonicalReference": "async-to-sync!CaptureFunctionType:type"
                },
                {
                  "kind": "Content",
                  "text": "<AP, SP>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "capture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncParameters#debounce:member",
              "docComment": "/**\n * If provided, adds a debounce behavior *in addition* to the default \"wait until resolved\" throttling behavior.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debounce?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "debounce",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncParameters#throttle:member",
              "docComment": "/**\n * By default, `useAsync` will auto-throttle based on how long it takes for the operation to complete. If you would like there to be a minimum amount of time to wait before allowing a second operation, the `throttle` parameter can be used in addition to that behavior.\n *\n * `throttle` *includes* the time it takes for the async operation to finish. If `throttle` is 500ms, and the async function finishes in 700ms, then another one will be run immediately. If it took 100ms, then we'd wait for the remaining 400ms until allowing a second run.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "throttle?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "throttle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseAsyncReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseAsyncReturnType<SP extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ", R> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-async.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "SP",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseAsyncReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#callCount:member",
              "docComment": "/**\n * The number of times the handler has run. Does not include times where it was throttled or debounced away.\n *\n * Useful for knowing if the handler has been called yet, or for setting a new timeout to show a spinner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#debouncingAsync:member",
              "docComment": "/**\n * True when a second invocation of the handler has been called, and it's waiting until the first before it runs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debouncingAsync: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debouncingAsync",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#debouncingSync:member",
              "docComment": "/**\n * True when we're waiting for a debounce or throttle to end (that's not due waiting for the async function to complete)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debouncingSync: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debouncingSync",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#error:member",
              "docComment": "/**\n * The error the handler threw. `undefined` otherwise, though note that `undefined` is a valid thing to throw, so check `hasError` too.\n *\n * @see\n *\n * hasError\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#flushDebouncedPromise:member",
              "docComment": "/**\n * If you would like any currently debounced-but-eventually-pending promises to immediately be considered by cancelling their debounce timeout, you can call this function. Normal procedure applies as if the debounced ended normally -- if there's no promise waiting in the queue, the debounced promise runs normally, otherwise, it waits its turn until the current one ends, potentially being overwritten later on if a new promise runs out *its* debounce timer before this one got a chance to run.\n *\n * **Quasi-stable** (don't use during render)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flushDebouncedPromise: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "flushDebouncedPromise",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#hasError:member",
              "docComment": "/**\n * Whether or not the most recent handler finished with an error.\n *\n * This is necessary because, technically, `error` can be `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasError: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#hasResult:member",
              "docComment": "/**\n * True when the most recently-run handler completed successfully, also meaning that that it's returned a value that we currently have.\n *\n * While `pending` is true, **`hasResult` and `hasError` may be simultaneously true**, but in all other cases they're mutually exclusive.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasResult: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasResult",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#invocationResult:member",
              "docComment": "/**\n * What happened the last time the handler was called? * `\"async\"`: A `Promise` was returned, and we're about to `await` it. * `\"sync\"`: `undefined` was returned, so it finished immediately. * `\"throw\"`: An error was thrown, so it could have been either (more likely `\"sync\"`, though). * `null`: Nothing's happened yet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invocationResult: "
                },
                {
                  "kind": "Content",
                  "text": "\"async\" | \"sync\" | \"throw\" | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "invocationResult",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#pending:member",
              "docComment": "/**\n * When the async handler is currently executing, this is true. When it finishes, this becomes false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pending: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pending",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#rejectCount:member",
              "docComment": "/**\n * The number of times the handler has failed to complete, similarly to `resolveCount`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rejectCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rejectCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#resolveCount:member",
              "docComment": "/**\n * The number of times the handler has completed successfully, similarly to `settleCount`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resolveCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#result:member",
              "docComment": "/**\n * Represents the value most recently returned from a successful handler invocation, or undefined if no handler has successfully returned yet.\n *\n * If the handler rejects after having succeeded previously, then `result` will still keep its value; it won't be \"erased\" due to the error. This means that `result` and `error` can both be populated at the same time.\n *\n * @see\n *\n * hasResult for if `result` being `undefined` means it's unfinished or the function itself returned `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "result: "
                },
                {
                  "kind": "Content",
                  "text": "R | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "result",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#settleCount:member",
              "docComment": "/**\n * The number of times the handler has settled (resolved or rejected), similarly to `callCount`.\n *\n * Useful for knowing if the handler has completed even once yet, or just for when the handler has finished\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "settleCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "settleCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseAsyncReturnType#syncHandler:member",
              "docComment": "/**\n * The transformed version of the async handler provided, now synchronous and/or throttled and/or debounced\n *\n * **Quasi-stable** (don't use during render)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "syncHandler: "
                },
                {
                  "kind": "Reference",
                  "text": "SyncFunctionType",
                  "canonicalReference": "preact-prop-helpers!~SyncFunctionType:type"
                },
                {
                  "kind": "Content",
                  "text": "<SP, void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "syncHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useBackdropDismiss:function(1)",
          "docComment": "/**\n * Handles events for a backdrop on a modal dialog -- the kind where the user expects the modal to close when they click/tap outside of it.\n *\n * @param param0 - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useBackdropDismiss<PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "backdropDismissParameters",
              "canonicalReference": "preact-prop-helpers!UseBackdropDismissParameters#backdropDismissParameters"
            },
            {
              "kind": "Content",
              "text": ": { open, "
            },
            {
              "kind": "Reference",
              "text": "onClose",
              "canonicalReference": "preact-prop-helpers!~__type#onClose"
            },
            {
              "kind": "Content",
              "text": ": onCloseUnstable, ...void1 }, "
            },
            {
              "kind": "Reference",
              "text": "refElementPopupReturn",
              "canonicalReference": "preact-prop-helpers!UseBackdropDismissParameters#refElementPopupReturn"
            },
            {
              "kind": "Content",
              "text": ": { getElement, ...void3 }, ...void2 }: "
            },
            {
              "kind": "Reference",
              "text": "UseBackdropDismissParameters",
              "canonicalReference": "preact-prop-helpers!UseBackdropDismissParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<PopupElement>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ backdropDismissParameters: { open, onClose: onCloseUnstable, ...void1 }, refElementPopupReturn: { getElement, ...void3 }, ...void2 }",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useBackdropDismiss"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseBackdropDismissParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseBackdropDismissParameters<PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseBackdropDismissParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseBackdropDismissParameters#backdropDismissParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backdropDismissParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        open: boolean;\n        onClose: "
                },
                {
                  "kind": "Reference",
                  "text": "EnhancedEventHandler",
                  "canonicalReference": "preact-prop-helpers!EnhancedEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", {\n            reason: \"escape\" | \"lost-focus\";\n        }>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "backdropDismissParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseBackdropDismissParameters#refElementPopupReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementPopupReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<PopupElement>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementPopupReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useChildrenFlag:function(1)",
          "docComment": "/**\n * An extension to useManagedChildren that handles the following common case: 1. You have a bunch of children 2. At any given time, only 1 of them is \"selected\", \"activated\", \"focusable\", whatever (or 0 of them, that's cool too, just 0 or 1 though). 3. The parent has control over who is \"selected\" via a numerical index.\n *\n * This hook allows for much easier control over selection management.\n *\n * Note that because you may want to use multiple flags with the same children, this hook *does not* use `useManagedChildren`! You need to pass it the existing children, and you must pass your invocation of `useManagedChildren` the returned `onChildrenMountChange` handler!\n *\n * Also because of that, the types of this function are rather odd. It's better to start off using a hook that already uses a flag, such as `useRovingTabIndex`, as an example.\n *\n * @param param0 - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useChildrenFlag<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<number | string>"
            },
            {
              "kind": "Content",
              "text": ", R>({ getChildren, initialIndex, closestFit, onClosestFit, onIndexChange, getAt, setAt, isValid }: "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenFlagParameters",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M, R>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenFlagReturnType",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<M, R>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ getChildren, initialIndex, closestFit, onClosestFit, onIndexChange, getAt, setAt, isValid }",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useChildrenFlag"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseChildrenFlagParameters<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ", R> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseChildrenFlagParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters#closestFit:member",
              "docComment": "/**\n * When provided, if the given activatedIndex doesn't map onto any provided child (either because it's too large or that child doesn't exist), the closest child to the given activatedIndex will have its flag set instead.\n *\n * Use with caution, and consider how a child having its flag set while the parent thinks it shouldn't be could cause issues.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closestFit: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "closestFit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters#getAt:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAt(index: "
                },
                {
                  "kind": "Content",
                  "text": "M"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getAt"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters#getChildren:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getChildren(): "
                },
                {
                  "kind": "Reference",
                  "text": "ManagedChildren",
                  "canonicalReference": "preact-prop-helpers!ManagedChildren:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getChildren"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters#initialIndex:member",
              "docComment": "/**\n * Which child is considered active on mount.\n *\n * After mount, change the current active child with `changeIndex`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialIndex: "
                },
                {
                  "kind": "Content",
                  "text": "M[\"index\"] | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "initialIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters#isValid:member(1)",
              "docComment": "/**\n * Must be at least quasi-stable (always stable, doesn't need to be called during render)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isValid(index: "
                },
                {
                  "kind": "Content",
                  "text": "M"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isValid"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters#onClosestFit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClosestFit: "
                },
                {
                  "kind": "Content",
                  "text": "((newFit: number | null) => void) | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onClosestFit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters#onIndexChange:member",
              "docComment": "/**\n * Called whenever a new index is selected.\n *\n * Notably, the value can be different than what was called with changeIndex() if the requested index didn't exist or was hidden.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onIndexChange: "
                },
                {
                  "kind": "Content",
                  "text": "null | "
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<M[\"index\"] | null, R>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onIndexChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagParameters#setAt:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAt(index: "
                },
                {
                  "kind": "Content",
                  "text": "M"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ", newSelectedIndex: "
                },
                {
                  "kind": "Content",
                  "text": "M[\"index\"] | null"
                },
                {
                  "kind": "Content",
                  "text": ", prevSelectedIndex: "
                },
                {
                  "kind": "Content",
                  "text": "M[\"index\"] | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "newSelectedIndex",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "prevSelectedIndex",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "setAt"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseChildrenFlagReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseChildrenFlagReturnType<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ", R> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseChildrenFlagReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagReturnType#changeIndex:member",
              "docComment": "/**\n * **STABLE**\n *\n * Manually changes the current index that is (focused/selected/tabbable/whatever).\n *\n * The parent can use this to notify each relevant child of what it must do in order to make this change happen.\n *\n * The returned value will be the new index that will be used. If `closestFit` is false, it will always be the same as what you passed in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "changeIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "PassiveStateUpdater",
                  "canonicalReference": "preact-prop-helpers!PassiveStateUpdater:type"
                },
                {
                  "kind": "Content",
                  "text": "<M[\"index\"] | null, R>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changeIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagReturnType#getCurrentIndex:member",
              "docComment": "/**\n * **STABLE**\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurrentIndex: "
                },
                {
                  "kind": "Content",
                  "text": "() => M[\"index\"] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getCurrentIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenFlagReturnType#reevaluateClosestFit:member",
              "docComment": "/**\n * **STABLE**\n *\n * Call this whenever a child mounts/unmounts, or whenever calling a child's isValid() would change\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reevaluateClosestFit: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reevaluateClosestFit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useChildrenHaveFocus:function(1)",
          "docComment": "/**\n * Allows a composite component (such as a radio group or listbox) to listen for an \"overall focusin/out\" event; this hook lets you know when focus has moved in/out of this grouping of children EVEN IF there is no actual parent DOM element.\n *\n * I.E. you can use this without needing a parent `<div>` to listen for a `focusout` event.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useChildrenHaveFocus<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">(args: "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenHaveFocusParameters",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenHaveFocusReturnType",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-children-have-focus.tsx",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useChildrenHaveFocus"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useChildrenHaveFocusChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useChildrenHaveFocusChild<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusChildParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "childrenHaveFocusChildContext",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusContext#childrenHaveFocusChildContext"
            },
            {
              "kind": "Content",
              "text": ": { setFocusCount } } }: "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenHaveFocusChildParameters",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenHaveFocusChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-children-have-focus.tsx",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ context: { childrenHaveFocusChildContext: { setFocusCount } } }",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useChildrenHaveFocusChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseChildrenHaveFocusChildParameters<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/observers/use-children-have-focus.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseChildrenHaveFocusChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusChildParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseChildrenHaveFocusContext",
                  "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseChildrenHaveFocusChildReturnType<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/observers/use-children-have-focus.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseChildrenHaveFocusChildReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusChildReturnType#hasCurrentFocusParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCurrentFocusParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseHasCurrentFocusParameters",
                  "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<E>[\"hasCurrentFocusParameters\"], \"onCurrentFocusedInnerChanged\">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasCurrentFocusParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseChildrenHaveFocusContext<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/observers/use-children-have-focus.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseChildrenHaveFocusContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusContext#childrenHaveFocusChildContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childrenHaveFocusChildContext: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        setFocusCount: "
                },
                {
                  "kind": "Reference",
                  "text": "PassiveStateUpdater",
                  "canonicalReference": "preact-prop-helpers!PassiveStateUpdater:type"
                },
                {
                  "kind": "Content",
                  "text": "<number, "
                },
                {
                  "kind": "Reference",
                  "text": "FocusEventType",
                  "canonicalReference": "preact-prop-helpers!FocusEventType:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "childrenHaveFocusChildContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseChildrenHaveFocusParameters<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/observers/use-children-have-focus.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseChildrenHaveFocusParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusParameters#childrenHaveFocusParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childrenHaveFocusParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onCompositeFocusChange: null | "
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean, "
                },
                {
                  "kind": "Reference",
                  "text": "FocusEventType",
                  "canonicalReference": "preact-prop-helpers!FocusEventType:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "childrenHaveFocusParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseChildrenHaveFocusReturnType<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/observers/use-children-have-focus.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseChildrenHaveFocusReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusReturnType#childrenHaveFocusReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childrenHaveFocusReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getAnyFocused(): boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "childrenHaveFocusReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseChildrenHaveFocusContext",
                  "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useCompleteGridNavigation:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useCompleteGridNavigation<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ gridNavigationParameters, linearNavigationParameters, rovingTabIndexParameters, singleSelectionParameters, typeaheadNavigationParameters, sortableChildrenParameters, rearrangeableChildrenParameters, paginatedChildrenParameters, staggeredChildrenParameters, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ gridNavigationParameters, linearNavigationParameters, rovingTabIndexParameters, singleSelectionParameters, typeaheadNavigationParameters, sortableChildrenParameters, rearrangeableChildrenParameters, paginatedChildrenParameters, staggeredChildrenParameters, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCompleteGridNavigation"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useCompleteGridNavigationCell:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useCompleteGridNavigationCell<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ gridNavigationCellParameters, "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { gridNavigationCellContext, managedChildContext, rovingTabIndexContext, typeaheadNavigationContext }, textContentParameters, info, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ gridNavigationCellParameters, context: { gridNavigationCellContext, managedChildContext, rovingTabIndexContext, typeaheadNavigationContext }, textContentParameters, info, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCompleteGridNavigationCell"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationCellInfo<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationCellInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationCellParameters<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionCellParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionCellParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<any, CellElement, CM>, \"info\" | \"context\" | \"textContentParameters\" | \"refElementReturn\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationCellParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "CompleteGridNavigationCellContext",
                  "canonicalReference": "preact-prop-helpers!CompleteGridNavigationRowContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, CellElement, CM>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellParameters#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<CM, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "UseCompleteGridNavigationCellInfo",
                  "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<CellElement>, \"index\" | \"untabbable\" | \"focusSelf\">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellParameters#textContentParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContentParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionCellParameters",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionCellParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, CellElement, CM>[\"textContentParameters\"], never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textContentParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationCellReturnType<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableCellReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableCellReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>, \"hasCurrentFocusParameters\" | \"info\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseRefElementReturnType",
              "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>, \"propsStable\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseHasCurrentFocusReturnType",
              "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseManagedChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationCellReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellReturnType#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<CellElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 15
            },
            {
              "startIndex": 16,
              "endIndex": 18
            },
            {
              "startIndex": 19,
              "endIndex": 21
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useCompleteGridNavigationDeclarative:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useCompleteGridNavigationDeclarative<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ gridNavigationParameters, linearNavigationParameters, paginatedChildrenParameters, rearrangeableChildrenParameters, rovingTabIndexParameters, singleSelectionDeclarativeParameters, sortableChildrenParameters, staggeredChildrenParameters, typeaheadNavigationParameters, singleSelectionParameters, }: "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationDeclarativeParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationDeclarativeParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationDeclarativeReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationDeclarativeReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ gridNavigationParameters, linearNavigationParameters, paginatedChildrenParameters, rearrangeableChildrenParameters, rovingTabIndexParameters, singleSelectionDeclarativeParameters, sortableChildrenParameters, staggeredChildrenParameters, typeaheadNavigationParameters, singleSelectionParameters, }",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCompleteGridNavigationDeclarative"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationDeclarativeParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationDeclarativeParameters<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MakeSingleSelectionDeclarativeParameters",
              "canonicalReference": "preact-prop-helpers!MakeSingleSelectionDeclarativeParameters:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM>>, \"singleSelectionReturn\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationDeclarativeParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 13,
              "endIndex": 19
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationDeclarativeReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationDeclarativeReturnType<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitTargeted",
              "canonicalReference": "preact-prop-helpers!~OmitTargeted:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>, \"singleSelectionReturn\", \"changeSelectedIndex\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationDeclarativeReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 13,
              "endIndex": 17
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationParameters<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, M>, \"refElementReturn\" | \"managedChildrenReturn\" | \"linearNavigationParameters\" | \"typeaheadNavigationParameters\" | \"rearrangeableChildrenParameters\" | \"rovingTabIndexParameters\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters#linearNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linearNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionParameters",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrRowElement, RowElement, CellElement, M>[\"linearNavigationParameters\"], \"getHighestIndex\" | \"indexMangler\" | \"indexDemangler\" | \"isValid\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linearNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters#paginatedChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paginatedChildrenParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UsePaginatedChildrenParameters",
                  "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrRowElement, RowElement, M>, \"paginatedChildrenParameters\">[\"paginatedChildrenParameters\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paginatedChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters#rearrangeableChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rearrangeableChildrenParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionSortableParameters",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrRowElement, RowElement, CellElement, M>[\"rearrangeableChildrenParameters\"], \"onRearranged\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rearrangeableChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters#rovingTabIndexParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionSortableParameters",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrRowElement, RowElement, CellElement, M>[\"rovingTabIndexParameters\"], \"initiallyTabbedIndex\" | \"untabbableBehavior\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters#staggeredChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staggeredChildrenParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseStaggeredChildrenParameters",
                  "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, M>, \"staggeredChildrenParameters\">[\"staggeredChildrenParameters\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "staggeredChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationParameters#typeaheadNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeaheadNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionParameters",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrRowElement, RowElement, CellElement, M>[\"typeaheadNavigationParameters\"], \"isValid\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "typeaheadNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 10,
              "endIndex": 14
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationReturnType<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ", \"paginatedChildrenReturn\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ", \"staggeredChildrenReturn\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>, \"propsStableParentOrChild\" | \"propsParent\" | \"context\" | \"childrenHaveFocusParameters\" | \"managedChildrenParameters\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationReturnType#childrenHaveFocusReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childrenHaveFocusReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseChildrenHaveFocusReturnType",
                  "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement>[\"childrenHaveFocusReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "childrenHaveFocusReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "CompleteGridNavigationRowContext",
                  "canonicalReference": "preact-prop-helpers!CompleteGridNavigationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationReturnType#managedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RM>[\"managedChildrenReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationReturnType#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrRowElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 13,
              "endIndex": 17
            },
            {
              "startIndex": 18,
              "endIndex": 22
            },
            {
              "startIndex": 23,
              "endIndex": 27
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useCompleteGridNavigationRow:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useCompleteGridNavigationRow<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ info, "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters#context"
            },
            {
              "kind": "Content",
              "text": ": contextIncomingForRowAsChildOfTable, textContentParameters, linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, sortableChildParameters, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info, context: contextIncomingForRowAsChildOfTable, textContentParameters, linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, sortableChildParameters, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCompleteGridNavigationRow"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationRowInfo<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildrenInfo",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildrenInfo",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationRowInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 5,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 13
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationRowParameters<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableRowParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>, \"context\" | \"textContentParameters\" | \"managedChildrenReturn\" | \"refElementReturn\" | \"linearNavigationParameters\" | \"typeaheadNavigationParameters\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationRowParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "CompleteGridNavigationRowContext",
                  "canonicalReference": "preact-prop-helpers!CompleteGridNavigationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, RowElement, CellElement, RM, CM>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<RM, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "UseCompleteGridNavigationRowInfo",
                  "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement>, \"index\" | \"untabbable\" | \"unselectable\">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters#linearNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linearNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionSortableRowParameters",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement, RM, CM>[\"linearNavigationParameters\"], \"getHighestIndex\" | \"pageNavigationSize\" | \"isValid\" | \"indexMangler\" | \"indexDemangler\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linearNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters#sortableChildParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sortableChildParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseSortableChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ", \"getSortValue\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sortableChildParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters#textContentParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContentParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionSortableRowParameters",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement, RM, CM>[\"textContentParameters\"], never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textContentParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowParameters#typeaheadNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeaheadNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionSortableRowParameters",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement, RM, CM>[\"typeaheadNavigationParameters\"], \"isValid\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "typeaheadNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 15
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteGridNavigationRowReturnType<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationRowInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteGridNavigationCellInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableRowReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>, \"context\" | \"gridNavigationRowParameters\" | \"managedChildrenParameters\" | \"info\" | \"pressParameters\" | \"textContentReturn\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-grid-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteGridNavigationRowReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "CompleteGridNavigationCellContext",
                  "canonicalReference": "preact-prop-helpers!CompleteGridNavigationRowContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement, CM>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType#hasCurrentFocusReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCurrentFocusReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseHasCurrentFocusReturnType",
                  "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement>[\"hasCurrentFocusReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasCurrentFocusReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType#managedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<CM>[\"managedChildrenReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType#managedChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RM>[\"managedChildReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType#paginatedChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paginatedChildReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UsePaginatedChildReturn",
                  "canonicalReference": "preact-prop-helpers!UsePaginatedChildReturn:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement>[\"paginatedChildReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paginatedChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType#staggeredChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staggeredChildReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseStaggeredChildReturn",
                  "canonicalReference": "preact-prop-helpers!UseStaggeredChildReturn:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement>[\"staggeredChildReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "staggeredChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteGridNavigationRowReturnType#textContentReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContentReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationSingleSelectionSortableRowReturnType",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement, RM, CM>[\"textContentReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textContentReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 15
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useCompleteListNavigation:function(1)",
          "docComment": "/**\n * All the list-related hooks combined into one giant hook that encapsulates everything.\n *\n * Unlike most others, this hook assume's it's the final one--the \"outermost\" hook in the component--so it uses `useManagedChildren` and wraps everything up nicely, combining event handlers that are used in multiple sub-hooks, collecting all the necessary context-related data, and merging all known DOM props together.\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useCompleteListNavigation<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ linearNavigationParameters, rearrangeableChildrenParameters, sortableChildrenParameters, typeaheadNavigationParameters, rovingTabIndexParameters, singleSelectionParameters, paginatedChildrenParameters, staggeredChildrenParameters, ...completeListNavigationParameters }: "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ linearNavigationParameters, rearrangeableChildrenParameters, sortableChildrenParameters, typeaheadNavigationParameters, rovingTabIndexParameters, singleSelectionParameters, paginatedChildrenParameters, staggeredChildrenParameters, ...completeListNavigationParameters }",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCompleteListNavigation"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useCompleteListNavigationChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useCompleteListNavigationChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "info",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildParameters#info"
            },
            {
              "kind": "Content",
              "text": ": { index, focusSelf, unselectable, untabbable, ...info }, // The \"...info\" is empty if M is the same as UCLNCI<ChildElement>.\ntextContentParameters, "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { childrenHaveFocusChildContext, managedChildContext, rovingTabIndexContext, paginatedChildContext, staggeredChildContext, singleSelectionContext, typeaheadNavigationContext }, sortableChildParameters, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info: { index, focusSelf, unselectable, untabbable, ...info }, // The \"...info\" is empty if M is the same as UCLNCI<ChildElement>.\ntextContentParameters, context: { childrenHaveFocusChildContext, managedChildContext, rovingTabIndexContext, paginatedChildContext, staggeredChildContext, singleSelectionContext, typeaheadNavigationContext }, sortableChildParameters, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCompleteListNavigationChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteListNavigationChildInfo<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>, "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildrenInfo",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>, "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildrenInfo",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteListNavigationChildInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 13
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteListNavigationChildParameters<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteListNavigationChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "CompleteListNavigationContext",
                  "canonicalReference": "preact-prop-helpers!CompleteListNavigationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, ChildElement, M>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildParameters#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<M, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "UseCompleteListNavigationChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>, \"index\" | \"focusSelf\" | \"untabbable\" | \"unselectable\">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildParameters#sortableChildParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sortableChildParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseSortableChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ", \"getSortValue\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sortableChildParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildParameters#textContentParameters:member",
              "docComment": "/**\n * **NOTE**: Unusually, the press parameters are entirely optional.\n *\n * Pass `null` as the entire `pressParameters` object to disable default press behavior entirely.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContentParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationSingleSelectionSortableChildParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement, M>[\"textContentParameters\"], never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textContentParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteListNavigationChildReturnType<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>, \"textContentReturn\" | \"rovingTabIndexChildReturn\" | \"singleSelectionChildReturn\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseRefElementReturnType",
              "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>, \"propsStable\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteListNavigationChildReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildReturnType#hasCurrentFocusReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCurrentFocusReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseHasCurrentFocusReturnType",
                  "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>[\"hasCurrentFocusReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasCurrentFocusReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildReturnType#managedChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>[\"managedChildReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildReturnType#paginatedChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paginatedChildReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UsePaginatedChildReturn",
                  "canonicalReference": "preact-prop-helpers!UsePaginatedChildReturn:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>[\"paginatedChildReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paginatedChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildReturnType#pressParameters:member",
              "docComment": "/**\n * Spread these props onto whatever element is the \"clickable\" part of this list item.\n *\n * **Optional**, as it's entirely possible that this list item isn't selected with a simple press but some more complicated process, like in a grid list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pressParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UsePressParameters",
                  "canonicalReference": "preact-prop-helpers!UsePressParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>[\"pressParameters\"], \"onPressSync\" | \"excludeSpace\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pressParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildReturnType#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildReturnType#staggeredChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staggeredChildReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseStaggeredChildReturn",
                  "canonicalReference": "preact-prop-helpers!UseStaggeredChildReturn:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>[\"staggeredChildReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "staggeredChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 15
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useCompleteListNavigationDeclarative:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useCompleteListNavigationDeclarative<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ linearNavigationParameters, paginatedChildrenParameters, rearrangeableChildrenParameters, rovingTabIndexParameters, singleSelectionDeclarativeParameters, sortableChildrenParameters, staggeredChildrenParameters, typeaheadNavigationParameters, singleSelectionParameters }: "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationDeclarativeParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationDeclarativeParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationDeclarativeReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationDeclarativeReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ linearNavigationParameters, paginatedChildrenParameters, rearrangeableChildrenParameters, rovingTabIndexParameters, singleSelectionDeclarativeParameters, sortableChildrenParameters, staggeredChildrenParameters, typeaheadNavigationParameters, singleSelectionParameters }",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCompleteListNavigationDeclarative"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationDeclarativeParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteListNavigationDeclarativeParameters<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MakeSingleSelectionDeclarativeParameters",
              "canonicalReference": "preact-prop-helpers!MakeSingleSelectionDeclarativeParameters:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>>, \"singleSelectionParameters\" | \"singleSelectionReturn\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteListNavigationDeclarativeParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationDeclarativeParameters#singleSelectionParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "singleSelectionParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionParameters",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement, ChildElement, M>[\"singleSelectionParameters\"], \"initiallySelectedIndex\" | \"onSelectedIndexChange\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "singleSelectionParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 14
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationDeclarativeReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteListNavigationDeclarativeReturnType<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitTargeted",
              "canonicalReference": "preact-prop-helpers!~OmitTargeted:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>, \"singleSelectionReturn\", \"changeSelectedIndex\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteListNavigationDeclarativeReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteListNavigationParameters<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>, \"singleSelectionParameters\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PickTargeted",
              "canonicalReference": "preact-prop-helpers!~PickTargeted:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>, \"linearNavigationParameters\", \"getHighestIndex\" | \"isValid\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteListNavigationParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters#linearNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linearNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationSingleSelectionSortableParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement, ChildElement, M>[\"linearNavigationParameters\"], \"getHighestIndex\" | \"isValid\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linearNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters#paginatedChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paginatedChildrenParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UsePaginatedChildrenParameters",
                  "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement, ChildElement, M>, \"paginatedChildrenParameters\">[\"paginatedChildrenParameters\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paginatedChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters#rearrangeableChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rearrangeableChildrenParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationSingleSelectionSortableParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement, ChildElement, M>[\"rearrangeableChildrenParameters\"], \"onRearranged\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rearrangeableChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters#rovingTabIndexParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationSingleSelectionSortableParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement, ChildElement, M>[\"rovingTabIndexParameters\"], \"initiallyTabbedIndex\" | \"untabbableBehavior\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters#sortableChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sortableChildrenParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationSingleSelectionSortableParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement, ChildElement, M>[\"sortableChildrenParameters\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sortableChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters#staggeredChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staggeredChildrenParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseStaggeredChildrenParameters",
                  "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement, M>, \"staggeredChildrenParameters\">[\"staggeredChildrenParameters\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "staggeredChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationParameters#typeaheadNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeaheadNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationSingleSelectionSortableParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement, ChildElement, M>[\"typeaheadNavigationParameters\"], \"isValid\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "typeaheadNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 12
            },
            {
              "startIndex": 13,
              "endIndex": 17
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseCompleteListNavigationReturnType<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseCompleteListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ", \"paginatedChildrenReturn\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ", \"staggeredChildrenReturn\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>, \"propsStableParentOrChild\" | \"propsParent\" | \"context\" | \"childrenHaveFocusParameters\" | \"managedChildrenParameters\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-list-navigation-complete.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseCompleteListNavigationReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationReturnType#childrenHaveFocusReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childrenHaveFocusReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseChildrenHaveFocusReturnType",
                  "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>[\"childrenHaveFocusReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "childrenHaveFocusReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "CompleteListNavigationContext",
                  "canonicalReference": "preact-prop-helpers!CompleteListNavigationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement, ChildElement, M>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationReturnType#managedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>[\"managedChildrenReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseCompleteListNavigationReturnType#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 12
            },
            {
              "startIndex": 13,
              "endIndex": 17
            },
            {
              "startIndex": 18,
              "endIndex": 22
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useDismiss:function(1)",
          "docComment": "/**\n * Combines all the methods of dismissing a modal-ish or popup-ish component into one combined hook.\n *\n * This is similar to the \"complete\" series of list/grid navigation, in that it's the \"outermost\" hook of its type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useDismiss<Listeners extends "
            },
            {
              "kind": "Reference",
              "text": "DismissListenerTypes",
              "canonicalReference": "preact-prop-helpers!DismissListenerTypes:type"
            },
            {
              "kind": "Content",
              "text": ", SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "dismissParameters",
              "canonicalReference": "preact-prop-helpers!UseDismissParameters#dismissParameters"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "open",
              "canonicalReference": "preact-prop-helpers!~__type#open"
            },
            {
              "kind": "Content",
              "text": ": globalOpen, "
            },
            {
              "kind": "Reference",
              "text": "onClose",
              "canonicalReference": "preact-prop-helpers!~__type#onClose"
            },
            {
              "kind": "Content",
              "text": ": globalOnClose, closeOnBackdrop, closeOnEscape, closeOnLostFocus }, "
            },
            {
              "kind": "Reference",
              "text": "escapeDismissParameters",
              "canonicalReference": "preact-prop-helpers!UseDismissParameters#escapeDismissParameters"
            },
            {
              "kind": "Content",
              "text": ": { getWindow, parentDepth } }: "
            },
            {
              "kind": "Reference",
              "text": "UseDismissParameters",
              "canonicalReference": "preact-prop-helpers!UseDismissParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<Listeners>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseDismissReturnType",
              "canonicalReference": "preact-prop-helpers!UseDismissReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<SourceElement, PopupElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 21
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ dismissParameters: { open: globalOpen, onClose: globalOnClose, closeOnBackdrop, closeOnEscape, closeOnLostFocus }, escapeDismissParameters: { getWindow, parentDepth } }",
              "parameterTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 18
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Listeners",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SourceElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useDismiss"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseDismissParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseDismissParameters<Listeners extends "
            },
            {
              "kind": "Reference",
              "text": "DismissListenerTypes",
              "canonicalReference": "preact-prop-helpers!DismissListenerTypes:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Listeners",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseDismissParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDismissParameters#dismissParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        open: boolean;\n        onClose: (reason: Listeners) => void;\n        closeOnBackdrop: Listeners extends \"backdrop\" ? true : false;\n        closeOnEscape: Listeners extends \"escape\" ? true : false;\n        closeOnLostFocus: Listeners extends \"lost-focus\" ? true : false;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dismissParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDismissParameters#escapeDismissParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "escapeDismissParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseEscapeDismissParameters",
                  "canonicalReference": "preact-prop-helpers!UseEscapeDismissParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>[\"escapeDismissParameters\"], \"getWindow\" | \"parentDepth\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "escapeDismissParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseDismissReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseDismissReturnType<SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "SourceElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseDismissReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDismissReturnType#propsStablePopup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsStablePopup: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<PopupElement>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsStablePopup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDismissReturnType#propsStableSource:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsStableSource: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<SourceElement>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsStableSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDismissReturnType#refElementPopupReturn:member",
              "docComment": "/**\n * This one's always required though\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementPopupReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<PopupElement>[\"refElementReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementPopupReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDismissReturnType#refElementSourceReturn:member",
              "docComment": "/**\n * If this dismissable component has a specific element that caused it to appear (a button, for example), provide it with these props.\n *\n * * REQUIRED for things like menus that pop up from a button and for whom losing focus counts as requesting closure. * OPTIONAL for things like dialogs that can appear out of nowhere and for whom losing focus is actively impossible (due to focus traps).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementSourceReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<SourceElement>>[\"refElementReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementSourceReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useDocumentClass:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useDocumentClass(className: "
            },
            {
              "kind": "Reference",
              "text": "P",
              "canonicalReference": "preact-prop-helpers!~P:type"
            },
            {
              "kind": "Content",
              "text": "[0]"
            },
            {
              "kind": "Content",
              "text": ", active?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", element?: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-document-class.tsx",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "className",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "active",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": true
            },
            {
              "parameterName": "element",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "useDocumentClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useDraggable:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useDraggable<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ effectAllowed, data, dragImage, dragImageXOffset, dragImageYOffset }: "
            },
            {
              "kind": "Reference",
              "text": "UseDraggableParameters",
              "canonicalReference": "preact-prop-helpers!UseDraggableParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseDraggableReturnType",
              "canonicalReference": "preact-prop-helpers!UseDraggableReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-draggable.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ effectAllowed, data, dragImage, dragImageXOffset, dragImageYOffset }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useDraggable"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseDraggableParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseDraggableParameters "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-draggable.tsx",
          "releaseTag": "Public",
          "name": "UseDraggableParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableParameters#data:member",
              "docComment": "/**\n * Represents a dictionary mapping of MIME types to data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [mimeType: string]: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableParameters#dragImage:member",
              "docComment": "/**\n * Can be used to specify a custom drag image instead of the browser default (a transparent render of the original element, generally)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragImage?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLCanvasElement",
                  "canonicalReference": "!HTMLCanvasElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLImageElement",
                  "canonicalReference": "!HTMLImageElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLVideoElement",
                  "canonicalReference": "!HTMLVideoElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dragImage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableParameters#dragImageXOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragImageXOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dragImageXOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableParameters#dragImageYOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragImageYOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dragImageYOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableParameters#effectAllowed:member",
              "docComment": "/**\n * Maps to the Drag and Drop API -- allows limiting the areas this element can be dropped. For example, setting this to \"copyLink\" will allow this this to be dropped onto a droppable with an effect of \"copy\" or \"link\", but not \"move\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "effectAllowed?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataTransfer",
                  "canonicalReference": "!DataTransfer:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"effectAllowed\"] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "effectAllowed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseDraggableReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseDraggableReturnType<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-draggable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseDraggableReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableReturnType#dragging:member",
              "docComment": "/**\n * Returns true if the element in question is currently being dragged\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragging: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dragging",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableReturnType#getDragging:member",
              "docComment": "/**\n * **STABLE**\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDragging: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getDragging",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableReturnType#getLastDropEffect:member",
              "docComment": "/**\n * **STABLE**\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLastDropEffect: "
                },
                {
                  "kind": "Content",
                  "text": "() => ("
                },
                {
                  "kind": "Reference",
                  "text": "DataTransfer",
                  "canonicalReference": "!DataTransfer:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"dropEffect\"] | null)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getLastDropEffect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableReturnType#lastDropEffect:member",
              "docComment": "/**\n * Once the drag ends, if it was over a valid droppable, this will be set to the `dropEffect` value it had.\n *\n * This can be used to detect when the element has dropped, and then what should be done with it (generally deleted if the effect was \"move\")\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lastDropEffect: "
                },
                {
                  "kind": "Reference",
                  "text": "DataTransfer",
                  "canonicalReference": "!DataTransfer:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"dropEffect\"] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lastDropEffect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDraggableReturnType#propsUnstable:member",
              "docComment": "/**\n * *Unstable*\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsUnstable: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<E>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsUnstable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useDroppable:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useDroppable<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ effect }: "
            },
            {
              "kind": "Reference",
              "text": "UseDroppableParameters",
              "canonicalReference": "preact-prop-helpers!UseDroppableParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseDroppableReturnType",
              "canonicalReference": "preact-prop-helpers!UseDroppableReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-droppable.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ effect }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useDroppable"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseDroppableParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseDroppableParameters "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-droppable.tsx",
          "releaseTag": "Public",
          "name": "UseDroppableParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDroppableParameters#effect:member",
              "docComment": "/**\n * Maps to the Drag and Drop API -- effectively means \"as close as possible, what's happening to the data when I drop it here? Am I copying it and leaving the original, am I moving it and deleting the original, or am I linking it to the original?\"\n *\n * Whatever is being dragged over this will have its own permission that's checked against this.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "effect: "
                },
                {
                  "kind": "Reference",
                  "text": "DataTransfer",
                  "canonicalReference": "!DataTransfer:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"dropEffect\"] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "effect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseDroppableReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseDroppableReturnType<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-droppable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseDroppableReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDroppableReturnType#dropError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dropError: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dropError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDroppableReturnType#droppedFiles:member",
              "docComment": "/**\n * When files are dropped over the element, their data will be given here. This will update as new drops happen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "droppedFiles: "
                },
                {
                  "kind": "Reference",
                  "text": "DropFile",
                  "canonicalReference": "preact-prop-helpers!DropFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "droppedFiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDroppableReturnType#droppedStrings:member",
              "docComment": "/**\n * When non-file data is dropped over the element, their data will be given here. This will update as new drops happen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "droppedStrings: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [MimeType: string]: string;\n    } | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "droppedStrings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDroppableReturnType#filesForConsideration:member",
              "docComment": "/**\n * While something is being dragged over this element, this will contain any information about any files included in that drop. Otherwise, it'll be null, meaning nothing is being dragged over this element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filesForConsideration: "
                },
                {
                  "kind": "Reference",
                  "text": "DropFileMetadata",
                  "canonicalReference": "preact-prop-helpers!DropFileMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "filesForConsideration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDroppableReturnType#propsStable:member",
              "docComment": "/**\n * Hook for modifying the props you were going to pass to your drop target Element.\n *\n * *Unstable*\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsStable: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<E>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsStable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseDroppableReturnType#stringsForConsideration:member",
              "docComment": "/**\n * While something is being dragged over this element, a list of available MIME types for the non-file data will be listed here. Otherwise, it'll be null, meaning nothing is being dragged over this element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stringsForConsideration: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stringsForConsideration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useEffectDebug:function(1)",
          "docComment": "/**\n * Wrap the native `useEffect` to add arguments that allow accessing the previous value as the first argument, as well as the changes that caused the hook to be called as the second argument.\n *\n * @param effect - \n *\n * @param inputs - \n *\n * @param impl - You can choose whether to use `useEffect` or `useLayoutEffect` by passing one of them as this argument. By default, it's `useEffect`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useEffectDebug<I extends "
            },
            {
              "kind": "Reference",
              "text": "Inputs",
              "canonicalReference": "preact-hooks!Inputs:type"
            },
            {
              "kind": "Content",
              "text": ">(effect: "
            },
            {
              "kind": "Content",
              "text": "(prev: I | undefined, changes: "
            },
            {
              "kind": "Reference",
              "text": "EffectChange",
              "canonicalReference": "preact-prop-helpers!~EffectChange:interface"
            },
            {
              "kind": "Content",
              "text": "<I, number>[]) => (void | (() => void))"
            },
            {
              "kind": "Content",
              "text": ", inputs?: "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": ", impl?: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "useEffectNative",
              "canonicalReference": "preact-hooks!useEffect:function"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-effect-debug.tsx",
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effect",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "inputs",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "impl",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useEffectDebug"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useElementSize:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useElementSize<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "elementSizeParameters",
              "canonicalReference": "preact-prop-helpers!UseElementSizeParameters#elementSizeParameters"
            },
            {
              "kind": "Content",
              "text": ": { getObserveBox, onSizeChange }, refElementParameters }: "
            },
            {
              "kind": "Reference",
              "text": "UseElementSizeParameters",
              "canonicalReference": "preact-prop-helpers!UseElementSizeParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseElementSizeReturnType",
              "canonicalReference": "preact-prop-helpers!UseElementSizeReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-element-size.tsx",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ elementSizeParameters: { getObserveBox, onSizeChange }, refElementParameters }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useElementSize"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseElementSizeParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseElementSizeParameters<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRefElementParameters",
              "canonicalReference": "preact-prop-helpers!UseRefElementParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/observers/use-element-size.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseElementSizeParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseElementSizeParameters#elementSizeParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementSizeParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onSizeChange(sizeInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementSize",
                  "canonicalReference": "preact-prop-helpers!ElementSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ", prevSize: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementSize",
                  "canonicalReference": "preact-prop-helpers!ElementSize:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined, entries: "
                },
                {
                  "kind": "Reference",
                  "text": "ResizeObserverEntry",
                  "canonicalReference": "!ResizeObserverEntry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "UIEvent",
                  "canonicalReference": "!UIEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): void;\n        getObserveBox: null | (() => "
                },
                {
                  "kind": "Reference",
                  "text": "ResizeObserverOptions",
                  "canonicalReference": "!ResizeObserverOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"box\"]);\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "elementSizeParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseElementSizeReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseElementSizeReturnType<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRefElementReturnType",
              "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/observers/use-element-size.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseElementSizeReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseElementSizeReturnType#elementSizeReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementSizeReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getSize(): "
                },
                {
                  "kind": "Reference",
                  "text": "ElementSize",
                  "canonicalReference": "preact-prop-helpers!ElementSize:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "elementSizeReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useEnsureStability:function(1)",
          "docComment": "/**\n * Debug hook.\n *\n * Given a value or set of values, emits a console error if any of them change from one render to the next.\n *\n * Eventually, when useEvent lands, we hopefully won't need this.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useEnsureStability<T extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ">(parentHookName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", ...values: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "parentHookName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "values",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useEnsureStability"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useEscapeDismiss:function(1)",
          "docComment": "/**\n * Adds event handlers for a modal-like soft-dismiss interaction.\n *\n * That is, any clicks or taps outside of the given component, or any time the Escape key is pressed within the component, (with various browser oddities regarding clicks on blank or inert areas handled) the component will request to close itself.\n *\n * Of course, if you don't do anything in the `onClose` function, it won't be a soft dismiss anymore.\n *\n * Handles events for pressing the `Escape` key to close the any currently open dialogs, tooltips, menus, popups, etc.\n *\n * One press of the `Escape` key is guaranteed to only call `onClose` for *only one* component, and it is called on the component deepest in the DOM tree, differentiated by passing context information between parent and child.\n *\n * @param param0 - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useEscapeDismiss<PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "escapeDismissParameters",
              "canonicalReference": "preact-prop-helpers!UseEscapeDismissParameters#escapeDismissParameters"
            },
            {
              "kind": "Content",
              "text": ": { onClose, open, "
            },
            {
              "kind": "Reference",
              "text": "getWindow",
              "canonicalReference": "preact-prop-helpers!~__type#getWindow"
            },
            {
              "kind": "Content",
              "text": ": unstableGetWindow, parentDepth, ...void1 }, "
            },
            {
              "kind": "Reference",
              "text": "refElementPopupReturn",
              "canonicalReference": "preact-prop-helpers!UseEscapeDismissParameters#refElementPopupReturn"
            },
            {
              "kind": "Content",
              "text": ": { getElement, ...void2 } }: "
            },
            {
              "kind": "Reference",
              "text": "UseEscapeDismissParameters",
              "canonicalReference": "preact-prop-helpers!UseEscapeDismissParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<PopupElement>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ escapeDismissParameters: { onClose, open, getWindow: unstableGetWindow, parentDepth, ...void1 }, refElementPopupReturn: { getElement, ...void2 } }",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useEscapeDismiss"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseEscapeDismissParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseEscapeDismissParameters<PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseEscapeDismissParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseEscapeDismissParameters#escapeDismissParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "escapeDismissParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onClose: "
                },
                {
                  "kind": "Reference",
                  "text": "EnhancedEventHandler",
                  "canonicalReference": "preact-prop-helpers!EnhancedEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEvent",
                  "canonicalReference": "!KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", {\n            reason: \"escape\" | \"lost-focus\";\n        }>;\n        open: boolean;\n        getWindow(): "
                },
                {
                  "kind": "Reference",
                  "text": "Window",
                  "canonicalReference": "!Window:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        parentDepth: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "escapeDismissParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseEscapeDismissParameters#refElementPopupReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementPopupReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<PopupElement>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementPopupReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useFocusTrap:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useFocusTrap<SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "focusTrapParameters",
              "canonicalReference": "preact-prop-helpers!UseFocusTrapParameters#focusTrapParameters"
            },
            {
              "kind": "Content",
              "text": ": { onlyMoveFocus, trapActive, "
            },
            {
              "kind": "Reference",
              "text": "focusPopup",
              "canonicalReference": "preact-prop-helpers!~__type#focusPopup"
            },
            {
              "kind": "Content",
              "text": ": focusSelfUnstable, "
            },
            {
              "kind": "Reference",
              "text": "focusOpener",
              "canonicalReference": "preact-prop-helpers!~__type#focusOpener"
            },
            {
              "kind": "Content",
              "text": ": focusOpenerUnstable }, refElementReturn }: "
            },
            {
              "kind": "Reference",
              "text": "UseFocusTrapParameters",
              "canonicalReference": "preact-prop-helpers!UseFocusTrapParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<SourceElement, PopupElement>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseFocusTrapReturnType",
              "canonicalReference": "preact-prop-helpers!UseFocusTrapReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<PopupElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-focus-trap.tsx",
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ focusTrapParameters: { onlyMoveFocus, trapActive, focusPopup: focusSelfUnstable, focusOpener: focusOpenerUnstable }, refElementReturn }",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "SourceElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useFocusTrap"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseFocusTrapParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseFocusTrapParameters<SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-focus-trap.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "SourceElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseFocusTrapParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseFocusTrapParameters#focusTrapParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTrapParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        trapActive: boolean;\n        onlyMoveFocus: boolean;\n        focusPopup(e: PopupElement, findFirstFocusable: () => "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLOrSVGElement",
                  "canonicalReference": "!HTMLOrSVGElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null): void;\n        focusOpener(lastFocused: SourceElement | null): void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "focusTrapParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseFocusTrapParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<PopupElement>>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseFocusTrapReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseFocusTrapReturnType<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-focus-trap.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseFocusTrapReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseFocusTrapReturnType#focusTrapReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTrapReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "focusTrapReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseFocusTrapReturnType#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<E>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useForceUpdate:function(1)",
          "docComment": "/**\n * Returns a function that will, when called, force the component that uses this hook to re-render itself.\n *\n * It's a bit smelly, so best to use sparingly.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useForceUpdate(): "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-force-update.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "useForceUpdate"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGlobalHandler:function(1)",
          "docComment": "/**\n * Allows attaching an event handler to any *non-Preact* element, and removing it when the component using the hook unmounts. The callback does not need to be stable across renders.\n *\n * `\"mode\"` controls if there's one handler that calls all your functions (default), or one handler added per function (`\"single\"`).\n *\n * The default, `\"grouped\"`, is faster when you have, say, a button component, used hundreds of times on a page, that each installs a global event handler.\n *\n * @param target - A *non-Preact* node to attach the event to.\n *\n * @returns *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGlobalHandler<T extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": ", EventType extends "
            },
            {
              "kind": "Reference",
              "text": "TypedEventListenerTypes",
              "canonicalReference": "preact-prop-helpers!~TypedEventListenerTypes:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", H extends "
            },
            {
              "kind": "Reference",
              "text": "TypedEventHandlerEvent",
              "canonicalReference": "preact-prop-helpers!~TypedEventHandlerEvent:type"
            },
            {
              "kind": "Content",
              "text": "<T, EventType>"
            },
            {
              "kind": "Content",
              "text": ">(target: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", type: "
            },
            {
              "kind": "Content",
              "text": "EventType"
            },
            {
              "kind": "Content",
              "text": ", handler: "
            },
            {
              "kind": "Content",
              "text": "null | ((e: H) => void)"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TypedAddEventListener",
              "canonicalReference": "preact-prop-helpers!~TypedAddEventListener:type"
            },
            {
              "kind": "Content",
              "text": "<T>>[2]"
            },
            {
              "kind": "Content",
              "text": ", mode?: "
            },
            {
              "kind": "Content",
              "text": "\"grouped\" | \"single\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-event-handler.tsx",
          "returnTypeTokenRange": {
            "startIndex": 22,
            "endIndex": 23
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": false
            },
            {
              "parameterName": "handler",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 19
              },
              "isOptional": true
            },
            {
              "parameterName": "mode",
              "parameterTypeTokenRange": {
                "startIndex": 20,
                "endIndex": 21
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "EventType",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "H",
              "constraintTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGlobalHandler"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigation:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigation<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "gridNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationParameters#gridNavigationParameters"
            },
            {
              "kind": "Content",
              "text": ": { onTabbableColumnChange, ...void3 }, linearNavigationParameters, "
            },
            {
              "kind": "Reference",
              "text": "rovingTabIndexParameters",
              "canonicalReference": "preact-prop-helpers!~rovingTabIndexParameters"
            },
            {
              "kind": "Content",
              "text": ": { onTabbableIndexChange, untabbable, ...rovingTabIndexParameters }, managedChildrenReturn, typeaheadNavigationParameters, refElementReturn, ...void2 }: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "returnTypeTokenRange": {
            "startIndex": 20,
            "endIndex": 22
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ gridNavigationParameters: { onTabbableColumnChange, ...void3 }, linearNavigationParameters, rovingTabIndexParameters: { onTabbableIndexChange, untabbable, ...rovingTabIndexParameters }, managedChildrenReturn, typeaheadNavigationParameters, refElementReturn, ...void2 }",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 19
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigation"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigationCell:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigationCell<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "gridNavigationCellContext",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellContext#gridNavigationCellContext"
            },
            {
              "kind": "Content",
              "text": ": { getRowIndex, setTabbableRow, getCurrentTabbableColumn, setCurrentTabbableColumn, setTabbableCell }, rovingTabIndexContext, typeaheadNavigationContext }, info, refElementReturn, textContentParameters, "
            },
            {
              "kind": "Reference",
              "text": "gridNavigationCellParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellParameters#gridNavigationCellParameters"
            },
            {
              "kind": "Content",
              "text": ": { colSpan }, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationCellParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<any, CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationCellReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ context: { gridNavigationCellContext: { getRowIndex, setTabbableRow, getCurrentTabbableColumn, setCurrentTabbableColumn, setTabbableCell }, rovingTabIndexContext, typeaheadNavigationContext }, info, refElementReturn, textContentParameters, gridNavigationCellParameters: { colSpan }, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigationCell"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationCellContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationCellContext extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseListNavigationContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "name": "UseGridNavigationCellContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellContext#gridNavigationCellContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridNavigationCellContext: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        allChildCellsAreUntabbable: boolean;\n        getRowIndex: () => number;\n        setTabbableRow: "
                },
                {
                  "kind": "Reference",
                  "text": "SetTabbableIndex",
                  "canonicalReference": "preact-prop-helpers!SetTabbableIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        getCurrentTabbableColumn: () => (number | null);\n        setCurrentTabbableColumn: "
                },
                {
                  "kind": "Reference",
                  "text": "PassiveStateUpdater",
                  "canonicalReference": "preact-prop-helpers!PassiveStateUpdater:type"
                },
                {
                  "kind": "Content",
                  "text": "<number | null, "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": ">;\n        setTabbableCell: "
                },
                {
                  "kind": "Reference",
                  "text": "SetTabbableIndex",
                  "canonicalReference": "preact-prop-helpers!SetTabbableIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gridNavigationCellContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationCellParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationCellParameters<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationCellParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationCellContext",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationCellContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellParameters#gridNavigationCellParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridNavigationCellParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        colSpan: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gridNavigationCellParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationCellReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationCellReturnType<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationCellReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationCellSingleSelectionContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationCellSingleSelectionContext extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationCellContext",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionContext",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "name": "UseGridNavigationCellSingleSelectionContext",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationParameters<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, RowElement, M>, \"linearNavigationParameters\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationParameters#gridNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridNavigationParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onTabbableColumnChange: "
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<number | null, "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gridNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationParameters#linearNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linearNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrChildElement, RowElement, M>[\"linearNavigationParameters\"], \"arrowKeyDirection\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linearNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 10,
              "endIndex": 14
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationReturnType<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, RM>, \"context\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationRowContext",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationRowContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 13,
              "endIndex": 17
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigationRow:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigationRow<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "rovingTabIndexContext",
              "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext#rovingTabIndexContext"
            },
            {
              "kind": "Content",
              "text": ": contextRTI, "
            },
            {
              "kind": "Reference",
              "text": "typeaheadNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext#typeaheadNavigationContext"
            },
            {
              "kind": "Content",
              "text": ": contextTN, "
            },
            {
              "kind": "Reference",
              "text": "gridNavigationRowContext",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowContext#gridNavigationRowContext"
            },
            {
              "kind": "Content",
              "text": ": { setTabbableRow, getCurrentTabbableColumn, setCurrentTabbableColumn } }, linearNavigationParameters, "
            },
            {
              "kind": "Reference",
              "text": "rovingTabIndexParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters#rovingTabIndexParameters"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "untabbable",
              "canonicalReference": "preact-prop-helpers!~untabbable"
            },
            {
              "kind": "Content",
              "text": ": rowIsUntabbableAndSoAreCells, initiallyTabbedIndex, onTabbableIndexChange, ...void4 }, "
            },
            {
              "kind": "Reference",
              "text": "info",
              "canonicalReference": "!info"
            },
            {
              "kind": "Content",
              "text": ": managedChildParameters, managedChildrenReturn, refElementReturn, textContentParameters, typeaheadNavigationParameters, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationRowParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationRowReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "returnTypeTokenRange": {
            "startIndex": 28,
            "endIndex": 30
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ context: { rovingTabIndexContext: contextRTI, typeaheadNavigationContext: contextTN, gridNavigationRowContext: { setTabbableRow, getCurrentTabbableColumn, setCurrentTabbableColumn } }, linearNavigationParameters, rovingTabIndexParameters: { untabbable: rowIsUntabbableAndSoAreCells, initiallyTabbedIndex, onTabbableIndexChange, ...void4 }, info: managedChildParameters, managedChildrenReturn, refElementReturn, textContentParameters, typeaheadNavigationParameters, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 25,
                "endIndex": 27
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigationRow"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationRowContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationRowContext extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseListNavigationContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "name": "UseGridNavigationRowContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowContext#gridNavigationRowContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridNavigationRowContext: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        setTabbableRow: "
                },
                {
                  "kind": "Reference",
                  "text": "SetTabbableIndex",
                  "canonicalReference": "preact-prop-helpers!SetTabbableIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        getCurrentTabbableColumn: () => (number | null);\n        setCurrentTabbableColumn: "
                },
                {
                  "kind": "Reference",
                  "text": "PassiveStateUpdater",
                  "canonicalReference": "preact-prop-helpers!PassiveStateUpdater:type"
                },
                {
                  "kind": "Content",
                  "text": "<number | null, "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": ">;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gridNavigationRowContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationRowParameters<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, RM>, \"context\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, CM>, \"refElementReturn\" | \"rovingTabIndexParameters\" | \"linearNavigationParameters\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationRowParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationRowContext",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationRowContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters#linearNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linearNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement, CM>[\"linearNavigationParameters\"], \"arrowKeyDirection\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linearNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters#managedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<CM>[\"managedChildrenReturn\"], \"getChildren\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters#rovingTabIndexParameters:member",
              "docComment": "/**\n * (These are the parameters for the row controlling the cells, not any other combination of parent/child/row/cell)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationParameters",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement, CM>[\"rovingTabIndexParameters\"], \"focusSelfParent\" | \"untabbableBehavior\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 15
            },
            {
              "startIndex": 16,
              "endIndex": 20
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationRowReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationRowReturnType<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, RM>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, CM>, \"propsStableParentOrChild\" | \"propsParent\" | \"context\" | \"rovingTabIndexReturn\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationRowReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseGridNavigationCellContext",
                  "canonicalReference": "preact-prop-helpers!UseGridNavigationCellContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowReturnType#gridNavigationRowParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridNavigationRowParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GridChildRowInfo",
                  "canonicalReference": "preact-prop-helpers!GridChildRowInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement>, \"focusSelf\" | \"setTabbableColumnIndex\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gridNavigationRowParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowReturnType#rovingTabIndexReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "OmitStrong",
                  "canonicalReference": "preact-prop-helpers!OmitStrong:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationReturnType",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<RowElement, CellElement, CM>[\"rovingTabIndexReturn\"], \"focusSelf\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 13
            },
            {
              "startIndex": 14,
              "endIndex": 18
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationRowSingleSelectionContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationRowSingleSelectionContext extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationRowContext",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionContext",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "name": "UseGridNavigationRowSingleSelectionContext",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigationSingleSelection:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigationSingleSelection<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ gridNavigationParameters, linearNavigationParameters, rovingTabIndexParameters, managedChildrenReturn, typeaheadNavigationParameters, singleSelectionParameters, refElementReturn, ...void2 }: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ gridNavigationParameters, linearNavigationParameters, rovingTabIndexParameters, managedChildrenReturn, typeaheadNavigationParameters, singleSelectionParameters, refElementReturn, ...void2 }",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigationSingleSelection"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigationSingleSelectionCell:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigationSingleSelectionCell<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">(p: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionCellParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionCellParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<any, CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionCellReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionCellReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigationSingleSelectionCell"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionCellParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionCellParameters<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationCellParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionCellParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionCellReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionCellReturnType<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationCellReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionCellReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionParameters<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM>, "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, RM>, \"rovingTabIndexReturn\">>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 10,
              "endIndex": 18
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionReturnType<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>, "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionReturnType",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, RM>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 13,
              "endIndex": 19
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigationSingleSelectionRow:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigationSingleSelectionRow<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "info",
              "canonicalReference": "!info"
            },
            {
              "kind": "Content",
              "text": ": mcp1, linearNavigationParameters, managedChildrenReturn, refElementReturn, rovingTabIndexParameters, textContentParameters, typeaheadNavigationParameters, "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "!context"
            },
            {
              "kind": "Content",
              "text": ": { gridNavigationRowContext, rovingTabIndexContext, singleSelectionContext, typeaheadNavigationContext }, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionRowParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionRowParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionRowReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionRowReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "returnTypeTokenRange": {
            "startIndex": 18,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info: mcp1, linearNavigationParameters, managedChildrenReturn, refElementReturn, rovingTabIndexParameters, textContentParameters, typeaheadNavigationParameters, context: { gridNavigationRowContext, rovingTabIndexContext, singleSelectionContext, typeaheadNavigationContext }, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigationSingleSelectionRow"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionRowParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionRowParameters<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationRowParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>, "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, RM>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionRowParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 17
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionRowReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionRowReturnType<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationRowReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationRowReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>, "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionRowReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 17
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigationSingleSelectionSortable:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigationSingleSelectionSortable<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">({ rearrangeableChildrenParameters, sortableChildrenParameters, linearNavigationParameters, managedChildrenReturn, ...gridNavigationSingleSelectionParameters }: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ rearrangeableChildrenParameters, sortableChildrenParameters, linearNavigationParameters, managedChildrenReturn, ...gridNavigationSingleSelectionParameters }",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigationSingleSelectionSortable"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigationSingleSelectionSortableCell:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigationSingleSelectionSortableCell<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">(p: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableCellParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableCellParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<any, CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableCellReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableCellReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigationSingleSelectionSortableCell"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableCellParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionSortableCellParameters<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationCellParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionSortableCellParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableCellReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionSortableCellReturnType<CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationCellReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationCellReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement, CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionSortableCellReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionSortableParameters<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OmitTargeted",
              "canonicalReference": "preact-prop-helpers!~OmitTargeted:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, M>, \"linearNavigationParameters\", \"indexDemangler\" | \"indexMangler\">, "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionSortableParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 10,
              "endIndex": 18
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionSortableReturnType<ParentOrRowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrRowElement, RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrRowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionSortableReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 13,
              "endIndex": 15
            },
            {
              "startIndex": 16,
              "endIndex": 18
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useGridNavigationSingleSelectionSortableRow:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useGridNavigationSingleSelectionSortableRow<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": ">(p: "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableRowParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionSortableRowReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGridNavigationSingleSelectionSortableRow"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionSortableRowParameters<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionRowParameters",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionRowParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionSortableRowParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 13
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionSortableRowReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseGridNavigationSingleSelectionSortableRowReturnType<RowElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", CellElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", RM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectSortableChildRowInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectSortableChildRowInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement>"
            },
            {
              "kind": "Content",
              "text": ", CM extends "
            },
            {
              "kind": "Reference",
              "text": "GridSingleSelectChildCellInfo",
              "canonicalReference": "preact-prop-helpers!GridSingleSelectChildCellInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<CellElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseGridNavigationSingleSelectionRowReturnType",
              "canonicalReference": "preact-prop-helpers!UseGridNavigationSingleSelectionRowReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<RowElement, CellElement, RM, CM>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-grid-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "RowElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CellElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "RM",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CM",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseGridNavigationSingleSelectionSortableRowReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 13
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useHasCurrentFocus:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useHasCurrentFocus<T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">(args: "
            },
            {
              "kind": "Reference",
              "text": "UseHasCurrentFocusParameters",
              "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseHasCurrentFocusReturnType",
              "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-has-current-focus.tsx",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useHasCurrentFocus"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseHasCurrentFocusParameters<T extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "!Node:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/observers/use-has-current-focus.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseHasCurrentFocusParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusParameters#hasCurrentFocusParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCurrentFocusParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onCurrentFocusedChanged?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean, "
                },
                {
                  "kind": "Reference",
                  "text": "FocusEventType",
                  "canonicalReference": "preact-prop-helpers!FocusEventType:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>;\n        onCurrentFocusedInnerChanged?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean, "
                },
                {
                  "kind": "Reference",
                  "text": "FocusEventType",
                  "canonicalReference": "preact-prop-helpers!FocusEventType:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasCurrentFocusParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[\"refElementReturn\"], \"getElement\">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseHasCurrentFocusReturnType<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/observers/use-has-current-focus.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseHasCurrentFocusReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusReturnType#hasCurrentFocusReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCurrentFocusReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        propsStable: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<E>;\n        getCurrentFocused(): boolean;\n        getCurrentFocusedInner(): boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasCurrentFocusReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useHasLastFocus:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useHasLastFocus<T extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "!Node:interface"
            },
            {
              "kind": "Content",
              "text": ">(args: "
            },
            {
              "kind": "Reference",
              "text": "UseHasLastFocusParameters",
              "canonicalReference": "preact-prop-helpers!UseHasLastFocusParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseHasLastFocusReturnType",
              "canonicalReference": "preact-prop-helpers!UseHasLastFocusReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-has-last-focus.tsx",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useHasLastFocus"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseHasLastFocusParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseHasLastFocusParameters<T extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "!Node:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseActiveElementParameters",
              "canonicalReference": "preact-prop-helpers!UseActiveElementParameters:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/observers/use-has-last-focus.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseHasLastFocusParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseHasLastFocusParameters#hasLastFocusParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasLastFocusParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onLastFocusedChanged?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<((focused: boolean, prevFocused: boolean | undefined) => void)>;\n        onLastFocusedInnerChanged?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<((focused: boolean, prevFocused: boolean | undefined) => void)>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasLastFocusParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseHasLastFocusParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseHasLastFocusReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseHasLastFocusReturnType extends "
            },
            {
              "kind": "Reference",
              "text": "UseActiveElementReturnType",
              "canonicalReference": "preact-prop-helpers!UseActiveElementReturnType:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/observers/use-has-last-focus.tsx",
          "releaseTag": "Public",
          "name": "UseHasLastFocusReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseHasLastFocusReturnType#hasLastFocusReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasLastFocusReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getLastFocused(): boolean;\n        getLastFocusedInner(): boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasLastFocusReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useHideScroll:function(1)",
          "docComment": "/**\n * Allows for hiding the scroll bar of the root HTML element without shifting the layout of the page more than adding a fow pixels of padding to the root element if necessary.\n *\n * @param hideScroll - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useHideScroll(hideScroll: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    getScrollbarWidth: () => number | null;\n    getScrollbarHeight: () => number | null;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-hide-scroll.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hideScroll",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "useHideScroll"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useImperativeProps:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useImperativeProps<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "refElementReturn",
              "canonicalReference": "preact-prop-helpers!UseImperativePropsParameters#refElementReturn"
            },
            {
              "kind": "Content",
              "text": ": { getElement } }: "
            },
            {
              "kind": "Reference",
              "text": "UseImperativePropsParameters",
              "canonicalReference": "preact-prop-helpers!UseImperativePropsParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    imperativeHandle: "
            },
            {
              "kind": "Reference",
              "text": "ImperativeHandle",
              "canonicalReference": "preact-prop-helpers!ImperativeHandle:interface"
            },
            {
              "kind": "Content",
              "text": "<E>;\n    props: "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<E>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ refElementReturn: { getElement } }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useImperativeProps"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseImperativePropsParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseImperativePropsParameters<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-imperative-props.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseImperativePropsParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseImperativePropsParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<E>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useInterval:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useInterval({ interval, callback }: "
            },
            {
              "kind": "Reference",
              "text": "UseIntervalParameters",
              "canonicalReference": "preact-prop-helpers!UseIntervalParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/timing/use-interval.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ interval, callback }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "useInterval"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseIntervalParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseIntervalParameters "
            }
          ],
          "fileUrlPath": "src/timing/use-interval.tsx",
          "releaseTag": "Public",
          "name": "UseIntervalParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseIntervalParameters#callback:member",
              "docComment": "/**\n * Called `timeout` ms after mount, or the last change to `triggerIndex`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callback: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseIntervalParameters#interval:member",
              "docComment": "/**\n * The number of ms to wait before invoking `callback`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interval: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "interval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useLayoutEffectDebug:function(1)",
          "docComment": "/**\n * Wrap the native `useLayoutEffect` to add arguments that allow accessing the previous value as the first argument, as well as the changes that caused the hook to be called as the second argument.\n *\n * @param effect - \n *\n * @param inputs - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useLayoutEffectDebug<I extends "
            },
            {
              "kind": "Reference",
              "text": "Inputs",
              "canonicalReference": "preact-hooks!Inputs:type"
            },
            {
              "kind": "Content",
              "text": ">(effect: "
            },
            {
              "kind": "Content",
              "text": "(prev: I | undefined, changes: "
            },
            {
              "kind": "Reference",
              "text": "EffectChange",
              "canonicalReference": "preact-prop-helpers!~EffectChange:interface"
            },
            {
              "kind": "Content",
              "text": "<I, number>[]) => (void | (() => void))"
            },
            {
              "kind": "Content",
              "text": ", inputs?: "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-layout-effect-debug.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effect",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "inputs",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useLayoutEffectDebug"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useLinearNavigation:function(1)",
          "docComment": "/**\n * When used in tandem with `useRovingTabIndex`, allows control of the tabbable index with the arrow keys.\n *\n * @see\n *\n * useListNavigation, which packages everything up together.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useLinearNavigation<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseLinearNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ rovingTabIndexReturn, linearNavigationParameters }: "
            },
            {
              "kind": "Reference",
              "text": "UseLinearNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseLinearNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-linear-navigation.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ rovingTabIndexReturn, linearNavigationParameters }",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useLinearNavigation"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseLinearNavigationChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseLinearNavigationChildInfo<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-linear-navigation.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseLinearNavigationChildInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseLinearNavigationParameters:interface",
          "docComment": "/**\n * Arguments passed to the parent `useLinearNavigation`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseLinearNavigationParameters<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", _M extends "
            },
            {
              "kind": "Reference",
              "text": "UseLinearNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-linear-navigation.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseLinearNavigationParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationParameters#linearNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linearNavigationParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        isValid(i: number): boolean;\n        pageNavigationSize: number;\n        navigatePastStart: \"passthrough\" | \"wrap\" | (() => void);\n        navigatePastEnd: \"passthrough\" | \"wrap\" | (() => void);\n        indexMangler: (n: number) => number;\n        indexDemangler: (n: number) => number;\n        getHighestIndex(): number;\n        arrowKeyDirection: \"horizontal\" | \"vertical\" | \"either\" | \"none\";\n        disableHomeEndKeys: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linearNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationParameters#rovingTabIndexReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrChildElement, ChildElement, "
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>>[\"rovingTabIndexReturn\"], \"getTabbableIndex\" | \"setTabbableIndex\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseLinearNavigationReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseLinearNavigationReturnType<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-linear-navigation.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseLinearNavigationReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationReturnType#linearNavigationReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linearNavigationReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linearNavigationReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationReturnType#propsStable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsStable: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrChildElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsStable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useListNavigation:function(1)",
          "docComment": "/**\n * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.\n *\n * In the document order, there will be only one \"focused\" or \"tabbable\" element, making it act more like one complete unit in comparison to everything around it. Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any text for typeahead to focus the next item that matches.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useListNavigation<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ linearNavigationParameters, typeaheadNavigationParameters, rovingTabIndexParameters, managedChildrenReturn, refElementReturn, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-partial.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ linearNavigationParameters, typeaheadNavigationParameters, rovingTabIndexParameters, managedChildrenReturn, refElementReturn, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useListNavigation"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useListNavigationChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useListNavigationChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ info, context, refElementReturn, textContentParameters, ...void2 }: "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-partial.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info, context, refElementReturn, textContentParameters, ...void2 }",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useListNavigationChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationChildInfo<TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationChildInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationChildParameters<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildParameters",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>, "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationChildParameters",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationContext",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationChildReturnType<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationChildReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 8
            },
            {
              "startIndex": 9,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationContext extends "
            },
            {
              "kind": "Reference",
              "text": "RovingTabIndexChildContext",
              "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-partial.tsx",
          "releaseTag": "Public",
          "name": "UseListNavigationContext",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationParameters:interface",
          "docComment": "/**\n * @param fromUserInteraction - Whether the user interacted with this child as a means of navigating to it. In that was the case, the child is also focused. Otherwise, focus moves as the browser determines.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationParameters<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexParameters",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>, \"rovingTabIndexReturn\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseLinearNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>, \"rovingTabIndexReturn\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 15
            },
            {
              "startIndex": 16,
              "endIndex": 20
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationReturnType<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexReturnType",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>, \"props\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement>, \"propsStable\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseLinearNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseLinearNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement>, \"propsStable\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-partial.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseListNavigationContext",
                  "canonicalReference": "preact-prop-helpers!UseListNavigationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType#propsParent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsParent: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrChildElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsParent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType#propsStableParentOrChild:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsStableParentOrChild: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrChildElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsStableParentOrChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 12
            },
            {
              "startIndex": 13,
              "endIndex": 17
            },
            {
              "startIndex": 18,
              "endIndex": 22
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useListNavigationSingleSelection:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useListNavigationSingleSelection<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, singleSelectionParameters, managedChildrenReturn, refElementReturn, ...void3 }: "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, singleSelectionParameters, managedChildrenReturn, refElementReturn, ...void3 }",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useListNavigationSingleSelection"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useListNavigationSingleSelectionChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useListNavigationSingleSelectionChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ info, context, refElementReturn, textContentParameters, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info, context, refElementReturn, textContentParameters, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useListNavigationSingleSelectionChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionChildContext extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseListNavigationContext:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionContext",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "name": "UseListNavigationSingleSelectionChildContext",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionChildInfo<TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>, "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionChildInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionChildParameters<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>, "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionChildParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionChildReturnType<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>, "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionChildReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionParameters<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>, "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>, \"rovingTabIndexReturn\">>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 16
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionReturnType<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>, "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionReturnType",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 14
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useListNavigationSingleSelectionSortable:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useListNavigationSingleSelectionSortable<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, singleSelectionParameters, managedChildrenReturn, rearrangeableChildrenParameters, sortableChildrenParameters, refElementReturn, ...void3 }: "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection-sortable.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, singleSelectionParameters, managedChildrenReturn, rearrangeableChildrenParameters, sortableChildrenParameters, refElementReturn, ...void3 }",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useListNavigationSingleSelectionSortable"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useListNavigationSingleSelectionSortableChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useListNavigationSingleSelectionSortableChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ info, context, refElementReturn, textContentParameters, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection-sortable.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info, context, refElementReturn, textContentParameters, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useListNavigationSingleSelectionSortableChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionSortableChildInfo<TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionSortableChildInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionSortableChildParameters<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionSortableChildParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionSortableChildReturnType<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionSortableChildReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionSortableParameters<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ExtendMerge",
              "canonicalReference": "preact-prop-helpers!ExtendMerge:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OmitTargeted",
              "canonicalReference": "preact-prop-helpers!~OmitTargeted:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>, \"linearNavigationParameters\", \"indexDemangler\" | \"indexMangler\">, "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionSortableParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 16
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseListNavigationSingleSelectionSortableReturnType<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseListNavigationSingleSelectionReturnType",
              "canonicalReference": "preact-prop-helpers!UseListNavigationSingleSelectionReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-list-navigation-single-selection-sortable.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseListNavigationSingleSelectionSortableReturnType",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 13
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useLocalHandler:function(1)",
          "docComment": "/**\n * An alternative way to add an event handler to an element. Useful primarily when integrating 3rd party libraries that expect a generic \"add event handler\" function.\n *\n * Returns a function that allows you to modify a set of props to apply this handler.\n *\n * For typing reasons, this function is split into two. Usage is like the following:\n * ```\n * const { useLocalEventHandlerProps } = useLocalEventHandler<HTMLDivElement>()(\"onMouseDown\", e => {  });\n * const divProps = useLocalEventHandlerProps(props);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useLocalHandler<ElementType extends "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "HTMLElementTagNameMap",
              "canonicalReference": "!HTMLElementTagNameMap:interface"
            },
            {
              "kind": "Content",
              "text": "[keyof "
            },
            {
              "kind": "Reference",
              "text": "HTMLElementTagNameMap",
              "canonicalReference": "!HTMLElementTagNameMap:interface"
            },
            {
              "kind": "Content",
              "text": "] | "
            },
            {
              "kind": "Reference",
              "text": "SVGElementTagNameMap",
              "canonicalReference": "!SVGElementTagNameMap:interface"
            },
            {
              "kind": "Content",
              "text": "[keyof "
            },
            {
              "kind": "Reference",
              "text": "SVGElementTagNameMap",
              "canonicalReference": "!SVGElementTagNameMap:interface"
            },
            {
              "kind": "Content",
              "text": "])"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Content",
              "text": "<EventType extends \"onLoad\" | \"onLoadCapture\" | \"onError\" | \"onErrorCapture\" | \"onCopy\" | \"onCopyCapture\" | \"onCut\" | \"onCutCapture\" | \"onPaste\" | \"onPasteCapture\" | \"onCompositionEnd\" | \"onCompositionEndCapture\" | \"onCompositionStart\" | \"onCompositionStartCapture\" | \"onCompositionUpdate\" | \"onCompositionUpdateCapture\" | \"onToggle\" | \"onFocus\" | \"onFocusCapture\" | \"onfocusin\" | \"onfocusinCapture\" | \"onfocusout\" | \"onfocusoutCapture\" | \"onBlur\" | \"onBlurCapture\" | \"onChange\" | \"onChangeCapture\" | \"onInput\" | \"onInputCapture\" | \"onBeforeInput\" | \"onBeforeInputCapture\" | \"onSearch\" | \"onSearchCapture\" | \"onSubmit\" | \"onSubmitCapture\" | \"onInvalid\" | \"onInvalidCapture\" | \"onReset\" | \"onResetCapture\" | \"onFormData\" | \"onFormDataCapture\" | \"onKeyDown\" | \"onKeyDownCapture\" | \"onKeyPress\" | \"onKeyPressCapture\" | \"onKeyUp\" | \"onKeyUpCapture\" | \"onAbort\" | \"onAbortCapture\" | \"onCanPlay\" | \"onCanPlayCapture\" | \"onCanPlayThrough\" | \"onCanPlayThroughCapture\" | \"onDurationChange\" | \"onDurationChangeCapture\" | \"onEmptied\" | \"onEmptiedCapture\" | \"onEncrypted\" | \"onEncryptedCapture\" | \"onEnded\" | \"onEndedCapture\" | \"onLoadedData\" | \"onLoadedDataCapture\" | \"onLoadedMetadata\" | \"onLoadedMetadataCapture\" | \"onLoadStart\" | \"onLoadStartCapture\" | \"onPause\" | \"onPauseCapture\" | \"onPlay\" | \"onPlayCapture\" | \"onPlaying\" | \"onPlayingCapture\" | \"onProgress\" | \"onProgressCapture\" | \"onRateChange\" | \"onRateChangeCapture\" | \"onSeeked\" | \"onSeekedCapture\" | \"onSeeking\" | \"onSeekingCapture\" | \"onStalled\" | \"onStalledCapture\" | \"onSuspend\" | \"onSuspendCapture\" | \"onTimeUpdate\" | \"onTimeUpdateCapture\" | \"onVolumeChange\" | \"onVolumeChangeCapture\" | \"onWaiting\" | \"onWaitingCapture\" | \"onClick\" | \"onClickCapture\" | \"onContextMenu\" | \"onContextMenuCapture\" | \"onDblClick\" | \"onDblClickCapture\" | \"onDrag\" | \"onDragCapture\" | \"onDragEnd\" | \"onDragEndCapture\" | \"onDragEnter\" | \"onDragEnterCapture\" | \"onDragExit\" | \"onDragExitCapture\" | \"onDragLeave\" | \"onDragLeaveCapture\" | \"onDragOver\" | \"onDragOverCapture\" | \"onDragStart\" | \"onDragStartCapture\" | \"onDrop\" | \"onDropCapture\" | \"onMouseDown\" | \"onMouseDownCapture\" | \"onMouseEnter\" | \"onMouseEnterCapture\" | \"onMouseLeave\" | \"onMouseLeaveCapture\" | \"onMouseMove\" | \"onMouseMoveCapture\" | \"onMouseOut\" | \"onMouseOutCapture\" | \"onMouseOver\" | \"onMouseOverCapture\" | \"onMouseUp\" | \"onMouseUpCapture\" | \"onSelect\" | \"onSelectCapture\" | \"onTouchCancel\" | \"onTouchCancelCapture\" | \"onTouchEnd\" | \"onTouchEndCapture\" | \"onTouchMove\" | \"onTouchMoveCapture\" | \"onTouchStart\" | \"onTouchStartCapture\" | \"onPointerOver\" | \"onPointerOverCapture\" | \"onPointerEnter\" | \"onPointerEnterCapture\" | \"onPointerDown\" | \"onPointerDownCapture\" | \"onPointerMove\" | \"onPointerMoveCapture\" | \"onPointerUp\" | \"onPointerUpCapture\" | \"onPointerCancel\" | \"onPointerCancelCapture\" | \"onPointerOut\" | \"onPointerOutCapture\" | \"onPointerLeave\" | \"onPointerLeaveCapture\" | \"onGotPointerCapture\" | \"onGotPointerCaptureCapture\" | \"onLostPointerCapture\" | \"onLostPointerCaptureCapture\" | \"onScroll\" | \"onScrollCapture\" | \"onWheel\" | \"onWheelCapture\" | \"onAnimationStart\" | \"onAnimationStartCapture\" | \"onAnimationEnd\" | \"onAnimationEndCapture\" | \"onAnimationIteration\" | \"onAnimationIterationCapture\" | \"onTransitionEnd\" | \"onTransitionEndCapture\">(type: EventType, handler: "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "JSX.DOMAttributes",
              "canonicalReference": "preact!JSXInternal.DOMAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<ElementType>[EventType]>) => {\n    useLocalEventHandlerProps: (props: "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<ElementType>) => "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<ElementType>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-event-handler.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "ElementType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useLocalHandler"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useLogicalDirection:function(1)",
          "docComment": "/**\n * Inspects the element's style and determines the logical direction that text flows.\n *\n * Certain CSS properties, like `block-size`, respect the current writing mode and text direction. But `transform`, `clip`, etc. don't.\n *\n * This is provided so that CSS properties can consistently use those logical properties.\n *\n * See https://drafts.csswg.org/css-writing-modes/#logical-to-physical\n *\n * @returns An object containing the following functions: * `getLogicalDirection`: retrieves a `LogicalDirectionInfo` representing the current state of the element. (Function is constant between renders) * `convertElementSize`: When used in conjunction with `useElementSize`, allows you to retrieve the logical size of an element instead of the physical size. * `convertToLogicalOrientation`: Based on the current direction, converts \"horizontal\" or \"vertical\" to \"inline\" or \"block\". * `convertToPhysicalOrientation`: Based on the current direction, converts \"inline\" or \"block\" to \"horizontal\" or \"vertical\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useLogicalDirection({}: "
            },
            {
              "kind": "Reference",
              "text": "UseLogicalDirectionParameters",
              "canonicalReference": "preact-prop-helpers!UseLogicalDirectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseLogicalDirectionReturnType",
              "canonicalReference": "preact-prop-helpers!UseLogicalDirectionReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{}",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "useLogicalDirection"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseLogicalDirectionParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseLogicalDirectionParameters "
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "releaseTag": "Public",
          "name": "UseLogicalDirectionParameters",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseLogicalDirectionReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseLogicalDirectionReturnType "
            }
          ],
          "fileUrlPath": "src/observers/use-logical-direction.tsx",
          "releaseTag": "Public",
          "name": "UseLogicalDirectionReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLogicalDirectionReturnType#logicalDirectionReturn:member",
              "docComment": "/**\n * **STABLE**\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logicalDirectionReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getLogicalDirectionInfo: (computedStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "CSSStyleDeclaration",
                  "canonicalReference": "!CSSStyleDeclaration:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "LogicalDirectionInfo",
                  "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null;\n        convertToLogicalSize: (computedStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "CSSStyleDeclaration",
                  "canonicalReference": "!CSSStyleDeclaration:interface"
                },
                {
                  "kind": "Content",
                  "text": ", elementSize: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementSize",
                  "canonicalReference": "preact-prop-helpers!ElementSize:interface"
                },
                {
                  "kind": "Content",
                  "text": ", direction?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogicalDirectionInfo",
                  "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "LogicalElementSize",
                  "canonicalReference": "preact-prop-helpers!LogicalElementSize:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null;\n        convertToLogicalOrientation: (computedStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "CSSStyleDeclaration",
                  "canonicalReference": "!CSSStyleDeclaration:interface"
                },
                {
                  "kind": "Content",
                  "text": ", elementOrientation: "
                },
                {
                  "kind": "Reference",
                  "text": "PhysicalOrientation",
                  "canonicalReference": "preact-prop-helpers!PhysicalOrientation:type"
                },
                {
                  "kind": "Content",
                  "text": ", direction?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogicalDirectionInfo",
                  "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined) => \"inline\" | \"block\";\n        convertToPhysicalOrientation: (computedStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "CSSStyleDeclaration",
                  "canonicalReference": "!CSSStyleDeclaration:interface"
                },
                {
                  "kind": "Content",
                  "text": ", elementOrientation: "
                },
                {
                  "kind": "Reference",
                  "text": "LogicalOrientation",
                  "canonicalReference": "preact-prop-helpers!LogicalOrientation:type"
                },
                {
                  "kind": "Content",
                  "text": ", direction?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogicalDirectionInfo",
                  "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined) => \"horizontal\" | \"vertical\";\n        convertToLogicalSide: (computedStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "CSSStyleDeclaration",
                  "canonicalReference": "!CSSStyleDeclaration:interface"
                },
                {
                  "kind": "Content",
                  "text": ", side: \"top\" | \"bottom\" | \"left\" | \"right\", direction?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogicalDirectionInfo",
                  "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined) => \"inline-start\" | \"inline-end\" | \"block-start\" | \"block-end\";\n        convertToPhysicalSide: (computedStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "CSSStyleDeclaration",
                  "canonicalReference": "!CSSStyleDeclaration:interface"
                },
                {
                  "kind": "Content",
                  "text": ", side: \"inline-start\" | \"inline-end\" | \"block-start\" | \"block-end\", direction?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogicalDirectionInfo",
                  "canonicalReference": "preact-prop-helpers!LogicalDirectionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined) => \"top\" | \"bottom\" | \"left\" | \"right\";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logicalDirectionReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 34
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useLostFocusDismiss:function(1)",
          "docComment": "/**\n * Handles events for dismiss events for things like popup menus or transient dialogs -- things where moving focus to a new area of the page means this component should close itself.\n *\n * @param param0 - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useLostFocusDismiss<SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "refElementPopupReturn",
              "canonicalReference": "preact-prop-helpers!UseLostFocusDismissParameters#refElementPopupReturn"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "getElement",
              "canonicalReference": "preact-prop-helpers!~getElement"
            },
            {
              "kind": "Content",
              "text": ": getPopupElement, ...void3 }, refElementSourceReturn, "
            },
            {
              "kind": "Reference",
              "text": "lostFocusDismiss",
              "canonicalReference": "preact-prop-helpers!UseLostFocusDismissParameters#lostFocusDismiss"
            },
            {
              "kind": "Content",
              "text": ": { open, onClose }, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseLostFocusDismissParameters",
              "canonicalReference": "preact-prop-helpers!UseLostFocusDismissParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<SourceElement, PopupElement>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseLostFocusDismissReturnType",
              "canonicalReference": "preact-prop-helpers!UseLostFocusDismissReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<SourceElement, PopupElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ refElementPopupReturn: { getElement: getPopupElement, ...void3 }, refElementSourceReturn, lostFocusDismiss: { open, onClose }, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "SourceElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useLostFocusDismiss"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseLostFocusDismissParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseLostFocusDismissParameters<SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "SourceElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseLostFocusDismissParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLostFocusDismissParameters#lostFocusDismiss:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lostFocusDismiss: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        open: boolean;\n        onClose(): void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lostFocusDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLostFocusDismissParameters#refElementPopupReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementPopupReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<PopupElement>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementPopupReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLostFocusDismissParameters#refElementSourceReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementSourceReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<SourceElement>>[\"refElementReturn\"], \"getElement\">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementSourceReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseLostFocusDismissReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseLostFocusDismissReturnType<_SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", _PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-dismiss.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "_SourceElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_PopupElement",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseLostFocusDismissReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseLostFocusDismissReturnType#activeElementParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activeElementParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseActiveElementParameters",
                  "canonicalReference": "preact-prop-helpers!UseActiveElementParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"activeElementParameters\"], \"onLastActiveElementChange\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "activeElementParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useManagedChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useManagedChild<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<number | string>"
            },
            {
              "kind": "Content",
              "text": ">({ context, info }: "
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildParameters",
              "canonicalReference": "preact-prop-helpers!UseManagedChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseManagedChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ context, info }",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useManagedChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseManagedChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseManagedChildParameters<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseManagedChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseManagedChildParameters#context:member",
              "docComment": "/**\n * In general, this shouldn't be null, but for convenience's sake you are allowed to, which disables all behavior, and also means `getChildren` will be `undefined`!\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenContext",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseManagedChildParameters#info:member",
              "docComment": "/**\n * The exact data that's available from the parent/each sibling element via `getAt` or the other methods on `ManagedChildren`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Content",
                  "text": "M"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useManagedChildren:function(1)",
          "docComment": "/**\n * Allows a parent component to access information about certain child components once they have rendered.\n *\n * This hook is designed to be lightweight, in that the parent keeps no state and runs no effects. Each child *does* run an effect, but with no state changes unless you explicitly request them.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useManagedChildren<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<string | number>"
            },
            {
              "kind": "Content",
              "text": ">(parentParameters: "
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "parentParameters",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useManagedChildren"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseManagedChildrenContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseManagedChildrenContext<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseManagedChildrenContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenContext#managedChildContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildContext: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getChildren(): "
                },
                {
                  "kind": "Reference",
                  "text": "ManagedChildren",
                  "canonicalReference": "preact-prop-helpers!ManagedChildren:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>;\n        managedChildrenArray: "
                },
                {
                  "kind": "Reference",
                  "text": "InternalChildInfo",
                  "canonicalReference": "preact-prop-helpers!~InternalChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>;\n        remoteULEChildMounted: (index: M[\"index\"], mounted: boolean) => void;\n        remoteULEChildChanged: (index: M[\"index\"]) => (() => void);\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseManagedChildrenParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseManagedChildrenParameters<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseManagedChildrenParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenParameters#managedChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onAfterChildLayoutEffect?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "OnAfterChildLayoutEffect",
                  "canonicalReference": "preact-prop-helpers!OnAfterChildLayoutEffect:type"
                },
                {
                  "kind": "Content",
                  "text": "<M[\"index\"]>>;\n        onChildrenMountChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "OnChildrenMountChange",
                  "canonicalReference": "preact-prop-helpers!OnChildrenMountChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<M[\"index\"]>>;\n        onChildrenCountChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<((count: number) => void)>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseManagedChildrenReturnType<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseManagedChildrenReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenContext",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType#managedChildrenReturn:member",
              "docComment": "/**\n * Returns information about the child that rendered itself with the requested key.\n *\n * **STABLE** (even though it's not a function, the identity of this object never changes)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getChildren(): "
                },
                {
                  "kind": "Reference",
                  "text": "ManagedChildren",
                  "canonicalReference": "preact-prop-helpers!ManagedChildren:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseManagedChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseManagedChildReturnType<M extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-managed-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseManagedChildReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseManagedChildReturnType#managedChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getChildren(): "
                },
                {
                  "kind": "Reference",
                  "text": "ManagedChildren",
                  "canonicalReference": "preact-prop-helpers!ManagedChildren:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useMediaQuery:function(1)",
          "docComment": "/**\n * Allows a component to use the boolean result of a media query as part of its render.\n *\n * Please note that there is a re-render penalty incurred by using this hook -- it will always cause any component that uses it to re-render one extra time on mount as it stores the result of the media query. This can be mitigated with the `defaultGuess` parameter -- if you guess correctly (`true`/`false`), then there's no penalty. Hooray.\n *\n * @param query - Must be in parens, e.g. `(max-width: 600px)`\n *\n * @param defaultGuess - Optional. If you pass the same value that's measured after rendering, no re-render will occur.\n *\n * @returns `UseMediaQueryReturnType`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useMediaQuery(query: "
            },
            {
              "kind": "Content",
              "text": "string | null | undefined"
            },
            {
              "kind": "Content",
              "text": ", defaultGuess?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseMediaQueryReturnType",
              "canonicalReference": "preact-prop-helpers!UseMediaQueryReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-media-query.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "query",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "defaultGuess",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "useMediaQuery"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseMediaQueryReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseMediaQueryReturnType "
            }
          ],
          "fileUrlPath": "src/observers/use-media-query.tsx",
          "releaseTag": "Public",
          "name": "UseMediaQueryReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseMediaQueryReturnType#getMatches:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMatches(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getMatches"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseMediaQueryReturnType#matches:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "matches: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "matches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useMemoObject:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useMemoObject<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(t: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-stable-getter.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "t",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useMemoObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useMergedClasses:function(1)",
          "docComment": "/**\n * Given two sets of props, merges their `class` and `className` properties. Duplicate classes are removed (order doesn't matter anyway).\n *\n * @param lhs - Classes of the first component\n *\n * @param rhs - Classes of the second component\n *\n * @returns A string representing all combined classes from both arguments.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useMergedClasses(lhsClass: "
            },
            {
              "kind": "Reference",
              "text": "C",
              "canonicalReference": "preact-prop-helpers!~C:type"
            },
            {
              "kind": "Content",
              "text": ", lhsClassName: "
            },
            {
              "kind": "Reference",
              "text": "C",
              "canonicalReference": "preact-prop-helpers!~C:type"
            },
            {
              "kind": "Content",
              "text": ", rhsClass: "
            },
            {
              "kind": "Reference",
              "text": "C",
              "canonicalReference": "preact-prop-helpers!~C:type"
            },
            {
              "kind": "Content",
              "text": ", rhsClassName: "
            },
            {
              "kind": "Reference",
              "text": "C",
              "canonicalReference": "preact-prop-helpers!~C:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-merged-classes.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "lhsClass",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "lhsClassName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "rhsClass",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "rhsClassName",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "useMergedClasses"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useMergedProps:function(1)",
          "docComment": "/**\n * Given two sets of props, merges them and returns the result.\n *\n * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.\n *\n * @param lhs2 - \n *\n * @param rhs2 - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useMergedProps<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": ">(...allProps: "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<E>[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-merged-props.tsx",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "allProps",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useMergedProps"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useMergedRefs:function(1)",
          "docComment": "/**\n * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.\n *\n * @param lhs - \n *\n * @param rhs - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useMergedRefs<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": ">(rhs: "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<E>[\"ref\"]"
            },
            {
              "kind": "Content",
              "text": ", lhs: "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<E>[\"ref\"]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RefObject",
              "canonicalReference": "preact!RefObject:type"
            },
            {
              "kind": "Content",
              "text": "<E> | import(\"preact\")."
            },
            {
              "kind": "Reference",
              "text": "RefCallback",
              "canonicalReference": "preact!RefCallback:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-merged-refs.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "rhs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "lhs",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useMergedRefs"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useMergedStyles:function(1)",
          "docComment": "/**\n * Merges two style objects, returning the result.\n *\n * @param style - The user-given style prop for this component\n *\n * @param obj - The CSS properties you want added to the user-given style\n *\n * @returns A CSS object containing the properties of both objects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useMergedStyles(lhs: "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": ">[\"style\"]"
            },
            {
              "kind": "Content",
              "text": ", rhs: "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": ">[\"style\"]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ElementProps",
              "canonicalReference": "preact-prop-helpers!ElementProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": ">[\"style\"]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-merged-styles.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "lhs",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "rhs",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "name": "useMergedStyles"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useModal:function(1)",
          "docComment": "/**\n * Combines dismissal hooks and focus trap hooks into one.\n *\n * Another in the \"complete\" series, alongside list/grid navigation and dismissal itself.\n *\n * Use for dialogs, menus, etc. Anything that can be dismissed and might trap focus, basically.\n *\n * @param param0 - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useModal<Listeners extends "
            },
            {
              "kind": "Reference",
              "text": "DismissListenerTypes",
              "canonicalReference": "preact-prop-helpers!DismissListenerTypes:type"
            },
            {
              "kind": "Content",
              "text": ", FocusContainerElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ dismissParameters, escapeDismissParameters, "
            },
            {
              "kind": "Reference",
              "text": "focusTrapParameters",
              "canonicalReference": "preact-prop-helpers!UseModalParameters#focusTrapParameters"
            },
            {
              "kind": "Content",
              "text": ": { trapActive, ...focusTrapParameters } }: "
            },
            {
              "kind": "Reference",
              "text": "UseModalParameters",
              "canonicalReference": "preact-prop-helpers!UseModalParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<Listeners>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseModalReturnType",
              "canonicalReference": "preact-prop-helpers!UseModalReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<FocusContainerElement, SourceElement, PopupElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-modal.tsx",
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ dismissParameters, escapeDismissParameters, focusTrapParameters: { trapActive, ...focusTrapParameters } }",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Listeners",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "FocusContainerElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SourceElement",
              "constraintTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useModal"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseModalParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseModalParameters<Listeners extends "
            },
            {
              "kind": "Reference",
              "text": "DismissListenerTypes",
              "canonicalReference": "preact-prop-helpers!DismissListenerTypes:type"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseDismissParameters",
              "canonicalReference": "preact-prop-helpers!UseDismissParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<Listeners>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-modal.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Listeners",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseModalParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseModalParameters#focusTrapParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTrapParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "UseFocusTrapParameters",
                  "canonicalReference": "preact-prop-helpers!UseFocusTrapParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, any>[\"focusTrapParameters\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "focusTrapParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseModalReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseModalReturnType<FocusContainerElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", SourceElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", PopupElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseDismissReturnType",
              "canonicalReference": "preact-prop-helpers!UseDismissReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<SourceElement, PopupElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-use/use-modal.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "FocusContainerElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SourceElement",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PopupElement",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseModalReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseModalReturnType#focusTrapReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTrapReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseFocusTrapReturnType",
                  "canonicalReference": "preact-prop-helpers!UseFocusTrapReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<FocusContainerElement>>[\"focusTrapReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "focusTrapReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseModalReturnType#propsFocusContainer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsFocusContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<FocusContainerElement>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsFocusContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 9,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useMutationObserver:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useMutationObserver<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ refElementParameters, "
            },
            {
              "kind": "Reference",
              "text": "mutationObserverParameters",
              "canonicalReference": "preact-prop-helpers!UseMutationObserverParameters#mutationObserverParameters"
            },
            {
              "kind": "Content",
              "text": ": { attributeFilter, subtree, onChildList, characterDataOldValue, onCharacterData, onAttributes, attributeOldValue } }: "
            },
            {
              "kind": "Reference",
              "text": "UseMutationObserverParameters",
              "canonicalReference": "preact-prop-helpers!UseMutationObserverParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    refElementReturn: {\n        getElement(): E | null;\n    };\n    mutationObserverReturn: {};\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-mutation-observer.tsx",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ refElementParameters, mutationObserverParameters: { attributeFilter, subtree, onChildList, characterDataOldValue, onCharacterData, onAttributes, attributeOldValue } }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useMutationObserver"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseMutationObserverParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseMutationObserverParameters<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRefElementParameters",
              "canonicalReference": "preact-prop-helpers!UseRefElementParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/observers/use-mutation-observer.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseMutationObserverParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseMutationObserverParameters#mutationObserverParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mutationObserverParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onChildList: null | ((info: {\n            addedNodes: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeList",
                  "canonicalReference": "!NodeList:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n            removedNodes: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeList",
                  "canonicalReference": "!NodeList:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        }) => void);\n        onAttributes: null | ((info: {\n            attributeName: string | null;\n            attributeNamespace: string | null;\n            oldValue?: string | null;\n        }) => void);\n        onCharacterData: null | ((info: "
                },
                {
                  "kind": "Reference",
                  "text": "MutationRecord",
                  "canonicalReference": "!MutationRecord:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void);\n        subtree: boolean;\n        characterDataOldValue: boolean;\n        attributeOldValue: boolean;\n        attributeFilter: string | string[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mutationObserverParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!usePaginatedChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function usePaginatedChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "info",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildParameters#info"
            },
            {
              "kind": "Content",
              "text": ": { index }, "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "paginatedChildContext",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildContext#paginatedChildContext"
            },
            {
              "kind": "Content",
              "text": ": { parentIsPaginated, getDefaultPaginationVisible } } }: "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildParameters",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildReturn",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildReturn:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-paginated-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info: { index }, context: { paginatedChildContext: { parentIsPaginated, getDefaultPaginationVisible } } }",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "usePaginatedChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePaginatedChildContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePaginatedChildContext "
            }
          ],
          "fileUrlPath": "src/component-detail/use-paginated-children.tsx",
          "releaseTag": "Public",
          "name": "UsePaginatedChildContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildContext#paginatedChildContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paginatedChildContext: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        parentIsPaginated: boolean;\n        getDefaultPaginationVisible(i: number): boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paginatedChildContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePaginatedChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePaginatedChildParameters "
            }
          ],
          "fileUrlPath": "src/component-detail/use-paginated-children.tsx",
          "releaseTag": "Public",
          "name": "UsePaginatedChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UsePaginatedChildContext",
                  "canonicalReference": "preact-prop-helpers!UsePaginatedChildContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildParameters#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        index: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!usePaginatedChildren:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function usePaginatedChildren<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildrenInfo",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "managedChildrenReturn",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#managedChildrenReturn"
            },
            {
              "kind": "Content",
              "text": ": { getChildren }, "
            },
            {
              "kind": "Reference",
              "text": "linearNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#linearNavigationParameters"
            },
            {
              "kind": "Content",
              "text": ": { indexDemangler }, "
            },
            {
              "kind": "Reference",
              "text": "paginatedChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#paginatedChildrenParameters"
            },
            {
              "kind": "Content",
              "text": ": { paginationMax, paginationMin }, "
            },
            {
              "kind": "Reference",
              "text": "rovingTabIndexReturn",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#rovingTabIndexReturn"
            },
            {
              "kind": "Content",
              "text": ": { getTabbableIndex, setTabbableIndex }, "
            },
            {
              "kind": "Reference",
              "text": "refElementReturn",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#refElementReturn"
            },
            {
              "kind": "Content",
              "text": ": { getElement } }: "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, TabbableChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-paginated-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 21,
            "endIndex": 22
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ managedChildrenReturn: { getChildren }, linearNavigationParameters: { indexDemangler }, paginatedChildrenParameters: { paginationMax, paginationMin }, rovingTabIndexReturn: { getTabbableIndex, setTabbableIndex }, refElementReturn: { getElement } }",
              "parameterTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 20
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "usePaginatedChildren"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePaginatedChildrenInfo<TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/use-paginated-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UsePaginatedChildrenInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenInfo#setChildCountIfPaginated:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setChildCountIfPaginated(count: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "count",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setChildCountIfPaginated"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenInfo#setPaginationVisible:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setPaginationVisible(visible: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visible",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setPaginationVisible"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePaginatedChildrenParameters<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UsePaginatedChildrenInfo",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-paginated-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UsePaginatedChildrenParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#linearNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linearNavigationParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseLinearNavigationParameters",
                  "canonicalReference": "preact-prop-helpers!UseLinearNavigationParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, TabbableChildElement, M>[\"linearNavigationParameters\"], \"indexDemangler\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linearNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#managedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>[\"managedChildrenReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#paginatedChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paginatedChildrenParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        paginationMin: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>;\n        paginationMax: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paginatedChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenParameters#rovingTabIndexReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, TabbableChildElement, M>[\"rovingTabIndexReturn\"], \"getTabbableIndex\" | \"setTabbableIndex\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePaginatedChildrenReturnType "
            }
          ],
          "fileUrlPath": "src/component-detail/use-paginated-children.tsx",
          "releaseTag": "Public",
          "name": "UsePaginatedChildrenReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UsePaginatedChildContext",
                  "canonicalReference": "preact-prop-helpers!UsePaginatedChildContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenReturnType#managedChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onChildrenCountChange: (count: number) => void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenReturnType#paginatedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paginatedChildrenReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        refreshPagination: (min: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>, max: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>) => void;\n        childCount: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paginatedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePaginatedChildReturn:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePaginatedChildReturn<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-paginated-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UsePaginatedChildReturn",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildReturn#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UsePaginatedChildrenInfo",
                  "canonicalReference": "preact-prop-helpers!UsePaginatedChildrenInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>, \"setPaginationVisible\" | \"setChildCountIfPaginated\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildReturn#paginatedChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "paginatedChildReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        paginatedVisible: boolean;\n        isPaginated: boolean;\n        hideBecausePaginated: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "paginatedChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePaginatedChildReturn#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!usePassiveState:function(1)",
          "docComment": "/**\n * Similar to `useState`, but for values that aren't \"render-important\" &ndash; updates don't cause a re-render and so the value shouldn't be used during render (though it certainly can, at least by re-rendering again).\n *\n * To compensate for this, you should pass a `useEffect`-esque callback that is run whenever the value changes. Just like `useEffect`, this callback can return a cleanup function that's run before the value changes. If you would like to re-render when the value changes (or, say, when the value meets some criteria), this is where you'll want to put in a call to a `setState` function.\n *\n * To summarize, it's like a `useState`-`useEffect` mashup:\n *\n * 1. It's like `useState`, except this version of `setState` doesn't re-render the whole component 2. It's like `useState`, except you can run a function when the value changes that optionally returns a cleanup function 3. It's like `useEffect`, except you trigger the effect function \"remotely\" instead of it running after rendering 4. It's like `useEffect`, except the single \"dependency\" is based on your calls to `setState`\n *\n * Note that while calling `setState` doesn't cause any re-renders, you can do that within your `onChange` function, called whenever the value changes via that `setState`.\n *\n * @param onChange - The \"effect\" function to run when the value changes. Effectively the same as `useEffect`'s \"effect\" function. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.\n *\n * @param getInitialValue - If provided, the effect will be invoked once with this value on mount. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.\n *\n * @param customDebounceRendering - By default, changes to passive state are delayed by one tick so that we only check for changes in a similar way to Preact. You can override this to, for example, always run immediately instead.\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function usePassiveState<T, R>(onChange: "
            },
            {
              "kind": "Reference",
              "text": "Nullable",
              "canonicalReference": "preact-prop-helpers!Nullable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OnPassiveStateChange",
              "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
            },
            {
              "kind": "Content",
              "text": "<T, R>>"
            },
            {
              "kind": "Content",
              "text": ", getInitialValue?: "
            },
            {
              "kind": "Content",
              "text": "() => T"
            },
            {
              "kind": "Content",
              "text": ", customDebounceRendering?: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "debounceRendering",
              "canonicalReference": "preact-prop-helpers!debounceRendering:function"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly [getStateStable: () => T, setStateStable: "
            },
            {
              "kind": "Reference",
              "text": "PassiveStateUpdater",
              "canonicalReference": "preact-prop-helpers!PassiveStateUpdater:type"
            },
            {
              "kind": "Content",
              "text": "<T, R>]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-passive-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "onChange",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "getInitialValue",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            },
            {
              "parameterName": "customDebounceRendering",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "usePassiveState"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!usePersistentState:function(1)",
          "docComment": "/**\n * Use module augmentation to get the correct types for this function.\n *\n * ```` declare module 'preact-prop-helpers' { interface PersistentStates { numberState: number; stringState: string; } } ````\n *\n * @param key - \n *\n * @param initialValue - \n *\n * @param fromString - \n *\n * @param toString - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function usePersistentState<Key extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "PersistentStates",
              "canonicalReference": "preact-prop-helpers!PersistentStates:interface"
            },
            {
              "kind": "Content",
              "text": ", T = "
            },
            {
              "kind": "Reference",
              "text": "PersistentStates",
              "canonicalReference": "preact-prop-helpers!PersistentStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]"
            },
            {
              "kind": "Content",
              "text": ">(key: "
            },
            {
              "kind": "Content",
              "text": "Key | null"
            },
            {
              "kind": "Content",
              "text": ", initialValue: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", fromString?: "
            },
            {
              "kind": "Content",
              "text": "((value: string) => T)"
            },
            {
              "kind": "Content",
              "text": ", toString?: "
            },
            {
              "kind": "Content",
              "text": "((value: T) => string)"
            },
            {
              "kind": "Content",
              "text": ", storage?: "
            },
            {
              "kind": "Reference",
              "text": "Storage",
              "canonicalReference": "!Storage:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[T, "
            },
            {
              "kind": "Reference",
              "text": "StateUpdater",
              "canonicalReference": "preact-hooks!StateUpdater:type"
            },
            {
              "kind": "Content",
              "text": "<T>, () => T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-persistent-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "initialValue",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "fromString",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "toString",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true
            },
            {
              "parameterName": "storage",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "name": "usePersistentState"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!usePortalChildren:function(1)",
          "docComment": "/**\n * Very basic hook for a root-level component to use to allow any children within the whole app to push children to a portal somewhere.\n *\n * Returns the portal (as `children`, and functions to add, remove, or update a child to the portaled area)\n *\n * TODO: Can't push a child until after the very first `useLayoutEffect`\n *\n * @param param0 - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function usePortalChildren({ target }: "
            },
            {
              "kind": "Reference",
              "text": "UsePortalChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UsePortalChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    children: import(\"preact\")."
            },
            {
              "kind": "Reference",
              "text": "VNode",
              "canonicalReference": "preact!VNode:interface"
            },
            {
              "kind": "Content",
              "text": "<any> | null;\n    pushChild: "
            },
            {
              "kind": "Reference",
              "text": "PushPortalChild",
              "canonicalReference": "preact-prop-helpers!PushPortalChild:type"
            },
            {
              "kind": "Content",
              "text": ";\n    updateChild: "
            },
            {
              "kind": "Reference",
              "text": "UpdatePortalChild",
              "canonicalReference": "preact-prop-helpers!UpdatePortalChild:type"
            },
            {
              "kind": "Content",
              "text": ";\n    removeChild: "
            },
            {
              "kind": "Reference",
              "text": "RemovePortalChild",
              "canonicalReference": "preact-prop-helpers!RemovePortalChild:type"
            },
            {
              "kind": "Content",
              "text": ";\n    portalElement: "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-portal-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ target }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "usePortalChildren"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePortalChildrenParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePortalChildrenParameters "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-portal-children.tsx",
          "releaseTag": "Public",
          "name": "UsePortalChildrenParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePortalChildrenParameters#target:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePortalChildrenReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePortalChildrenReturnType "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-portal-children.tsx",
          "releaseTag": "Public",
          "name": "UsePortalChildrenReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePortalChildrenReturnType#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "VNode",
                  "canonicalReference": "preact-prop-helpers!VNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePortalChildrenReturnType#portalElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "portalElement: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "portalElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePortalChildrenReturnType#pushChild:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pushChild: "
                },
                {
                  "kind": "Reference",
                  "text": "PushPortalChild",
                  "canonicalReference": "preact-prop-helpers!PushPortalChild:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pushChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePortalChildrenReturnType#removeChild:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeChild: "
                },
                {
                  "kind": "Reference",
                  "text": "RemovePortalChild",
                  "canonicalReference": "preact-prop-helpers!RemovePortalChild:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "removeChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePortalChildrenReturnType#updateChild:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateChild: "
                },
                {
                  "kind": "Reference",
                  "text": "UpdatePortalChild",
                  "canonicalReference": "preact-prop-helpers!UpdatePortalChild:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "updateChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!usePress:function(1)",
          "docComment": "/**\n * Adds the necessary event handlers to create a \"press\"-like event for any element, whether it's a native &lt;button> or regular &lt;div>, and allows for a \"long press\" that can be used to, e.g., show a tooltip *instead* of activating a press.\n *\n * Notably, the following cases are covered: * The target element is properly focused, even on iOS Safari (*especially* on iOS Safari) * Double-clicks won't select text, it just presses the button twice. * Text selection that happens to end/start with this element won't invoke a press. * The `enter` key immediately invokes a press (by default just once until pressed again), while the `space` key invokes it when released, if focus hasn't moved away from the button. * Haptic feedback (on, like, the one browser combination that supports it &mdash; this can be disabled app-wide with `setButtonVibrate`)\n *\n * In addition, returns a \"more accurate\" CSS `active` and `hover`; more accurate in that `hover` won't mess up mobile devices that see `hover` and mess up your click events, and in that `active` accurately displays when a press would occur or not.\n *\n * @param onClickSync - \n *\n * @param exclude - Whether the polyfill shouldn't apply (can specify for specific interactions)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function usePress<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">(args: "
            },
            {
              "kind": "Reference",
              "text": "UsePressParameters",
              "canonicalReference": "preact-prop-helpers!UsePressParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UsePressReturnType",
              "canonicalReference": "preact-prop-helpers!UsePressReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-press.tsx",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "usePress"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePressParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePressParameters<E extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-use/use-press.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UsePressParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePressParameters#pressParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pressParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onPressingChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean, "
                },
                {
                  "kind": "Reference",
                  "text": "PressChangeEventReason",
                  "canonicalReference": "preact-prop-helpers!PressChangeEventReason:type"
                },
                {
                  "kind": "Content",
                  "text": "<E>>>;\n        onPressSync: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<((e: "
                },
                {
                  "kind": "Reference",
                  "text": "PressEventReason",
                  "canonicalReference": "preact-prop-helpers!PressEventReason:type"
                },
                {
                  "kind": "Content",
                  "text": "<E>) => void)>;\n        excludeSpace?(): boolean;\n        excludeEnter?(): boolean;\n        excludePointer?(): boolean;\n        focusSelf(element: E): void;\n        allowRepeatPresses?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>;\n        longPressThreshold?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pressParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 16
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePressParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<E>[\"refElementReturn\"], \"getElement\">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UsePressReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UsePressReturnType<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-use/use-press.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UsePressReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePressReturnType#pressReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pressReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        pressing: boolean;\n        getIsPressing(): boolean;\n        longPress: boolean | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pressReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UsePressReturnType#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<E>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useRandomDualIds:function(1)",
          "docComment": "/**\n * While `useRandomId` allows the referencer to use the source's ID, sometimes you also want the reverse too (e.g. I `aria-label` you, you `aria-controls` me. That sort of thing).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useRandomDualIds<InputElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", LabelElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ randomIdInputParameters, randomIdLabelParameters, }: "
            },
            {
              "kind": "Reference",
              "text": "UseRandomDualIdsParameters",
              "canonicalReference": "preact-prop-helpers!UseRandomDualIdsParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseRandomDualIdsReturnType",
              "canonicalReference": "preact-prop-helpers!UseRandomDualIdsReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<InputElement, LabelElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-random-dual-ids.tsx",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ randomIdInputParameters, randomIdLabelParameters, }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "InputElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "LabelElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useRandomDualIds"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRandomDualIdsParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRandomDualIdsParameters "
            }
          ],
          "fileUrlPath": "src/component-use/use-random-dual-ids.tsx",
          "releaseTag": "Public",
          "name": "UseRandomDualIdsParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomDualIdsParameters#randomIdInputParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "randomIdInputParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "UseRandomIdParameters",
                  "canonicalReference": "preact-prop-helpers!UseRandomIdParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"randomIdParameters\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "randomIdInputParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomDualIdsParameters#randomIdLabelParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "randomIdLabelParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "UseRandomIdParameters",
                  "canonicalReference": "preact-prop-helpers!UseRandomIdParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"randomIdParameters\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "randomIdLabelParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRandomDualIdsReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRandomDualIdsReturnType<InputElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", LabelElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-use/use-random-dual-ids.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "InputElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "LabelElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRandomDualIdsReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomDualIdsReturnType#propsInput:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsInput: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<InputElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomDualIdsReturnType#propsLabel:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsLabel: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<LabelElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomDualIdsReturnType#randomIdInputReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "randomIdInputReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseRandomIdReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRandomIdReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<InputElement, LabelElement>[\"randomIdReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "randomIdInputReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomDualIdsReturnType#randomIdLabelReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "randomIdLabelReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseRandomIdReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRandomIdReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<LabelElement, InputElement>[\"randomIdReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "randomIdLabelReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useRandomId:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useRandomId<S extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "randomIdParameters",
              "canonicalReference": "preact-prop-helpers!UseRandomIdParameters#randomIdParameters"
            },
            {
              "kind": "Content",
              "text": ": { prefix, otherReferencerProp } }: "
            },
            {
              "kind": "Reference",
              "text": "UseRandomIdParameters",
              "canonicalReference": "preact-prop-helpers!UseRandomIdParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseRandomIdReturnType",
              "canonicalReference": "preact-prop-helpers!UseRandomIdReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<S, T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-use/use-random-id.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ randomIdParameters: { prefix, otherReferencerProp } }",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useRandomId"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRandomIdParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRandomIdParameters "
            }
          ],
          "fileUrlPath": "src/component-use/use-random-id.tsx",
          "releaseTag": "Public",
          "name": "UseRandomIdParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomIdParameters#randomIdParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "randomIdParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        prefix: string;\n        otherReferencerProp: keyof "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<any> | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "randomIdParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRandomIdReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRandomIdReturnType<S extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-use/use-random-id.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRandomIdReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomIdReturnType#propsReferencer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsReferencer: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsReferencer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomIdReturnType#propsSource:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsSource: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<S>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRandomIdReturnType#randomIdReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "randomIdReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        id: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "randomIdReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRearrangeableChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRearrangeableChildInfo extends "
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "name": "UseRearrangeableChildInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useRearrangeableChildren:function(1)",
          "docComment": "/**\n * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.\n *\n * *This is **separate** from \"managed\" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*\n *\n * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler` functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned, this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.\n *\n * Besides the prop-modifying hook that's returned, the `sort` function that's returned will sort all children according to their value from the `getValue` argument you pass in.\n *\n * If you want to perform some re-ordering operation that's *not* a sort, you can manually re-map each child's position using `mangleMap` and `demangleMap`, which convert between sorted and unsorted index positions.\n *\n * Again, unlike some other hooks, **these children must be direct descendants**. This is because the prop-modifying hook inspects the given children, then re-creates them with new `key`s. Because keys are given special treatment and a child has no way of modifying its own key there's no other time or place this can happen other than exactly within the parent component's render function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useRearrangeableChildren<M extends "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "rearrangeableChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenParameters#rearrangeableChildrenParameters"
            },
            {
              "kind": "Content",
              "text": ": { getIndex, onRearranged }, "
            },
            {
              "kind": "Reference",
              "text": "managedChildrenReturn",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenParameters#managedChildrenReturn"
            },
            {
              "kind": "Content",
              "text": ": { getChildren } }: "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ rearrangeableChildrenParameters: { getIndex, onRearranged }, managedChildrenReturn: { getChildren } }",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useRearrangeableChildren"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenParameters:interface",
          "docComment": "/**\n * All of these functions **MUST** be stable across renders.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRearrangeableChildrenParameters<M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRearrangeableChildrenParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenParameters#managedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>[\"managedChildrenReturn\"], \"getChildren\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenParameters#rearrangeableChildrenParameters:member",
              "docComment": "/**\n * Must return, e.g., the row index of this child (Usually just an `index` prop)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rearrangeableChildrenParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "GetIndex",
                  "canonicalReference": "preact-prop-helpers!GetIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        onRearranged: null | (() => void);\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rearrangeableChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRearrangeableChildrenReturnType<M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRearrangeableChildrenReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenReturnType#rearrangeableChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rearrangeableChildrenReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        rearrange: (originalRows: M[], rowsInOrder: M[]) => void;\n        shuffle: () => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void> | void;\n        reverse: () => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void> | void;\n        indexMangler: (n: number) => number;\n        indexDemangler: (n: number) => number;\n        useRearrangedChildren: (children: "
                },
                {
                  "kind": "Reference",
                  "text": "VNode",
                  "canonicalReference": "preact-prop-helpers!VNode:type"
                },
                {
                  "kind": "Content",
                  "text": "[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "VNode",
                  "canonicalReference": "preact-prop-helpers!VNode:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n        toJsonArray(transform?: (info: M) => object): object;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rearrangeableChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useRefElement:function(1)",
          "docComment": "/**\n * Allows accessing the element a ref references as soon as it does so. *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement, adding a RefCallback and merging it with any existing ref that existed on the props.\n *\n * Don't forget to provide the Element as the type argument!\n *\n * @returns The element, and the sub-hook that makes it retrievable.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useRefElement<T extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": ">(args: "
            },
            {
              "kind": "Reference",
              "text": "UseRefElementParameters",
              "canonicalReference": "preact-prop-helpers!UseRefElementParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseRefElementReturnType",
              "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-ref-element.tsx",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useRefElement"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRefElementParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRefElementParameters<T> "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-ref-element.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRefElementParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRefElementParameters#refElementParameters:member",
              "docComment": "/**\n * For the sake of convenience, this one is optional, since using this hook is so common, but using its parameter options is so uncommon, and it's absense isn't usually because it was forgotten, it's because it doesn't matter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementParameters?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onElementChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<T | null, never>;\n        onMount?: (element: T) => void;\n        onUnmount?: (element: T) => void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "refElementParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRefElementReturnType<T extends "
            },
            {
              "kind": "Reference",
              "text": "EventTarget",
              "canonicalReference": "!EventTarget:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-ref-element.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRefElementReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRefElementReturnType#propsStable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsStable: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsStable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRefElementReturnType#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getElement(): T | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useRovingTabIndex:function(1)",
          "docComment": "/**\n * Implements a roving tabindex system where only one \"focusable\" component in a set is able to receive a tab focus. *Which* of those elements receives focus is determined by you, but it's recommended to offload that logic then to another hook, like `useLinearNavigation`, which lets you change the tabbable element with the arrow keys, `useTypeaheadNavigation`, which lets you change the tabbable index with typeahead, or `useListNavigation` if you just want everything bundled together.\n *\n * Note that the child hook returned by this function must be used by every child that uses this roving tabindex logic. The prop-modifying hook *that* hook returns should then be used on the child's element, as well as any other elements you'd like to be explicitly made untabbable too.\n *\n * `shouldFocusOnChange` should return true if focus is contained within whatever element contains the roving tab index. Generally as simple as the following:\n * ```\n * const [focusedInner, setFocusedInner] = useState(false);\n * const { useHasFocusProps } = useHasFocus<ParentElement>({ setFocusedInner });\n * const focusOnChange = (focusedInner != false);\n * ```\n *\n * It's not included here because `useRovingTabIndex` doesn't know anything about the container element, only children elements. And just as well! Children should be allowed at the root, regardless of if it's the whole app or just a given component.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useRovingTabIndex<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "managedChildrenReturn",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters#managedChildrenReturn"
            },
            {
              "kind": "Content",
              "text": ": { getChildren }, "
            },
            {
              "kind": "Reference",
              "text": "rovingTabIndexParameters",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters#rovingTabIndexParameters"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "focusSelfParent",
              "canonicalReference": "preact-prop-helpers!~__type#focusSelfParent"
            },
            {
              "kind": "Content",
              "text": ": focusSelfParentUnstable, untabbable, untabbableBehavior, initiallyTabbedIndex, onTabbableIndexChange }, "
            },
            {
              "kind": "Reference",
              "text": "refElementReturn",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters#refElementReturn"
            },
            {
              "kind": "Content",
              "text": ": { getElement }, ...void1 }: "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexParameters",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexReturnType",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 21
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ managedChildrenReturn: { getChildren }, rovingTabIndexParameters: { focusSelfParent: focusSelfParentUnstable, untabbable, untabbableBehavior, initiallyTabbedIndex, onTabbableIndexChange }, refElementReturn: { getElement }, ...void1 }",
              "parameterTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 18
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useRovingTabIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useRovingTabIndexChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useRovingTabIndexChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "info",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildParameters#info"
            },
            {
              "kind": "Content",
              "text": ": { index, "
            },
            {
              "kind": "Reference",
              "text": "untabbable",
              "canonicalReference": "preact-prop-helpers!~untabbable"
            },
            {
              "kind": "Content",
              "text": ": iAmUntabbable, ...void2 }, "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "rovingTabIndexContext",
              "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext#rovingTabIndexContext"
            },
            {
              "kind": "Content",
              "text": ": { giveParentFocusedElement, "
            },
            {
              "kind": "Reference",
              "text": "untabbable",
              "canonicalReference": "preact-prop-helpers!~__type#untabbable"
            },
            {
              "kind": "Content",
              "text": ": parentIsUntabbable, untabbableBehavior, reevaluateClosestFit, setTabbableIndex, getInitiallyTabbedIndex, parentFocusSelf } }, "
            },
            {
              "kind": "Reference",
              "text": "refElementReturn",
              "canonicalReference": "preact-prop-helpers!~refElementReturn"
            },
            {
              "kind": "Content",
              "text": ": { getElement }, ...void3 }: "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildParameters",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "returnTypeTokenRange": {
            "startIndex": 21,
            "endIndex": 23
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info: { index, untabbable: iAmUntabbable, ...void2 }, context: { rovingTabIndexContext: { giveParentFocusedElement, untabbable: parentIsUntabbable, untabbableBehavior, reevaluateClosestFit, setTabbableIndex, getInitiallyTabbedIndex, parentFocusSelf } }, refElementReturn: { getElement }, ...void3 }",
              "parameterTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 20
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useRovingTabIndexChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRovingTabIndexChildInfo<TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ManagedChildInfo",
              "canonicalReference": "preact-prop-helpers!ManagedChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<number>, \"index\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRovingTabIndexChildInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo#focusSelf:member(1)",
              "docComment": "/**\n * When we navigate to a child and focus it, we need to know how that child wants to be focused. Generally, this is just getElement().focus(), but you're allowed to supply anything you want here. Grid rows, for example, don't directly focus themselves but instead call one of their cell's `focusSelf`.\n *\n * This is used when the tabbable index changes (we auto-focus the newly tabbable element if applicable), and also by the `focusSelf` value returned by the parent (i.e. `parent.focusSelf` calls one child's `focusSelf`)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusSelf(e: "
                },
                {
                  "kind": "Content",
                  "text": "TabbableChildElement"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "e",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "focusSelf"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo#getElement:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getElement(): "
                },
                {
                  "kind": "Content",
                  "text": "TabbableChildElement | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getElement"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo#getLocallyTabbable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLocallyTabbable: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getLocallyTabbable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo#setLocallyTabbable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLocallyTabbable: "
                },
                {
                  "kind": "Reference",
                  "text": "StateUpdater",
                  "canonicalReference": "preact-hooks!StateUpdater:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setLocallyTabbable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo#untabbable:member",
              "docComment": "/**\n * If a child **exists** but **can't be tabbed to**, then set this to `true`.\n *\n * This cannot be calculated automatically. It's *possible* to catch something like `display: none` with some reflow-forcing `getComputedStyles` or something, but if the child is untabbable because it's disabled or staggered or paginated or something we just have no way of knowing. It could be untabbable for any arbitrary reason the user decides.\n *\n * If the child is **missing** instead (i.e. it does not exist), then there's no issue. You couldn't even supply this property because the child who would supply it is, by definition, missing. This is, to be clear, about **existing** children whomst are untabbable for any reason at all.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "untabbable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "untabbable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRovingTabIndexChildParameters<TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseRefElementReturnType",
              "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>, \"refElementReturn\">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseManagedChildParameters",
              "canonicalReference": "preact-prop-helpers!UseManagedChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M>, \"info\" | \"context\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRovingTabIndexChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildParameters#context:member",
              "docComment": "/**\n * The information provided by the parent hook\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "RovingTabIndexChildContext",
                  "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildParameters#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildParameters",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>[\"info\"], "
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexChildInfoKeys",
                  "canonicalReference": "preact-prop-helpers!~UseRovingTabIndexChildInfoKeys:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 15
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRovingTabIndexChildReturnType<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", _M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRovingTabIndexChildReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildReturnType#hasCurrentFocusParameters:member",
              "docComment": "/**\n * This is used to handle the case where a user clicks on an element or manually focuses it in some other way.\n *\n * We need to know if we're currently focused so that we can tell the parent to mark this child as the currently tabbable child.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCurrentFocusParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseHasCurrentFocusParameters",
                  "canonicalReference": "preact-prop-helpers!UseHasCurrentFocusParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>[\"hasCurrentFocusParameters\"], \"onCurrentFocusedInnerChanged\">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasCurrentFocusParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildReturnType#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>, \"getLocallyTabbable\" | \"setLocallyTabbable\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildReturnType#props:member",
              "docComment": "/**\n * *Unstable*\n *\n * The props that must be applied to this child in order for this hook to work.\n *\n * The object itself, as well as the properties within it, are unstable and should be rendered by the same component that uses this hook.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildReturnType#rovingTabIndexChildReturn:member",
              "docComment": "/**\n * Return information about the tabbable state of this child\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexChildReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        tabbable: boolean;\n        getTabbable(): boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRovingTabIndexParameters<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRovingTabIndexParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters#managedChildrenReturn:member",
              "docComment": "/**\n * When children mount/unmount, RTI needs access to all known children in case we unmounted the currently tabbable child\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>[\"managedChildrenReturn\"], \"getChildren\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexParameters#rovingTabIndexParameters:member",
              "docComment": "/**\n * The only parameters RTI needs directly is the initial index to be tabbable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        focusSelfParent(e: ParentElement | null): void;\n        initiallyTabbedIndex: number | null;\n        untabbable: boolean;\n        untabbableBehavior: \"focus-parent\" | \"leave-child-focused\";\n        onTabbableIndexChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<number | null, "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseRovingTabIndexReturnType<ParentElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", _M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-roving-tabindex.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseRovingTabIndexReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType#context:member",
              "docComment": "/**\n * STABLE\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "RovingTabIndexChildContext",
                  "canonicalReference": "preact-prop-helpers!RovingTabIndexChildContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType#managedChildrenParameters:member",
              "docComment": "/**\n * RTI runs logic when its children mount/unmount themselves\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenParameters",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TabbableChildElement>>[\"managedChildrenParameters\"], \"onChildrenMountChange\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ParentElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType#rovingTabIndexReturn:member",
              "docComment": "/**\n * Return information that lets the user update/query/focus the currently tabbable child\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        setTabbableIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "SetTabbableIndex",
                  "canonicalReference": "preact-prop-helpers!SetTabbableIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        getTabbableIndex: () => number | null;\n        focusSelf: (reason?: any) => void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useSearchParamState:function(1)",
          "docComment": "/**\n * Provides access to the requested Search Param's value\n *\n * Note that while this function is like usePassiveState (itself like useState and useEffect combined), the `setState` return function is, due to browser limitations, not syncronous, but that's like most calls to `setState` anyway I guess?\n *\n * @param paramKey - The name of the URL search parameter to reference\n *\n * @param type - The type of data encode/decode (`\"string\"` | `\"boolean\"` | `\"number\"` | `\"bigint\"`)\n *\n * @param onParamValueChanged - Will be called any time the requested Search Parameter's value changes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useSearchParamState<Key extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "key",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters#key"
            },
            {
              "kind": "Content",
              "text": ": paramKey, defaultReason, stringToValue, initialValue, onValueChange, valueToString }: "
            },
            {
              "kind": "Reference",
              "text": "UseSearchParamStateParameters",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<Key, "
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly [() => "
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key], "
            },
            {
              "kind": "Reference",
              "text": "SetParamWithHistory",
              "canonicalReference": "preact-prop-helpers!SetParamWithHistory:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]>]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-search-param-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ key: paramKey, defaultReason, stringToValue, initialValue, onValueChange, valueToString }",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useSearchParamState"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useSearchParamStateDeclarative:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useSearchParamStateDeclarative<Key extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": ">({ key, defaultReason, stringToValue, initialValue, valueToString }: "
            },
            {
              "kind": "Reference",
              "text": "OmitStrong",
              "canonicalReference": "preact-prop-helpers!OmitStrong:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseSearchParamStateParameters",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<Key, "
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]>, \"onValueChange\">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly ["
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key], "
            },
            {
              "kind": "Reference",
              "text": "SetParamWithHistory",
              "canonicalReference": "preact-prop-helpers!SetParamWithHistory:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]>, () => "
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-search-param-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ key, defaultReason, stringToValue, initialValue, valueToString }",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useSearchParamStateDeclarative"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSearchParamStateParameters<Key extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": ", T = "
            },
            {
              "kind": "Reference",
              "text": "SearchParamStates",
              "canonicalReference": "preact-prop-helpers!SearchParamStates:interface"
            },
            {
              "kind": "Content",
              "text": "[Key]"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-search-param-state.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "name": "UseSearchParamStateParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters#defaultReason:member",
              "docComment": "/**\n * How is the user's history modified when the state changes if not otherwise specified? \"`replace`\" is recommended unless you *really* have a good reason to clog up the back button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultReason?: "
                },
                {
                  "kind": "Content",
                  "text": "\"push\" | \"replace\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "defaultReason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters#initialValue:member",
              "docComment": "/**\n * If there is no valu in the URL for this state, then `initialValue` will be used instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialValue: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "initialValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "Key"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters#onValueChange:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onValueChange?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnParamValueChanged",
                  "canonicalReference": "preact-prop-helpers!OnParamValueChanged:type"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onValueChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters#stringToValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stringToValue: "
                },
                {
                  "kind": "Content",
                  "text": "((value: string | null) => T | null)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stringToValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSearchParamStateParameters#valueToString:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "valueToString?: "
                },
                {
                  "kind": "Content",
                  "text": "((value: T | null) => (string | null)) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "valueToString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useSingleSelection:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useSingleSelection<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "managedChildrenReturn",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters#managedChildrenReturn"
            },
            {
              "kind": "Content",
              "text": ": { getChildren }, "
            },
            {
              "kind": "Reference",
              "text": "rovingTabIndexReturn",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters#rovingTabIndexReturn"
            },
            {
              "kind": "Content",
              "text": ": { setTabbableIndex }, "
            },
            {
              "kind": "Reference",
              "text": "singleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters#singleSelectionParameters"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "onSelectedIndexChange",
              "canonicalReference": "preact-prop-helpers!~__type#onSelectedIndexChange"
            },
            {
              "kind": "Content",
              "text": ": onSelectedIndexChange_U, initiallySelectedIndex, ariaPropName, selectionMode } }: "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement, ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionReturnType",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 21
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ managedChildrenReturn: { getChildren }, rovingTabIndexReturn: { setTabbableIndex }, singleSelectionParameters: { onSelectedIndexChange: onSelectedIndexChange_U, initiallySelectedIndex, ariaPropName, selectionMode } }",
              "parameterTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 18
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useSingleSelection"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useSingleSelectionChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useSingleSelectionChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">(args: "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useSingleSelectionChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface",
          "docComment": "/**\n * Anything that's selectable must be tabbable, so we DO use rovingtabindex instead of just managedchildren\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSingleSelectionChildInfo<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseSingleSelectionChildInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo#getSelected:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSelected(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSelected"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo#selected:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo#setLocalSelected:member(1)",
              "docComment": "/**\n * The parent calls this to change the child's local state.\n *\n * When the `selectedIndex` changes, the relevant children's `setLocalSelected` are called (max of 2).\n *\n * @param selected - This is the selected child (out of all of them)\n *\n * @param direction - How far to the `selectedIndex` this child is\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLocalSelected(selected: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ", direction: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "direction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "setLocalSelected"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo#unselectable:member",
              "docComment": "/**\n * This is similar to `untabbable` for `useRovingTabIndex`, but for selection.\n *\n * Disables selecting this child. Being `untabbable` must imply being `unselectable`, but you can of course have something that's unselectable but not untabbable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unselectable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "unselectable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSingleSelectionChildParameters<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseSingleSelectionChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionContext",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildParameters#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<E>, "
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionChildInfoKeys",
                  "canonicalReference": "preact-prop-helpers!~UseSingleSelectionChildInfoKeys:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSingleSelectionChildReturnType<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseChildrenHaveFocusChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseSingleSelectionChildReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildReturnType#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<E>, \"getSelected\" | \"setLocalSelected\" | \"selected\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildReturnType#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<E>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildReturnType#singleSelectionChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "singleSelectionChildReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        selected: boolean;\n        getSelected(): boolean;\n        selectedOffset: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>;\n        getSelectedOffset: () => (number | null);\n        setThisOneSelected: (event: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "singleSelectionChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSingleSelectionContext "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "name": "UseSingleSelectionContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext#singleSelectionContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "singleSelectionContext: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionParameters",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, any, any>[\"singleSelectionParameters\"], \"ariaPropName\" | \"selectionMode\"> & {\n        onSelectedIndexChange: "
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionParameters",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, any, any>[\"singleSelectionParameters\"][\"onSelectedIndexChange\"];\n        getSelectedIndex(): number | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "singleSelectionContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useSingleSelectionDeclarative:function(1)",
          "docComment": "/**\n * Let's face it, declarative is nicer to use than imperative, so this is a shortcut.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useSingleSelectionDeclarative<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", _M extends "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "singleSelectionReturn",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionDeclarativeParameters#singleSelectionReturn"
            },
            {
              "kind": "Content",
              "text": ": { changeSelectedIndex }, "
            },
            {
              "kind": "Reference",
              "text": "singleSelectionDeclarativeParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionDeclarativeParameters#singleSelectionDeclarativeParameters"
            },
            {
              "kind": "Content",
              "text": ": { selectedIndex, onSelectedIndexChange } }: "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionDeclarativeParameters",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionDeclarativeParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    singleSelectionParameters: {\n        onSelectedIndexChange: "
            },
            {
              "kind": "Reference",
              "text": "EnhancedEventHandler",
              "canonicalReference": "preact-prop-helpers!EnhancedEventHandler:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": ", {\n            selectedIndex: number;\n        }> | null;\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 19
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ singleSelectionReturn: { changeSelectedIndex }, singleSelectionDeclarativeParameters: { selectedIndex, onSelectedIndexChange } }",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useSingleSelectionDeclarative"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSingleSelectionDeclarativeParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSingleSelectionDeclarativeParameters "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "name": "UseSingleSelectionDeclarativeParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionDeclarativeParameters#singleSelectionDeclarativeParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "singleSelectionDeclarativeParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        selectedIndex: number | null;\n        onSelectedIndexChange: null | "
                },
                {
                  "kind": "Reference",
                  "text": "EnhancedEventHandler",
                  "canonicalReference": "preact-prop-helpers!EnhancedEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": ", {\n            selectedIndex: number;\n        }>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "singleSelectionDeclarativeParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionDeclarativeParameters#singleSelectionReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "singleSelectionReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionReturnType",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, any>[\"singleSelectionReturn\"], \"changeSelectedIndex\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "singleSelectionReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSingleSelectionParameters<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseSingleSelectionParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters#managedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>>[\"managedChildrenReturn\"], \"getChildren\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters#rovingTabIndexReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrChildElement, ChildElement, M>[\"rovingTabIndexReturn\"], \"setTabbableIndex\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionParameters#singleSelectionParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "singleSelectionParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        initiallySelectedIndex: number | null;\n        onSelectedIndexChange: null | "
                },
                {
                  "kind": "Reference",
                  "text": "SelectedIndexChangeHandler",
                  "canonicalReference": "preact-prop-helpers!SelectedIndexChangeHandler:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        selectionMode: \"focus\" | \"activation\" | \"disabled\";\n        ariaPropName: `aria-${\"pressed\" | \"selected\" | \"checked\" | `current-${\"page\" | \"step\" | \"date\" | \"time\" | \"location\" | \"true\"}`}` | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "singleSelectionParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSingleSelectionReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSingleSelectionReturnType<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseSingleSelectionChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-single-selection.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseSingleSelectionReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionReturnType#childrenHaveFocusParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childrenHaveFocusParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseChildrenHaveFocusParameters",
                  "canonicalReference": "preact-prop-helpers!UseChildrenHaveFocusParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>[\"childrenHaveFocusParameters\"], \"onCompositeFocusChange\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "childrenHaveFocusParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseSingleSelectionContext",
                  "canonicalReference": "preact-prop-helpers!UseSingleSelectionContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSingleSelectionReturnType#singleSelectionReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "singleSelectionReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        changeSelectedIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "PassiveStateUpdater",
                  "canonicalReference": "preact-prop-helpers!PassiveStateUpdater:type"
                },
                {
                  "kind": "Content",
                  "text": "<number | null, "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": ">;\n        getSelectedIndex(): number | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "singleSelectionReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSortableChildInfo extends "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "name": "UseSortableChildInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseSortableChildInfo#getSortValue:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSortValue(): "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSortValue"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useSortableChildren:function(1)",
          "docComment": "/**\n * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.\n *\n * *This is **separate** from \"managed\" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*\n *\n * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler` functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned, this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.\n *\n * Besides the prop-modifying hook that's returned, the `sort` function that's returned will sort all children according to their value from the `getValue` argument you pass in.\n *\n * If you want to perform some re-ordering operation that's *not* a sort, you can manually re-map each child's position using `mangleMap` and `demangleMap`, which convert between sorted and unsorted index positions.\n *\n * Again, unlike some other hooks, **these children must be direct descendants**. This is because the prop-modifying hook inspects the given children, then re-creates them with new `key`s. Because keys are given special treatment and a child has no way of modifying its own key there's no other time or place this can happen other than exactly within the parent component's render function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useSortableChildren<M extends "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseSortableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": ">({ rearrangeableChildrenParameters, "
            },
            {
              "kind": "Reference",
              "text": "sortableChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenParameters#sortableChildrenParameters"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "compare",
              "canonicalReference": "preact-prop-helpers!~__type#compare"
            },
            {
              "kind": "Content",
              "text": ": userCompare }, "
            },
            {
              "kind": "Reference",
              "text": "managedChildrenReturn",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenParameters#managedChildrenReturn"
            },
            {
              "kind": "Content",
              "text": ": { getChildren } }: "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseSortableChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ rearrangeableChildrenParameters, sortableChildrenParameters: { compare: userCompare }, managedChildrenReturn: { getChildren } }",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useSortableChildren"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSortableChildrenParameters:interface",
          "docComment": "/**\n * All of these functions **MUST** be stable across renders.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSortableChildrenParameters<M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseSortableChildrenParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenParameters#sortableChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sortableChildrenParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        compare: null | "
                },
                {
                  "kind": "Reference",
                  "text": "Compare",
                  "canonicalReference": "preact-prop-helpers!Compare:type"
                },
                {
                  "kind": "Content",
                  "text": "<M>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sortableChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseSortableChildrenReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseSortableChildrenReturnType<M extends "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "UseRearrangeableChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseRearrangeableChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<M>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-sortable-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseSortableChildrenReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseSortableChildrenReturnType#sortableChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sortableChildrenReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        sort: (direction: \"ascending\" | \"descending\") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void> | void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sortableChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useStableCallback:function(1)",
          "docComment": "/**\n * Alternate useCallback() which always returns the same (wrapped) function reference so that it can be excluded from the dependency arrays of `useEffect` and friends.\n *\n * In general, just pass the function you want to be stable (but you can't use it during render, so be careful!). Alternatively, if you need a stable callback that **can** be used during render, pass an empty dependency array and it'll act like `useCallback` with an empty dependency array, but with the associated stable typing. In this case, you ***must*** ensure that it truly has no dependencies/only stable dependencies!!\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useStableCallback<T extends "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": " | null | undefined"
            },
            {
              "kind": "Content",
              "text": ">(fn: "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", noDeps?: "
            },
            {
              "kind": "Content",
              "text": "[] | null | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Stable",
              "canonicalReference": "preact-prop-helpers!~Stable:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-stable-callback.tsx",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "noDeps",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useStableCallback"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useStableGetter:function(1)",
          "docComment": "/**\n * Given an input value, returns a constant getter function that can be used inside of `useEffect` and friends without including it in the dependency array.\n *\n * This uses `options.diffed` in order to run before everything, even ref assignment. This means this getter is safe to use anywhere ***except the render phase***.\n *\n * @param value - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useStableGetter<T>(value: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "() => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-stable-getter.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useStableGetter"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useStack:function(1)",
          "docComment": "/**\n * @returns A function that retrieves the stack at the time this hook was called (in development mode only).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useStack(): "
            },
            {
              "kind": "Content",
              "text": "() => string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/stack.tsx",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "useStack"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useStaggeredChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useStaggeredChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "info",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildParameters#info"
            },
            {
              "kind": "Content",
              "text": ": { index }, "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "staggeredChildContext",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildContext#staggeredChildContext"
            },
            {
              "kind": "Content",
              "text": ": { parentIsStaggered, childCallsThisToTellTheParentTheHighestIndex, getDefaultStaggeredVisible, childCallsThisToTellTheParentToMountTheNextOne } } }: "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildParameters",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildReturn",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildReturn:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-staggered-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info: { index }, context: { staggeredChildContext: { parentIsStaggered, childCallsThisToTellTheParentTheHighestIndex, getDefaultStaggeredVisible, childCallsThisToTellTheParentToMountTheNextOne } } }",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useStaggeredChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseStaggeredChildContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseStaggeredChildContext "
            }
          ],
          "fileUrlPath": "src/component-detail/use-staggered-children.tsx",
          "releaseTag": "Public",
          "name": "UseStaggeredChildContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildContext#staggeredChildContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staggeredChildContext: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        parentIsStaggered: boolean;\n        childCallsThisToTellTheParentToMountTheNextOne(index: number): void;\n        childCallsThisToTellTheParentTheHighestIndex(index: number): void;\n        getDefaultStaggeredVisible(i: number): boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "staggeredChildContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseStaggeredChildParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseStaggeredChildParameters "
            }
          ],
          "fileUrlPath": "src/component-detail/use-staggered-children.tsx",
          "releaseTag": "Public",
          "name": "UseStaggeredChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseStaggeredChildContext",
                  "canonicalReference": "preact-prop-helpers!UseStaggeredChildContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildParameters#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        index: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useStaggeredChildren:function(1)",
          "docComment": "/**\n * Allows children to each wait until the previous has finished rendering before itself rendering.\n *\n * E.G. Child #3 waits until #2 renders. #2 waits until #1 renders, etc.\n *\n * Note that the child itself will still render, but you can delay rendering *its* children, or delay other complicated or heavy logic, until the child is no longer staggered.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useStaggeredChildren<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildrenInfo",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "managedChildrenReturn",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenParameters#managedChildrenReturn"
            },
            {
              "kind": "Content",
              "text": ": { getChildren }, "
            },
            {
              "kind": "Reference",
              "text": "staggeredChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenParameters#staggeredChildrenParameters"
            },
            {
              "kind": "Content",
              "text": ": { staggered } }: "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildrenParameters",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<E, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildrenReturnType",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/use-staggered-children.tsx",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ managedChildrenReturn: { getChildren }, staggeredChildrenParameters: { staggered } }",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useStaggeredChildren"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseStaggeredChildrenInfo<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<E>, \"index\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/use-staggered-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseStaggeredChildrenInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenInfo#setStaggeredVisible:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStaggeredVisible(visible: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visible",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "setStaggeredVisible"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseStaggeredChildrenParameters<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseStaggeredChildrenInfo",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-staggered-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseStaggeredChildrenParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenParameters#managedChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "managedChildrenReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "UseManagedChildrenReturnType",
                  "canonicalReference": "preact-prop-helpers!UseManagedChildrenReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<M>[\"managedChildrenReturn\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "managedChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenParameters#staggeredChildrenParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staggeredChildrenParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        staggered: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "staggeredChildrenParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseStaggeredChildrenReturnType "
            }
          ],
          "fileUrlPath": "src/component-detail/use-staggered-children.tsx",
          "releaseTag": "Public",
          "name": "UseStaggeredChildrenReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseStaggeredChildContext",
                  "canonicalReference": "preact-prop-helpers!UseStaggeredChildContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenReturnType#staggeredChildrenReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staggeredChildrenReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        stillStaggering: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "staggeredChildrenReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseStaggeredChildReturn:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseStaggeredChildReturn<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/use-staggered-children.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseStaggeredChildReturn",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildReturn#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseStaggeredChildrenInfo",
                  "canonicalReference": "preact-prop-helpers!UseStaggeredChildrenInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>, \"setStaggeredVisible\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildReturn#props:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "props: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "props",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseStaggeredChildReturn#staggeredChildReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staggeredChildReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        isStaggered: boolean;\n        hideBecauseStaggered: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "staggeredChildReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useState:function(1)",
          "docComment": "/**\n * Slightly enhanced version of `useState` that includes a getter that remains constant (i.e. you can use it in `useEffect` and friends without it being a dependency).\n *\n * If `getBuildMode()` returns `\"development\"`, then any calls to `setState` will also take the stack at the time the hook was called and save it to `window._setState_stack`. Useful if you want to trace whose state is being updated.\n *\n * @param initialState - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useState<T>(initialState: "
            },
            {
              "kind": "Content",
              "text": "T | (() => T)"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly [value: T, setValue: "
            },
            {
              "kind": "Reference",
              "text": "StateUpdater",
              "canonicalReference": "preact-hooks!StateUpdater:type"
            },
            {
              "kind": "Content",
              "text": "<T>, getValue: () => T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-state.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "initialState",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useState"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useTextContent:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useTextContent<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "refElementReturn",
              "canonicalReference": "preact-prop-helpers!UseTextContentParameters#refElementReturn"
            },
            {
              "kind": "Content",
              "text": ": { getElement }, "
            },
            {
              "kind": "Reference",
              "text": "textContentParameters",
              "canonicalReference": "preact-prop-helpers!UseTextContentParameters#textContentParameters"
            },
            {
              "kind": "Content",
              "text": ": { getText, onTextContentChange } }: "
            },
            {
              "kind": "Reference",
              "text": "UseTextContentParameters",
              "canonicalReference": "preact-prop-helpers!UseTextContentParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseTextContentReturnType",
              "canonicalReference": "preact-prop-helpers!UseTextContentReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-text-content.tsx",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ refElementReturn: { getElement }, textContentParameters: { getText, onTextContentChange } }",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useTextContent"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTextContentParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTextContentParameters<E extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-text-content.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseTextContentParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTextContentParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<E>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTextContentParameters#textContentParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContentParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getText(e: E | null): string | null;\n        onTextContentChange: "
                },
                {
                  "kind": "Reference",
                  "text": "OnPassiveStateChange",
                  "canonicalReference": "preact-prop-helpers!OnPassiveStateChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<string | null, never>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textContentParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTextContentReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTextContentReturnType "
            }
          ],
          "fileUrlPath": "src/dom-helpers/use-text-content.tsx",
          "releaseTag": "Public",
          "name": "UseTextContentReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTextContentReturnType#textContentReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContentReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getTextContent: () => string | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textContentReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useTimeout:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useTimeout({ timeout, callback, triggerIndex }: "
            },
            {
              "kind": "Reference",
              "text": "UseTimeoutParameters",
              "canonicalReference": "preact-prop-helpers!UseTimeoutParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    getElapsedTime: () => number;\n    getRemainingTime: () => number | null;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/timing/use-timeout.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ timeout, callback, triggerIndex }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "useTimeout"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTimeoutParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTimeoutParameters "
            }
          ],
          "fileUrlPath": "src/timing/use-timeout.tsx",
          "releaseTag": "Public",
          "name": "UseTimeoutParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTimeoutParameters#callback:member",
              "docComment": "/**\n * Called `timeout` ms after mount, or the last change to `triggerIndex`.\n *\n * Does *not* need to be stable. Go ahead and pass an anonymous function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callback: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTimeoutParameters#timeout:member",
              "docComment": "/**\n * The number of ms to wait before invoking `callback`. If `null`, cancels the timeout immediately.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "preact-prop-helpers!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTimeoutParameters#triggerIndex:member",
              "docComment": "/**\n * Changes to this prop between renders can be used to clear the current timeout and create a new one.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "triggerIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "triggerIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useTypeaheadNavigation:function(1)",
          "docComment": "/**\n * Allows for the selection of a managed child by typing the given text associated with it.\n *\n * @see\n *\n * useListNavigation, which packages everything up together.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useTypeaheadNavigation<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "typeaheadNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationParameters#typeaheadNavigationParameters"
            },
            {
              "kind": "Content",
              "text": ": { collator, typeaheadTimeout, noTypeahead, isValid, ...void3 }, "
            },
            {
              "kind": "Reference",
              "text": "rovingTabIndexReturn",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationParameters#rovingTabIndexReturn"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "getTabbableIndex",
              "canonicalReference": "preact-prop-helpers!~getTabbableIndex"
            },
            {
              "kind": "Content",
              "text": ": getIndex, "
            },
            {
              "kind": "Reference",
              "text": "setTabbableIndex",
              "canonicalReference": "preact-prop-helpers!~setTabbableIndex"
            },
            {
              "kind": "Content",
              "text": ": setIndex, ...void1 }, ...void2 }: "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationParameters",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationReturnType",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationReturnType:interface"
            },
            {
              "kind": "Content",
              "text": "<ParentOrChildElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 21
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ typeaheadNavigationParameters: { collator, typeaheadTimeout, noTypeahead, isValid, ...void3 }, rovingTabIndexReturn: { getTabbableIndex: getIndex, setTabbableIndex: setIndex, ...void1 }, ...void2 }",
              "parameterTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 18
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useTypeaheadNavigation"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useTypeaheadNavigationChild:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useTypeaheadNavigationChild<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": ">({ "
            },
            {
              "kind": "Reference",
              "text": "info",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters#info"
            },
            {
              "kind": "Content",
              "text": ": { index, ...void1 }, "
            },
            {
              "kind": "Reference",
              "text": "textContentParameters",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters#textContentParameters"
            },
            {
              "kind": "Content",
              "text": ": { getText, ...void5 }, "
            },
            {
              "kind": "Reference",
              "text": "context",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters#context"
            },
            {
              "kind": "Content",
              "text": ": { "
            },
            {
              "kind": "Reference",
              "text": "typeaheadNavigationContext",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext#typeaheadNavigationContext"
            },
            {
              "kind": "Content",
              "text": ": { sortedTypeaheadInfo, insertingComparator, excludeSpace, ...void2 } }, "
            },
            {
              "kind": "Reference",
              "text": "refElementReturn",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters#refElementReturn"
            },
            {
              "kind": "Content",
              "text": ": { getElement, ...void3 }, ...void4 }: "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationChildParameters",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement, M>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationChildReturnType",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildReturnType:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ info: { index, ...void1 }, textContentParameters: { getText, ...void5 }, context: { typeaheadNavigationContext: { sortedTypeaheadInfo, insertingComparator, excludeSpace, ...void2 } }, refElementReturn: { getElement, ...void3 }, ...void4 }",
              "parameterTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 18
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useTypeaheadNavigationChild"
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTypeaheadNavigationChildInfo<TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseRovingTabIndexChildInfo",
              "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>, \"index\">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseTypeaheadNavigationChildInfo",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters:interface",
          "docComment": "/**\n * Arguments passed to the child `useTypeaheadNavigationChild`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTypeaheadNavigationChildParameters<ChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", _M extends "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<ChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseTypeaheadNavigationChildParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseTypeaheadNavigationContext",
                  "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters#info:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexChildParameters",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement, "
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexChildInfo",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexChildInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>>[\"info\"], \"index\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters#refElementReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refElementReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRefElementReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRefElementReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>[\"refElementReturn\"], \"getElement\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refElementReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildParameters#textContentParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContentParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseTextContentParameters",
                  "canonicalReference": "preact-prop-helpers!UseTextContentParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ChildElement>[\"textContentParameters\"], \"getText\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textContentParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTypeaheadNavigationChildReturnType extends "
            },
            {
              "kind": "Reference",
              "text": "UseTextContentReturnType",
              "canonicalReference": "preact-prop-helpers!UseTextContentReturnType:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "releaseTag": "Public",
          "name": "UseTypeaheadNavigationChildReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildReturnType#pressParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pressParameters: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UsePressParameters",
                  "canonicalReference": "preact-prop-helpers!UsePressParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>[\"pressParameters\"], \"excludeSpace\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pressParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTypeaheadNavigationContext "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "releaseTag": "Public",
          "name": "UseTypeaheadNavigationContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext#typeaheadNavigationContext:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeaheadNavigationContext: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        excludeSpace: () => boolean;\n        sortedTypeaheadInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TypeaheadInfo",
                  "canonicalReference": "preact-prop-helpers!~TypeaheadInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ">;\n        insertingComparator: (lhs: string | null, rhs: "
                },
                {
                  "kind": "Reference",
                  "text": "TypeaheadInfo",
                  "canonicalReference": "preact-prop-helpers!~TypeaheadInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "typeaheadNavigationContext",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTypeaheadNavigationParameters<TabbableChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", _M extends "
            },
            {
              "kind": "Reference",
              "text": "UseTypeaheadNavigationChildInfo",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationChildInfo:interface"
            },
            {
              "kind": "Content",
              "text": "<TabbableChildElement>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TabbableChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "_M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseTypeaheadNavigationParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationParameters#rovingTabIndexReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rovingTabIndexReturn: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UseRovingTabIndexReturnType",
                  "canonicalReference": "preact-prop-helpers!UseRovingTabIndexReturnType:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, TabbableChildElement, any>[\"rovingTabIndexReturn\"], \"getTabbableIndex\" | \"setTabbableIndex\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rovingTabIndexReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationParameters#typeaheadNavigationParameters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeaheadNavigationParameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        isValid(i: number): boolean;\n        collator: null | "
                },
                {
                  "kind": "Reference",
                  "text": "Intl.Collator",
                  "canonicalReference": "!Intl.Collator:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        noTypeahead: boolean;\n        typeaheadTimeout: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "typeaheadNavigationParameters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationReturnType:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseTypeaheadNavigationReturnType<ParentOrChildElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/component-detail/keyboard-navigation/use-typeahead-navigation.tsx",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ParentOrChildElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "UseTypeaheadNavigationReturnType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationReturnType#context:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "UseTypeaheadNavigationContext",
                  "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationReturnType#propsStable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propsStable: "
                },
                {
                  "kind": "Reference",
                  "text": "ElementProps",
                  "canonicalReference": "preact-prop-helpers!ElementProps:type"
                },
                {
                  "kind": "Content",
                  "text": "<ParentOrChildElement>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "propsStable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "preact-prop-helpers!UseTypeaheadNavigationReturnType#typeaheadNavigationReturn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeaheadNavigationReturn: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        getCurrentTypeahead(): string | null;\n        typeaheadStatus: \"invalid\" | \"valid\" | \"none\";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "typeaheadNavigationReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useUrl:function(1)",
          "docComment": "/**\n * Allows you to inspect when the entire URL changes, either because the hash changed or because the Back/Forward browser buttons were pressed (if the URL is set programmatically in a way that doesn't trigger either of those, like `history.replaceState`, well, 🤷 there's no way to track that).\n *\n * In general, you'll want to inspect a specific directory of a path, or a specific query parameter value, not the entire URL.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useUrl(onUrlChange: "
            },
            {
              "kind": "Content",
              "text": "(url: string) => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly [() => string, (newUrlOrSetter: string | ((prev: string | undefined) => string), history2: \"push\" | \"replace\") => void]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/observers/use-url.tsx",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "onUrlChange",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "useUrl"
        },
        {
          "kind": "Function",
          "canonicalReference": "preact-prop-helpers!useWhatCausedRender:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useWhatCausedRender(who: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { props, state }: "
            },
            {
              "kind": "Content",
              "text": "{\n    props: any;\n    state: any;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/preact-extensions/use-what-caused-render.tsx",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "who",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "{ props, state }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "useWhatCausedRender"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "preact-prop-helpers!VNode:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type VNode = "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "preact!JSXInternal.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/types.tsx",
          "releaseTag": "Public",
          "name": "VNode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
