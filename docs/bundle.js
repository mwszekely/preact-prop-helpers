var bundle = (function (exports) {
	'use strict';

	var n,l$1,u$1,t$1,o$2,r$1,f$1,e$2={},c$1=[],s$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function a$1(n,l){for(var u in l)n[u]=l[u];return n}function h$1(n){var l=n.parentNode;l&&l.removeChild(n);}function v$1(l,u,i){var t,o,r,f={};for(r in u)"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return y$1(l,f,t,o,null)}function y$1(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u$1:r};return null==r&&null!=l$1.vnode&&l$1.vnode(f),f}function d$1(n){return n.children}function _(n,l){this.props=n,this.context=l;}function k$1(n,l){if(null==l)return n.__?k$1(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?k$1(n):null}function b$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return b$1(n)}}function m$1(n){(!n.__d&&(n.__d=!0)&&t$1.push(n)&&!g$2.__r++||r$1!==l$1.debounceRendering)&&((r$1=l$1.debounceRendering)||o$2)(g$2);}function g$2(){for(var n;g$2.__r=t$1.length;)n=t$1.sort(function(n,l){return n.__v.__b-l.__v.__b}),t$1=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=a$1({},t)).__v=t.__v+1,j$2(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?k$1(t):o,t.__h),z$2(u,t),t.__e!=o&&b$1(t)));});}function w$2(n,l,u,i,t,o,r,f,s,a){var h,v,p,_,b,m,g,w=i&&i.__k||c$1,A=w.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(_=u.__k[h]=null==(_=l[h])||"boolean"==typeof _?null:"string"==typeof _||"number"==typeof _||"bigint"==typeof _?y$1(null,_,null,null,_):Array.isArray(_)?y$1(d$1,{children:_},null,null,null):_.__b>0?y$1(_.type,_.props,_.key,null,_.__v):_)){if(_.__=u,_.__b=u.__b+1,null===(p=w[h])||p&&_.key==p.key&&_.type===p.type)w[h]=void 0;else for(v=0;v<A;v++){if((p=w[v])&&_.key==p.key&&_.type===p.type){w[v]=void 0;break}p=null;}j$2(n,_,p=p||e$2,t,o,r,f,s,a),b=_.__e,(v=_.ref)&&p.ref!=v&&(g||(g=[]),p.ref&&g.push(p.ref,null,_),g.push(v,_.__c||b,_)),null!=b?(null==m&&(m=b),"function"==typeof _.type&&_.__k===p.__k?_.__d=s=x(_,s,n):s=P$1(n,_,p,w,b,s),"function"==typeof u.type&&(u.__d=s)):s&&p.__e==s&&s.parentNode!=n&&(s=k$1(p));}for(u.__e=m,h=A;h--;)null!=w[h]&&("function"==typeof u.type&&null!=w[h].__e&&w[h].__e==u.__d&&(u.__d=k$1(i,h+1)),N(w[h],w[h]));if(g)for(h=0;h<g.length;h++)M$2(g[h],g[++h],g[++h]);}function x(n,l,u){for(var i,t=n.__k,o=0;t&&o<t.length;o++)(i=t[o])&&(i.__=n,l="function"==typeof i.type?x(i,l,u):P$1(u,i,i,t,i.__e,l));return l}function A$2(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){A$2(n,l);}):l.push(n)),l}function P$1(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else {for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=2)if(f==t)break n;n.insertBefore(t,o),r=o;}return void 0!==r?r:t.nextSibling}function C$1(n,l,u,i,t){var o;for(o in u)"children"===o||"key"===o||o in l||H$1(n,o,null,u[o],i);for(o in l)t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||H$1(n,o,l[o],u[o],i);}function $(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||s$1.test(l)?u:u+"px";}function H$1(n,l,u,i,t){var o;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||$(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||$(n.style,l,u[l]);}else if("o"===l[0]&&"n"===l[1])o=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T$2:I,o):n.removeEventListener(l,o?T$2:I,o);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null!=u&&(!1!==u||"a"===l[0]&&"r"===l[1])?n.setAttribute(l,u):n.removeAttribute(l));}}function I(n){this.l[n.type+!1](l$1.event?l$1.event(n):n);}function T$2(n){this.l[n.type+!0](l$1.event?l$1.event(n):n);}function j$2(n,u,i,t,o,r,f,e,c){var s,h,v,y,p,k,b,m,g,x,A,P,C,$=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(s=l$1.__b)&&s(u);try{n:if("function"==typeof $){if(m=u.props,g=(s=$.contextType)&&t[s.__c],x=s?g?g.props.value:s.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in $&&$.prototype.render?u.__c=h=new $(m,x):(u.__c=h=new _(m,x),h.constructor=$,h.render=O$1),g&&g.sub(h),h.props=m,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=$.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=a$1({},h.__s)),a$1(h.__s,$.getDerivedStateFromProps(m,h.__s))),y=h.props,p=h.state,v)null==$.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else {if(null==$.getDerivedStateFromProps&&m!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(m,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(m,h.__s,x)||u.__v===i.__v){h.props=m,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),h.__h.length&&f.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(m,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,p,k);});}if(h.context=x,h.props=m,h.__v=u,h.__P=n,A=l$1.__r,P=0,"prototype"in $&&$.prototype.render)h.state=h.__s,h.__d=!1,A&&A(u),s=h.render(h.props,h.state,h.context);else do{h.__d=!1,A&&A(u),s=h.render(h.props,h.state,h.context),h.state=h.__s;}while(h.__d&&++P<25);h.state=h.__s,null!=h.getChildContext&&(t=a$1(a$1({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,p)),C=null!=s&&s.type===d$1&&null==s.key?s.props.children:s,w$2(n,Array.isArray(C)?C:[C],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L$1(i.__e,u,i,t,o,r,f,c);(s=l$1.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l$1.__e(n,u,i);}}function z$2(n,u){l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function L$1(l,u,i,t,o,r,f,c){var s,a,v,y=i.props,p=u.props,d=u.type,_=0;if("svg"===d&&(o=!0),null!=r)for(;_<r.length;_++)if((s=r[_])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,r[_]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),r=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else {if(r=r&&n.call(l.childNodes),a=(y=i.props||e$2).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},_=0;_<l.attributes.length;_++)y[l.attributes[_].name]=l.attributes[_].value;(v||a)&&(v&&(a&&v.__html==a.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if(C$1(l,p,y,o,c),v)u.__k=[];else if(_=u.props.children,w$2(l,Array.isArray(_)?_:[_],u,i,t,o&&"foreignObject"!==d,r,f,r?r[0]:i.__k&&k$1(i,0),c),null!=r)for(_=r.length;_--;)null!=r[_]&&h$1(r[_]);c||("value"in p&&void 0!==(_=p.value)&&(_!==l.value||"progress"===d&&!_||"option"===d&&_!==y.value)&&H$1(l,"value",_,y.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==l.checked&&H$1(l,"checked",_,y.checked,!1));}return l}function M$2(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$1.__e(n,i);}}function N(n,u,i){var t,o;if(l$1.unmount&&l$1.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M$2(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$1.__e(n,u);}t.base=t.__P=null;}if(t=n.__k)for(o=0;o<t.length;o++)t[o]&&N(t[o],u,"function"!=typeof n.type);i||null==n.__e||h$1(n.__e),n.__e=n.__d=void 0;}function O$1(n,l,u){return this.constructor(n,u)}function S$1(u,i,t){var o,r,f;l$1.__&&l$1.__(u,i),r=(o="function"==typeof t)?null:t&&t.__k||i.__k,f=[],j$2(i,u=(!o&&t||i).__k=v$1(d$1,null,[u]),r||e$2,e$2,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n.call(i.childNodes):null,f,!o&&t?t:r?r.__e:i.firstChild,o),z$2(f,u);}function D(n,l){var u={__c:l="__cC"+f$1++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(m$1);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=c$1.slice,l$1={__e:function(n,l,u,i){for(var t,o,r;l=l.__;)if((t=l.__c)&&!t.__)try{if((o=t.constructor)&&null!=o.getDerivedStateFromError&&(t.setState(o.getDerivedStateFromError(n)),r=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),r=t.__d),r)return t.__E=t}catch(l){n=l;}throw n}},u$1=0,_.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=a$1({},this.state),"function"==typeof n&&(n=n(a$1({},u),this.props)),n&&a$1(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),m$1(this));},_.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),m$1(this));},_.prototype.render=d$1,t$1=[],o$2="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,g$2.__r=0,f$1=0;

	var o$1=0;function e$1(_,e,n,t,f){var l,s,u={};for(s in e)"ref"==s?l=e[s]:u[s]=e[s];var a={type:_,props:u,key:n,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--o$1,__source:f,__self:t};if("function"==typeof _&&(l=_.defaultProps))for(s in l)void 0===u[s]&&(u[s]=l[s]);return l$1.vnode&&l$1.vnode(a),a}

	var t,u,r,o,i=0,c=[],f=l$1.__b,e=l$1.__r,a=l$1.diffed,v=l$1.__c,l=l$1.unmount;function m(t,r){l$1.__h&&l$1.__h(u,t,i||r),i=0;var o=u.__H||(u.__H={__:[],__h:[]});return t>=o.__.length&&o.__.push({}),o.__[t]}function d(n){return i=1,p(z$1,n)}function p(n,r,o){var i=m(t++,2);return i.t=n,i.__c||(i.__=[o?o(r):z$1(void 0,r),function(n){var t=i.t(i.__[0],n);i.__[0]!==t&&(i.__=[t,i.__[1]],i.__c.setState({}));}],i.__c=u),i.__}function y(r,o){var i=m(t++,3);!l$1.__s&&w$1(i.__H,o)&&(i.__=r,i.u=o,u.__H.__h.push(i));}function h(r,o){var i=m(t++,4);!l$1.__s&&w$1(i.__H,o)&&(i.__=r,i.u=o,u.__h.push(i));}function s(n){return i=5,A$1(function(){return {current:n}},[])}function A$1(n,u){var r=m(t++,7);return w$1(r.__H,u)?(r.o=n(),r.u=u,r.__h=n,r.o):r.__}function F(n,t){return i=8,A$1(function(){return n},t)}function T$1(n){var r=u.context[n.__c],o=m(t++,9);return o.c=n,r?(null==o.__&&(o.__=!0,r.sub(u)),r.props.value):n.__}function b(){for(var t;t=c.shift();)if(t.__P)try{t.__H.__h.forEach(j$1),t.__H.__h.forEach(k),t.__H.__h=[];}catch(u){t.__H.__h=[],l$1.__e(u,t.__v);}}l$1.__b=function(n){u=null,f&&f(n);},l$1.__r=function(n){e&&e(n),t=0;var o=(u=n.__c).__H;o&&(r===u?(o.__h=[],u.__h=[],o.__.forEach(function(n){n.o=n.u=void 0;})):(o.__.forEach(function(n){n.u&&(n.__H=n.u),n.o&&(n.__=n.o),n.o=n.u=void 0;}),o.__h.forEach(j$1),o.__h.forEach(k),o.__h=[])),r=u;},l$1.diffed=function(t){a&&a(t);var i=t.__c;i&&i.__H&&i.__H.__h.length&&(1!==c.push(i)&&o===l$1.requestAnimationFrame||((o=l$1.requestAnimationFrame)||function(n){var t,u=function(){clearTimeout(r),g$1&&cancelAnimationFrame(t),setTimeout(n);},r=setTimeout(u,100);g$1&&(t=requestAnimationFrame(u));})(b)),u=null,r=null;},l$1.__c=function(t,u){u.some(function(t){try{t.__H&&t.__H.__.forEach(function(n){n.u&&(n.__H=n.u),n.o&&(n.__=n.o),n.o=n.u=void 0;}),t.__h.forEach(j$1),t.__h=t.__h.filter(function(n){return !n.__||k(n)});}catch(r){u.some(function(n){n.__h&&(n.__h=[]);}),u=[],l$1.__e(r,t.__v);}}),v&&v(t,u);},l$1.unmount=function(t){l&&l(t);var u,r=t.__c;r&&r.__H&&(r.__H.__.forEach(function(n){try{j$1(n);}catch(n){u=n;}}),u&&l$1.__e(u,r.__v));};var g$1="function"==typeof requestAnimationFrame;function j$1(n){var t=u,r=n.__c;"function"==typeof r&&(n.__c=void 0,r()),u=t;}function k(n){var t=u;n.__c=n.__(),u=t;}function w$1(n,t){return !n||n.length!==t.length||t.some(function(t,u){return t!==n[u]})}function z$1(n,t){return "function"==typeof t?t(n):t}

	function C(n,t){for(var e in t)n[e]=t[e];return n}function S(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}function E(n){this.props=n;}function g(n,t){function e(n){var e=this.props.ref,r=e==n.ref;return !r&&e&&(e.call?e(null):e.current=null),t?!t(this.props,n)||!r:S(this.props,n)}function r(t){return this.shouldComponentUpdate=e,v$1(n,t)}return r.displayName="Memo("+(n.displayName||n.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(E.prototype=new _).isPureReactComponent=!0,E.prototype.shouldComponentUpdate=function(n,t){return S(this.props,n)||S(this.state,t)};var w=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),w&&w(n);};var A=l$1.__e;l$1.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;)if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);A(n,t,e,r);};var O=l$1.unmount;function L(){this.__u=0,this.t=null,this.__b=null;}function U(n){var t=n.__.__c;return t&&t.__e&&t.__e(n)}function M$1(){this.u=null,this.o=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),O&&O(n);},(L.prototype=new _).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=U(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(!--r.__u){if(r.state.__e){var n=r.state.__e;r.__v.__k[0]=function n(t,e,r){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)}),t.__c&&t.__c.__P===e&&(t.__e&&r.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=r)),t}(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__e:r.__b=null});t=r.t.pop();)t.forceUpdate();}},f=!0===t.__h;r.__u++||f||r.setState({__e:r.__b=r.__v.__k[0]}),n.then(i,i);},L.prototype.componentWillUnmount=function(){this.t=[];},L.prototype.render=function(n,t){if(this.__b){if(this.__v.__k){var e=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=function n(t,e,r){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),t.__c.__H=null),null!=(t=C({},t)).__c&&(t.__c.__P===r&&(t.__c.__P=e),t.__c=null),t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)})),t}(this.__b,e,r.__O=r.__P);}this.__b=null;}var u=t.__e&&v$1(d$1,null,n.fallback);return u&&(u.__h=null),[v$1(d$1,null,t.__e?null:n.children),u]};var T=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};(M$1.prototype=new _).__e=function(n){var t=this,e=U(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),T(t,n,r)):u();};e?e(o):o();}},M$1.prototype.render=function(n){this.u=null,this.o=new Map;var t=A$2(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children},M$1.prototype.componentDidUpdate=M$1.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){T(n,e,t);});};var P="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,V=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,j="undefined"!=typeof document,z=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n)};_.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(n){Object.defineProperty(_.prototype,n,{configurable:!0,get:function(){return this["UNSAFE_"+n]},set:function(t){Object.defineProperty(this,n,{configurable:!0,writable:!0,value:t});}});});var H=l$1.event;function Z(){}function Y(){return this.cancelBubble}function q(){return this.defaultPrevented}l$1.event=function(n){return H&&(n=H(n)),n.persist=Z,n.isPropagationStopped=Y,n.isDefaultPrevented=q,n.nativeEvent=n};var J={configurable:!0,get:function(){return this.class}},K=l$1.vnode;l$1.vnode=function(n){var t=n.type,e=n.props,r=e;if("string"==typeof t){var u=-1===t.indexOf("-");for(var o in r={},e){var i=e[o];j&&"children"===o&&"noscript"===t||"value"===o&&"defaultValue"in e&&null==i||("defaultValue"===o&&"value"in e&&null==e.value?o="value":"download"===o&&!0===i?i="":/ondoubleclick/i.test(o)?o="ondblclick":/^onchange(textarea|input)/i.test(o+t)&&!z(e.type)?o="oninput":/^onfocus$/i.test(o)?o="onfocusin":/^onblur$/i.test(o)?o="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(o)?o=o.toLowerCase():u&&V.test(o)?o=o.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===i&&(i=void 0),/^oninput/i.test(o)&&(o=o.toLowerCase(),r[o]&&(o="oninputCapture")),r[o]=i);}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=-1!=r.value.indexOf(n.props.value);})),"select"==t&&null!=r.defaultValue&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=r.multiple?-1!=r.defaultValue.indexOf(n.props.value):r.defaultValue==n.props.value;})),n.props=r,e.class!=e.className&&(J.enumerable="className"in e,null!=e.className&&(r.class=e.className),Object.defineProperty(r,"className",J));}n.$$typeof=P,K&&K(n);};var Q=l$1.__r;l$1.__r=function(n){Q&&Q(n),n.__c;};

	function toVal(mix) {
		var k, y, str='';

		if (typeof mix === 'string' || typeof mix === 'number') {
			str += mix;
		} else if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k]) {
						if (y = toVal(mix[k])) {
							str && (str += ' ');
							str += y;
						}
					}
				}
			} else {
				for (k in mix) {
					if (mix[k]) {
						str && (str += ' ');
						str += k;
					}
				}
			}
		}

		return str;
	}

	function clsx () {
		var i=0, tmp, x, str='';
		while (i < arguments.length) {
			if (tmp = arguments[i++]) {
				if (x = toVal(tmp)) {
					str && (str += ' ');
					str += x;
				}
			}
		}
		return str;
	}

	function getDocument(element) { return (element?.ownerDocument ?? document ?? window.document ?? globalThis.document); }

	/**
	 * Debug hook.
	 *
	 * Given a value or set of values, emits a console error if any of them change from one render to the next.
	 *
	 * Eventually, when useEvent lands, we hopefully won't need this.
	 */
	function useEnsureStability(parentHookName, ...values) {
	    useHelper(values.length, 0);
	    values.forEach(useHelper);
	    return;
	    function useHelper(value, index) {
	        // Make sure that the provided functions are perfectly stable across renders
	        const helperToEnsureStability = s(value);
	        const shownError = s(false);
	        if (helperToEnsureStability.current != value) {
	            if (!shownError.current) {
	                /* eslint-disable no-debugger */
	                debugger;
	                console.error(`The hook ${parentHookName} requires some or all of its arguments remain stable across each render; please check the ${index}-indexed argument.`);
	                shownError.current = true;
	            }
	        }
	    }
	}
	/**
	 * Similar to `useState`, but for values that aren't "render-important" &ndash; updates don't cause a re-render and so the value shouldn't be used during render (though it certainly can, at least by re-rendering again).
	 *
	 * To compensate for this, you should pass a `useEffect`-esque callback that is run whenever the value changes.  Just like `useEffect`, this callback can return a cleanup function that's run before the value changes.  If you would like to re-render when the value changes (or, say, when the value meets some criteria), this is where you'll want to put in a call to a `setState` function.
	 *
	 * To summarize, it's like a `useState`-`useEffect` mashup:
	 *
	 * 1. It's like `useState`, except this version of `setState` doesn't re-render the whole component
	 * 2. It's like `useState`, except you can run a function when the value changes that optionally returns a cleanup function
	 * 3. It's like `useEffect`, except you trigger the effect function "remotely" instead of it running after rendering
	 * 4. It's like `useEffect`, except the single "dependency" is based on your calls to `setState`
	 *
	 * Note that while calling `setState` doesn't cause any re-renders, you can do that within your `onChange` function, called whenever the value changes via that `setState`.
	 *
	 * @param onChange The "effect" function to run when the value changes. Effectively the same as `useEffect`'s "effect" function.  MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
	 * @param getInitialValue If provided, the effect will be invoked once with this value on mount. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
	 * @returns
	 */
	function usePassiveState(onChange, getInitialValue) {
	    const valueRef = s(Unset$1);
	    const warningRef = s(false);
	    const cleanupCallbackRef = s(undefined);
	    // Make sure that the provided functions are perfectly stable across renders
	    useEnsureStability("usePassiveState", onChange, getInitialValue);
	    // Shared between "dependency changed" and "component unmounted".
	    const onShouldCleanUp = F(() => {
	        const cleanupCallback = cleanupCallbackRef.current;
	        if (cleanupCallback)
	            cleanupCallback();
	    }, []);
	    // There are a couple places where we'd like to use our initial
	    // value in place of having no value at all yet.
	    // This is the shared code for that, used on mount and whenever
	    // getValue is called.
	    const tryEnsureValue = F(() => {
	        if (valueRef.current === Unset$1 && getInitialValue != undefined) {
	            try {
	                const initialValue = getInitialValue();
	                valueRef.current = initialValue;
	                cleanupCallbackRef.current = (onChange?.(initialValue, undefined) ?? undefined);
	            }
	            catch (ex) {
	                // Exceptions are intentional to allow bailout (without exposing the Unset symbol)
	            }
	        }
	    }, [ /* getInitialValue and onChange intentionally omitted */]);
	    const getValue = F(() => {
	        if (warningRef.current)
	            console.warn("During onChange, prefer using the (value, prevValue) arguments instead of getValue -- it's ambiguous as to if you're asking for the old or new value at this point in time for this component.");
	        // The first time we call getValue, if we haven't been given a value yet,
	        // (and we were given an initial value to use)
	        // return the initial value instead of nothing.
	        if (valueRef.current === Unset$1)
	            tryEnsureValue();
	        return (valueRef.current === Unset$1 ? undefined : valueRef.current);
	    }, []);
	    h(() => {
	        // Make sure we've run our effect at least once on mount.
	        // (If we have an initial value, of course)
	        tryEnsureValue();
	    }, []);
	    // The actual code the user calls to (possibly) run a new effect.
	    const setValue = F((arg) => {
	        const prevDep = valueRef.current === Unset$1 ? undefined : getValue();
	        const dep = arg instanceof Function ? arg(prevDep) : arg;
	        if (dep !== valueRef.current) {
	            // Indicate to the user that they shouldn't call getValue during onChange
	            warningRef.current = true;
	            // Call any registerd cleanup function
	            onShouldCleanUp();
	            cleanupCallbackRef.current = (onChange?.(dep, prevDep) ?? undefined);
	            valueRef.current = dep;
	            // Allow the user to normally call getValue again
	            warningRef.current = false;
	        }
	    }, []);
	    return [getValue, setValue];
	}
	const Unset$1 = Symbol();
	// Easy constants for getInitialValue
	function returnTrue() { return true; }
	function returnFalse() { return false; }
	function returnNull$1() { return null; }

	function useMergedChildren(lhsProps, rhsProps) {
	    const lhs = lhsProps?.children;
	    const rhs = rhsProps?.children;
	    if (lhs == null && rhs == null) {
	        return undefined;
	    }
	    else if (lhs == null) {
	        return rhs;
	    }
	    else if (rhs == null) {
	        return lhs;
	    }
	    else {
	        const ret = v$1(d$1, {}, lhs, rhs);
	        return ret;
	    }
	}

	/**
	 * Given two sets of props, merges their `class` and `className` properties.
	 * Duplicate classes are removed (order doesn't matter anyway).
	 *
	 * @param lhs Classes of the first component
	 * @param rhs Classes of the second component
	 * @returns A string representing all combined classes from both arguments.
	 */
	function useMergedClasses(lhs, rhs) {
	    // Note: For the sake of forward compatibility, this function is labelled as
	    // a hook, but as it uses no other hooks it technically isn't one.
	    return mergeClasses(lhs, rhs);
	}
	function mergeClasses(lhs, rhs) {
	    const lhsClass = lhs?.class;
	    const lhsClassName = lhs?.className;
	    const rhsClass = rhs?.class;
	    const rhsClassName = rhs?.className;
	    if (lhsClass || rhsClass || lhsClassName || rhsClassName) {
	        const lhsClasses = clsx(lhsClass, lhsClassName).split(" ");
	        const rhsClasses = clsx(rhsClass, rhsClassName).split(" ");
	        const allClasses = new Set([...Array.from(lhsClasses), ...Array.from(rhsClasses)]);
	        return Array.from(allClasses).join(" ");
	    }
	    else {
	        return undefined;
	    }
	}

	function processRef(instance, ref) {
	    if (typeof ref === "function") {
	        ref(instance);
	    }
	    else if (ref != null) {
	        ref.current = instance;
	    }
	    else {
	        /* eslint-disable no-debugger */
	        debugger;
	        console.assert(false, "Unknown ref type found that was neither a RefCallback nor a RefObject");
	    }
	}
	/**
	 * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
	 * @param lhs
	 * @param rhs
	 * @returns
	 */
	function useMergedRefs() {
	    return function (lhsProps, rhsProps) {
	        const lhs = lhsProps?.ref;
	        const rhs = rhsProps?.ref;
	        const combined = F((current) => {
	            processRef(current, lhs);
	            processRef(current, rhs);
	        }, [lhs, rhs]);
	        if (lhs == null && rhs == null) {
	            return undefined;
	        }
	        else if (lhs == null) {
	            return rhs;
	        }
	        else if (rhs == null) {
	            return lhs;
	        }
	        else {
	            return combined;
	        }
	    };
	}

	function styleStringToObject(style) {
	    // TODO: This sucks D:
	    return Object.fromEntries(style.split(";").map(statement => statement.split(":")));
	}
	/**
	 * Merges two style objects, returning the result.
	 *
	 * @param style The user-given style prop for this component
	 * @param obj The CSS properties you want added to the user-given style
	 * @returns A CSS object containing the properties of both objects.
	 */
	function useMergedStyles(lhs, rhs) {
	    // Easy case, when there are no styles to merge return nothing.
	    if (!lhs?.style && !rhs?.style)
	        return undefined;
	    if (typeof lhs != typeof rhs) {
	        // Easy cases, when one is null and the other isn't.
	        if (lhs?.style && !rhs?.style)
	            return lhs.style;
	        if (!lhs?.style && rhs?.style)
	            return rhs.style;
	        // They're both non-null but different types.
	        // Convert the string type to an object bag type and run it again.
	        if (lhs?.style && rhs?.style) {
	            // (useMergedStyles isn't a true hook -- this isn't a violation)
	            if (typeof lhs?.style == "string")
	                return useMergedStyles({ style: styleStringToObject(lhs?.style) }, rhs);
	            if (typeof rhs?.style == "string")
	                return useMergedStyles(lhs, { style: styleStringToObject(rhs?.style) });
	        }
	        // Logic???
	        return undefined;
	    }
	    // They're both strings, just concatenate them.
	    if (typeof lhs?.style == "string") {
	        return `${lhs.style};${rhs?.style ?? ""}`;
	    }
	    // They're both objects, just merge them.
	    return {
	        ...(lhs?.style ?? {}),
	        ...(rhs?.style ?? {})
	    };
	}

	let log = console.warn;
	/**
	 * Given two sets of props, merges them and returns the result.
	 *
	 * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
	 * @param lhs2
	 * @param rhs2
	 * @returns
	 */
	function useMergedProps() {
	    return function (lhsAll, rhsAll) {
	        // First, separate the props we were given into two groups:
	        // lhsAll and rhsAll contain all the props we were given, and
	        // lhsMisc and rhsMisc contain all props *except* for the easy ones
	        // like className and style that we already know how to merge.
	        const { children: _lhsChildren, class: _lhsClass, className: _lhsClassName, style: _lhsStyle, ref: _lhsRef, ...lhsMisc } = lhsAll;
	        const { children: _rhsChildren, class: _rhsClass, className: _rhsClassName, style: _rhsStyle, ref: _rhsRef, ...rhsMisc } = rhsAll;
	        const ret = {
	            ...lhsMisc,
	            ref: useMergedRefs()(lhsAll, rhsAll),
	            style: useMergedStyles(lhsAll, rhsAll),
	            className: useMergedClasses(lhsAll, rhsAll),
	            children: useMergedChildren(lhsAll, rhsAll),
	        };
	        if (ret.ref === undefined)
	            delete ret.ref;
	        if (ret.style === undefined)
	            delete ret.style;
	        if (ret.className === undefined)
	            delete ret.className;
	        if (ret.children === undefined)
	            delete ret.children;
	        // Now, do *everything* else
	        // Merge every remaining existing entry in lhs with what we've already put in ret.
	        //const lhsEntries = Object.entries(lhs) as [keyof T, T[keyof T]][];
	        const rhsEntries = Object.entries(rhsMisc);
	        for (const [rhsKey, rhsValue] of rhsEntries) {
	            const lhsValue = lhsMisc[rhsKey];
	            if (typeof lhsValue === "function" || typeof rhsValue === "function") {
	                // They're both functions that can be merged (or one's a function and the other's null).
	                // Not an *easy* case, but a well-defined one.
	                const merged = mergeFunctions(lhsValue, rhsValue);
	                ret[rhsKey] = merged;
	            }
	            else {
	                // Uh...we're here because one of them's null, right?
	                if (lhsValue == null && rhsValue == null) {
	                    if (rhsValue === null && lhsValue === undefined)
	                        ret[rhsKey] = rhsValue;
	                    else
	                        ret[rhsKey] = lhsValue;
	                }
	                if (lhsValue == null)
	                    ret[rhsKey] = rhsValue;
	                else if (rhsValue == null)
	                    ret[rhsKey] = lhsValue;
	                else if (rhsValue == lhsValue) ;
	                else {
	                    // Ugh.
	                    // No good strategies here, just log it if requested
	                    log?.(`The prop "${typeof rhsKey == "symbol" ? "<symbol>" : rhsKey}" cannot simultaneously be the values ${lhsValue} and ${rhsValue}. One must be chosen outside of useMergedProps.`);
	                    ret[rhsKey] = rhsValue;
	                }
	            }
	        }
	        return ret;
	    };
	}
	function mergeFunctions(lhs, rhs) {
	    if (!lhs)
	        return rhs;
	    if (!rhs)
	        return lhs;
	    return (...args) => {
	        const lv = lhs(...args);
	        const rv = rhs(...args);
	        if (lv instanceof Promise || rv instanceof Promise)
	            return Promise.all([lv, rv]);
	    };
	}
	/*
	function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

	    const id0: GenericGet<{}, "id", string> = "";
	    const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
	    //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
	    const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

	    type M1 = GenericGet<P, "style", string>;
	    type M2 = GenericGet<{}, "style", string>;
	    const m1: M1 = "";
	    const m2: M1 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m3: M1 = 0;

	    const m4: M2 = "";
	    const m5: M2 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m6: M2 = 0;

	    const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
	    const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
	    const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
	    const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
	    const p5 = useMergedProps<HTMLInputElement>()(props, {});
	    const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
	    const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


	    p1.id?.concat("");
	    p2.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p3.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p4.id?.concat("");


	    p5.id?.concat("");
	    p6.id?.concat("");
	    p7.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    p5.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p6.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p7.id.concat("");


	    if (p5.allowFullScreen === undefined) {}
	    else if (p5.allowFullScreen === false) {}
	    else if (p5.allowFullScreen === true) {}
	    else {
	        acceptsNever(p5.allowFullScreen);
	    }


	    if (p6.allowFullScreen === undefined) {}
	    else if (p6.allowFullScreen === false) {}
	    else if (p6.allowFullScreen === true) {}
	    else {
	        acceptsNever(p6.allowFullScreen);
	    }


	    if (p7.allowFullScreen === undefined) {}
	    else if (p7.allowFullScreen === false) {}
	    else if (p7.allowFullScreen === true) {}
	    else {
	        acceptsNever(p7.allowFullScreen);
	    }


	    // Make sure it works recursively
	    const r1a = useMergedProps<HTMLInputElement>()({}, p1);
	    const r1b = useMergedProps<HTMLInputElement>()(props, p1);
	    const r2a = useMergedProps<HTMLInputElement>()({}, p2);
	    const r2b = useMergedProps<HTMLInputElement>()(props, p2);
	    const r3a = useMergedProps<HTMLInputElement>()({}, p3);
	    const r3b = useMergedProps<HTMLInputElement>()(props, p3);
	    const r4a = useMergedProps<HTMLInputElement>()({}, p4);
	    const r4b = useMergedProps<HTMLInputElement>()(props, p4);
	    const r5a = useMergedProps<HTMLInputElement>()({}, p5);
	    const r5b = useMergedProps<HTMLInputElement>()(props, p5);
	    const r6a = useMergedProps<HTMLInputElement>()({}, p6);
	    const r6b = useMergedProps<HTMLInputElement>()(props, p6);
	    const r7a = useMergedProps<HTMLInputElement>()({}, p7);
	    const r7b = useMergedProps<HTMLInputElement>()(props, p7);


	    r1a.id?.concat("");
	    r1b.id?.concat("");
	    r2a.id?.concat("");
	    r2b.id?.concat("");
	    // @ts-expect-error    id can't be anything but undefined
	    r3a.id?.concat("");
	    r3b.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    r4a.id?.concat("");
	    r4b.id?.concat("");


	    r5a.id?.concat("");
	    r5b.id?.concat("");
	    r6a.id?.concat("");
	    r6b.id?.concat("");
	    r7a.id?.concat("");
	    r7b.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    r5a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r5b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7b.id.concat("");


	    if (r5a.allowFullScreen === undefined) {}
	    else if (r5a.allowFullScreen === false) {}
	    else if (r5a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5a.allowFullScreen);
	    }


	    if (r5b.allowFullScreen === undefined) {}
	    else if (r5b.allowFullScreen === false) {}
	    else if (r5b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5b.allowFullScreen);
	    }


	    if (r6a.allowFullScreen === undefined) {}
	    else if (r6a.allowFullScreen === false) {}
	    else if (r6a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6a.allowFullScreen);
	    }


	    if (r6b.allowFullScreen === undefined) {}
	    else if (r6b.allowFullScreen === false) {}
	    else if (r6b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6b.allowFullScreen);
	    }


	    if (r7a.allowFullScreen === undefined) {}
	    else if (r7a.allowFullScreen === false) {}
	    else if (r7a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7a.allowFullScreen);
	    }


	    if (r7b.allowFullScreen === undefined) {}
	    else if (r7b.allowFullScreen === false) {}
	    else if (r7b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7b.allowFullScreen);
	    }

	}
	function acceptsNever(n: never) {}
	*/

	function returnNull() { return null; }
	/**
	 * Allows accessing the element a ref references as soon as it does so.
	 * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
	 * adding a RefCallback and merging it with any existing ref that existed on the props.
	 *
	 * Don't forget to provide the Element as the type argument!
	 *
	 * @returns The element, and the sub-hook that makes it retrievable.
	 */
	function useRefElement(args) {
	    const { onElementChange, onMount, onUnmount } = (args ?? {});
	    useEnsureStability("useRefElement", onElementChange, onMount, onUnmount);
	    // Called (indirectly) by the ref that the element receives.
	    const handler = F((e, prevValue) => {
	        onElementChange?.(e, prevValue);
	        if (prevValue)
	            onUnmount?.(prevValue);
	        if (e)
	            onMount?.(e);
	    }, []);
	    // Let us store the actual (reference to) the element we capture
	    const [getElement, setElement] = usePassiveState(handler, returnNull);
	    // Create a RefCallback that's fired when mounted 
	    // and that notifies us of our element when we have it
	    const myRef = F((e) => {
	        if (e)
	            setElement(() => e);
	    }, []);
	    const useRefElementProps = F((props) => useMergedProps()({ ref: myRef }, props), []);
	    // Return both the element and the hook that modifies 
	    // the props and allows us to actually find the element
	    return {
	        useRefElementProps,
	        getElement
	    };
	}

	function useElementSize({ getObserveBox, onSizeChange }) {
	    useEnsureStability("useElementSize", getObserveBox, onSizeChange);
	    const [getSize, setSize] = usePassiveState(onSizeChange, returnNull$1);
	    const currentObserveBox = s(undefined);
	    const needANewObserver = F((element, observeBox) => {
	        if (element) {
	            const document = getDocument(element);
	            const window = document.defaultView;
	            const handleUpdate = () => {
	                if (element.isConnected) {
	                    const { clientWidth, scrollWidth, offsetWidth, clientHeight, scrollHeight, offsetHeight, clientLeft, scrollLeft, offsetLeft, clientTop, scrollTop, offsetTop } = element;
	                    setSize({ clientWidth, scrollWidth, offsetWidth, clientHeight, scrollHeight, offsetHeight, clientLeft, scrollLeft, offsetLeft, clientTop, scrollTop, offsetTop });
	                }
	            };
	            if (window && ("ResizeObserver" in window)) {
	                const observer = new ResizeObserver((_entries) => { handleUpdate(); });
	                observer.observe(element, { box: observeBox });
	                return () => observer.disconnect();
	            }
	            else {
	                document.addEventListener("resize", handleUpdate, { passive: true });
	                return () => document.removeEventListener("resize", handleUpdate);
	            }
	        }
	    }, []);
	    const { getElement, useRefElementProps } = useRefElement({ onElementChange: F((e) => needANewObserver(e, getObserveBox?.()), []) });
	    y(() => {
	        if (getObserveBox) {
	            if (currentObserveBox.current !== getObserveBox())
	                needANewObserver(getElement(), getObserveBox());
	        }
	    });
	    return {
	        getElement,
	        getSize,
	        useElementSizeProps: useRefElementProps
	    };
	}

	function capitalize(str) {
	    return (str[0].toUpperCase() + str.substr(1));
	}
	/**
	 * Inspects the element's style and determines the logical direction that text flows.
	 *
	 * Certain CSS properties, like `block-size`, respect the current writing mode and text direction.
	 * But `transform`, `clip`, etc. don't.
	 *
	 * This is provided so that CSS properties can consistently use those logical properties.
	 *
	 * See https://drafts.csswg.org/css-writing-modes/#logical-to-physical
	 *
	 * @returns An object containing the following functions:
	 * * `getLogicalDirection`: retrieves a `LogicalDirectionInfo` representing the current state of the element. (Function is constant between renders)
	 * * `convertElementSize`: When used in conjunction with `useElementSize`, allows you to retrieve the logical size of an element instead of the physical size.
	 * * `convertToLogicalOrientation`: Based on the current direction, converts "horizontal" or "vertical" to "inline" or "block".
	 * * `convertToPhysicalOrientation`:  Based on the current direction, converts "inline" or "block" to "horizontal" or "vertical".
	 */
	function useLogicalDirection({ onLogicalDirectionChange }) {
	    useEnsureStability("useLogicalDirection", onLogicalDirectionChange);
	    const [getComputedStyles, setComputedStyles] = usePassiveState(null, returnNull$1);
	    const { getElement, useRefElementProps } = useRefElement({
	        onElementChange: F((element) => {
	            if (element) {
	                setComputedStyles(window.getComputedStyle(element));
	            }
	        }, [])
	    });
	    // TODO: There's no way to refresh which writing mode we have once mounted.
	    //   A. There's no way to watch for CSS style changes
	    //   B. Calling getComputedStyle after every render for every element gets expensive fast and
	    //   C. Is not necessary for most use cases that will never switch writing-mode within a single component
	    //      (Those that do will need to mount and unmount the component that uses it)
	    //
	    // As a solution, here's a cheap workaround that checks when the element's size has changed,
	    // and if so, tests if the writing mode has changed too.
	    //
	    // This will work for at least some number of cases, but a better solution is still needed.
	    const { useElementSizeProps } = useElementSize({ onSizeChange: F(_ => onLogicalDirectionChange?.(getLogicalDirectionInfo()), []) });
	    const getLogicalDirectionInfo = F(() => {
	        const computedStyles = getComputedStyles();
	        if (computedStyles) {
	            const w = computedStyles.writingMode;
	            let d = computedStyles.direction;
	            const t = computedStyles.textOrientation;
	            if (t == "upright")
	                d = "ltr";
	            return ({ ...WritingModes[w || "horizontal-tb"][d || "ltr"] });
	        }
	        return null;
	    }, []);
	    //const [getLogicalDirectionInfo, setLogicalDirectionInfo] = usePassiveState<LogicalDirectionInfo>(onLogicalDirectionChange);
	    const convertToLogicalOrientation = F((elementOrientation, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        if (direction?.inlineOrientation === elementOrientation)
	            return "inline";
	        return "block";
	    }, []);
	    const convertToPhysicalSide = F((side, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        switch (side) {
	            case "block-start":
	                return M[(direction?.blockDirection ?? "ttb")[0]];
	            case "block-end":
	                return M[(direction?.blockDirection ?? "ttb")[2]];
	            case "inline-start":
	                return M[(direction?.inlineDirection ?? "ltr")[0]];
	            case "inline-end":
	                return M[(direction?.inlineDirection ?? "ltr")[2]];
	        }
	    }, []);
	    const convertToLogicalSide = F((side, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        if (direction?.inlineOrientation === "vertical") {
	            switch (side) {
	                case "top":
	                    return direction.inlineDirection === "ttb" ? "inline-start" : "inline-end";
	                case "bottom":
	                    return direction.inlineDirection === "btt" ? "inline-start" : "inline-end";
	                case "left":
	                    return direction.blockDirection === "ltr" ? "block-start" : "block-end";
	                case "right":
	                    return direction.blockDirection === "rtl" ? "block-start" : "block-end";
	            }
	        }
	        else if (direction?.inlineOrientation === "horizontal") {
	            switch (side) {
	                case "top":
	                    return direction.blockDirection === "ttb" ? "block-start" : "block-end";
	                case "bottom":
	                    return direction.blockDirection === "btt" ? "block-start" : "block-end";
	                case "left":
	                    return direction.inlineDirection === "ltr" ? "inline-start" : "inline-end";
	                case "right":
	                    return direction.inlineDirection === "rtl" ? "inline-start" : "inline-end";
	            }
	        }
	        /* eslint-disable no-debugger */
	        debugger;
	        console.assert(false);
	        return "inline-start";
	    }, []);
	    const convertToPhysicalOrientation = F((elementOrientation, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        if (elementOrientation == "inline") {
	            if (direction?.inlineOrientation == "horizontal")
	                return "horizontal";
	            return "vertical";
	        }
	        else {
	            if (direction?.blockOrientation == "vertical")
	                return "vertical";
	            return "horizontal";
	        }
	    }, []);
	    const convertElementSize = F((elementSize, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        if (direction) {
	            const { inlineSize, blockSize, inlineDirection, blockDirection } = direction;
	            // Size is relatively simple
	            const clientInlineSize = elementSize[`client${capitalize(inlineSize)}`];
	            const clientBlockSize = elementSize[`client${capitalize(blockSize)}`];
	            const offsetInlineSize = elementSize[`offset${capitalize(inlineSize)}`];
	            const offsetBlockSize = elementSize[`offset${capitalize(blockSize)}`];
	            const scrollInlineSize = elementSize[`scroll${capitalize(inlineSize)}`];
	            const scrollBlockSize = elementSize[`scroll${capitalize(blockSize)}`];
	            const f1 = getPhysicalLeftTop(inlineDirection);
	            const f2 = getPhysicalRightBottom(inlineDirection);
	            const f3 = getPhysicalLeftTop(blockDirection);
	            const f4 = getPhysicalRightBottom(blockDirection);
	            const clientInlineInset = elementSize[`client${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`client${capitalize(f2)}`]);
	            const scrollInlineInset = elementSize[`scroll${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`scroll${capitalize(f2)}`]);
	            const offsetInlineInset = elementSize[`offset${capitalize(f1)}`] == undefined ? undefined : (elementSize[`offset${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`offset${capitalize(f2)}`]));
	            const clientBlockInset = elementSize[`client${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`client${capitalize(f4)}`]);
	            const scrollBlockInset = elementSize[`scroll${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`scroll${capitalize(f4)}`]);
	            const offsetBlockInset = elementSize[`offset${capitalize(f3)}`] == undefined ? undefined : (elementSize[`offset${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`offset${capitalize(f4)}`]));
	            return {
	                clientInlineSize,
	                scrollInlineSize,
	                offsetInlineSize,
	                clientBlockSize,
	                scrollBlockSize,
	                offsetBlockSize,
	                clientInlineInset,
	                scrollInlineInset,
	                offsetInlineInset,
	                clientBlockInset,
	                scrollBlockInset,
	                offsetBlockInset,
	            };
	        }
	        return null;
	    }, []);
	    return {
	        useLogicalDirectionProps: F((props) => useRefElementProps(useElementSizeProps(props)), []),
	        getElement,
	        getLogicalDirectionInfo,
	        convertToLogicalSize: convertElementSize,
	        convertToLogicalOrientation,
	        convertToPhysicalOrientation,
	        convertToLogicalSide,
	        convertToPhysicalSide
	    };
	}
	// Position requires us to sometimes use one property (like `left`)
	// or sometimes two (like `left` + `width`)
	function getPhysicalLeftTop(dir) { if (dir === "ltr" || dir == "rtl")
	    return "left"; return "top"; }
	function getPhysicalRightBottom(dir) { if (dir === "rtl")
	    return "width"; if (dir === "btt")
	    return "height"; return null; }
	// Helper for extracting info from "ltr", "ttb", etc.
	const M = {
	    t: "top",
	    b: "bottom",
	    l: "left",
	    r: "right"
	};
	const HorizontalTbLtr = {
	    inlineDirection: "ltr",
	    blockDirection: "ttb",
	    inlineOrientation: "horizontal",
	    blockOrientation: "vertical",
	    inlineSize: "width",
	    blockSize: "height",
	    leftRightDirection: "ltr",
	    overUnderDirection: "ttb"
	};
	const HorizontalTbRtl = {
	    ...HorizontalTbLtr,
	    inlineDirection: "rtl",
	};
	const VerticalRlLtr = {
	    inlineDirection: "ttb",
	    blockDirection: "rtl",
	    inlineOrientation: "vertical",
	    blockOrientation: "horizontal",
	    inlineSize: "height",
	    blockSize: "width",
	    leftRightDirection: "ttb",
	    overUnderDirection: "rtl"
	};
	const VerticalRlRtl = {
	    ...VerticalRlLtr,
	    inlineDirection: "btt"
	};
	const SidewaysRlLtr = { ...VerticalRlLtr };
	const SidewaysRlRtl = { ...VerticalRlRtl };
	const VerticalLrLtr = {
	    ...VerticalRlLtr,
	    blockDirection: "ltr",
	};
	const VerticalLrRtl = {
	    ...VerticalRlRtl,
	    blockDirection: "ltr",
	};
	const SidewaysLtLtr = {
	    ...VerticalLrLtr,
	    inlineDirection: "btt",
	    leftRightDirection: "btt",
	    overUnderDirection: "ltr"
	};
	const SidewaysLtRtl = {
	    ...SidewaysLtLtr,
	    inlineDirection: "ttb"
	};
	const HorizontalTb = {
	    ltr: HorizontalTbLtr,
	    rtl: HorizontalTbRtl
	};
	const VerticalRl = {
	    ltr: VerticalRlLtr,
	    rtl: VerticalRlRtl
	};
	const VerticalLr = {
	    ltr: VerticalLrLtr,
	    rtl: VerticalLrRtl
	};
	const SidewaysRl = {
	    ltr: SidewaysRlLtr,
	    rtl: SidewaysRlRtl
	};
	const SidewaysLr = {
	    ltr: SidewaysLtLtr,
	    rtl: SidewaysLtRtl
	};
	const WritingModes = {
	    "horizontal-tb": HorizontalTb,
	    "vertical-lr": VerticalLr,
	    "vertical-rl": VerticalRl,
	    "sideways-lr": SidewaysLr,
	    "sideways-rl": SidewaysRl
	};

	/**
	 * Slightly enhanced version of `useState` that includes a getter that remains constant
	 * (i.e. you can use it in `useEffect` and friends without it being a dependency).
	 *
	 * @param initialState
	 * @returns
	 */
	function useState(initialState) {
	    // We keep both, but overrride the `setState` functionality
	    const [state, setStateP] = d(initialState);
	    const ref = s(state);
	    // Hijack the normal setter function 
	    // to also set our ref to the new value
	    const setState = F(value => {
	        if (typeof value === "function") {
	            const callback = value;
	            setStateP(prevValue => {
	                const nextValue = callback(prevValue);
	                ref.current = nextValue;
	                return nextValue;
	            });
	        }
	        else {
	            ref.current = value;
	            setStateP(value);
	        }
	    }, []);
	    const getState = () => { return ref.current; };
	    console.assert(ref.current === state || (typeof state === "number" && isNaN(state)));
	    return [state, setState, getState];
	}

	const Table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";
	function base64(value) {
	    return Table[value];
	}
	function random6Bits() {
	    return Math.floor(Math.random() * 0b1000000);
	}
	function random64Bits() {
	    return [random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits()];
	}
	/**
	 * Returns a randomly-generated ID with an optional prefix.
	 * Note that if the prefix is *explicitly* set to "", then
	 * IDs that are not valid under HTML4 may be generated. Oh no.
	 */
	function generateRandomId(prefix) {
	    return `${prefix ?? "id-"}${random64Bits().map(n => base64(n)).join("")}`;
	}

	const previousInputs = new Map();
	const toRun = new Map();
	// TODO: Whether this goes in options.diffed or options._commit
	// is a post-suspense question.
	// Right now, using options._commit has the problem of running
	// *after* refs are applied, but we need to come before even that
	// so `ref={someStableFunction}` works.
	// 
	// Also it's private.
	//
	// ...
	// Well, useEvent or whatever is finally, finally 4 years later finally here
	// which is cool and means we won't need this at all soon.
	// So for now we'll stick with diff to prevent any weirdness with
	// commit being private and all.
	const commitName = "diffed";
	const originalCommit = l$1[commitName];
	const newCommit = (...args) => {
	    for (const [id, effectInfo] of toRun) {
	        const oldInputs = previousInputs.get(id);
	        if (argsChanged(oldInputs, effectInfo.inputs)) {
	            effectInfo.cleanup?.();
	            effectInfo.cleanup = effectInfo.effect();
	            previousInputs.set(id, effectInfo.inputs);
	        }
	    }
	    toRun.clear();
	    originalCommit?.(...args);
	};
	l$1[commitName] = newCommit;
	/**
	 * Semi-private function to allow stable callbacks even within `useLayoutEffect` and ref assignment.
	 *
	 * Every render, we send the arguments to be evaluated after diffing has completed,
	 * which happens before.
	 *
	 * @param effect
	 * @param inputs
	 */
	function useBeforeLayoutEffect(effect, inputs) {
	    /*(() => {
	        const cleanup = useRef<void | (() => void) | null>(null);
	        const prevArgsRef = useRef<Inputs>(null!);
	        if (argsChanged(inputs, prevArgsRef.current)) {
	            prevArgsRef.current = inputs!;
	            if (cleanup.current)
	                cleanup.current();
	            cleanup.current = effect();
	        }
	    })();*/
	    const [id] = d(() => generateRandomId());
	    toRun.set(id, { effect, inputs, cleanup: null });
	    y(() => {
	        return () => {
	            toRun.delete(id);
	            previousInputs.delete(id);
	        };
	    }, [id]);
	}
	function argsChanged(oldArgs, newArgs) {
	    return !!(!oldArgs ||
	        oldArgs.length !== newArgs?.length ||
	        newArgs?.some((arg, index) => arg !== oldArgs[index]));
	}

	const Unset = Symbol("unset");
	/**
	 * Given an input value, returns a constant getter function that can be used
	 * inside of `useEffect` and friends without including it in the dependency array.
	 *
	 * This uses `options.diffed` in order to run before everything, even
	 * ref assignment. This means this getter is safe to use anywhere ***except the render phase***.
	 *
	 * @param value
	 * @returns
	 */
	function useStableGetter(value) {
	    const ref = s(Unset);
	    useBeforeLayoutEffect(() => { ref.current = value; }, [value]);
	    return F(() => {
	        if (ref.current === Unset) {
	            throw new Error('Value retrieved from useStableGetter() cannot be called during render.');
	        }
	        return ref.current;
	    }, []);
	}

	/**
	 * Alternate useCallback() which always returns the same (wrapped) function reference
	 * so that it can be excluded from the dependency arrays of `useEffect` and friends.
	 *
	 * Do not use during the render phase!  `useLayoutEffect` is fine though.
	 */
	function useStableCallback(fn) {
	    const currentCallbackGetter = useStableGetter(fn);
	    return F((...args) => {
	        return currentCallbackGetter()(...args);
	    }, []);
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};

	/** Used to match a single whitespace character. */
	var reWhitespace = /\s/;

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	 * character of `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the index of the last non-whitespace character.
	 */
	function trimmedEndIndex(string) {
	  var index = string.length;

	  while (index-- && reWhitespace.test(string.charAt(index))) {}
	  return index;
	}

	/** Used to match leading whitespace. */
	var reTrimStart = /^\s+/;

	/**
	 * The base implementation of `_.trim`.
	 *
	 * @private
	 * @param {string} string The string to trim.
	 * @returns {string} Returns the trimmed string.
	 */
	function baseTrim(string) {
	  return string
	    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	    : string;
	}

	/** Built-in value references. */
	var Symbol$1 = root.Symbol;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto$1.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/** Built-in value references. */
	var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag$1),
	      tag = value[symToStringTag$1];

	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString$1.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = baseTrim(value);
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	/** Error message constants. */
	var FUNC_ERROR_TEXT$1 = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$1);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;

	    return maxing
	      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        clearTimeout(timerId);
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}

	function identity$2(...t) { return t; }
	function useThrottled(callback, wait, options) {
	    const throttled = A$1(() => {
	        return callback ? throttle(callback, wait, options) : null;
	    }, [callback, wait, options?.leading, options?.trailing]);
	    y(() => {
	        return () => throttled?.cancel();
	    }, [throttled]);
	    return throttled;
	}
	function useDebounced(callback, wait, options) {
	    const debounced = A$1(() => {
	        return callback ? debounce(callback, wait, options) : null;
	    }, [callback, wait, options?.leading, options?.maxWait, options?.trailing]);
	    y(() => {
	        return () => debounced?.cancel();
	    }, [debounced]);
	    return debounced;
	}
	/**
	 * Given an async function, returns a function that's suitable for non-async APIs,
	 * along with other information about the current run's status.
	 *
	 * See also `useAsyncHandler` for a version that's specialized for DOM event handlers.
	 *
	 * When called multiple times in quick succession, (i.e. before the handler has finished),
	 * this works like Lodash's `throttle` function with the `wait` option always
	 * set to however long the handler takes to complete. A second call to the sync function will be
	 * throttled until the first call has finished. The return value of the function is the result
	 * of the previous invocation, or `undefined` on the first call.
	 *
	 * The handler is only ever delayed if one is currently running, so, e.g. for iOS touch events the
	 * first call happens in the same event handler (which means things like calls to `element.focus()`
	 * will work as intended, since that fails when the event is "split up")
	 *
	 * Finally, because the sync handler may be invoked on a delay, any property references on the arguments
	 * provided might be stale by the time it's actually invoked (e.g. accessing `event.currentTarget.checked`
	 * is not stable across time because it's a "live" value -- you almost always want the value that it
	 * had at the original time the handler was called). The `capture` option allows you to save that kind of
	 * dynamic data at the time it runs; the `AP` and `SP` type parameters likewise control
	 * the parameters the async handler and sync handler expect respectively.
	 *
	 */
	function useAsync(asyncHandler, options) {
	    /* eslint-disable prefer-const */
	    let { throttle, debounce, capture } = (options ?? {});
	    capture ??= identity$2;
	    // We keep, like, a lot of render-state, but it only ever triggers a re-render
	    // when we start/stop an async action.
	    // Keep track of this for the caller's sake -- we don't really care.
	    const [currentType, setCurrentType] = useState(null);
	    const [runCount, setRunCount] = useState(0);
	    const [settleCount, setSettleCount] = useState(0);
	    const [resolveCount, setResolveCount] = useState(0);
	    const [rejectCount, setRejectCount] = useState(0);
	    // Things related to current execution
	    // Because we can both return and throw undefined, 
	    // we need separate state to track their existance too.
	    const [pending, setPending, getPending] = useState(false);
	    const [result, setResult, getResult] = useState(undefined);
	    const [error, setError, _getError] = useState(undefined);
	    const [hasError, setHasError, _getHasError] = useState(false);
	    const [hasResult, setHasResult, _getHasResult] = useState(false);
	    // We implement our own throttling behavior in regards to waiting until the async handler finishes.
	    // These two passive state variables keep track of that, automatically queueing/dequeuing the next handler.
	    const [getQueued, setQueued] = usePassiveState(null, returnNull$1);
	    // The actual sync handler.
	    // Capture/transform the given parameters if applicable,
	    // then run further logic that's debounced/throttled
	    const captureArgsAndExecuteDebouncedHandler = useStableCallback(function onNewExecuteRequest(...newArgs2) {
	        console.log("captureArgsAndExecuteDebouncedHandler");
	        // Capture the arguments we were given.
	        // We might use them immediately, or we might store them to `queued`,
	        // but in either case we do need the captured value.
	        const captured = capture(...newArgs2);
	        // This is all logic that deals with the captured value instead of the raw arguments.
	        // It's called in two separate circumstances,
	        // and has the debounce/throttle logic already applied
	        return executeHandlerWithDebounce(getPending(), ...captured);
	    });
	    // This is the logic that runs when the handler is *just* about to start.
	    // This function itself is further transformed to be throttled/debounced if requested,
	    // so this might not be called immediately after 
	    const executeHandlerWithoutDebounce = useStableCallback(function onNewExecuteRequest2(enqueue, ...newArgs) {
	        const onThen = (value) => { console.log("executeHandlerWithoutDebounce.onThen"); setResult(value); setHasResult(true); setHasError(false); setResolveCount(r => ++r); };
	        const onCatch = (ex) => { console.log("executeHandlerWithoutDebounce.onCatch"); setError(ex); setHasError(true); setHasResult(false); setRejectCount(r => ++r); };
	        const onFinally = () => {
	            const queued = getQueued();
	            setSettleCount(s => ++s);
	            if (queued) {
	                console.log("executeHandlerWithoutDebounce.onFinally (queued)");
	                setQueued(null);
	                executeHandlerWithDebounce(false, ...queued);
	            }
	            else {
	                console.log("executeHandlerWithoutDebounce.onFinally (empty)");
	                setPending(false);
	            }
	        };
	        if (!enqueue) {
	            console.log("executeHandlerWithoutDebounce (immediate)");
	            // Nothing is pending at the moment, so we can run our function immediately.
	            setRunCount(r => ++r);
	            setPending(true);
	            const result = asyncHandler?.(...newArgs);
	            const isPromise = (result != null && typeof result == "object" && "then" in result);
	            if (result == null || !isPromise) {
	                // It's synchronous and returned successfully.
	                // Bail out early.
	                onThen(result);
	                onFinally();
	                setCurrentType("sync");
	            }
	            else {
	                result.then(onThen).catch(onCatch).finally(onFinally);
	                setCurrentType("async");
	            }
	        }
	        else {
	            console.log("executeHandlerWithoutDebounce (pending)");
	            // When we're still running a previous handler,
	            // just set ourselves as the next one to run and quit early.
	            // Nothing more to do.
	            setQueued(newArgs);
	        }
	        return getResult();
	    });
	    const executeHandlerWithT = useThrottled(!throttle ? null : executeHandlerWithoutDebounce, throttle ?? 0);
	    const executeHandlerWithD = useDebounced(!debounce ? null : (executeHandlerWithT ?? executeHandlerWithoutDebounce), debounce ?? 0);
	    const executeHandlerWithDebounce = (executeHandlerWithD ?? executeHandlerWithT ?? executeHandlerWithoutDebounce);
	    const flushDebouncedPromise = useStableCallback(() => {
	        if (executeHandlerWithDebounce && "flush" in executeHandlerWithDebounce)
	            executeHandlerWithDebounce.flush();
	    });
	    return {
	        syncHandler: captureArgsAndExecuteDebouncedHandler,
	        currentType,
	        pending,
	        result,
	        error,
	        hasError,
	        hasResult,
	        resolveCount,
	        rejectCount,
	        settleCount,
	        callCount: runCount,
	        flushDebouncedPromise
	    };
	}

	/**
	 * Given an asyncronous event handler, returns a syncronous one that works on the DOM,
	 * along with some other information related to the current state.
	 * Does not modify any props.
	 *
	 * Note that because the handler you provide may be called with a delay, and
	 * because the value of, e.g., an `<input>` element will likely be stale by the
	 * time the delay is over, a `capture` function is necessary in order to
	 * capture the relevant information from the DOM. Any other simple event data,
	 * like `mouseX` or `shiftKey` can stay on the event itself and don't
	 * need to be captured &ndash; it's never stale.
	 *
	 * ```tsx
	 * const asyncOnInput = async (value: number, e: Event) => {
	 *     [...] // Ex. send to a server and setState when done
	 * };
	 * const {
	 *     // A sync version of asyncOnInput
	 *     syncHandler,
	 *     // True while the handler is running
	 *     pending,
	 *     // The error thrown, if any
	 *     error,
	 *     // Show this value while the operation's pending
	 *     currentCapture,
	 *     // And others, see `UseAsyncHandlerReturnType`
	 *     ...rest
	 * } = useAsyncHandler<HTMLInputElement>()(asyncOnInput, {
	 *     // Pass in the capture function that saves event data
	 *     // from being stale.
	 *     capture: e => {
	 *         // `capture` can have side-effects because
	 *         // it's called exactly once per invocation
	 *         e.preventDefault();
	 *
	 *         // Save this value so that it's never stale
	 *         return e.currentTarget.valueAsNumber;
	 *     }
	 * });
	 *
	 * const onInput = pending? null : syncHandler;
	 * ```
	 *
	 * The handler is automatically throttled to only run one at a time.
	 * If the handler is called, and then before it finishes, is called again,
	 * it will be put on hold until the current one finishes, at which point
	 * the second one will run.  If the handler is called a third time before
	 * the first has finished, it will *replace* the second, so only the most
	 * recently called iteration of the handler will run.
	 *
	 *
	 * You may optionally *also* specify debounce and throttle parameters that wait until the
	 * syncronous handler has not been called for the specified number of
	 * milliseconds, at which point we *actually* run the asyncronous handler
	 * according to the logic in the previous paragraph. This is in
	 * *addition* to throttling the handler, and does not replace that behavior.
	 *
	 * @see useAsync A more general version of this hook that can work with any type of handler, not just DOM event handlers.
	 */
	function useAsyncHandler(asyncHandler, { capture: originalCapture, ...restAsyncOptions }) {
	    // We need to differentiate between "nothing captured yet" and "`undefined` was captured"
	    const [currentCapture, setCurrentCapture, getCurrentCapture] = useState(undefined);
	    const [hasCapture, setHasCapture] = useState(false);
	    // Wrap around the normal `useAsync` `capture` function to also
	    // keep track of the last value the user actually input.
	    // 
	    // Without this there's no way to re-render the control with
	    // it being both controlled and also having the "correct" value,
	    // and at any rate also protects against sudden exceptions reverting
	    // your change out from under you.
	    const capture = useStableCallback((e) => {
	        const captured = originalCapture(e);
	        setCurrentCapture(captured);
	        setHasCapture(true);
	        return [captured, e];
	    });
	    return {
	        getCurrentCapture,
	        currentCapture,
	        hasCapture,
	        ...useAsync(asyncHandler, { capture, ...restAsyncOptions })
	    };
	}

	/**
	 * Wrap the native `useEffect` to add arguments
	 * that allow accessing the previous value as the first argument,
	 * as well as the changes that caused the hook to be called as the second argument.
	 *
	 * @param effect
	 * @param inputs
	 * @param impl You can choose whether to use `useEffect` or `useLayoutEffect` by
	 * passing one of them as this argument. By default, it's `useEffect`.
	 */
	function useEffect(effect, inputs, impl = y) {
	    const prevInputs = s(undefined);
	    const effect2 = () => {
	        const changes = [];
	        if (inputs && prevInputs.current) {
	            for (let i = 0; i < Math.max(prevInputs.current.length, inputs.length); ++i) {
	                if (prevInputs.current[i] != inputs[i])
	                    changes[i] = { from: prevInputs.current[i], to: inputs[i] };
	            }
	        }
	        const ret = effect(prevInputs.current, changes);
	        prevInputs.current = inputs;
	        return ret;
	    };
	    impl(effect2, inputs);
	}

	/**
	 * Wrap the native `useLayoutEffect` to add arguments
	 * that allow accessing the previous value as the first argument,
	 * as well as the changes that caused the hook to be called as the second argument.
	 *
	 * @param effect
	 * @param inputs
	 */
	function useLayoutEffect(effect, inputs) {
	    return useEffect(effect, inputs, h);
	}

	function useTimeout({ timeout, callback, triggerIndex }) {
	    const stableCallback = useStableCallback(() => { startTimeRef.current = null; callback(); });
	    const getTimeout = useStableGetter(timeout);
	    // Set any time we start timeout.
	    // Unset any time the timeout completes
	    const startTimeRef = s(null);
	    const timeoutIsNull = (timeout == null);
	    // Any time the triggerIndex changes (including on mount)
	    // restart the timeout.  The timeout does NOT reset
	    // when the duration or callback changes, only triggerIndex.
	    y(() => {
	        if (!timeoutIsNull) {
	            const timeout = getTimeout();
	            console.assert(timeoutIsNull == (timeout == null));
	            if (timeout != null) {
	                startTimeRef.current = +(new Date());
	                const handle = setTimeout(stableCallback, timeout);
	                return () => clearTimeout(handle);
	            }
	        }
	    }, [triggerIndex, timeoutIsNull]);
	    const getElapsedTime = F(() => {
	        return (+(new Date())) - (+(startTimeRef.current ?? new Date()));
	    }, []);
	    const getRemainingTime = F(() => {
	        const timeout = getTimeout();
	        return timeout == null ? null : Math.max(0, timeout - getElapsedTime());
	    }, []);
	    return { getElapsedTime, getRemainingTime };
	}

	/**
	 * When used in tandem with `useRovingTabIndex`, allows control of
	 * the tabbable index with the arrow keys.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */
	function useLinearNavigation({ index, navigateToFirst, navigateToLast, navigateToNext, navigateToPrev, managedChildren, navigationDirection, disableArrowKeys, disableHomeEndKeys }) {
	    navigationDirection ??= "either";
	    const childCount = managedChildren.length;
	    // Make sure the tabbable index never escapes the bounds of all available children
	    // TODO: Keep track of the original index and keep it, at least until keyboard navigation.
	    useLayoutEffect(() => {
	        if (index !== null) {
	            if (index < 0) {
	                navigateToFirst();
	            }
	            else if (childCount > 0 && index >= childCount) {
	                navigateToLast();
	            }
	        }
	    }, [index, childCount, navigateToFirst, navigateToLast]);
	    const { getLogicalDirectionInfo, useLogicalDirectionProps } = useLogicalDirection({});
	    const onKeyDown = (e) => {
	        // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	        if (e.ctrlKey || e.metaKey)
	            return;
	        const info = getLogicalDirectionInfo();
	        const allowsBlockNavigation = (navigationDirection == "block" || navigationDirection == "either");
	        const allowsInlineNavigation = (navigationDirection == "inline" || navigationDirection == "either");
	        switch (e.key) {
	            case "ArrowUp": {
	                const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
	                const directionAllowed = (!disableArrowKeys && (info?.blockOrientation === "vertical" ? allowsBlockNavigation : allowsInlineNavigation));
	                if (directionAllowed) {
	                    if (info?.[propName] === "btt") {
	                        navigateToNext();
	                    }
	                    else {
	                        navigateToPrev();
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	            }
	            case "ArrowDown": {
	                const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
	                const directionAllowed = (!disableArrowKeys && (info?.blockOrientation === "vertical" ? allowsBlockNavigation : allowsInlineNavigation));
	                if (directionAllowed) {
	                    if (info?.[propName] === "btt") {
	                        navigateToPrev();
	                    }
	                    else {
	                        navigateToNext();
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	            }
	            case "ArrowLeft": {
	                const propName = (info?.inlineOrientation === "horizontal" ? "inlineDirection" : "blockDirection");
	                const directionAllowed = (!disableArrowKeys && (info?.inlineOrientation === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation));
	                if (directionAllowed) {
	                    if (info?.[propName] === "rtl") {
	                        navigateToNext();
	                    }
	                    else {
	                        navigateToPrev();
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	            }
	            case "ArrowRight": {
	                const propName = (info?.inlineOrientation === "horizontal" ? "inlineDirection" : "blockDirection");
	                const directionAllowed = (!disableArrowKeys && (info?.inlineOrientation === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation));
	                if (directionAllowed) {
	                    if (info?.[propName] === "rtl") {
	                        navigateToPrev();
	                    }
	                    else {
	                        navigateToNext();
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                e.preventDefault();
	                e.stopPropagation();
	                break;
	            }
	            case "Home":
	                if (!disableHomeEndKeys) {
	                    navigateToFirst();
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	            case "End":
	                if (!disableHomeEndKeys) {
	                    navigateToLast();
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	        }
	    };
	    return {
	        useLinearNavigationProps: F((props) => { return useLogicalDirectionProps(useMergedProps()({ onKeyDown }, props)); }, []),
	    };
	}
	/**
	 * Allows for the selection of a managed child by typing the given text associated with it.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */
	function useTypeaheadNavigation({ collator, getIndex, typeaheadTimeout, setIndex }) {
	    // For typeahead, keep track of what our current "search" string is (if we have one)
	    // and also clear it every 1000 ms since the last time it changed.
	    // Next, keep a mapping of typeahead values to indices for faster searching.
	    // And, for the user's sake, let them know when their typeahead can't match anything anymore
	    const [currentTypeahead, setCurrentTypeahead, getCurrentTypeahead] = useState(null);
	    useTimeout({ timeout: typeaheadTimeout ?? 1000, callback: () => { setCurrentTypeahead(null); setInvalidTypeahead(null); }, triggerIndex: currentTypeahead });
	    const sortedTypeaheadInfo = s([]);
	    const [invalidTypeahead, setInvalidTypeahead] = useState(false);
	    // Handle typeahead for input method editors as well
	    // Essentially, when active, ignore further keys 
	    // because we're waiting for a CompositionEnd event
	    const [, setImeActive, getImeActive] = useState(false);
	    // Because composition events fire *after* keydown events 
	    // (but within the same task, which, TODO, could be browser-dependent),
	    // we can use this to keep track of which event we're listening for on the first keydown.
	    const [nextTypeaheadChar, setNextTypeaheadChar] = useState(null);
	    useLayoutEffect(() => {
	        if (nextTypeaheadChar !== null) {
	            setCurrentTypeahead(typeahead => ((typeahead ?? "") + nextTypeaheadChar));
	            setNextTypeaheadChar(null);
	        }
	    }, [nextTypeaheadChar]);
	    const comparatorShared = useStableCallback((safeLhs, safeRhs) => {
	        let compare;
	        // For the purposes of typeahead, only compare a string of the same size as our currently typed string.
	        // By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.
	        safeLhs = safeLhs.normalize("NFD");
	        safeRhs = safeRhs.normalize("NFD");
	        if (collator)
	            compare = collator.compare(safeLhs, safeRhs);
	        else
	            compare = safeLhs.toLowerCase().localeCompare(safeRhs.toLowerCase() ?? "");
	        return compare;
	    });
	    const insertingComparator = useStableCallback((lhs, rhs) => {
	        if (typeof lhs === "string" && typeof rhs.text === "string") {
	            return comparatorShared(lhs, rhs.text);
	        }
	        return lhs - rhs;
	    });
	    const typeaheadComparator = useStableCallback((lhs, rhs) => {
	        if (typeof lhs === "string" && typeof rhs.text === "string") {
	            // During typeahead, all strings longer than ours should be truncated
	            // so that they're all considered equally by that point.
	            return comparatorShared(lhs, rhs.text.substring(0, lhs.length));
	        }
	        return lhs - rhs;
	    });
	    const useTypeaheadNavigationProps = F(function ({ ...props }) {
	        const onCompositionStart = (_e) => { setImeActive(true); };
	        const onCompositionEnd = (e) => {
	            setNextTypeaheadChar(e.data);
	            setImeActive(false);
	        };
	        const onKeyDown = (e) => {
	            const imeActive = getImeActive();
	            const key = e.key;
	            // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	            if (e.ctrlKey || e.metaKey)
	                return;
	            if (!imeActive && e.key === "Backspace") {
	                // Remove the last character in a way that doesn't split UTF-16 surrogates.
	                setCurrentTypeahead(t => t === null ? null : [...t].reverse().slice(1).reverse().join(""));
	                e.preventDefault();
	                e.stopPropagation();
	                return;
	            }
	            // The key property represents the typed character OR the "named key attribute" of the key pressed.
	            // There's no definite way to tell the difference, but for all intents and purposes
	            // there are no one-character names, and there are no non-ASCII-alpha names.
	            // Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.
	            const isCharacterKey = (key.length === 1 || !/^[A-Za-z]/.test(key));
	            if (isCharacterKey) {
	                if (key == " " && (getCurrentTypeahead() ?? "").trim().length == 0) ;
	                else {
	                    e.preventDefault();
	                    e.stopPropagation();
	                    // Note: Won't be true for the first keydown
	                    // but will be overwritten before useLayoutEffect is called
	                    // to actually apply the change
	                    if (!imeActive)
	                        setNextTypeaheadChar(key);
	                }
	            }
	        };
	        return useMergedProps()({ onKeyDown, onCompositionStart, onCompositionEnd, }, props);
	    }, []);
	    // Handle changes in typeahead that cause changes to the tabbable index
	    y(() => {
	        if (currentTypeahead && sortedTypeaheadInfo.current.length) {
	            const sortedTypeaheadIndex = binarySearch(sortedTypeaheadInfo.current, currentTypeahead, typeaheadComparator);
	            if (sortedTypeaheadIndex < 0) {
	                // The user has typed an entry that doesn't exist in the list
	                // (or more specifically "for which there is no entry that starts with that input")
	                setInvalidTypeahead(true);
	            }
	            else {
	                setInvalidTypeahead(false);
	                /*
	                  We know roughly where, in the sorted array of strings, our next typeahead location is.
	                  But roughly isn't good enough if there are multiple matches.
	                  To convert our sorted index to the unsorted index we need, we have to find the first
	                  element that matches us *and* (if any such exist) is *after* our current selection.

	                  In other words, the only way typeahead moves backwards relative to our current
	                  position is if the only other option is behind us.

	                  It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
	                  Though there's also a case for just going upwards to the nearest to prevent jumpiness.
	                  But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
	                  I dunno. Going back to the start is the simplist though.

	                  Basically what this does: Starting from where we found ourselves after our binary search,
	                  scan backwards and forwards through all adjacent entries that also compare equally so that
	                  we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
	                  (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).

	                  TODO: The binary search starts this off with a solid O(log n), but one-character
	                  searches are, thanks to pigeonhole principal, eventually guaranteed to become
	                  O(n*log n). This is annoying but probably not easily solvable? There could be an
	                  exception for one-character strings, but that's just kicking the can down
	                  the road. Maybe one or two characters would be good enough though.
	                */
	                // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.
	                let lowestUnsortedIndexAll = null;
	                let lowestSortedIndexAll = sortedTypeaheadIndex;
	                // These two are only set for elements that are ahead of us, but the principle's the same otherwise
	                let lowestUnsortedIndexNext = null;
	                let lowestSortedIndexNext = sortedTypeaheadIndex;
	                const updateBestFit = (u) => {
	                    if (lowestUnsortedIndexAll == null || u < lowestUnsortedIndexAll) {
	                        lowestUnsortedIndexAll = u;
	                        lowestSortedIndexAll = i;
	                    }
	                    if ((lowestUnsortedIndexNext == null || u < lowestUnsortedIndexNext) && u > (getIndex() ?? -Infinity)) {
	                        lowestUnsortedIndexNext = u;
	                        lowestSortedIndexNext = i;
	                    }
	                };
	                let i = sortedTypeaheadIndex;
	                while (i >= 0 && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	                    updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	                    --i;
	                }
	                i = sortedTypeaheadIndex;
	                while (i < sortedTypeaheadInfo.current.length && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	                    updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	                    ++i;
	                }
	                if (lowestUnsortedIndexNext !== null)
	                    setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex);
	                else if (lowestUnsortedIndexAll !== null)
	                    setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex);
	            }
	        }
	    }, [currentTypeahead]);
	    const useTypeaheadNavigationChild = F(({ text, ...i }) => {
	        y(() => {
	            if (text) {
	                // Find where to insert this item.
	                // Because all index values should be unique, the returned sortedIndex
	                // should always refer to a new location (i.e. be negative)                
	                const sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, insertingComparator);
	                console.assert(sortedIndex < 0 || insertingComparator(sortedTypeaheadInfo.current[sortedIndex].text, { unsortedIndex: i.index, text }) == 0);
	                if (sortedIndex < 0) {
	                    sortedTypeaheadInfo.current.splice(-sortedIndex - 1, 0, { text, unsortedIndex: i.index });
	                }
	                else {
	                    sortedTypeaheadInfo.current.splice(sortedIndex, 0, { text, unsortedIndex: i.index });
	                }
	                return () => {
	                    // When unmounting, find where we were and remove ourselves.
	                    // Again, we should always find ourselves because there should be no duplicate values if each index is unique.
	                    const sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, insertingComparator);
	                    console.assert(sortedIndex < 0 || insertingComparator(sortedTypeaheadInfo.current[sortedIndex].text, { unsortedIndex: i.index, text }) == 0);
	                    if (sortedIndex >= 0) {
	                        sortedTypeaheadInfo.current.splice(sortedIndex, 1);
	                    }
	                };
	            }
	        }, [text]);
	        return {};
	    }, []);
	    return {
	        useTypeaheadNavigationChild,
	        useTypeaheadNavigationProps,
	        currentTypeahead,
	        invalidTypeahead,
	    };
	}
	/**
	 * Your usual binary search implementation.
	 *
	 * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
	 * @param array The array to search through
	 * @param wanted The value you'd like to find
	 * @param comparator Compares `wanted` with the current value in `array`
	 * @returns A non-negative value if `wanted` was found, and a negative number if not.
	 * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
	 */
	function binarySearch(array, wanted, comparator) {
	    let firstIndex = 0;
	    let lastIndex = array.length - 1;
	    while (firstIndex <= lastIndex) {
	        const testIndex = (lastIndex + firstIndex) >> 1;
	        const comparisonResult = comparator(wanted, array[testIndex]);
	        if (comparisonResult > 0) {
	            firstIndex = testIndex + 1;
	        }
	        else if (comparisonResult < 0) {
	            lastIndex = testIndex - 1;
	        }
	        else {
	            return testIndex;
	        }
	    }
	    return -firstIndex - 1;
	}

	/**
	 * Allows a parent component to access information about certain
	 * child components once they have rendered.
	 *
	 * This hook is slightly more complicated in that it returns both a
	 * prop-modifying hook, but also a hook that each child will need
	 * to use: `useManagedChild`.  It's stable across renders, so just
	 * toss it into a `Context` so the children can have access to it.
	 * This function registers the child with the parent and provides
	 * it with any requested information, but doesn't do anything else
	 * until it unmounts and retracts that information.
	 */
	function useChildManager() {
	    // This is blindly updated any time a child mounts or unmounts itself.
	    // Used to make sure that any time the array of managed children updates,
	    // we also re-render.
	    const [_childUpdateIndex, setChildUpdateIndex] = useState(0);
	    const [totalChildrenMounted, setTotalChildrenMounted, getTotalChildrenMounted] = useState(0);
	    const [totalChildrenUnounted, setTotalChildrenUnounted, _getTotalChildrenUnounted] = useState(0);
	    const childrenCurrentlyMounted = totalChildrenMounted - totalChildrenUnounted;
	    const managedChildren = s([] /** TODO: Any problems caused by using an array when it should be an object? */);
	    const mountedChildren = s([]);
	    const mountOrder = s(new Map());
	    const indicesByElement = s(new Map());
	    const deletedIndices = s(new Set());
	    // Used to keep track of indices that have "over-mounted" and by how much.
	    // We need this so that we don't erase saved information when a component
	    // "overmounts" over another which then, correctly, switches *itself* to something else.
	    // In general, this should only happen when components are swapping between indices.
	    // By the time they're done, this map should be all 0s again, at which point
	    // it's okay to actually run the unmount code.
	    // 
	    // TODO: throw a console.assert somewhere to make up for the lost 
	    // "are you sure you want to overwrite this child's index!" assertion.
	    // Namely, is this map all 0s when the parent element re-renders? 
	    // Probably not because of setChildUpdateIndex
	    const overmountCount = s(new Map());
	    const getMountIndex = F((index) => { return mountOrder.current.get(index); }, []);
	    const useManagedChild = F((info) => {
	        const { getElement, useRefElementProps } = useRefElement({ onElementChange: F((element) => {
	                if (element) {
	                    indicesByElement.current.set(element, info.index);
	                    deletedIndices.current.delete(info.index);
	                    if (managedChildren.current[info.index] != undefined) {
	                        overmountCount.current.set(info.index, (overmountCount.current.get(info.index) ?? 0) + 1);
	                    }
	                    setChildUpdateIndex(c => ++c);
	                    managedChildren.current[info.index] = { ...info };
	                    return () => {
	                        setChildUpdateIndex(c => ++c);
	                        if ((overmountCount.current.get(info.index) ?? 0) > 0) {
	                            overmountCount.current.set(info.index, (overmountCount.current.get(info.index) ?? 0) - 1);
	                        }
	                        else {
	                            delete managedChildren.current[info.index];
	                            deletedIndices.current.add(info.index);
	                            if (typeof info.index === "number") {
	                                while (managedChildren.current.length && managedChildren.current[managedChildren.current.length - 1] === undefined)
	                                    managedChildren.current.length -= 1;
	                            }
	                            indicesByElement.current.delete(element);
	                        }
	                    };
	                }
	            }, []) });
	        useLayoutEffect(() => {
	            const index = getTotalChildrenMounted();
	            mountOrder.current.set(info.index, index);
	            mountedChildren.current[index] = info;
	            setTotalChildrenMounted(t => ++t);
	            return () => {
	                mountOrder.current.delete(info.index);
	                mountedChildren.current[index] = null;
	                setTotalChildrenUnounted(t => ++t);
	            };
	        }, [info.index]);
	        // Any time our child props change, make that information available generally.
	        // *Don't re-render*, otherwise we'd be stuck in an
	        // infinite loop every time an anonymous function is passed.
	        // It comes in from the props so the child was already updated by it --
	        // we don't need the parent to re-render every single child any time
	        // "onClick" updates or whatever.  The relevant child already knows,
	        // and that's what matters.
	        useLayoutEffect(() => {
	            if (managedChildren.current[info.index] != undefined)
	                managedChildren.current[info.index] = { ...info };
	        }, [...Object.entries(info).flat()]);
	        return { getElement, useManagedChildProps: useRefElementProps };
	    }, []);
	    return {
	        useManagedChild,
	        childCount: childrenCurrentlyMounted,
	        managedChildren: managedChildren.current,
	        mountedChildren: mountedChildren.current,
	        indicesByElement: indicesByElement.current,
	        totalChildrenMounted,
	        totalChildrenUnounted,
	        getMountIndex,
	        deletedIndices: deletedIndices.current
	    };
	}
	/**
	 * Helper function for letting children know when they are or are not the
	 * current selected/expanded/focused/whatever child.
	 *
	 * Automatically handles when children are mounted & unmounted and such.
	 *
	 * While it will be called once for every child on mount, after that setFlag
	 * is guaranteed to only be called once on activation and once on deactivation,
	 * so it's generally safe to put side effects inside if necessary.
	 * It's also safe to make it non-stable.
	 *
	 * @param activatedIndex What index the current selected (etc.) child is
	 * @param length How many children exist (as managedChildren.length)
	 * @param setFlag A function that probably looks like (i, flag) => managedChildren[i].setActive(flag)
	 * @param useEffect Which version of useEffect to use. Default is `useLayoutEffect`.
	 */
	function useChildFlag({ activatedIndex, closestFit, managedChildren, setChildFlag, getChildFlag, useEffect }) {
	    useEffect ??= useLayoutEffect;
	    if (closestFit)
	        console.assert(typeof activatedIndex == "number" || activatedIndex == null);
	    // Whenever we re-render, make sure that any children that have mounted
	    // have their flags properly set.  We know it's unset if it was null,
	    // in which case we just set it to true or false.
	    //
	    // And, I mean, as long as we're already iterating through every child
	    // on every render to check for newly mounted children, might as well
	    // just handle changed in the activatedIndex here too.
	    useEffect(() => {
	        // TODO: We have limited information about when a child mounts or unmounts
	        // and so we don't know where to look for any null entries that need changing.
	        // We know when activatedIndex changes and what it was, but not much else.
	        // Looping over every child *works*, and it's not an expensive loop by any means,
	        // but, like, eugh.
	        // Also, before we do anything, see if we need to "correct" activatedIndex.
	        // It could be pointing to a child that doesn't exist, and if closestFit is given,
	        // we need to adjust activatedIndex to point to a valid child.
	        if (typeof activatedIndex == "number" && Array.isArray(managedChildren) && managedChildren[activatedIndex] == null) {
	            // Oh dear. Are we actively correcting this?
	            if (closestFit) {
	                // Oh dear.
	                // Search up and down the list of children for any that actually exist.
	                let searchHigh = activatedIndex + 1;
	                let searchLow = activatedIndex - 1;
	                while ((searchLow >= 0 && managedChildren[searchLow] == null) || (searchHigh < managedChildren.length && managedChildren[searchHigh] == null)) {
	                    ++searchHigh;
	                    --searchLow;
	                }
	                if (searchLow >= 0 && managedChildren[searchLow] != null) {
	                    activatedIndex = searchLow;
	                }
	                else if (searchHigh < managedChildren.length && managedChildren[searchHigh] != null) {
	                    activatedIndex = searchHigh;
	                }
	                // Now that we've done that, if any valid children exist, we've reset activatedIndex to point to it instead.
	                // Now we'll fall through to the for loop set and unset our flags based on this "corrected" value.
	                //
	                // We don't correct it or save it anywhere because we'd very much like to return to it
	                // if the child remounts itself.
	            }
	        }
	        if (Array.isArray(managedChildren)) {
	            for (let i = 0; i < managedChildren.length; ++i) {
	                const shouldBeSet = (i == activatedIndex);
	                if (getChildFlag(i) != shouldBeSet) {
	                    setChildFlag(i, shouldBeSet);
	                }
	            }
	        }
	        else {
	            Object.entries(managedChildren).forEach(([i, _info]) => {
	                const shouldBeSet = (i == activatedIndex);
	                if (getChildFlag(i) != shouldBeSet) {
	                    setChildFlag(i, shouldBeSet);
	                }
	            });
	        }
	    });
	}

	/**
	 * Returns a function that will, when called, force the component
	 * that uses this hook to re-render itself.
	 *
	 * It's a bit smelly, so best to use sparingly.
	 */
	function useForceUpdate() {
	    const [, set] = d(0);
	    return s(() => set(i => ++i)).current;
	}

	/**
	 * Implements a roving tabindex system where only one "focusable"
	 * component in a set is able to receive a tab focus. *Which*
	 * of those elements receives focus is determined by you, but it's
	 * recommended to offload that logic then to another hook, like
	 * `useLinearNavigation`, which lets you change the tabbable
	 * element with the arrow keys, `useTypeaheadNavigation`, which
	 * lets you change the tabbable index with typeahead, or
	 * `useListNavigation` if you just want everything bundled together.
	 *
	 * Note that the child hook returned by this function must be used
	 * by every child that uses this roving tabindex logic.  The
	 * prop-modifying hook *that* hook returns should then be used
	 * on the child's element, as well as any other elements you'd like
	 * to be explicitly made untabbable too.
	 *
	 * `shouldFocusOnChange` should return true if focus is
	 * contained within whatever element contains the roving tab index.
	 * Generally as simple as the following:
	 * ```
	 * const [focusedInner, setFocusedInner] = useState(false);
	 * const { useHasFocusProps } = useHasFocus<ParentElement>({ setFocusedInner });
	 * const focusOnChange = (focusedInner != false);
	 * ```
	 * It's not included here because `useRovingTabIndex` doesn't know
	 * anything about the container element, only children elements.
	 * And just as well! Children should be allowed at the root,
	 * regardless of if it's the whole app or just a given component.
	 */
	function useRovingTabIndex({ shouldFocusOnChange: foc, tabbableIndex }) {
	    const getShouldFocusOnChange = useStableGetter(foc);
	    const getTabbableIndex = useStableGetter(tabbableIndex);
	    // Call the hook that allows us to collect information from children who provide it
	    const { managedChildren, childCount, useManagedChild, indicesByElement, ...rest } = useChildManager();
	    // Any time the tabbable index changes,
	    // notify the previous child that it's no longer tabbable,
	    // and notify the next child that is allowed to be tabbed to.
	    useChildFlag({
	        activatedIndex: tabbableIndex,
	        managedChildren,
	        closestFit: true,
	        setChildFlag: (index, tabbable) => {
	            if (index != null)
	                managedChildren[index]?.setTabbable(tabbable);
	        },
	        getChildFlag: (index) => (managedChildren[index]?.getTabbable() ?? null)
	    });
	    const useRovingTabIndexChild = F((info) => {
	        const [rrafIndex, setRrafIndex] = useState(1);
	        const rerenderAndFocus = F(() => { setRrafIndex(i => ++i); }, []);
	        const [tabbable, setTabbable, getTabbable] = useState(null);
	        const newInfo = {
	            ...info,
	            rerenderAndFocus,
	            setTabbable: F((tabbable) => { setTabbable(tabbable); }, []),
	            getTabbable
	        };
	        const { getElement, useManagedChildProps } = useManagedChild(newInfo);
	        y(() => {
	            const element = getElement();
	            if (tabbable) {
	                const shouldFocusOnChange = getShouldFocusOnChange()();
	                if (shouldFocusOnChange && "focus" in element) {
	                    requestAnimationFrame(() => {
	                        queueMicrotask(() => {
	                            element.focus();
	                        });
	                    });
	                }
	            }
	        }, [tabbable, rrafIndex]);
	        function useRovingTabIndexSiblingProps({ tabIndex, ...props }) {
	            if (tabIndex == null) {
	                if (tabbable)
	                    tabIndex = 0;
	                else
	                    tabIndex = -1;
	            }
	            return useMergedProps()({ tabIndex }, props);
	        }
	        function useRovingTabIndexChildProps({ tabIndex, ...props }) {
	            if (tabIndex == null) {
	                if (tabbable)
	                    tabIndex = 0;
	                else
	                    tabIndex = -1;
	            }
	            return useMergedProps()(useManagedChildProps({ tabIndex }), props);
	        }
	        return {
	            useRovingTabIndexChildProps,
	            useRovingTabIndexSiblingProps,
	            tabbable
	        };
	    }, [useManagedChild]);
	    return {
	        useRovingTabIndexChild,
	        childCount,
	        managedChildren,
	        indicesByElement,
	        focusCurrent: F(() => {
	            if (managedChildren[getTabbableIndex() ?? 0].getTabbable()) {
	                managedChildren[getTabbableIndex() ?? 0]?.rerenderAndFocus();
	            }
	            else {
	                // For whatever reason, the previously tabbable child
	                // is no longer tabbable without us knowing about it.
	                // Maybe it unmounted?
	                // Either way, try to find the newly-selected child.
	                // (I don't think this code path has ever been run)
	                /* eslint-disable no-debugger */
	                debugger;
	                let i = getTabbableIndex() ?? 0;
	                let j = i + 1;
	                while (i >= 0) {
	                    --i;
	                    if (managedChildren[getTabbableIndex() ?? 0].getTabbable()) {
	                        managedChildren[getTabbableIndex() ?? 0]?.rerenderAndFocus();
	                        return;
	                    }
	                }
	                while (j < managedChildren.length) {
	                    ++j;
	                    if (managedChildren[getTabbableIndex() ?? 0].getTabbable()) {
	                        managedChildren[getTabbableIndex() ?? 0]?.rerenderAndFocus();
	                        return;
	                    }
	                }
	            }
	        }, []),
	        ...rest
	    };
	}

	function identity$1(t) { return t; }
	/**
	 * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
	 *
	 * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
	 * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any any text for typeahead to focus the next item that matches.
	 */
	function useListNavigation({ initialIndex, shouldFocusOnChange, collator, keyNavigation, indexMangler, indexDemangler }) {
	    indexMangler ??= identity$1;
	    indexDemangler ??= identity$1;
	    keyNavigation ??= "either";
	    useEnsureStability("useListNavigation", indexMangler, indexDemangler);
	    // Keep track of three things related to the currently tabbable element's index:
	    // What it is, and whether, when we render this component and it's changed, to also focus the element that was made tabbable.
	    const [tabbableIndex, setTabbableIndex, getTabbableIndex] = useState(initialIndex === undefined ? 0 : initialIndex);
	    const { managedChildren, indicesByElement, useRovingTabIndexChild, focusCurrent, ...rest } = useRovingTabIndex({ shouldFocusOnChange, tabbableIndex });
	    /*const navigateToIndex = useCallback((i: number | null) => { setTabbableIndex(i); }, []);
	    const navigateToFirst = useCallback(() => { tryNavigateToIndex(managedChildren,) setTabbableIndex(indexMangler!(0)); }, []);
	    const navigateToLast = useCallback(() => { setTabbableIndex(indexMangler!(managedChildren.length - 1)); }, []);
	    const navigateToPrev = useCallback(() => { setTabbableIndex(i => indexMangler!(indexDemangler!(i ?? 0) - 1)) }, [indexDemangler, indexMangler]);
	    const navigateToNext = useCallback(() => { setTabbableIndex(i => indexMangler!(indexDemangler!(i ?? 0) + 1)) }, [indexDemangler, indexMangler]);
	*/
	    const navigateToIndex = F((i) => {
	        setTabbableIndex(i == null ? null : tryNavigateToIndex(managedChildren, 0, i, 1, indexMangler ?? identity$1, indexDemangler ?? identity$1));
	    }, []);
	    const navigateToFirst = F(() => {
	        setTabbableIndex(tryNavigateToIndex(managedChildren, 0, 0, 1, indexMangler ?? identity$1, indexDemangler ?? identity$1));
	    }, []);
	    const navigateToLast = F(() => { setTabbableIndex(tryNavigateToIndex(managedChildren, managedChildren.length, managedChildren.length, -1, indexMangler ?? identity$1, indexDemangler ?? identity$1)); }, []);
	    const navigateToPrev = F(() => {
	        setTabbableIndex(c => {
	            return tryNavigateToIndex(managedChildren, c ?? 0, (c ?? 0) - 1, -1, indexMangler ?? identity$1, indexDemangler ?? identity$1);
	        });
	    }, []);
	    const navigateToNext = F(() => {
	        setTabbableIndex(c => {
	            return tryNavigateToIndex(managedChildren, c ?? 0, (c ?? 0) + 1, 1, indexMangler ?? identity$1, indexDemangler ?? identity$1);
	        });
	    }, []);
	    const setIndex = F((index) => {
	        setTabbableIndex(index);
	    }, []);
	    const { currentTypeahead, invalidTypeahead, useTypeaheadNavigationChild, useTypeaheadNavigationProps } = useTypeaheadNavigation({ collator, getIndex: getTabbableIndex, setIndex, typeaheadTimeout: 1000 });
	    const { useLinearNavigationProps } = useLinearNavigation({ navigationDirection: keyNavigation, index: getTabbableIndex() ?? 0, managedChildren, navigateToPrev, navigateToNext, navigateToFirst, navigateToLast });
	    const useListNavigationProps = F((props) => {
	        return useLinearNavigationProps(useTypeaheadNavigationProps(props));
	    }, [useLinearNavigationProps, useTypeaheadNavigationProps]);
	    const useListNavigationChild = F((info) => {
	        useTypeaheadNavigationChild(info);
	        //const { useLinearNavigationChildProps } = useLinearNavigationChild(info as I);
	        const { useRovingTabIndexChildProps, useRovingTabIndexSiblingProps, tabbable } = useRovingTabIndexChild(info);
	        const useListNavigationChildProps = function ({ ...props }) {
	            return useMergedProps()(useRovingTabIndexChildProps((({ onClick: roveToSelf, hidden: info.hidden }))), props);
	        };
	        const roveToSelf = F(() => { navigateToIndex(info.index); }, []);
	        return {
	            useListNavigationChildProps,
	            useListNavigationSiblingProps: useRovingTabIndexSiblingProps,
	            tabbable
	        };
	    }, [useTypeaheadNavigationChild, useRovingTabIndexChild, navigateToIndex]);
	    return {
	        useListNavigationChild,
	        useListNavigationProps,
	        currentTypeahead,
	        invalidTypeahead,
	        tabbableIndex,
	        managedChildren,
	        indicesByElement,
	        navigateToIndex,
	        navigateToNext,
	        navigateToPrev,
	        navigateToFirst,
	        navigateToLast,
	        focusCurrent,
	        ...rest
	    };
	}
	function tryNavigateToIndex(managedCells, initial, target, searchDirection, indexMangler, indexDemangler) {
	    function helper() {
	        if (searchDirection === -1) {
	            while (target >= 0 && (managedCells[target] == null || !!managedCells[target]?.hidden))
	                target = indexMangler(indexDemangler(target) - 1);
	            return target < 0 ? initial : target;
	        }
	        else if (searchDirection === 1) {
	            while (target < managedCells.length && managedCells[target] == null || !!managedCells[target]?.hidden)
	                target = indexMangler(indexDemangler(target) + 1);
	            return target >= managedCells.length ? initial : target;
	        }
	        else {
	            return initial;
	        }
	    }
	    return (helper());
	}

	function identity(t) { return t; }
	function useGridNavigation({ shouldFocusOnChange, indexMangler, indexDemangler }) {
	    indexMangler ??= identity;
	    indexDemangler ??= identity;
	    const getFocusCellOnRowChange = useStableCallback(shouldFocusOnChange);
	    // Keep track of our currently tabbable row and column.
	    // These are mangled, and so relative to the DOM order, not component order.
	    // Any operations done on these numbers need to be demangled first,
	    // otherwise they'll be incorrect.
	    const [currentRow, setCurrentRow2, getCurrentRow] = useState(0);
	    const [currentColumn, setCurrentColumn2, getCurrentColumn] = useState(0);
	    // Functions used for navigating to different rows.
	    // Each row has its own useRovingTabIndex -- if it's not the 
	    // current row, then all of its children are non-tabbable.
	    // Otherwise, it is tabbable, with the tabbable cell being currentColumn.
	    // This happens automatically when these functions are called.
	    const navigateToFirstRow = F(() => { setCurrentRow2(c => tryNavigateToIndex(managedRows, c ?? 0, 0, 1, indexMangler, indexDemangler)); }, [indexMangler, indexDemangler]);
	    const navigateToLastRow = F(() => { setCurrentRow2(c => tryNavigateToIndex(managedRows, c ?? 0, managedRows.length - 1, -1, indexMangler, indexDemangler)); }, [indexMangler, indexDemangler]);
	    const navigateToPrevRow = F(() => { setCurrentRow2(c => { return tryNavigateToIndex(managedRows, c ?? 0, indexMangler(Math.max(0, indexDemangler(c ?? 0) - 1)), -1, indexMangler, indexDemangler); }); }, [indexMangler, indexDemangler]);
	    const navigateToNextRow = F(() => { setCurrentRow2(c => { return tryNavigateToIndex(managedRows, c ?? 0, indexMangler(Math.min((managedRows.length - 1), indexDemangler(c ?? 0) + 1)), 1, indexMangler, indexDemangler); }); }, [indexMangler, indexDemangler]);
	    // Track child rows and manage keyboard navigation among them.
	    const { childCount, managedChildren: managedRows, useManagedChild: useManagedRow } = useChildManager();
	    const { useLinearNavigationProps: useLinearNavigationRowProps } = useLinearNavigation({
	        managedChildren: managedRows,
	        index: indexMangler(getCurrentRow() ?? 0),
	        navigateToFirst: navigateToFirstRow,
	        navigateToLast: navigateToLastRow,
	        navigateToNext: navigateToNextRow,
	        navigateToPrev: navigateToPrevRow,
	        navigationDirection: "block"
	    });
	    // Actually handle notifying the relevant rows when they
	    // change from untabbable to tabbable or vice-versa.
	    useChildFlag({
	        activatedIndex: currentRow,
	        managedChildren: managedRows,
	        setChildFlag: (index, tabbable) => { managedRows[index]?.setIsTabbableRow(tabbable); },
	        getChildFlag: (index) => (managedRows[index]?.getIsTabbableRow() ?? null),
	        useEffect: useEffect
	    });
	    /**
	     * Optional, but provides typeahead for each column in the table.
	     */
	    const useGridNavigationColumn = F(() => {
	        const { currentTypeahead, invalidTypeahead, useTypeaheadNavigationChild } = useTypeaheadNavigation({ getIndex: getCurrentRow, setIndex: setCurrentRow2 });
	        const useGridNavigationColumnChild = F(({ index: rowIndex, text, hidden }) => {
	            useTypeaheadNavigationChild({ index: rowIndex, text: hidden ? null : text });
	        }, [useTypeaheadNavigationChild]);
	        return { useGridNavigationColumnChild, currentTypeahead, invalidTypeahead };
	    }, []);
	    // Last thing before we return -- here's the hook for individual rows and their cells.
	    const useGridNavigationRow = F(({ index: rowIndex, hidden, ...info }) => {
	        // When we change the current column, we send that information
	        // to the parent via setState, but that doesn't do anything
	        // for us.  The parent doesn't ever manage rows' cells for them.
	        // 
	        // So to get us to also update alongside the parent,
	        // we just use forceUpdate.
	        // We could also keep a copy of, like, "what this row thinks
	        // the current column is" that *should* always be kept in-
	        // sync with "getCurrentColumn()" as a state variable,
	        // but it *just* being used for that is arguably *more* confusing.
	        //
	        // Basically, information regarding the currently selected column
	        // "belongs" to *both* this row and the parent, conceptually,
	        // but for cleanliness' sake, just one of them gets it,
	        // and the other is manually updated whenever it changes.
	        const forceUpdate = useForceUpdate();
	        // "Shortcut" for any given row to know that it should or should not
	        // consider one of its cells tabbable.  Also used to determine
	        // if a change to the current selected cell should also
	        // trigger focusing that cell.
	        const [isTabbableRow, setIsTabbableRow, getIsTabbableRow] = useState(null);
	        // If we're not the tabbable row, then for the purposes of tabIndex
	        // calculations, we don't have a tabbable child cell.
	        const currentColumn = isTabbableRow ? getCurrentColumn() : null;
	        // Track child cells and manage keyboard navigation among them.
	        const { managedChildren: managedCells, useRovingTabIndexChild: useRovingTabIndexCell, childCount: cellCount } = useRovingTabIndex({
	            shouldFocusOnChange: F(() => { return !!getFocusCellOnRowChange() && !!getIsTabbableRow(); }, []),
	            tabbableIndex: currentColumn
	        });
	        // More navigation stuff
	        const navigateToFirstColumn = F(() => {
	            setCurrentColumn2(tryNavigateToIndex(managedCells, 0, 0, 1, identity, identity));
	            forceUpdate();
	        }, []);
	        const navigateToLastColumn = F(() => { setCurrentColumn2(tryNavigateToIndex(managedCells, managedCells.length, managedCells.length, -1, identity, identity)); forceUpdate(); }, []);
	        const navigateToPrevColumn = F(() => {
	            setCurrentColumn2(c => {
	                return tryNavigateToIndex(managedCells, c, c - 1, -1, identity, identity);
	            });
	            forceUpdate();
	        }, []);
	        const navigateToNextColumn = F(() => {
	            setCurrentColumn2(c => {
	                return tryNavigateToIndex(managedCells, c, c + 1, 1, identity, identity);
	            });
	            forceUpdate();
	        }, []);
	        const { useLinearNavigationProps: useLinearNavigationCellProps } = useLinearNavigation({
	            managedChildren: managedCells,
	            navigationDirection: "inline",
	            index: currentColumn ?? 0,
	            disableHomeEndKeys: true,
	            navigateToFirst: navigateToFirstColumn,
	            navigateToLast: navigateToLastColumn,
	            navigateToPrev: navigateToPrevColumn,
	            navigateToNext: navigateToNextColumn
	        });
	        // Notify the relevant child cells when they should/should not be tabbable
	        useChildFlag({
	            activatedIndex: currentColumn,
	            managedChildren: managedCells,
	            setChildFlag: (cellIndex, cellIsTabbable) => {
	                if (cellIndex != null && managedCells[cellIndex]) {
	                    managedCells[cellIndex].setTabbable(cellIsTabbable);
	                    if (cellIsTabbable)
	                        managedCells[cellIndex].rerenderAndFocus();
	                }
	            },
	            getChildFlag: (cellIndex) => (managedCells[cellIndex]?.getTabbable() ?? null),
	            useEffect
	        });
	        // Any time we become the currently tabbable row,
	        // make sure that we're in a valid cell, and shift left/right if not to find one.
	        // TODO: Seems kinda janky? Is there no cleaner way to accomplish this,
	        // especially since it's similar to other code?
	        useEffect(() => {
	            if (isTabbableRow) {
	                let cellIndex = getCurrentColumn();
	                while (cellIndex >= 0 && managedCells[cellIndex] == null) {
	                    --cellIndex;
	                }
	                if (cellIndex < 0) {
	                    cellIndex = getCurrentColumn();
	                    while (cellIndex < managedCells.length && managedCells[cellIndex] == null) {
	                        ++cellIndex;
	                    }
	                    if (cellIndex == managedCells.length)
	                        cellIndex = getCurrentColumn();
	                }
	                if (cellIndex != getCurrentColumn())
	                    setCurrentColumn2(cellIndex);
	            }
	        }, [isTabbableRow]);
	        const { useManagedChildProps: useManagedRowProps } = useManagedRow({
	            index: rowIndex,
	            setIsTabbableRow,
	            getIsTabbableRow: getIsTabbableRow,
	            hidden,
	            ...info
	        });
	        //const { useLinearNavigationChildProps: useLinearNavigationChildRowProps } = useLinearNavigationChildRow(info as IR)
	        const useGridNavigationRowProps = F((props) => useManagedRowProps(useLinearNavigationCellProps(useMergedProps()({ hidden: !!hidden, "data-index": rowIndex }, props))), [useManagedRowProps, !!hidden]);
	        const getRowIndex = useStableGetter(rowIndex);
	        const useGridNavigationCell = F((info) => {
	            const getTabbable = useStableCallback(() => tabbable);
	            const { tabbable, useRovingTabIndexChildProps } = useRovingTabIndexCell({ ...info, getTabbable });
	            //const { useLinearNavigationChildProps: useLinearNavigationChildCellProps } = useLinearNavigationChildCell(info as IC);
	            // Any time we interact with this cell, set it to be
	            // our "currently tabbable" cell, regardless of
	            // any previously selected row/column.
	            //
	            // TODO: Mouseup/down might be preferable,
	            // but it doesn't fire on label elements here?????
	            const onClick = F(() => {
	                setCurrentRow2(getRowIndex());
	                setCurrentColumn2(info.index);
	            }, [info.index]);
	            const useGridNavigationCellProps = F((props) => useRovingTabIndexChildProps((useMergedProps()({ onClick }, props))), [useRovingTabIndexChildProps]);
	            return { tabbable, useGridNavigationCellProps };
	        }, []);
	        return {
	            currentColumn,
	            useGridNavigationRowProps,
	            useGridNavigationCell,
	            cellCount,
	            isTabbableRow,
	            managedCells: managedCells
	        };
	    }, [useManagedRow, indexDemangler, indexMangler]);
	    return {
	        useGridNavigationProps: useLinearNavigationRowProps,
	        useGridNavigationRow,
	        useGridNavigationColumn,
	        rowCount: childCount,
	        cellIndex: currentColumn,
	        rowIndex: currentRow,
	        managedRows
	    };
	}

	const SharedAnimationFrameContext = D(null);
	/**
	 * The (optionally non-stable) `callback` you provide will start running every frame after the component mounts.
	 *
	 * Passing `null` is fine and simply stops the effect until you restart it by providing a non-null callback.
	 *
	 * **This hook does not return anything at all, including no prop-modifying hooks**
	 */
	function useAnimationFrame({ callback }) {
	    // Get a wrapper around the given callback that's stable
	    const stableCallback = useStableCallback(callback ?? noop);
	    const hasCallback = (callback != null);
	    const sharedAnimationFrameContext = T$1(SharedAnimationFrameContext);
	    y(() => {
	        if (sharedAnimationFrameContext) {
	            if (hasCallback) {
	                sharedAnimationFrameContext.addCallback(stableCallback);
	            }
	            else {
	                sharedAnimationFrameContext.removeCallback(stableCallback);
	            }
	        }
	        else {
	            if (hasCallback) {
	                // Get a wrapper around the wrapper around the callback
	                // that also calls `requestAnimationFrame` again.
	                const rafCallback = (ms) => {
	                    handle = requestAnimationFrame(rafCallback);
	                    stableCallback(ms);
	                };
	                let handle = requestAnimationFrame(rafCallback);
	                return () => cancelAnimationFrame(handle);
	            }
	        }
	    }, [sharedAnimationFrameContext, hasCallback]);
	}
	// eslint-disable @typescript-eslint/no-empty-function
	function noop() { }

	function useDraggable({ effectAllowed, data, dragImage, dragImageXOffset, dragImageYOffset }) {
	    const [dragging, setDragging, getDragging] = useState(false);
	    const [lastDropEffect, setLastDropEffect, getLastDropEffect] = useState(null);
	    const useDraggableProps = F((p) => {
	        const ref = s(null);
	        const onDragStart = (e) => {
	            //e.preventDefault();
	            setDragging(true);
	            if (e.dataTransfer) {
	                e.dataTransfer.effectAllowed = (effectAllowed ?? "all");
	                if (dragImage)
	                    e.dataTransfer.setDragImage(dragImage, dragImageXOffset ?? 0, dragImageYOffset ?? 0);
	                const entries = Object.entries(data);
	                for (const [mimeType, data] of entries) {
	                    e.dataTransfer.setData(mimeType, data);
	                }
	            }
	        };
	        const onDragEnd = (e) => {
	            e.preventDefault();
	            setDragging(false);
	            if (e.dataTransfer) {
	                if (e.dataTransfer.dropEffect != "none") {
	                    setLastDropEffect(e.dataTransfer.dropEffect);
	                }
	                else {
	                    setLastDropEffect(null);
	                }
	            }
	        };
	        return useMergedProps()({
	            draggable: true,
	            onDragStart,
	            onDragEnd,
	            ref
	        }, p);
	    }, [effectAllowed, dragImage, dragImageXOffset, dragImageYOffset, ...Object.entries(data).flat()]);
	    // Return both the element and the hook that modifies 
	    // the props and allows us to actually find the element
	    const ret = {
	        useDraggableProps,
	        dragging,
	        getDragging,
	        // Set once a drag has completed with the resulting action
	        // Useful for removing the element afterwards if it was "move"
	        lastDropEffect,
	        /**
	         * Test
	         */
	        getLastDropEffect
	    };
	    return ret;
	}

	class DroppableFileError extends Error {
	    fileName;
	    errorType;
	    constructor(fileName, base) {
	        super(base?.message ?? "An unspecified error occurred reading the file.");
	        this.fileName = fileName;
	        this.errorType = base?.name;
	    }
	}
	//MergedProps<UseRefElementPropsReturnType<E, Pick<h.JSX.HTMLAttributes<E>, "onDragEnter" | "onDragLeave" | "onDragOver" | "onDrop">>, P>;
	function useDroppable({ effect }) {
	    const [filesForConsideration, setFilesForConsideration] = useState(null);
	    const [stringsForConsideration, setStringsForConsideration] = useState(null);
	    const [droppedFiles, setDroppedFiles] = useState(null);
	    const [droppedStrings, setDroppedStrings] = useState(null);
	    const [dropError, setDropError] = useState(undefined);
	    // All the promises generated from the drop events.
	    // Used to process multiple drop events in succession
	    const dropPromisesRef = s([]);
	    const [currentPromiseIndex, setCurrentPromiseIndex, getCurrentPromiseIndex] = useState(-1);
	    const [promiseCount, setPromiseCount, getPromiseCount] = useState(0);
	    // Any time we add a new promise, if there's no current promise running, we need to start one.
	    // If there is one, then we don't need to do anything, since it runs the same check.
	    y(() => {
	        const currentPromiseIndex = getCurrentPromiseIndex();
	        const promiseCount = getPromiseCount();
	        if (promiseCount > 0) {
	            if ((currentPromiseIndex + 1) < promiseCount) {
	                setCurrentPromiseIndex(i => ++i);
	            }
	        }
	    }, [promiseCount]);
	    // Anytime our current promise changes,
	    // wait for it to finish, then set our state to its result.
	    // Finally, check to see if there are anymore promises.
	    // If there are, then increase currentPromiseCount,
	    // which will trigger this again.
	    //
	    // This shouldn't happen *often*, but maybe in the case of
	    // individually dropping a bunch of large files or something.
	    y(() => {
	        if (currentPromiseIndex >= 0) {
	            const currentPromise = dropPromisesRef.current[currentPromiseIndex];
	            currentPromise.then((info) => {
	                if (info !== null) {
	                    const { files, strings } = info;
	                    setDroppedFiles(files);
	                    setDroppedStrings(strings);
	                }
	                // Now that we're done, are there more promises in the queue?
	                const currentPromiseIndex = getCurrentPromiseIndex();
	                const promiseCount = getPromiseCount();
	                if ((currentPromiseIndex + 1) < promiseCount) {
	                    // Since this promise has started, more have been added.
	                    // Run this effect again.
	                    setCurrentPromiseIndex(i => ++i);
	                }
	            });
	        }
	    }, [currentPromiseIndex]);
	    const useDroppableProps = (p) => {
	        //const ref = useRef<E>(null);
	        // Handle collecting the current file metadata or MIME types.
	        const onDragEnter = (e) => {
	            e.preventDefault();
	            if (e.dataTransfer) {
	                // Is there a default? I can't find one anywhere.
	                e.dataTransfer.dropEffect = (effect ?? "move");
	                const newMimeTypes = new Set();
	                const newFiles = new Array();
	                for (const item of e.dataTransfer?.items ?? []) {
	                    const { kind, type } = item;
	                    if (kind === "string") {
	                        newMimeTypes.add(type);
	                    }
	                    else if (kind === "file") {
	                        newFiles.push({ type: item.type });
	                    }
	                }
	                setFilesForConsideration(newFiles);
	                setStringsForConsideration(newMimeTypes);
	            }
	        };
	        // Handle resetting the current file metadata or MIME types
	        const onDragLeave = (e) => {
	            e.preventDefault();
	            setFilesForConsideration(null);
	            setStringsForConsideration(null);
	        };
	        // Boilerplate, I guess
	        const onDragOver = (e) => {
	            e.preventDefault();
	        };
	        // Handle getting the drop data asynchronously
	        const onDrop = (e) => {
	            e.preventDefault();
	            setFilesForConsideration(null);
	            setStringsForConsideration(null);
	            const allPromises = new Array();
	            const dropData = {};
	            const dropFile = [];
	            for (const item of e.dataTransfer?.items ?? []) {
	                const { kind, type } = item;
	                if (kind === "string") {
	                    allPromises.push((new Promise((resolve, _reject) => item.getAsString(resolve))).then(str => dropData[type] = str));
	                }
	                else if (kind === "file") {
	                    const file = item.getAsFile();
	                    if (file) {
	                        allPromises.push(new Promise((resolve, reject) => {
	                            const reader = new FileReader();
	                            reader.onload = (_) => {
	                                resolve();
	                                const data = reader.result;
	                                dropFile.push({ data, name: file.name, type: file.type, size: data.byteLength, lastModified: file.lastModified });
	                            };
	                            reader.onerror = (_) => { reject(new DroppableFileError(file.name, reader.error)); };
	                            reader.onabort = (_) => { reject(new DroppableFileError(file.name, reader.error)); };
	                            reader.readAsArrayBuffer(file);
	                        }));
	                        dropFile.push();
	                    }
	                }
	            }
	            dropPromisesRef.current.push(Promise.all(allPromises).then(() => {
	                setPromiseCount(i => ++i);
	                setDropError(null);
	                return {
	                    strings: dropData,
	                    files: dropFile
	                };
	            }).catch(ex => {
	                /* eslint-disable no-debugger */
	                debugger;
	                setPromiseCount(i => ++i);
	                setDropError(ex);
	                return null;
	            }));
	        };
	        return useMergedProps()({ onDragEnter, onDragLeave, onDragOver, onDrop }, p);
	    };
	    return {
	        useDroppableProps,
	        filesForConsideration,
	        stringsForConsideration,
	        droppedFiles,
	        droppedStrings,
	        dropError
	    };
	}

	const activeElementUpdaters = new Map();
	const lastActiveElementUpdaters = new Map();
	const windowFocusedUpdaters = new Map();
	const windowsFocusedUpdaters = new Map();
	function forEachUpdater(window, map, value) {
	    for (const [otherWindow, updaters] of map) {
	        if (window === otherWindow) {
	            for (const updater of updaters) {
	                updater?.(value);
	            }
	        }
	    }
	}
	function focusout(e) {
	    const window = e.target.ownerDocument.defaultView;
	    if (e.relatedTarget == null) {
	        forEachUpdater(window, activeElementUpdaters, null);
	    }
	}
	function focusin(e) {
	    const window = e.target.ownerDocument.defaultView;
	    const currentlyFocusedElement = e.target;
	    forEachUpdater(window, activeElementUpdaters, currentlyFocusedElement);
	    forEachUpdater(window, lastActiveElementUpdaters, currentlyFocusedElement);
	}
	function windowFocus(e) {
	    const window = (e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView);
	    windowsFocusedUpdaters.set(window, true);
	    forEachUpdater(window, windowFocusedUpdaters, true);
	}
	function windowBlur(e) {
	    const window = (e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView);
	    windowsFocusedUpdaters.set(window, false);
	    forEachUpdater(window, windowFocusedUpdaters, false);
	}
	/**
	 * Allows you to inspect which element in the `document` currently has focus, which was most recently focused if none are currently, and whether or not the window has focus by returning the following functions:
	 * * `getActiveElement()`
	 * * `getLastActiveElement()`
	 * * `getWindowFocused()`
	 *
	 * (The document's body receiving focus, like it does when you click on an empty area, is counted as no element having focus for all intents and purposes)
	 *
	 * This is a passive hook, so by default it returns getter functions that report this information but the component will not re-render by default when the active element changes.
	 *
	 * If you need the component to re-render when the active element changes, use the `on*Change` arguments to set some state on your end.
	 */
	function useActiveElement({ onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, onMount, onUnmount, onMountChange }) {
	    useEnsureStability("useActiveElement", onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, onMountChange, onMount, onUnmount);
	    const { getElement, useRefElementProps } = useRefElement({
	        onMount,
	        onUnmount,
	        onElementChange: F((element, prevValue) => {
	            onMountChange?.(element, prevValue);
	            if (element) {
	                const document = element.ownerDocument;
	                const window = document?.defaultView;
	                if ((activeElementUpdaters.get(window)?.size ?? 0) === 0) {
	                    document?.addEventListener("focusin", focusin, { passive: true });
	                    document?.addEventListener("focusout", focusout, { passive: true });
	                    window?.addEventListener("focus", windowFocus, { passive: true });
	                    window?.addEventListener("blur", windowBlur, { passive: true });
	                }
	                // Add them even if they're undefined to more easily
	                // manage the ">0 means don't add handlers" logic.
	                const localActiveElementUpdaters = activeElementUpdaters.get(window) ?? new Set();
	                const localLastActiveElementUpdaters = lastActiveElementUpdaters.get(window) ?? new Set();
	                const localWindowFocusedUpdaters = windowFocusedUpdaters.get(window) ?? new Set();
	                localActiveElementUpdaters.add(setActiveElement);
	                localLastActiveElementUpdaters.add(setLastActiveElement);
	                localWindowFocusedUpdaters.add(setWindowFocused);
	                activeElementUpdaters.set(window, localActiveElementUpdaters);
	                lastActiveElementUpdaters.set(window, localLastActiveElementUpdaters);
	                windowFocusedUpdaters.set(window, localWindowFocusedUpdaters);
	                return () => {
	                    activeElementUpdaters.get(window).delete(setActiveElement);
	                    lastActiveElementUpdaters.get(window).delete(setLastActiveElement);
	                    windowFocusedUpdaters.get(window).delete(setWindowFocused);
	                    if (activeElementUpdaters.size === 0) {
	                        document?.removeEventListener("focusin", focusin);
	                        document?.removeEventListener("focusout", focusout);
	                        window?.removeEventListener("focus", windowFocus);
	                        window?.removeEventListener("blur", windowBlur);
	                    }
	                };
	            }
	        }, [])
	    });
	    const [getActiveElement, setActiveElement] = usePassiveState(onActiveElementChange, returnNull$1);
	    const [getLastActiveElement, setLastActiveElement] = usePassiveState(onLastActiveElementChange, returnNull$1);
	    const [getWindowFocused, setWindowFocused] = usePassiveState(onWindowFocusedChange, returnTrue);
	    return { getElement, useActiveElementProps: useRefElementProps, getActiveElement, getLastActiveElement, getWindowFocused };
	}

	function useHasFocus({ onFocusedChanged, onFocusedInnerChanged, onLastFocusedChanged, onLastFocusedInnerChanged, onLastActiveElementChange, onActiveElementChange, onWindowFocusedChange }) {
	    useEnsureStability("useHasFocus", onFocusedChanged, onFocusedInnerChanged, onLastFocusedChanged, onLastFocusedInnerChanged, onLastActiveElementChange, onActiveElementChange, onWindowFocusedChange);
	    const [getFocused, setFocused] = usePassiveState(onFocusedChanged, returnFalse);
	    const [getFocusedInner, setFocusedInner] = usePassiveState(onFocusedInnerChanged, returnFalse);
	    const [getLastFocused, setLastFocused] = usePassiveState(onLastFocusedChanged, returnFalse);
	    const [getLastFocusedInner, setLastFocusedInner] = usePassiveState(onLastFocusedInnerChanged, returnFalse);
	    const { getActiveElement, getLastActiveElement, getWindowFocused, useActiveElementProps, getElement } = useActiveElement({
	        onActiveElementChange: F((activeElement, prevActiveElement) => {
	            const selfElement = getElement();
	            const focused = (selfElement != null && (selfElement == activeElement));
	            const focusedInner = (!!selfElement?.contains(activeElement));
	            setFocused(focused);
	            setFocusedInner(focusedInner);
	            onActiveElementChange?.(activeElement, prevActiveElement);
	        }, []),
	        onLastActiveElementChange: F((lastActiveElement, prevLastActiveElement) => {
	            const selfElement = getElement();
	            const focused = (selfElement != null && (selfElement == lastActiveElement));
	            const focusedInner = (!!selfElement?.contains(lastActiveElement));
	            setLastFocused(focused);
	            setLastFocusedInner(focusedInner);
	            onLastActiveElementChange?.(lastActiveElement, prevLastActiveElement);
	        }, []),
	        onWindowFocusedChange
	    });
	    const useHasFocusProps = F((props) => { return useActiveElementProps(props); }, [useActiveElementProps]);
	    return { useHasFocusProps, getElement, getFocused, getFocusedInner, getLastFocused, getLastFocusedInner, getActiveElement, getLastActiveElement, getWindowFocused };
	}

	function useInterval({ interval, callback }) {
	    // Get a wrapper around the given callback that's stable
	    const stableCallback = useStableCallback(callback);
	    const getInterval = useStableGetter(interval);
	    y(() => {
	        const interval = getInterval();
	        let lastDelayUsed = interval;
	        if (interval == null)
	            return;
	        // Get a wrapper around the wrapper around the callback
	        // that clears and resets the interval if it changes.
	        const adjustableCallback = () => {
	            stableCallback();
	            const currentInterval = getInterval();
	            if (currentInterval != lastDelayUsed) {
	                clearInterval(handle);
	                if (currentInterval != null)
	                    handle = setInterval(adjustableCallback, lastDelayUsed = currentInterval);
	            }
	        };
	        let handle = setInterval(adjustableCallback, interval);
	        return () => clearInterval(handle);
	    }, []);
	}

	/*!
	* tabbable 5.3.3
	* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
	*/
	var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
	var NoElement = typeof Element === 'undefined';
	var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
	var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
	  return element.getRootNode();
	} : function (element) {
	  return element.ownerDocument;
	};

	var isInput = function isInput(node) {
	  return node.tagName === 'INPUT';
	};

	var isHiddenInput = function isHiddenInput(node) {
	  return isInput(node) && node.type === 'hidden';
	};

	var isDetailsWithSummary = function isDetailsWithSummary(node) {
	  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
	    return child.tagName === 'SUMMARY';
	  });
	  return r;
	};

	var isZeroArea = function isZeroArea(node) {
	  var _node$getBoundingClie = node.getBoundingClientRect(),
	      width = _node$getBoundingClie.width,
	      height = _node$getBoundingClie.height;

	  return width === 0 && height === 0;
	};

	var isHidden = function isHidden(node, _ref) {
	  var displayCheck = _ref.displayCheck,
	      getShadowRoot = _ref.getShadowRoot;

	  // NOTE: visibility will be `undefined` if node is detached from the document
	  //  (see notes about this further down), which means we will consider it visible
	  //  (this is legacy behavior from a very long way back)
	  // NOTE: we check this regardless of `displayCheck="none"` because this is a
	  //  _visibility_ check, not a _display_ check
	  if (getComputedStyle(node).visibility === 'hidden') {
	    return true;
	  }

	  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
	  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

	  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
	    return true;
	  } // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
	  //  (but NOT _the_ document; see second 'If' comment below for more).
	  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
	  //  is attached, and the one we need to check if it's in the document or not (because the
	  //  shadow, and all nodes it contains, is never considered in the document since shadows
	  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
	  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
	  //  visibility, including all the nodes it contains). The host could be any normal node,
	  //  or a custom element (i.e. web component). Either way, that's the one that is considered
	  //  part of the document, not the shadow root, nor any of its children (i.e. the node being
	  //  tested).
	  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
	  //  document (per the docs) and while it's a Document-type object, that document does not
	  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
	  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
	  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
	  //  node is actually detached.


	  var nodeRootHost = getRootNode(node).host;
	  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);

	  if (!displayCheck || displayCheck === 'full') {
	    if (typeof getShadowRoot === 'function') {
	      // figure out if we should consider the node to be in an undisclosed shadow and use the
	      //  'non-zero-area' fallback
	      var originalNode = node;

	      while (node) {
	        var parentElement = node.parentElement;
	        var rootNode = getRootNode(node);

	        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
	        ) {
	          // node has an undisclosed shadow which means we can only treat it as a black box, so we
	          //  fall back to a non-zero-area test
	          return isZeroArea(node);
	        } else if (node.assignedSlot) {
	          // iterate up slot
	          node = node.assignedSlot;
	        } else if (!parentElement && rootNode !== node.ownerDocument) {
	          // cross shadow boundary
	          node = rootNode.host;
	        } else {
	          // iterate up normal dom
	          node = parentElement;
	        }
	      }

	      node = originalNode;
	    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
	    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
	    //  it might be a falsy value, which means shadow DOM support is disabled
	    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
	    //  now we can just test to see if it would normally be visible or not, provided it's
	    //  attached to the main document.
	    // NOTE: We must consider case where node is inside a shadow DOM and given directly to
	    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.


	    if (nodeIsAttached) {
	      // this works wherever the node is: if there's at least one client rect, it's
	      //  somehow displayed; it also covers the CSS 'display: contents' case where the
	      //  node itself is hidden in place of its contents; and there's no need to search
	      //  up the hierarchy either
	      return !node.getClientRects().length;
	    } // Else, the node isn't attached to the document, which means the `getClientRects()`
	    //  API will __always__ return zero rects (this can happen, for example, if React
	    //  is used to render nodes onto a detached tree, as confirmed in this thread:
	    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
	    //
	    // It also means that even window.getComputedStyle(node).display will return `undefined`
	    //  because styles are only computed for nodes that are in the document.
	    //
	    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
	    //  somehow. Though it was never stated officially, anyone who has ever used tabbable
	    //  APIs on nodes in detached containers has actually implicitly used tabbable in what
	    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
	    //  considering __everything__ to be visible because of the innability to determine styles.

	  } else if (displayCheck === 'non-zero-area') {
	    // NOTE: Even though this tests that the node's client rect is non-zero to determine
	    //  whether it's displayed, and that a detached node will __always__ have a zero-area
	    //  client rect, we don't special-case for whether the node is attached or not. In
	    //  this mode, we do want to consider nodes that have a zero area to be hidden at all
	    //  times, and that includes attached or not.
	    return isZeroArea(node);
	  } // visible, as far as we can tell, or per current `displayCheck` mode


	  return false;
	}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
	//  unless they are in the _first_ <legend> element of the top-most disabled
	//  fieldset


	var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
	  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
	    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>

	    while (parentNode) {
	      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
	        // look for the first <legend> among the children of the disabled <fieldset>
	        for (var i = 0; i < parentNode.children.length; i++) {
	          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found

	          if (child.tagName === 'LEGEND') {
	            // if its parent <fieldset> is not nested in another disabled <fieldset>,
	            // return whether `node` is a descendant of its first <legend>
	            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
	          }
	        } // the disabled <fieldset> containing `node` has no <legend>


	        return true;
	      }

	      parentNode = parentNode.parentElement;
	    }
	  } // else, node's tabbable/focusable state should not be affected by a fieldset's
	  //  enabled/disabled state


	  return false;
	};

	var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
	  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
	  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
	    return false;
	  }

	  return true;
	};

	var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

	var isFocusable = function isFocusable(node, options) {
	  options = options || {};

	  if (!node) {
	    throw new Error('No node provided');
	  }

	  if (matches.call(node, focusableCandidateSelector) === false) {
	    return false;
	  }

	  return isNodeMatchingSelectorFocusable(options, node);
	};

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	(function (module, exports) {
		(function (global, factory) {
		  factory() ;
		}(commonjsGlobal, (function () {
		  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		  /**
		   * This work is licensed under the W3C Software and Document License
		   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
		   */

		  (function () {
		    // Return early if we're not running inside of the browser.
		    if (typeof window === 'undefined') {
		      return;
		    }

		    // Convenience function for converting NodeLists.
		    /** @type {typeof Array.prototype.slice} */
		    var slice = Array.prototype.slice;

		    /**
		     * IE has a non-standard name for "matches".
		     * @type {typeof Element.prototype.matches}
		     */
		    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;

		    /** @type {string} */
		    var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');

		    /**
		     * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
		     * attribute.
		     *
		     * Its main functions are:
		     *
		     * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
		     *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
		     *   each focusable node in the subtree with the singleton `InertManager` which manages all known
		     *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
		     *   instance exists for each focusable node which has at least one inert root as an ancestor.
		     *
		     * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
		     *   attribute is removed from the root node). This is handled in the destructor, which calls the
		     *   `deregister` method on `InertManager` for each managed inert node.
		     */

		    var InertRoot = function () {
		      /**
		       * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.
		       * @param {!InertManager} inertManager The global singleton InertManager object.
		       */
		      function InertRoot(rootElement, inertManager) {
		        _classCallCheck(this, InertRoot);

		        /** @type {!InertManager} */
		        this._inertManager = inertManager;

		        /** @type {!HTMLElement} */
		        this._rootElement = rootElement;

		        /**
		         * @type {!Set<!InertNode>}
		         * All managed focusable nodes in this InertRoot's subtree.
		         */
		        this._managedNodes = new Set();

		        // Make the subtree hidden from assistive technology
		        if (this._rootElement.hasAttribute('aria-hidden')) {
		          /** @type {?string} */
		          this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
		        } else {
		          this._savedAriaHidden = null;
		        }
		        this._rootElement.setAttribute('aria-hidden', 'true');

		        // Make all focusable elements in the subtree unfocusable and add them to _managedNodes
		        this._makeSubtreeUnfocusable(this._rootElement);

		        // Watch for:
		        // - any additions in the subtree: make them unfocusable too
		        // - any removals from the subtree: remove them from this inert root's managed nodes
		        // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
		        //   element, make that node a managed node.
		        this._observer = new MutationObserver(this._onMutation.bind(this));
		        this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });
		      }

		      /**
		       * Call this whenever this object is about to become obsolete.  This unwinds all of the state
		       * stored in this object and updates the state of all of the managed nodes.
		       */


		      _createClass(InertRoot, [{
		        key: 'destructor',
		        value: function destructor() {
		          this._observer.disconnect();

		          if (this._rootElement) {
		            if (this._savedAriaHidden !== null) {
		              this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
		            } else {
		              this._rootElement.removeAttribute('aria-hidden');
		            }
		          }

		          this._managedNodes.forEach(function (inertNode) {
		            this._unmanageNode(inertNode.node);
		          }, this);

		          // Note we cast the nulls to the ANY type here because:
		          // 1) We want the class properties to be declared as non-null, or else we
		          //    need even more casts throughout this code. All bets are off if an
		          //    instance has been destroyed and a method is called.
		          // 2) We don't want to cast "this", because we want type-aware optimizations
		          //    to know which properties we're setting.
		          this._observer = /** @type {?} */null;
		          this._rootElement = /** @type {?} */null;
		          this._managedNodes = /** @type {?} */null;
		          this._inertManager = /** @type {?} */null;
		        }

		        /**
		         * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
		         */

		      }, {
		        key: '_makeSubtreeUnfocusable',


		        /**
		         * @param {!Node} startNode
		         */
		        value: function _makeSubtreeUnfocusable(startNode) {
		          var _this2 = this;

		          composedTreeWalk(startNode, function (node) {
		            return _this2._visitNode(node);
		          });

		          var activeElement = document.activeElement;

		          if (!document.body.contains(startNode)) {
		            // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
		            var node = startNode;
		            /** @type {!ShadowRoot|undefined} */
		            var root = undefined;
		            while (node) {
		              if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
		                root = /** @type {!ShadowRoot} */node;
		                break;
		              }
		              node = node.parentNode;
		            }
		            if (root) {
		              activeElement = root.activeElement;
		            }
		          }
		          if (startNode.contains(activeElement)) {
		            activeElement.blur();
		            // In IE11, if an element is already focused, and then set to tabindex=-1
		            // calling blur() will not actually move the focus.
		            // To work around this we call focus() on the body instead.
		            if (activeElement === document.activeElement) {
		              document.body.focus();
		            }
		          }
		        }

		        /**
		         * @param {!Node} node
		         */

		      }, {
		        key: '_visitNode',
		        value: function _visitNode(node) {
		          if (node.nodeType !== Node.ELEMENT_NODE) {
		            return;
		          }
		          var element = /** @type {!HTMLElement} */node;

		          // If a descendant inert root becomes un-inert, its descendants will still be inert because of
		          // this inert root, so all of its managed nodes need to be adopted by this InertRoot.
		          if (element !== this._rootElement && element.hasAttribute('inert')) {
		            this._adoptInertRoot(element);
		          }

		          if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
		            this._manageNode(element);
		          }
		        }

		        /**
		         * Register the given node with this InertRoot and with InertManager.
		         * @param {!Node} node
		         */

		      }, {
		        key: '_manageNode',
		        value: function _manageNode(node) {
		          var inertNode = this._inertManager.register(node, this);
		          this._managedNodes.add(inertNode);
		        }

		        /**
		         * Unregister the given node with this InertRoot and with InertManager.
		         * @param {!Node} node
		         */

		      }, {
		        key: '_unmanageNode',
		        value: function _unmanageNode(node) {
		          var inertNode = this._inertManager.deregister(node, this);
		          if (inertNode) {
		            this._managedNodes['delete'](inertNode);
		          }
		        }

		        /**
		         * Unregister the entire subtree starting at `startNode`.
		         * @param {!Node} startNode
		         */

		      }, {
		        key: '_unmanageSubtree',
		        value: function _unmanageSubtree(startNode) {
		          var _this3 = this;

		          composedTreeWalk(startNode, function (node) {
		            return _this3._unmanageNode(node);
		          });
		        }

		        /**
		         * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
		         * @param {!HTMLElement} node
		         */

		      }, {
		        key: '_adoptInertRoot',
		        value: function _adoptInertRoot(node) {
		          var inertSubroot = this._inertManager.getInertRoot(node);

		          // During initialisation this inert root may not have been registered yet,
		          // so register it now if need be.
		          if (!inertSubroot) {
		            this._inertManager.setInert(node, true);
		            inertSubroot = this._inertManager.getInertRoot(node);
		          }

		          inertSubroot.managedNodes.forEach(function (savedInertNode) {
		            this._manageNode(savedInertNode.node);
		          }, this);
		        }

		        /**
		         * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
		         * @param {!Array<!MutationRecord>} records
		         * @param {!MutationObserver} self
		         */

		      }, {
		        key: '_onMutation',
		        value: function _onMutation(records, self) {
		          records.forEach(function (record) {
		            var target = /** @type {!HTMLElement} */record.target;
		            if (record.type === 'childList') {
		              // Manage added nodes
		              slice.call(record.addedNodes).forEach(function (node) {
		                this._makeSubtreeUnfocusable(node);
		              }, this);

		              // Un-manage removed nodes
		              slice.call(record.removedNodes).forEach(function (node) {
		                this._unmanageSubtree(node);
		              }, this);
		            } else if (record.type === 'attributes') {
		              if (record.attributeName === 'tabindex') {
		                // Re-initialise inert node if tabindex changes
		                this._manageNode(target);
		              } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {
		                // If a new inert root is added, adopt its managed nodes and make sure it knows about the
		                // already managed nodes from this inert subroot.
		                this._adoptInertRoot(target);
		                var inertSubroot = this._inertManager.getInertRoot(target);
		                this._managedNodes.forEach(function (managedNode) {
		                  if (target.contains(managedNode.node)) {
		                    inertSubroot._manageNode(managedNode.node);
		                  }
		                });
		              }
		            }
		          }, this);
		        }
		      }, {
		        key: 'managedNodes',
		        get: function get() {
		          return new Set(this._managedNodes);
		        }

		        /** @return {boolean} */

		      }, {
		        key: 'hasSavedAriaHidden',
		        get: function get() {
		          return this._savedAriaHidden !== null;
		        }

		        /** @param {?string} ariaHidden */

		      }, {
		        key: 'savedAriaHidden',
		        set: function set(ariaHidden) {
		          this._savedAriaHidden = ariaHidden;
		        }

		        /** @return {?string} */
		        ,
		        get: function get() {
		          return this._savedAriaHidden;
		        }
		      }]);

		      return InertRoot;
		    }();

		    /**
		     * `InertNode` initialises and manages a single inert node.
		     * A node is inert if it is a descendant of one or more inert root elements.
		     *
		     * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
		     * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
		     * is intrinsically focusable or not.
		     *
		     * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
		     * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
		     * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
		     * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
		     * or removes the `tabindex` attribute if the element is intrinsically focusable.
		     */


		    var InertNode = function () {
		      /**
		       * @param {!Node} node A focusable element to be made inert.
		       * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
		       */
		      function InertNode(node, inertRoot) {
		        _classCallCheck(this, InertNode);

		        /** @type {!Node} */
		        this._node = node;

		        /** @type {boolean} */
		        this._overrodeFocusMethod = false;

		        /**
		         * @type {!Set<!InertRoot>} The set of descendant inert roots.
		         *    If and only if this set becomes empty, this node is no longer inert.
		         */
		        this._inertRoots = new Set([inertRoot]);

		        /** @type {?number} */
		        this._savedTabIndex = null;

		        /** @type {boolean} */
		        this._destroyed = false;

		        // Save any prior tabindex info and make this node untabbable
		        this.ensureUntabbable();
		      }

		      /**
		       * Call this whenever this object is about to become obsolete.
		       * This makes the managed node focusable again and deletes all of the previously stored state.
		       */


		      _createClass(InertNode, [{
		        key: 'destructor',
		        value: function destructor() {
		          this._throwIfDestroyed();

		          if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
		            var element = /** @type {!HTMLElement} */this._node;
		            if (this._savedTabIndex !== null) {
		              element.setAttribute('tabindex', this._savedTabIndex);
		            } else {
		              element.removeAttribute('tabindex');
		            }

		            // Use `delete` to restore native focus method.
		            if (this._overrodeFocusMethod) {
		              delete element.focus;
		            }
		          }

		          // See note in InertRoot.destructor for why we cast these nulls to ANY.
		          this._node = /** @type {?} */null;
		          this._inertRoots = /** @type {?} */null;
		          this._destroyed = true;
		        }

		        /**
		         * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
		         * If the object has been destroyed, any attempt to access it will cause an exception.
		         */

		      }, {
		        key: '_throwIfDestroyed',


		        /**
		         * Throw if user tries to access destroyed InertNode.
		         */
		        value: function _throwIfDestroyed() {
		          if (this.destroyed) {
		            throw new Error('Trying to access destroyed InertNode');
		          }
		        }

		        /** @return {boolean} */

		      }, {
		        key: 'ensureUntabbable',


		        /** Save the existing tabindex value and make the node untabbable and unfocusable */
		        value: function ensureUntabbable() {
		          if (this.node.nodeType !== Node.ELEMENT_NODE) {
		            return;
		          }
		          var element = /** @type {!HTMLElement} */this.node;
		          if (matches.call(element, _focusableElementsString)) {
		            if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {
		              return;
		            }

		            if (element.hasAttribute('tabindex')) {
		              this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
		            }
		            element.setAttribute('tabindex', '-1');
		            if (element.nodeType === Node.ELEMENT_NODE) {
		              element.focus = function () {};
		              this._overrodeFocusMethod = true;
		            }
		          } else if (element.hasAttribute('tabindex')) {
		            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
		            element.removeAttribute('tabindex');
		          }
		        }

		        /**
		         * Add another inert root to this inert node's set of managing inert roots.
		         * @param {!InertRoot} inertRoot
		         */

		      }, {
		        key: 'addInertRoot',
		        value: function addInertRoot(inertRoot) {
		          this._throwIfDestroyed();
		          this._inertRoots.add(inertRoot);
		        }

		        /**
		         * Remove the given inert root from this inert node's set of managing inert roots.
		         * If the set of managing inert roots becomes empty, this node is no longer inert,
		         * so the object should be destroyed.
		         * @param {!InertRoot} inertRoot
		         */

		      }, {
		        key: 'removeInertRoot',
		        value: function removeInertRoot(inertRoot) {
		          this._throwIfDestroyed();
		          this._inertRoots['delete'](inertRoot);
		          if (this._inertRoots.size === 0) {
		            this.destructor();
		          }
		        }
		      }, {
		        key: 'destroyed',
		        get: function get() {
		          return (/** @type {!InertNode} */this._destroyed
		          );
		        }
		      }, {
		        key: 'hasSavedTabIndex',
		        get: function get() {
		          return this._savedTabIndex !== null;
		        }

		        /** @return {!Node} */

		      }, {
		        key: 'node',
		        get: function get() {
		          this._throwIfDestroyed();
		          return this._node;
		        }

		        /** @param {?number} tabIndex */

		      }, {
		        key: 'savedTabIndex',
		        set: function set(tabIndex) {
		          this._throwIfDestroyed();
		          this._savedTabIndex = tabIndex;
		        }

		        /** @return {?number} */
		        ,
		        get: function get() {
		          this._throwIfDestroyed();
		          return this._savedTabIndex;
		        }
		      }]);

		      return InertNode;
		    }();

		    /**
		     * InertManager is a per-document singleton object which manages all inert roots and nodes.
		     *
		     * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
		     * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
		     * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
		     * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
		     * is created for each such node, via the `_managedNodes` map.
		     */


		    var InertManager = function () {
		      /**
		       * @param {!Document} document
		       */
		      function InertManager(document) {
		        _classCallCheck(this, InertManager);

		        if (!document) {
		          throw new Error('Missing required argument; InertManager needs to wrap a document.');
		        }

		        /** @type {!Document} */
		        this._document = document;

		        /**
		         * All managed nodes known to this InertManager. In a map to allow looking up by Node.
		         * @type {!Map<!Node, !InertNode>}
		         */
		        this._managedNodes = new Map();

		        /**
		         * All inert roots known to this InertManager. In a map to allow looking up by Node.
		         * @type {!Map<!Node, !InertRoot>}
		         */
		        this._inertRoots = new Map();

		        /**
		         * Observer for mutations on `document.body`.
		         * @type {!MutationObserver}
		         */
		        this._observer = new MutationObserver(this._watchForInert.bind(this));

		        // Add inert style.
		        addInertStyle(document.head || document.body || document.documentElement);

		        // Wait for document to be loaded.
		        if (document.readyState === 'loading') {
		          document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
		        } else {
		          this._onDocumentLoaded();
		        }
		      }

		      /**
		       * Set whether the given element should be an inert root or not.
		       * @param {!HTMLElement} root
		       * @param {boolean} inert
		       */


		      _createClass(InertManager, [{
		        key: 'setInert',
		        value: function setInert(root, inert) {
		          if (inert) {
		            if (this._inertRoots.has(root)) {
		              // element is already inert
		              return;
		            }

		            var inertRoot = new InertRoot(root, this);
		            root.setAttribute('inert', '');
		            this._inertRoots.set(root, inertRoot);
		            // If not contained in the document, it must be in a shadowRoot.
		            // Ensure inert styles are added there.
		            if (!this._document.body.contains(root)) {
		              var parent = root.parentNode;
		              while (parent) {
		                if (parent.nodeType === 11) {
		                  addInertStyle(parent);
		                }
		                parent = parent.parentNode;
		              }
		            }
		          } else {
		            if (!this._inertRoots.has(root)) {
		              // element is already non-inert
		              return;
		            }

		            var _inertRoot = this._inertRoots.get(root);
		            _inertRoot.destructor();
		            this._inertRoots['delete'](root);
		            root.removeAttribute('inert');
		          }
		        }

		        /**
		         * Get the InertRoot object corresponding to the given inert root element, if any.
		         * @param {!Node} element
		         * @return {!InertRoot|undefined}
		         */

		      }, {
		        key: 'getInertRoot',
		        value: function getInertRoot(element) {
		          return this._inertRoots.get(element);
		        }

		        /**
		         * Register the given InertRoot as managing the given node.
		         * In the case where the node has a previously existing inert root, this inert root will
		         * be added to its set of inert roots.
		         * @param {!Node} node
		         * @param {!InertRoot} inertRoot
		         * @return {!InertNode} inertNode
		         */

		      }, {
		        key: 'register',
		        value: function register(node, inertRoot) {
		          var inertNode = this._managedNodes.get(node);
		          if (inertNode !== undefined) {
		            // node was already in an inert subtree
		            inertNode.addInertRoot(inertRoot);
		          } else {
		            inertNode = new InertNode(node, inertRoot);
		          }

		          this._managedNodes.set(node, inertNode);

		          return inertNode;
		        }

		        /**
		         * De-register the given InertRoot as managing the given inert node.
		         * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
		         * node from the InertManager's set of managed nodes if it is destroyed.
		         * If the node is not currently managed, this is essentially a no-op.
		         * @param {!Node} node
		         * @param {!InertRoot} inertRoot
		         * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
		         */

		      }, {
		        key: 'deregister',
		        value: function deregister(node, inertRoot) {
		          var inertNode = this._managedNodes.get(node);
		          if (!inertNode) {
		            return null;
		          }

		          inertNode.removeInertRoot(inertRoot);
		          if (inertNode.destroyed) {
		            this._managedNodes['delete'](node);
		          }

		          return inertNode;
		        }

		        /**
		         * Callback used when document has finished loading.
		         */

		      }, {
		        key: '_onDocumentLoaded',
		        value: function _onDocumentLoaded() {
		          // Find all inert roots in document and make them actually inert.
		          var inertElements = slice.call(this._document.querySelectorAll('[inert]'));
		          inertElements.forEach(function (inertElement) {
		            this.setInert(inertElement, true);
		          }, this);

		          // Comment this out to use programmatic API only.
		          this._observer.observe(this._document.body || this._document.documentElement, { attributes: true, subtree: true, childList: true });
		        }

		        /**
		         * Callback used when mutation observer detects attribute changes.
		         * @param {!Array<!MutationRecord>} records
		         * @param {!MutationObserver} self
		         */

		      }, {
		        key: '_watchForInert',
		        value: function _watchForInert(records, self) {
		          var _this = this;
		          records.forEach(function (record) {
		            switch (record.type) {
		              case 'childList':
		                slice.call(record.addedNodes).forEach(function (node) {
		                  if (node.nodeType !== Node.ELEMENT_NODE) {
		                    return;
		                  }
		                  var inertElements = slice.call(node.querySelectorAll('[inert]'));
		                  if (matches.call(node, '[inert]')) {
		                    inertElements.unshift(node);
		                  }
		                  inertElements.forEach(function (inertElement) {
		                    this.setInert(inertElement, true);
		                  }, _this);
		                }, _this);
		                break;
		              case 'attributes':
		                if (record.attributeName !== 'inert') {
		                  return;
		                }
		                var target = /** @type {!HTMLElement} */record.target;
		                var inert = target.hasAttribute('inert');
		                _this.setInert(target, inert);
		                break;
		            }
		          }, this);
		        }
		      }]);

		      return InertManager;
		    }();

		    /**
		     * Recursively walk the composed tree from |node|.
		     * @param {!Node} node
		     * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,
		     *     before descending into child nodes.
		     * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
		     */


		    function composedTreeWalk(node, callback, shadowRootAncestor) {
		      if (node.nodeType == Node.ELEMENT_NODE) {
		        var element = /** @type {!HTMLElement} */node;
		        if (callback) {
		          callback(element);
		        }

		        // Descend into node:
		        // If it has a ShadowRoot, ignore all child elements - these will be picked
		        // up by the <content> or <shadow> elements. Descend straight into the
		        // ShadowRoot.
		        var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;
		        if (shadowRoot) {
		          composedTreeWalk(shadowRoot, callback);
		          return;
		        }

		        // If it is a <content> element, descend into distributed elements - these
		        // are elements from outside the shadow root which are rendered inside the
		        // shadow DOM.
		        if (element.localName == 'content') {
		          var content = /** @type {!HTMLContentElement} */element;
		          // Verifies if ShadowDom v0 is supported.
		          var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];
		          for (var i = 0; i < distributedNodes.length; i++) {
		            composedTreeWalk(distributedNodes[i], callback);
		          }
		          return;
		        }

		        // If it is a <slot> element, descend into assigned nodes - these
		        // are elements from outside the shadow root which are rendered inside the
		        // shadow DOM.
		        if (element.localName == 'slot') {
		          var slot = /** @type {!HTMLSlotElement} */element;
		          // Verify if ShadowDom v1 is supported.
		          var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];
		          for (var _i = 0; _i < _distributedNodes.length; _i++) {
		            composedTreeWalk(_distributedNodes[_i], callback);
		          }
		          return;
		        }
		      }

		      // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
		      // element, nor a <shadow> element recurse normally.
		      var child = node.firstChild;
		      while (child != null) {
		        composedTreeWalk(child, callback);
		        child = child.nextSibling;
		      }
		    }

		    /**
		     * Adds a style element to the node containing the inert specific styles
		     * @param {!Node} node
		     */
		    function addInertStyle(node) {
		      if (node.querySelector('style#inert-style, link#inert-style')) {
		        return;
		      }
		      var style = document.createElement('style');
		      style.setAttribute('id', 'inert-style');
		      style.textContent = '\n' + '[inert] {\n' + '  pointer-events: none;\n' + '  cursor: default;\n' + '}\n' + '\n' + '[inert], [inert] * {\n' + '  -webkit-user-select: none;\n' + '  -moz-user-select: none;\n' + '  -ms-user-select: none;\n' + '  user-select: none;\n' + '}\n';
		      node.appendChild(style);
		    }

		    if (!HTMLElement.prototype.hasOwnProperty('inert')) {
		      /** @type {!InertManager} */
		      var inertManager = new InertManager(document);

		      Object.defineProperty(HTMLElement.prototype, 'inert', {
		        enumerable: true,
		        /** @this {!HTMLElement} */
		        get: function get() {
		          return this.hasAttribute('inert');
		        },
		        /** @this {!HTMLElement} */
		        set: function set(inert) {
		          inertManager.setInert(this, inert);
		        }
		      });
		    }
		  })();

		})));
	} ());

	/**
	 * @license
	 * Copyright 2016 Google Inc. All rights reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	(() => {
	    var _a, _b, _c;
	    /* Symbols for private properties */
	    const _blockingElements = Symbol();
	    const _alreadyInertElements = Symbol();
	    const _topElParents = Symbol();
	    const _siblingsToRestore = Symbol();
	    const _parentMO = Symbol();
	    /* Symbols for private static methods */
	    const _topChanged = Symbol();
	    const _swapInertedSibling = Symbol();
	    const _inertSiblings = Symbol();
	    const _restoreInertedSiblings = Symbol();
	    const _getParents = Symbol();
	    const _getDistributedChildren = Symbol();
	    const _isInertable = Symbol();
	    const _handleMutations = Symbol();
	    class BlockingElementsImpl {
	        constructor() {
	            /**
	             * The blocking elements.
	             */
	            this[_a] = [];
	            /**
	             * Used to keep track of the parents of the top element, from the element
	             * itself up to body. When top changes, the old top might have been removed
	             * from the document, so we need to memoize the inerted parents' siblings
	             * in order to restore their inerteness when top changes.
	             */
	            this[_b] = [];
	            /**
	             * Elements that are already inert before the first blocking element is
	             * pushed.
	             */
	            this[_c] = new Set();
	        }
	        destructor() {
	            // Restore original inertness.
	            this[_restoreInertedSiblings](this[_topElParents]);
	            // Note we don't want to make these properties nullable on the class,
	            // since then we'd need non-null casts in many places. Calling a method on
	            // a BlockingElements instance after calling destructor will result in an
	            // exception.
	            const nullable = this;
	            nullable[_blockingElements] = null;
	            nullable[_topElParents] = null;
	            nullable[_alreadyInertElements] = null;
	        }
	        get top() {
	            const elems = this[_blockingElements];
	            return elems[elems.length - 1] || null;
	        }
	        push(element) {
	            if (!element || element === this.top) {
	                return;
	            }
	            // Remove it from the stack, we'll bring it to the top.
	            this.remove(element);
	            this[_topChanged](element);
	            this[_blockingElements].push(element);
	        }
	        remove(element) {
	            const i = this[_blockingElements].indexOf(element);
	            if (i === -1) {
	                return false;
	            }
	            this[_blockingElements].splice(i, 1);
	            // Top changed only if the removed element was the top element.
	            if (i === this[_blockingElements].length) {
	                this[_topChanged](this.top);
	            }
	            return true;
	        }
	        pop() {
	            const top = this.top;
	            top && this.remove(top);
	            return top;
	        }
	        has(element) {
	            return this[_blockingElements].indexOf(element) !== -1;
	        }
	        /**
	         * Sets `inert` to all document elements except the new top element, its
	         * parents, and its distributed content.
	         */
	        [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
	            const toKeepInert = this[_alreadyInertElements];
	            const oldParents = this[_topElParents];
	            // No new top, reset old top if any.
	            if (!newTop) {
	                this[_restoreInertedSiblings](oldParents);
	                toKeepInert.clear();
	                this[_topElParents] = [];
	                return;
	            }
	            const newParents = this[_getParents](newTop);
	            // New top is not contained in the main document!
	            if (newParents[newParents.length - 1].parentNode !== document.body) {
	                throw Error('Non-connected element cannot be a blocking element');
	            }
	            // Cast here because we know we'll call _inertSiblings on newParents
	            // below.
	            this[_topElParents] = newParents;
	            const toSkip = this[_getDistributedChildren](newTop);
	            // No previous top element.
	            if (!oldParents.length) {
	                this[_inertSiblings](newParents, toSkip, toKeepInert);
	                return;
	            }
	            let i = oldParents.length - 1;
	            let j = newParents.length - 1;
	            // Find common parent. Index 0 is the element itself (so stop before it).
	            while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
	                i--;
	                j--;
	            }
	            // If up the parents tree there are 2 elements that are siblings, swap
	            // the inerted sibling.
	            if (oldParents[i] !== newParents[j]) {
	                this[_swapInertedSibling](oldParents[i], newParents[j]);
	            }
	            // Restore old parents siblings inertness.
	            i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i));
	            // Make new parents siblings inert.
	            j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
	        }
	        /**
	         * Swaps inertness between two sibling elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_swapInertedSibling](oldInert, newInert) {
	            const siblingsToRestore = oldInert[_siblingsToRestore];
	            // oldInert is not contained in siblings to restore, so we have to check
	            // if it's inertable and if already inert.
	            if (this[_isInertable](oldInert) && !oldInert.inert) {
	                oldInert.inert = true;
	                siblingsToRestore.add(oldInert);
	            }
	            // If newInert was already between the siblings to restore, it means it is
	            // inertable and must be restored.
	            if (siblingsToRestore.has(newInert)) {
	                newInert.inert = false;
	                siblingsToRestore.delete(newInert);
	            }
	            newInert[_parentMO] = oldInert[_parentMO];
	            newInert[_siblingsToRestore] = siblingsToRestore;
	            oldInert[_parentMO] = undefined;
	            oldInert[_siblingsToRestore] = undefined;
	        }
	        /**
	         * Restores original inertness to the siblings of the elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_restoreInertedSiblings](elements) {
	            for (const element of elements) {
	                const mo = element[_parentMO];
	                mo.disconnect();
	                element[_parentMO] = undefined;
	                const siblings = element[_siblingsToRestore];
	                for (const sibling of siblings) {
	                    sibling.inert = false;
	                }
	                element[_siblingsToRestore] = undefined;
	            }
	        }
	        /**
	         * Inerts the siblings of the elements except the elements to skip. Stores
	         * the inerted siblings into the element's symbol `_siblingsToRestore`.
	         * Pass `toKeepInert` to collect the already inert elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_inertSiblings](elements, toSkip, toKeepInert) {
	            for (const element of elements) {
	                // Assume element is not a Document, so it must have a parentNode.
	                const parent = element.parentNode;
	                const children = parent.children;
	                const inertedSiblings = new Set();
	                for (let j = 0; j < children.length; j++) {
	                    const sibling = children[j];
	                    // Skip the input element, if not inertable or to be skipped.
	                    if (sibling === element || !this[_isInertable](sibling) ||
	                        (toSkip && toSkip.has(sibling))) {
	                        continue;
	                    }
	                    // Should be collected since already inerted.
	                    if (toKeepInert && sibling.inert) {
	                        toKeepInert.add(sibling);
	                    }
	                    else {
	                        sibling.inert = true;
	                        inertedSiblings.add(sibling);
	                    }
	                }
	                // Store the siblings that were inerted.
	                element[_siblingsToRestore] = inertedSiblings;
	                // Observe only immediate children mutations on the parent.
	                const mo = new MutationObserver(this[_handleMutations].bind(this));
	                element[_parentMO] = mo;
	                let parentToObserve = parent;
	                // If we're using the ShadyDOM polyfill, then our parent could be a
	                // shady root, which is an object that acts like a ShadowRoot, but isn't
	                // actually a node in the real DOM. Observe the real DOM parent instead.
	                const maybeShadyRoot = parentToObserve;
	                if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
	                    parentToObserve = maybeShadyRoot.host;
	                }
	                mo.observe(parentToObserve, {
	                    childList: true,
	                });
	            }
	        }
	        /**
	         * Handles newly added/removed nodes by toggling their inertness.
	         * It also checks if the current top Blocking Element has been removed,
	         * notifying and removing it.
	         */
	        [_handleMutations](mutations) {
	            const parents = this[_topElParents];
	            const toKeepInert = this[_alreadyInertElements];
	            for (const mutation of mutations) {
	                // If the target is a shadowRoot, get its host as we skip shadowRoots when
	                // computing _topElParents.
	                const target = mutation.target.host || mutation.target;
	                const idx = target === document.body ?
	                    parents.length :
	                    parents.indexOf(target);
	                const inertedChild = parents[idx - 1];
	                const inertedSiblings = inertedChild[_siblingsToRestore];
	                // To restore.
	                for (let i = 0; i < mutation.removedNodes.length; i++) {
	                    const sibling = mutation.removedNodes[i];
	                    if (sibling === inertedChild) {
	                        console.info('Detected removal of the top Blocking Element.');
	                        this.pop();
	                        return;
	                    }
	                    if (inertedSiblings.has(sibling)) {
	                        sibling.inert = false;
	                        inertedSiblings.delete(sibling);
	                    }
	                }
	                // To inert.
	                for (let i = 0; i < mutation.addedNodes.length; i++) {
	                    const sibling = mutation.addedNodes[i];
	                    if (!this[_isInertable](sibling)) {
	                        continue;
	                    }
	                    if (toKeepInert && sibling.inert) {
	                        toKeepInert.add(sibling);
	                    }
	                    else {
	                        sibling.inert = true;
	                        inertedSiblings.add(sibling);
	                    }
	                }
	            }
	        }
	        /**
	         * Returns if the element is inertable.
	         */
	        [_isInertable](element) {
	            return false === /^(style|template|script)$/.test(element.localName);
	        }
	        /**
	         * Returns the list of newParents of an element, starting from element
	         * (included) up to `document.body` (excluded).
	         */
	        [_getParents](element) {
	            const parents = [];
	            let current = element;
	            // Stop to body.
	            while (current && current !== document.body) {
	                // Skip shadow roots.
	                if (current.nodeType === Node.ELEMENT_NODE) {
	                    parents.push(current);
	                }
	                // ShadowDom v1
	                if (current.assignedSlot) {
	                    // Collect slots from deepest slot to top.
	                    while (current = current.assignedSlot) {
	                        parents.push(current);
	                    }
	                    // Continue the search on the top slot.
	                    current = parents.pop();
	                    continue;
	                }
	                current = current.parentNode ||
	                    current.host;
	            }
	            return parents;
	        }
	        /**
	         * Returns the distributed children of the element's shadow root.
	         * Returns null if the element doesn't have a shadow root.
	         */
	        [_getDistributedChildren](element) {
	            const shadowRoot = element.shadowRoot;
	            if (!shadowRoot) {
	                return null;
	            }
	            const result = new Set();
	            let i;
	            let j;
	            let nodes;
	            const slots = shadowRoot.querySelectorAll('slot');
	            if (slots.length && slots[0].assignedNodes) {
	                for (i = 0; i < slots.length; i++) {
	                    nodes = slots[i].assignedNodes({
	                        flatten: true,
	                    });
	                    for (j = 0; j < nodes.length; j++) {
	                        if (nodes[j].nodeType === Node.ELEMENT_NODE) {
	                            result.add(nodes[j]);
	                        }
	                    }
	                }
	                // No need to search for <content>.
	            }
	            return result;
	        }
	    }
	    document.$blockingElements =
	        new BlockingElementsImpl();
	})();

	function blockingElements() { return getDocument().$blockingElements; }
	/**
	 * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
	 *
	 * Automatically handles consecutive calls with a loosely applied stack operation
	 * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
	 * it'll take to find its way into the spec, if ever)
	 * @param target
	 */
	function useBlockingElement(enabled, getTarget) {
	    const stableGetTarget = useStableCallback(getTarget);
	    /**
	     * Push/pop the element from the blockingElements stack.
	     */
	    h(() => {
	        const target = stableGetTarget();
	        if (enabled) {
	            // Sometimes blockingElements will fail if, for example,
	            // the target element isn't connected to document.body.
	            // This is rare, but it's better to fail silently with weird tabbing behavior
	            // than to crash the entire application.
	            try {
	                blockingElements().push(target);
	                return () => {
	                    blockingElements().remove(target);
	                };
	            }
	            catch (ex) {
	                // Well, semi-silently.
	                console.error(ex);
	            }
	        }
	    }, [enabled]);
	}
	function getTopElement() {
	    return blockingElements().top;
	}

	const elementsToRestoreFocusTo = new Map();
	function useFocusTrap({ trapActive }) {
	    const handleActiveChange = F((trapActive, element) => {
	        if (trapActive && element) {
	            let rafHandle = requestAnimationFrame(() => {
	                // TODO: This extra queueMicrotask is needed for
	                // ...reasons?
	                queueMicrotask(() => {
	                    findFirstFocusable(element)?.focus();
	                    rafHandle = 0;
	                });
	            });
	            return () => {
	                if (rafHandle)
	                    cancelAnimationFrame(rafHandle);
	            };
	        }
	        else if (element) {
	            // Restore the focus to the element
	            // that has returned to the top of the stack
	            let rafHandle = requestAnimationFrame(() => {
	                queueMicrotask(() => {
	                    elementsToRestoreFocusTo.get(getTopElement())?.focus();
	                    rafHandle = 0;
	                });
	            });
	            return () => {
	                if (rafHandle)
	                    cancelAnimationFrame(rafHandle);
	            };
	        }
	    }, []);
	    const { getLastActiveElement, useActiveElementProps, getElement } = useActiveElement({ onMountChange: useStableCallback((element) => handleActiveChange(trapActive, element)) });
	    // When the trap becomes active, before we let the blockingElements hook run,
	    // keep track of whatever's currently focused and save it.
	    h(() => {
	        const element = getElement();
	        if (trapActive && element) {
	            const document = getDocument(element);
	            // Save the currently focused element
	            // to whatever's currently at the top of the stack
	            elementsToRestoreFocusTo.set(getTopElement(), getLastActiveElement() ?? document.body);
	        }
	    }, [trapActive]);
	    useBlockingElement(trapActive, getElement);
	    /**
	     * Any time we activate or deactivate the trap,
	     * change focus to something else (something in
	     * the trap if it's active, or whatever we've
	     * tracked in elementsToRestoreFocusTo if not)
	     */
	    h(() => {
	        handleActiveChange(trapActive, getElement());
	    }, [trapActive]);
	    const useFocusTrapProps = ((props) => {
	        const p1 = useActiveElementProps(props);
	        const p2 = { "aria-modal": trapActive ? "true" : undefined };
	        return useMergedProps()(p1, p2);
	    });
	    return {
	        useFocusTrapProps,
	        getElement
	    };
	}
	/**
	 * Returns the first focusable element contained within the given node, or null if none are found.
	 * @param element
	 * @returns
	 */
	function findFirstFocusable(element) {
	    const treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, { acceptNode: (node) => (node instanceof Element && isFocusable(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP) });
	    const firstFocusable = treeWalker.firstChild();
	    return firstFocusable;
	}

	const DemoUseInterval = () => {
	    const [interval, setInterval] = d(1000);
	    const [fireCount, setFireCount] = d(0);
	    useInterval({ interval, callback: () => setFireCount(i => ++i) });
	    return (e$1("div", { class: "demo", children: [e$1("label", { children: ["Interval duration: ", e$1("input", { type: "number", value: interval, onInput: e => setInterval(e.currentTarget.valueAsNumber) })] }), e$1("div", { children: ["The callback has been called ", fireCount, " time", fireCount === 1 ? "" : "s", "."] })] }));
	};

	const RandomWords$1 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
	const RovingChildContext = D(null);
	const DemoUseRovingTabIndex = g(() => {
	    const [lastFocusedInner, setLastFocusedInner, getLastFocusedInner] = useState(false);
	    const { useHasFocusProps } = useHasFocus({ onLastFocusedInnerChanged: setLastFocusedInner });
	    const { useListNavigationChild, currentTypeahead, tabbableIndex, useListNavigationProps, navigateToIndex } = useListNavigation({ shouldFocusOnChange: getLastFocusedInner });
	    //const { useRovingTabIndexChild, useRovingTabIndexProps } = useRovingTabIndex<HTMLUListElement, RovingTabIndexChildInfo>({ tabbableIndex, focusOnChange: false });
	    return (e$1("div", { className: "demo", children: [e$1("h2", { children: "Keyboard & List Navigation" }), e$1("h3", { children: e$1("code", { children: "useRovingTabIndex" }) }), e$1("p", { children: ["Native HTML elements offer fantastic keyboard accessability, but cover a relatively limited number of use cases. There is no native HTML tree element, for example, that allows keyboard navigation of its items, nor is it possible to combine the keyboard navigation behavior of a ", e$1("code", { children: "<select>" }), " menu with the menu in a drawer component."] }), e$1("p", { children: ["When coming across a List or a Menu or a RadioGroup or a ToggleButtonGroup or any other \"one component made up of child components\", the usual expected behavior, at least natively, is that tabbing into the component is one action, and tabbing out is another.  Navigating ", e$1("em", { children: "within" }), " the component is done with the arrow keys or other methods."] }), e$1("p", { children: ["This is important both for accessability, but also just for general usability.  When tabbing back and forth, the ability to skip a long list without needing to trudge through ", e$1("em", { children: "every one" }), " of its child elements is extremely important."] }), e$1("p", { children: [e$1("code", { children: "useListNavigation" }), " wraps up the functionality of a few hooks (", e$1("code", { children: "useRovingTabIndex" }), ", ", e$1("code", { children: "useLinearNavigation" }), ", ", e$1("code", { children: "useTypeaheadNavigation" }), "to allow for ARIA-compliant navigation of lists and other similar components.  For more advanced use cases, you can use the other hooks individually."] }), e$1("p", { children: [e$1("code", { children: "useListNavigation" }), " (and ", e$1("code", { children: "useRovingTabIndex" }), ") internally use ", e$1("code", { children: "useChildManager" }), ", which is how the child elements and the parent communicate with each other. This means there are virtually no restrictions on how the DOM is set up as long as you can provide the children with the ", e$1("code", { children: "useListNavigationChild" }), " hook that's returned, usually with a simple ", e$1("code", { children: "Context" }), ". If the child element itself has a focusable element, like a button, it can also be wired up to disable itself Feel free to nest them too, as long as you are aware of your ", e$1("code", { children: "Context" }), " management (i.e. remember that you need to create a new ", e$1("code", { children: "Context" }), " for each use case)."] }), e$1("label", { children: ["Tabbable index: ", e$1("input", { type: "number", value: tabbableIndex ?? undefined, onInput: e => { e.preventDefault(); navigateToIndex(e.currentTarget.valueAsNumber); } })] }), e$1("ul", { ...useHasFocusProps(useListNavigationProps({})), children: e$1(RovingChildContext.Provider, { value: useListNavigationChild, children: Array.from((function* () {
	                        for (let i = 0; i < 10; ++i) {
	                            yield e$1(DemoUseRovingTabIndexChild, { index: i }, i);
	                        }
	                    })()) }) }), currentTypeahead && e$1("div", { children: ["Typeahead: ", currentTypeahead] })] }));
	});
	const DemoUseRovingTabIndexChild = g((({ index }) => {
	    const [randomWord] = useState(() => RandomWords$1[index /*Math.floor(Math.random() * (RandomWords.length - 1))*/]);
	    const useRovingTabIndexChild = T$1(RovingChildContext);
	    const text = `${randomWord} This is item #${index + 1}`;
	    const { useListNavigationChildProps, useListNavigationSiblingProps, tabbable } = useRovingTabIndexChild({ index, text, hidden: (index == 5) });
	    const props = useListNavigationChildProps({});
	    return (e$1("li", { ...props, children: [text, " (", tabbable ? "Tabbable" : "Not tabbable", ")", e$1("input", { ...useListNavigationSiblingProps({ type: "checkbox" }) })] }));
	}));

	const DemoUseTimeout = () => {
	    const [timeout, setTimeout] = d(1000);
	    const [triggerIndex, setTriggerIndex] = d("");
	    const [fireCount, setFireCount] = d(0);
	    useTimeout({ timeout, triggerIndex, callback: () => setFireCount(i => ++i) });
	    return (e$1("div", { class: "demo", children: [e$1("label", { children: ["Timeout duration: ", e$1("input", { type: "number", value: timeout, onInput: e => setTimeout(e.currentTarget.valueAsNumber) })] }), e$1("label", { children: ["Refresh key: ", e$1("input", { type: "text", value: triggerIndex, onInput: e => setTriggerIndex(e.currentTarget.value) })] }), e$1("div", { children: ["The callback has been called ", fireCount, " time", fireCount === 1 ? "" : "s", "."] })] }));
	};

	const RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
	const DemoUseDroppable = () => {
	    const { droppedFiles, droppedStrings, filesForConsideration, stringsForConsideration, useDroppableProps, dropError } = useDroppable({ effect: "copy" });
	    useMergedProps()({}, { ref: s(null) });
	    const p = useDroppableProps({ className: "demo droppable" });
	    return (e$1("div", { ...p, children: [droppedStrings != null && e$1("div", { children: ["Data dropped: ", e$1("ul", { children: Object.entries(droppedStrings).map(([type, value]) => e$1("li", { children: [type, ": ", value] })) })] }), droppedFiles != null && e$1("div", { children: ["Files dropped: ", e$1("table", { children: [e$1("thead", { children: e$1("tr", { children: [e$1("th", { children: "Name" }), e$1("th", { children: "Size" }), e$1("th", { children: "Type" }), e$1("th", { children: "Last modified" })] }) }), e$1("tbody", { children: droppedFiles.map(f => e$1("tr", { children: [e$1("td", { children: f.name }), f.data.byteLength, e$1("td", { children: f.type }), e$1("td", { children: new Date(f.lastModified ?? 0) })] })) })] })] }), e$1("hr", {}), stringsForConsideration != null && e$1("div", { children: ["Data being considered: ", e$1("ul", { children: Array.from(stringsForConsideration).map(type => e$1("li", { children: type })) })] }), filesForConsideration != null && e$1("div", { children: ["Files being considered: ", e$1("ul", { children: filesForConsideration.map(f => e$1("li", { children: JSON.stringify(f) })) })] }), e$1("hr", {}), dropError && e$1("div", { children: dropError instanceof Error ? dropError.message : JSON.stringify(dropError) })] }));
	};
	const DemoUseDraggable = () => {
	    const { useDraggableProps } = useDraggable({ data: { "text/plain": "This is custom draggable content of type text/plain." } });
	    return (e$1("div", { ...useDraggableProps({ className: "demo" }), children: "Draggable content" }));
	};
	const DemoUseElementSizeAnimation = () => {
	    const [height, setHeight] = useState(0);
	    const [angle, setAngle] = useState(0);
	    useAnimationFrame({
	        callback: (_ms) => {
	            setAngle(a => a + 0.01);
	            setHeight((Math.sin(angle) + 1) / 0.5);
	        }
	    });
	    const [elementSize, setElementSize] = useState(null);
	    const { useElementSizeProps } = useElementSize({ onSizeChange: setElementSize });
	    return (e$1("div", { ...useElementSizeProps({ ref: undefined, className: "demo", style: { height: `${(height * 100) + 100}px` } }), children: e$1("pre", { children: JSON.stringify(elementSize, null, 2) }) }));
	};
	const DemoUseFocusTrap = g(({ depth }) => {
	    const [active, setActive] = useState(false);
	    const { useFocusTrapProps } = useFocusTrap({ trapActive: active });
	    //const { useRovingTabIndexChild, useRovingTabIndexProps } = useRovingTabIndex<HTMLUListElement, RovingTabIndexChildInfo>({ tabbableIndex, focusOnChange: false });
	    const divProps = useFocusTrapProps({ ref: undefined, className: "focus-trap-demo" });
	    if (depth == 2)
	        return e$1("div", {});
	    return (e$1("div", { className: "demo", children: [e$1("label", { children: ["Active: ", e$1("input", { type: "checkbox", checked: active, onInput: e => { e.preventDefault(); setActive(e.currentTarget.checked); } })] }), e$1("div", { ...divProps, children: e$1(DemoUseFocusTrapChild, { active: active, setActive: setActive, depth: depth ?? 0 }) })] }));
	});
	const DemoUseFocusTrapChild = g(({ setActive, active }) => {
	    return (e$1(d$1, { children: [e$1("button", { children: "Button 1" }), e$1("button", { children: "Button 2" }), e$1("button", { children: "Button 3" }), e$1("label", { children: ["Active: ", e$1("input", { type: "checkbox", checked: active, onInput: e => { e.preventDefault(); setActive(e.currentTarget.checked); } })] })] }));
	});
	const DemoUseAsyncHandler1 = g(() => {
	    const [timeout, setTimeout] = useState(1000);
	    const [debounce, setDebounce] = useState(0);
	    const [shouldThrow, setShouldThrow, getShouldThrow] = useState(false);
	    const [disableConsecutive, setDisableConsecutive] = useState(false);
	    const asyncOnClick = ((_v, _e) => new Promise((resolve, reject) => window.setTimeout(() => getShouldThrow() ? reject() : resolve(), timeout)));
	    const { callCount, settleCount, hasCapture, syncHandler, pending, hasError, rejectCount, resolveCount } = useAsyncHandler(asyncOnClick, { capture: () => { }, debounce: debounce == 0 ? undefined : debounce });
	    const onClick = pending ? undefined : syncHandler;
	    return (e$1("div", { className: "demo", children: [e$1("button", { disabled: pending && disableConsecutive, onClick: onClick, children: "Click me!" }), e$1("label", { children: ["Sleep for: ", e$1("input", { type: "number", value: timeout, onInput: e => setTimeout(e.currentTarget.valueAsNumber) })] }), e$1("label", { children: ["Throw an error ", e$1("input", { type: "checkbox", checked: shouldThrow, onInput: e => setShouldThrow(e.currentTarget.checked) })] }), e$1("label", { children: ["Disabled while pending ", e$1("input", { type: "checkbox", checked: disableConsecutive, onInput: e => setDisableConsecutive(e.currentTarget.checked) })] }), e$1("label", { children: ["Debounce: ", e$1("input", { type: "number", value: debounce, onInput: e => setDebounce(e.currentTarget.valueAsNumber) })] }), e$1("table", { children: [e$1("thead", { children: e$1("tr", { children: [e$1("th", { children: "Field" }), e$1("th", { children: "Value" })] }) }), e$1("tbody", { children: [e$1("tr", { children: [e$1("td", { children: "callCount" }), e$1("td", { children: callCount })] }), e$1("tr", { children: [e$1("td", { children: "settleCount" }), e$1("td", { children: settleCount })] }), e$1("tr", { children: [e$1("td", { children: "resolveCount" }), e$1("td", { children: resolveCount })] }), e$1("tr", { children: [e$1("td", { children: "rejectCount" }), e$1("td", { children: rejectCount })] }), e$1("tr", { children: [e$1("td", { children: "hasError" }), e$1("td", { children: hasError.toString() })] }), e$1("tr", { children: [e$1("td", { children: "hasCapture" }), e$1("td", { children: hasCapture.toString() })] })] })] })] }));
	});
	const DemoUseAsyncHandler2 = g(() => {
	    const [timeout, setTimeout] = useState(1000);
	    const [debounce, setDebounce] = useState(0);
	    const [shouldThrow, setShouldThrow, getShouldThrow] = useState(false);
	    const [disableConsecutive, setDisableConsecutive] = useState(false);
	    const [text, setText] = useState("");
	    const onInputAsync = async (v, _e) => new Promise((resolve, reject) => window.setTimeout(() => {
	        if (getShouldThrow()) {
	            reject();
	        }
	        else {
	            setText(v);
	            resolve();
	        }
	    }, timeout));
	    const { callCount, settleCount, hasCapture, syncHandler, currentCapture, pending, hasError, rejectCount, resolveCount } = useAsyncHandler(onInputAsync, { capture: (e) => { e.preventDefault(); return e.currentTarget.value; }, debounce: debounce == 0 ? undefined : debounce });
	    return (e$1("div", { className: "demo", children: [e$1("label", { children: ["Demo text: ", e$1("input", { value: hasCapture ? currentCapture : text, disabled: pending && disableConsecutive, onInput: syncHandler })] }), e$1("hr", {}), e$1("label", { children: ["Sleep for: ", e$1("input", { type: "number", value: timeout, onInput: e => setTimeout(e.currentTarget.valueAsNumber) })] }), e$1("label", { children: ["Throw an error ", e$1("input", { type: "checkbox", checked: shouldThrow, onInput: e => setShouldThrow(e.currentTarget.checked) })] }), e$1("label", { children: ["Disabled while pending ", e$1("input", { type: "checkbox", checked: disableConsecutive, onInput: e => setDisableConsecutive(e.currentTarget.checked) })] }), e$1("label", { children: ["Debounce: ", e$1("input", { type: "number", value: debounce, onInput: e => setDebounce(e.currentTarget.valueAsNumber) })] }), e$1("table", { children: [e$1("thead", { children: e$1("tr", { children: [e$1("th", { children: "Field" }), e$1("th", { children: "Value" })] }) }), e$1("tbody", { children: [e$1("tr", { children: [e$1("td", { children: "callCount" }), e$1("td", { children: callCount })] }), e$1("tr", { children: [e$1("td", { children: "settleCount" }), e$1("td", { children: settleCount })] }), e$1("tr", { children: [e$1("td", { children: "resolveCount" }), e$1("td", { children: resolveCount })] }), e$1("tr", { children: [e$1("td", { children: "rejectCount" }), e$1("td", { children: rejectCount })] }), e$1("tr", { children: [e$1("td", { children: "hasError" }), e$1("td", { children: hasError.toString() })] }), e$1("tr", { children: [e$1("td", { children: "currentCapture" }), e$1("td", { children: currentCapture })] }), e$1("tr", { children: [e$1("td", { children: "\"Saved\" input" }), e$1("td", { children: text })] })] })] })] }));
	});
	const DemoFocus = g(() => {
	    const [lastActiveElement, setLastActiveElement] = useState(null);
	    const [activeElement, setActiveElement] = useState(null);
	    const [windowFocused, setWindowFocused] = useState(false);
	    const [focused, setFocused] = useState(false);
	    const [focusedInner, setFocusedInner] = useState(false);
	    const [lastFocused, setLastFocused] = useState(false);
	    const [lastFocusedInner, setLastFocusedInner] = useState(false);
	    const { useHasFocusProps } = useHasFocus({
	        onFocusedChanged: setFocused,
	        onFocusedInnerChanged: setFocusedInner,
	        onLastFocusedChanged: setLastFocused,
	        onLastFocusedInnerChanged: setLastFocusedInner,
	        onActiveElementChange: setActiveElement,
	        onLastActiveElementChange: setLastActiveElement,
	        onWindowFocusedChange: setWindowFocused
	    });
	    return (e$1("div", { class: "demo", children: [e$1("h2", { children: "useHasFocus" }), e$1("div", { ...useHasFocusProps({ style: { border: "1px solid black" }, tabIndex: 0 }), children: ["Outer ", e$1("div", { tabIndex: 0, style: { border: "1px solid black" }, children: "Inner element" })] }), e$1("div", { children: e$1("ul", { children: [e$1("li", { children: ["Strictly focused: ", focused.toString(), ", ", lastFocused.toString()] }), e$1("li", { children: ["Inner focused: ", focusedInner.toString(), ", ", lastFocusedInner.toString()] }), e$1("li", { children: ["Window focused: ", windowFocused.toString()] }), e$1("li", { children: ["activeElement: ", activeElement?.textContent] }), e$1("li", { children: ["lastActiveElement: ", lastActiveElement?.textContent] })] }) })] }));
	});
	const GridRowContext = D(null);
	const GridCellContext = D(null);
	const DemoUseGrid = g(() => {
	    const [, setLastFocusedInner, getLastFocusedInner] = useState(false);
	    const { useHasFocusProps } = useHasFocus({ onLastFocusedInnerChanged: setLastFocusedInner });
	    const { useGridNavigationRow, rowCount, cellIndex, rowIndex, useGridNavigationProps } = useGridNavigation({ shouldFocusOnChange: getLastFocusedInner });
	    return (e$1("div", { className: "demo", children: [e$1("div", { children: [cellIndex, "+", rowIndex, "/", rowCount] }), e$1("div", { ...useHasFocusProps(useGridNavigationProps({})), children: e$1(GridRowContext.Provider, { value: useGridNavigationRow, children: Array.from((function* () {
	                        for (let i = 0; i < 10; ++i) {
	                            yield e$1(DemoUseGridRow, { index: i }, i);
	                        }
	                    })()) }) })] }));
	});
	const DemoUseGridRow = g((({ index }) => {
	    useState(() => RandomWords[index /*Math.floor(Math.random() * (RandomWords.length - 1))*/]);
	    const useGridRow = T$1(GridRowContext);
	    const { isTabbableRow, cellCount, useGridNavigationRowProps, useGridNavigationCell, currentColumn } = useGridRow({ index });
	    const props = useGridNavigationRowProps({});
	    return (e$1("div", { ...props, children: [e$1("div", { children: [`${isTabbableRow}`, " (", currentColumn, "/", cellCount - 1, ")"] }), e$1("div", { style: "display: flex", children: e$1(GridCellContext.Provider, { value: useGridNavigationCell, children: Array.from((function* () {
	                        for (let i = 0; i < 3; ++i) {
	                            yield e$1(DemoUseGridCell, { index: i }, i);
	                        }
	                    })()) }) })] }));
	}));
	const DemoUseGridCell = (({ index }) => {
	    const useGridCell = T$1(GridCellContext);
	    const { useGridNavigationCellProps } = useGridCell({ index });
	    const props = useGridNavigationCellProps({});
	    if (index === 0)
	        return e$1("div", { ...props, children: ["Grid cell #", index + 1] });
	    else
	        return e$1("label", { children: [e$1("input", { ...props, type: "checkbox" }), " Test input"] });
	});
	const Component = () => {
	    return e$1("div", { class: "flex", style: { flexWrap: "wrap" }, children: [e$1(DemoFocus, {}), e$1("hr", {}), e$1(DemoUseGrid, {}), e$1("hr", {}), e$1(DemoUseTimeout, {}), e$1("hr", {}), e$1(DemoUseInterval, {}), e$1("hr", {}), e$1(DemoUseRovingTabIndex, {}), e$1("hr", {}), e$1(DemoUseFocusTrap, {}), e$1("hr", {}), e$1(DemoUseAsyncHandler1, {}), e$1("hr", {}), e$1(DemoUseAsyncHandler2, {}), e$1("hr", {}), e$1(DemoUseDroppable, {}), e$1("hr", {}), e$1(DemoUseDraggable, {}), e$1("hr", {}), e$1(DemoUseElementSizeAnimation, {}), e$1("hr", {}), e$1("input", {})] });
	};
	requestAnimationFrame(() => {
	    S$1(e$1(Component, {}), document.getElementById("root"));
	});

	exports.DemoUseGrid = DemoUseGrid;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJub2RlX21vZHVsZXMvcHJlYWN0L3NyYy91dGlsLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvb3B0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL2NyZWF0ZS1lbGVtZW50LmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvY29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvY3JlYXRlLWNvbnRleHQuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9jb25zdGFudHMuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9kaWZmL2NoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9zcmMvZGlmZi9wcm9wcy5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3Qvc3JjL2RpZmYvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9yZW5kZXIuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L3NyYy9kaWZmL2NhdGNoLWVycm9yLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9qc3gtcnVudGltZS9zcmMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2hvb2tzL3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvY29tcGF0L3NyYy91dGlsLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9jb21wYXQvc3JjL1B1cmVDb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9zcmMvbWVtby5qcyIsIm5vZGVfbW9kdWxlcy9wcmVhY3QvY29tcGF0L3NyYy9mb3J3YXJkUmVmLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9jb21wYXQvc3JjL3N1c3BlbnNlLmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9jb21wYXQvc3JjL3N1c3BlbnNlLWxpc3QuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9zcmMvcmVuZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCIuLi9zcmMvdXNlLWRvY3VtZW50LWNsYXNzLnRzeCIsIi4uL3NyYy91c2UtcGFzc2l2ZS1zdGF0ZS50c3giLCIuLi9zcmMvdXNlLW1lcmdlZC1jaGlsZHJlbi50c3giLCIuLi9zcmMvdXNlLW1lcmdlZC1jbGFzc2VzLnRzeCIsIi4uL3NyYy91c2UtbWVyZ2VkLXJlZnMudHN4IiwiLi4vc3JjL3VzZS1tZXJnZWQtc3R5bGVzLnRzeCIsIi4uL3NyYy91c2UtbWVyZ2VkLXByb3BzLnRzeCIsIi4uL3NyYy91c2UtcmVmLWVsZW1lbnQudHN4IiwiLi4vc3JjL3VzZS1lbGVtZW50LXNpemUudHN4IiwiLi4vc3JjL3VzZS1sb2dpY2FsLWRpcmVjdGlvbi50c3giLCIuLi9zcmMvdXNlLXN0YXRlLnRzeCIsIi4uL3NyYy91c2UtcmFuZG9tLWlkLnRzeCIsIi4uL3NyYy91c2UtYmVmb3JlLWxheW91dC1lZmZlY3QudHN4IiwiLi4vc3JjL3VzZS1zdGFibGUtZ2V0dGVyLnRzeCIsIi4uL3NyYy91c2Utc3RhYmxlLWNhbGxiYWNrLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbm93LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdHJpbW1lZEVuZEluZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRyaW0uanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTeW1ib2wuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvTnVtYmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9kZWJvdW5jZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdGhyb3R0bGUuanMiLCIuLi9zcmMvdXNlLWFzeW5jLnRzeCIsIi4uL3NyYy91c2UtYXN5bmMtaGFuZGxlci50c3giLCIuLi9zcmMvdXNlLWVmZmVjdC50c3giLCIuLi9zcmMvdXNlLWxheW91dC1lZmZlY3QudHN4IiwiLi4vc3JjL3VzZS10aW1lb3V0LnRzeCIsIi4uL3NyYy91c2Uta2V5Ym9hcmQtbmF2aWdhdGlvbi50c3giLCIuLi9zcmMvdXNlLWNoaWxkLW1hbmFnZXIudHN4IiwiLi4vc3JjL3VzZS1mb3JjZS11cGRhdGUudHN4IiwiLi4vc3JjL3VzZS1yb3ZpbmctdGFiaW5kZXgudHN4IiwiLi4vc3JjL3VzZS1saXN0LW5hdmlnYXRpb24udHN4IiwiLi4vc3JjL3VzZS1ncmlkLW5hdmlnYXRpb24udHN4IiwiLi4vc3JjL3VzZS1hbmltYXRpb24tZnJhbWUudHN4IiwiLi4vc3JjL3VzZS1kcmFnZ2FibGUudHN4IiwiLi4vc3JjL3VzZS1kcm9wcGFibGUudHN4IiwiLi4vc3JjL3VzZS1hY3RpdmUtZWxlbWVudC50c3giLCIuLi9zcmMvdXNlLWhhcy1mb2N1cy50c3giLCIuLi9zcmMvdXNlLWludGVydmFsLnRzeCIsIi4uL25vZGVfbW9kdWxlcy90YWJiYWJsZS9zcmMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvd2ljZy1pbmVydC9kaXN0L2luZXJ0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Jsb2NraW5nLWVsZW1lbnRzL3NyYy9ibG9ja2luZy1lbGVtZW50cy50cyIsIi4uL3NyYy91c2UtYmxvY2tpbmctZWxlbWVudC50c3giLCIuLi9zcmMvdXNlLWZvY3VzLXRyYXAudHN4IiwiZGVtb3MvdXNlLWludGVydmFsLnRzeCIsImRlbW9zL3VzZS1yb3ZpbmctdGFiLWluZGV4LnRzeCIsImRlbW9zL3VzZS10aW1lb3V0LnRzeCIsImluZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTVBUWV9BUlIgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuLyoqXG4gKiBBc3NpZ24gcHJvcGVydGllcyBmcm9tIGBwcm9wc2AgdG8gYG9iamBcbiAqIEB0ZW1wbGF0ZSBPLCBQIFRoZSBvYmogYW5kIHByb3BzIHR5cGVzXG4gKiBAcGFyYW0ge099IG9iaiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0b1xuICogQHBhcmFtIHtQfSBwcm9wcyBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcmV0dXJucyB7TyAmIFB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24ob2JqLCBwcm9wcykge1xuXHQvLyBAdHMtaWdub3JlIFdlIGNoYW5nZSB0aGUgdHlwZSBvZiBgb2JqYCB0byBiZSBgTyAmIFBgXG5cdGZvciAobGV0IGkgaW4gcHJvcHMpIG9ialtpXSA9IHByb3BzW2ldO1xuXHRyZXR1cm4gLyoqIEB0eXBlIHtPICYgUH0gKi8gKG9iaik7XG59XG5cbi8qKlxuICogUmVtb3ZlIGEgY2hpbGQgbm9kZSBmcm9tIGl0cyBwYXJlbnQgaWYgYXR0YWNoZWQuIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvclxuICogSUUxMSB3aGljaCBkb2Vzbid0IHN1cHBvcnQgYEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSgpYC4gVXNpbmcgdGhpcyBmdW5jdGlvblxuICogaXMgc21hbGxlciB0aGFuIGluY2x1ZGluZyBhIGRlZGljYXRlZCBwb2x5ZmlsbC5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byByZW1vdmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSkge1xuXHRsZXQgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcblx0aWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG59XG5cbmV4cG9ydCBjb25zdCBzbGljZSA9IEVNUFRZX0FSUi5zbGljZTtcbiIsImltcG9ydCB7IF9jYXRjaEVycm9yIH0gZnJvbSAnLi9kaWZmL2NhdGNoLWVycm9yJztcblxuLyoqXG4gKiBUaGUgYG9wdGlvbmAgb2JqZWN0IGNhbiBwb3RlbnRpYWxseSBjb250YWluIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICogdGhhdCBhcmUgY2FsbGVkIGR1cmluZyB2YXJpb3VzIHN0YWdlcyBvZiBvdXIgcmVuZGVyZXIuIFRoaXMgaXMgdGhlXG4gKiBmb3VuZGF0aW9uIG9uIHdoaWNoIGFsbCBvdXIgYWRkb25zIGxpa2UgYHByZWFjdC9kZWJ1Z2AsIGBwcmVhY3QvY29tcGF0YCxcbiAqIGFuZCBgcHJlYWN0L2hvb2tzYCBhcmUgYmFzZWQgb24uIFNlZSB0aGUgYE9wdGlvbnNgIHR5cGUgaW4gYGludGVybmFsLmQudHNgXG4gKiBmb3IgYSBmdWxsIGxpc3Qgb2YgYXZhaWxhYmxlIG9wdGlvbiBob29rcyAobW9zdCBlZGl0b3JzL0lERXMgYWxsb3cgeW91IHRvXG4gKiBjdHJsK2NsaWNrIG9yIGNtZCtjbGljayBvbiBtYWMgdGhlIHR5cGUgZGVmaW5pdGlvbiBiZWxvdykuXG4gKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuT3B0aW9uc31cbiAqL1xuY29uc3Qgb3B0aW9ucyA9IHtcblx0X2NhdGNoRXJyb3Jcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG9wdGlvbnM7XG4iLCJpbXBvcnQgeyBzbGljZSB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL29wdGlvbnMnO1xuXG5sZXQgdm5vZGVJZCA9IDA7XG5cbi8qKlxuICogQ3JlYXRlIGFuIHZpcnR1YWwgbm9kZSAodXNlZCBmb3IgSlNYKVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInR5cGVcIl19IHR5cGUgVGhlIG5vZGUgbmFtZSBvciBDb21wb25lbnRcbiAqIGNvbnN0cnVjdG9yIGZvciB0aGlzIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsIHwgdW5kZWZpbmVkfSBbcHJvcHNdIFRoZSBwcm9wZXJ0aWVzIG9mIHRoZSB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuJykuQ29tcG9uZW50Q2hpbGRyZW4+fSBbY2hpbGRyZW5dIFRoZSBjaGlsZHJlbiBvZiB0aGUgdmlydHVhbCBub2RlXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuXHRsZXQgbm9ybWFsaXplZFByb3BzID0ge30sXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRpO1xuXHRmb3IgKGkgaW4gcHJvcHMpIHtcblx0XHRpZiAoaSA9PSAna2V5Jykga2V5ID0gcHJvcHNbaV07XG5cdFx0ZWxzZSBpZiAoaSA9PSAncmVmJykgcmVmID0gcHJvcHNbaV07XG5cdFx0ZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSBwcm9wc1tpXTtcblx0fVxuXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuXHRcdG5vcm1hbGl6ZWRQcm9wcy5jaGlsZHJlbiA9XG5cdFx0XHRhcmd1bWVudHMubGVuZ3RoID4gMyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGNoaWxkcmVuO1xuXHR9XG5cblx0Ly8gSWYgYSBDb21wb25lbnQgVk5vZGUsIGNoZWNrIGZvciBhbmQgYXBwbHkgZGVmYXVsdFByb3BzXG5cdC8vIE5vdGU6IHR5cGUgbWF5IGJlIHVuZGVmaW5lZCBpbiBkZXZlbG9wbWVudCwgbXVzdCBuZXZlciBlcnJvciBoZXJlLlxuXHRpZiAodHlwZW9mIHR5cGUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlLmRlZmF1bHRQcm9wcyAhPSBudWxsKSB7XG5cdFx0Zm9yIChpIGluIHR5cGUuZGVmYXVsdFByb3BzKSB7XG5cdFx0XHRpZiAobm9ybWFsaXplZFByb3BzW2ldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0bm9ybWFsaXplZFByb3BzW2ldID0gdHlwZS5kZWZhdWx0UHJvcHNbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5LCByZWYsIG51bGwpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIFZOb2RlICh1c2VkIGludGVybmFsbHkgYnkgUHJlYWN0KVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInR5cGVcIl19IHR5cGUgVGhlIG5vZGUgbmFtZSBvciBDb21wb25lbnRcbiAqIENvbnN0cnVjdG9yIGZvciB0aGlzIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3QgfCBzdHJpbmcgfCBudW1iZXIgfCBudWxsfSBwcm9wcyBUaGUgcHJvcGVydGllcyBvZiB0aGlzIHZpcnR1YWwgbm9kZS5cbiAqIElmIHRoaXMgdmlydHVhbCBub2RlIHJlcHJlc2VudHMgYSB0ZXh0IG5vZGUsIHRoaXMgaXMgdGhlIHRleHQgb2YgdGhlIG5vZGUgKHN0cmluZyBvciBudW1iZXIpLlxuICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBudWxsfSBrZXkgVGhlIGtleSBmb3IgdGhpcyB2aXJ0dWFsIG5vZGUsIHVzZWQgd2hlblxuICogZGlmZmluZyBpdCBhZ2FpbnN0IGl0cyBjaGlsZHJlblxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInJlZlwiXX0gcmVmIFRoZSByZWYgcHJvcGVydHkgdGhhdCB3aWxsXG4gKiByZWNlaXZlIGEgcmVmZXJlbmNlIHRvIGl0cyBjcmVhdGVkIGNoaWxkXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wcywga2V5LCByZWYsIG9yaWdpbmFsKSB7XG5cdC8vIFY4IHNlZW1zIHRvIGJlIGJldHRlciBhdCBkZXRlY3RpbmcgdHlwZSBzaGFwZXMgaWYgdGhlIG9iamVjdCBpcyBhbGxvY2F0ZWQgZnJvbSB0aGUgc2FtZSBjYWxsIHNpdGVcblx0Ly8gRG8gbm90IGlubGluZSBpbnRvIGNyZWF0ZUVsZW1lbnQgYW5kIGNvZXJjZVRvVk5vZGUhXG5cdGNvbnN0IHZub2RlID0ge1xuXHRcdHR5cGUsXG5cdFx0cHJvcHMsXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRfY2hpbGRyZW46IG51bGwsXG5cdFx0X3BhcmVudDogbnVsbCxcblx0XHRfZGVwdGg6IDAsXG5cdFx0X2RvbTogbnVsbCxcblx0XHQvLyBfbmV4dERvbSBtdXN0IGJlIGluaXRpYWxpemVkIHRvIHVuZGVmaW5lZCBiL2MgaXQgd2lsbCBldmVudHVhbGx5XG5cdFx0Ly8gYmUgc2V0IHRvIGRvbS5uZXh0U2libGluZyB3aGljaCBjYW4gcmV0dXJuIGBudWxsYCBhbmQgaXQgaXMgaW1wb3J0YW50XG5cdFx0Ly8gdG8gYmUgYWJsZSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIGFuIHVuaW5pdGlhbGl6ZWQgX25leHREb20gYW5kXG5cdFx0Ly8gYSBfbmV4dERvbSB0aGF0IGhhcyBiZWVuIHNldCB0byBgbnVsbGBcblx0XHRfbmV4dERvbTogdW5kZWZpbmVkLFxuXHRcdF9jb21wb25lbnQ6IG51bGwsXG5cdFx0X2h5ZHJhdGluZzogbnVsbCxcblx0XHRjb25zdHJ1Y3RvcjogdW5kZWZpbmVkLFxuXHRcdF9vcmlnaW5hbDogb3JpZ2luYWwgPT0gbnVsbCA/ICsrdm5vZGVJZCA6IG9yaWdpbmFsXG5cdH07XG5cblx0Ly8gT25seSBpbnZva2UgdGhlIHZub2RlIGhvb2sgaWYgdGhpcyB3YXMgKm5vdCogYSBkaXJlY3QgY29weTpcblx0aWYgKG9yaWdpbmFsID09IG51bGwgJiYgb3B0aW9ucy52bm9kZSAhPSBudWxsKSBvcHRpb25zLnZub2RlKHZub2RlKTtcblxuXHRyZXR1cm4gdm5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWYoKSB7XG5cdHJldHVybiB7IGN1cnJlbnQ6IG51bGwgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZyYWdtZW50KHByb3BzKSB7XG5cdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRoZSBhcmd1bWVudCBpcyBhIHZhbGlkIFByZWFjdCBWTm9kZS5cbiAqIEBwYXJhbSB7Kn0gdm5vZGVcbiAqIEByZXR1cm5zIHt2bm9kZSBpcyBpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVmFsaWRFbGVtZW50ID0gdm5vZGUgPT5cblx0dm5vZGUgIT0gbnVsbCAmJiB2bm9kZS5jb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IGRpZmYsIGNvbW1pdFJvb3QgfSBmcm9tICcuL2RpZmYvaW5kZXgnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5cbi8qKlxuICogQmFzZSBDb21wb25lbnQgY2xhc3MuIFByb3ZpZGVzIGBzZXRTdGF0ZSgpYCBhbmQgYGZvcmNlVXBkYXRlKClgLCB3aGljaFxuICogdHJpZ2dlciByZW5kZXJpbmdcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBUaGUgaW5pdGlhbCBjb21wb25lbnQgcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFRoZSBpbml0aWFsIGNvbnRleHQgZnJvbSBwYXJlbnQgY29tcG9uZW50cydcbiAqIGdldENoaWxkQ29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0KSB7XG5cdHRoaXMucHJvcHMgPSBwcm9wcztcblx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcbn1cblxuLyoqXG4gKiBVcGRhdGUgY29tcG9uZW50IHN0YXRlIGFuZCBzY2hlZHVsZSBhIHJlLXJlbmRlci5cbiAqIEB0aGlzIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9XG4gKiBAcGFyYW0ge29iamVjdCB8ICgoczogb2JqZWN0LCBwOiBvYmplY3QpID0+IG9iamVjdCl9IHVwZGF0ZSBBIGhhc2ggb2Ygc3RhdGVcbiAqIHByb3BlcnRpZXMgdG8gdXBkYXRlIHdpdGggbmV3IHZhbHVlcyBvciBhIGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gdGhlIGN1cnJlbnRcbiAqIHN0YXRlIGFuZCBwcm9wcyByZXR1cm5zIGEgbmV3IHBhcnRpYWwgc3RhdGVcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbmNlIGNvbXBvbmVudCBzdGF0ZSBpc1xuICogdXBkYXRlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24odXBkYXRlLCBjYWxsYmFjaykge1xuXHQvLyBvbmx5IGNsb25lIHN0YXRlIHdoZW4gY29weWluZyB0byBuZXh0U3RhdGUgdGhlIGZpcnN0IHRpbWUuXG5cdGxldCBzO1xuXHRpZiAodGhpcy5fbmV4dFN0YXRlICE9IG51bGwgJiYgdGhpcy5fbmV4dFN0YXRlICE9PSB0aGlzLnN0YXRlKSB7XG5cdFx0cyA9IHRoaXMuX25leHRTdGF0ZTtcblx0fSBlbHNlIHtcblx0XHRzID0gdGhpcy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgdXBkYXRlID09ICdmdW5jdGlvbicpIHtcblx0XHQvLyBTb21lIGxpYnJhcmllcyBsaWtlIGBpbW1lcmAgbWFyayB0aGUgY3VycmVudCBzdGF0ZSBhcyByZWFkb25seSxcblx0XHQvLyBwcmV2ZW50aW5nIHVzIGZyb20gbXV0YXRpbmcgaXQsIHNvIHdlIG5lZWQgdG8gY2xvbmUgaXQuIFNlZSAjMjcxNlxuXHRcdHVwZGF0ZSA9IHVwZGF0ZShhc3NpZ24oe30sIHMpLCB0aGlzLnByb3BzKTtcblx0fVxuXG5cdGlmICh1cGRhdGUpIHtcblx0XHRhc3NpZ24ocywgdXBkYXRlKTtcblx0fVxuXG5cdC8vIFNraXAgdXBkYXRlIGlmIHVwZGF0ZXIgZnVuY3Rpb24gcmV0dXJuZWQgbnVsbFxuXHRpZiAodXBkYXRlID09IG51bGwpIHJldHVybjtcblxuXHRpZiAodGhpcy5fdm5vZGUpIHtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEltbWVkaWF0ZWx5IHBlcmZvcm0gYSBzeW5jaHJvbm91cyByZS1yZW5kZXIgb2YgdGhlIGNvbXBvbmVudFxuICogQHRoaXMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH1cbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhZnRlciBjb21wb25lbnQgaXNcbiAqIHJlLXJlbmRlcmVkXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRpZiAodGhpcy5fdm5vZGUpIHtcblx0XHQvLyBTZXQgcmVuZGVyIG1vZGUgc28gdGhhdCB3ZSBjYW4gZGlmZmVyZW50aWF0ZSB3aGVyZSB0aGUgcmVuZGVyIHJlcXVlc3Rcblx0XHQvLyBpcyBjb21pbmcgZnJvbS4gV2UgbmVlZCB0aGlzIGJlY2F1c2UgZm9yY2VVcGRhdGUgc2hvdWxkIG5ldmVyIGNhbGxcblx0XHQvLyBzaG91bGRDb21wb25lbnRVcGRhdGVcblx0XHR0aGlzLl9mb3JjZSA9IHRydWU7XG5cdFx0aWYgKGNhbGxiYWNrKSB0aGlzLl9yZW5kZXJDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cdFx0ZW5xdWV1ZVJlbmRlcih0aGlzKTtcblx0fVxufTtcblxuLyoqXG4gKiBBY2NlcHRzIGBwcm9wc2AgYW5kIGBzdGF0ZWAsIGFuZCByZXR1cm5zIGEgbmV3IFZpcnR1YWwgRE9NIHRyZWUgdG8gYnVpbGQuXG4gKiBWaXJ0dWFsIERPTSBpcyBnZW5lcmFsbHkgY29uc3RydWN0ZWQgdmlhIFtKU1hdKGh0dHA6Ly9qYXNvbmZvcm1hdC5jb20vd3RmLWlzLWpzeCkuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgUHJvcHMgKGVnOiBKU1ggYXR0cmlidXRlcykgcmVjZWl2ZWQgZnJvbSBwYXJlbnRcbiAqIGVsZW1lbnQvY29tcG9uZW50XG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgVGhlIGNvbXBvbmVudCdzIGN1cnJlbnQgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IENvbnRleHQgb2JqZWN0LCBhcyByZXR1cm5lZCBieSB0aGUgbmVhcmVzdFxuICogYW5jZXN0b3IncyBgZ2V0Q2hpbGRDb250ZXh0KClgXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2luZGV4JykuQ29tcG9uZW50Q2hpbGRyZW4gfCB2b2lkfVxuICovXG5Db21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IEZyYWdtZW50O1xuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlXG4gKiBAcGFyYW0ge251bWJlciB8IG51bGx9IFtjaGlsZEluZGV4XVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RG9tU2libGluZyh2bm9kZSwgY2hpbGRJbmRleCkge1xuXHRpZiAoY2hpbGRJbmRleCA9PSBudWxsKSB7XG5cdFx0Ly8gVXNlIGNoaWxkSW5kZXg9PW51bGwgYXMgYSBzaWduYWwgdG8gcmVzdW1lIHRoZSBzZWFyY2ggZnJvbSB0aGUgdm5vZGUncyBzaWJsaW5nXG5cdFx0cmV0dXJuIHZub2RlLl9wYXJlbnRcblx0XHRcdD8gZ2V0RG9tU2libGluZyh2bm9kZS5fcGFyZW50LCB2bm9kZS5fcGFyZW50Ll9jaGlsZHJlbi5pbmRleE9mKHZub2RlKSArIDEpXG5cdFx0XHQ6IG51bGw7XG5cdH1cblxuXHRsZXQgc2libGluZztcblx0Zm9yICg7IGNoaWxkSW5kZXggPCB2bm9kZS5fY2hpbGRyZW4ubGVuZ3RoOyBjaGlsZEluZGV4KyspIHtcblx0XHRzaWJsaW5nID0gdm5vZGUuX2NoaWxkcmVuW2NoaWxkSW5kZXhdO1xuXG5cdFx0aWYgKHNpYmxpbmcgIT0gbnVsbCAmJiBzaWJsaW5nLl9kb20gIT0gbnVsbCkge1xuXHRcdFx0Ly8gU2luY2UgdXBkYXRlUGFyZW50RG9tUG9pbnRlcnMga2VlcHMgX2RvbSBwb2ludGVyIGNvcnJlY3QsXG5cdFx0XHQvLyB3ZSBjYW4gcmVseSBvbiBfZG9tIHRvIHRlbGwgdXMgaWYgdGhpcyBzdWJ0cmVlIGNvbnRhaW5zIGFcblx0XHRcdC8vIHJlbmRlcmVkIERPTSBub2RlLCBhbmQgd2hhdCB0aGUgZmlyc3QgcmVuZGVyZWQgRE9NIG5vZGUgaXNcblx0XHRcdHJldHVybiBzaWJsaW5nLl9kb207XG5cdFx0fVxuXHR9XG5cblx0Ly8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgbm90IGZvdW5kIGEgRE9NIG5vZGUgaW4gdGhpcyB2bm9kZSdzIGNoaWxkcmVuLlxuXHQvLyBXZSBtdXN0IHJlc3VtZSBmcm9tIHRoaXMgdm5vZGUncyBzaWJsaW5nIChpbiBpdCdzIHBhcmVudCBfY2hpbGRyZW4gYXJyYXkpXG5cdC8vIE9ubHkgY2xpbWIgdXAgYW5kIHNlYXJjaCB0aGUgcGFyZW50IGlmIHdlIGFyZW4ndCBzZWFyY2hpbmcgdGhyb3VnaCBhIERPTVxuXHQvLyBWTm9kZSAobWVhbmluZyB3ZSByZWFjaGVkIHRoZSBET00gcGFyZW50IG9mIHRoZSBvcmlnaW5hbCB2bm9kZSB0aGF0IGJlZ2FuXG5cdC8vIHRoZSBzZWFyY2gpXG5cdHJldHVybiB0eXBlb2Ygdm5vZGUudHlwZSA9PSAnZnVuY3Rpb24nID8gZ2V0RG9tU2libGluZyh2bm9kZSkgOiBudWxsO1xufVxuXG4vKipcbiAqIFRyaWdnZXIgaW4tcGxhY2UgcmUtcmVuZGVyaW5nIG9mIGEgY29tcG9uZW50LlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9IGNvbXBvbmVudCBUaGUgY29tcG9uZW50IHRvIHJlcmVuZGVyXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudChjb21wb25lbnQpIHtcblx0bGV0IHZub2RlID0gY29tcG9uZW50Ll92bm9kZSxcblx0XHRvbGREb20gPSB2bm9kZS5fZG9tLFxuXHRcdHBhcmVudERvbSA9IGNvbXBvbmVudC5fcGFyZW50RG9tO1xuXG5cdGlmIChwYXJlbnREb20pIHtcblx0XHRsZXQgY29tbWl0UXVldWUgPSBbXTtcblx0XHRjb25zdCBvbGRWTm9kZSA9IGFzc2lnbih7fSwgdm5vZGUpO1xuXHRcdG9sZFZOb2RlLl9vcmlnaW5hbCA9IHZub2RlLl9vcmlnaW5hbCArIDE7XG5cblx0XHRkaWZmKFxuXHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0dm5vZGUsXG5cdFx0XHRvbGRWTm9kZSxcblx0XHRcdGNvbXBvbmVudC5fZ2xvYmFsQ29udGV4dCxcblx0XHRcdHBhcmVudERvbS5vd25lclNWR0VsZW1lbnQgIT09IHVuZGVmaW5lZCxcblx0XHRcdHZub2RlLl9oeWRyYXRpbmcgIT0gbnVsbCA/IFtvbGREb21dIDogbnVsbCxcblx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0b2xkRG9tID09IG51bGwgPyBnZXREb21TaWJsaW5nKHZub2RlKSA6IG9sZERvbSxcblx0XHRcdHZub2RlLl9oeWRyYXRpbmdcblx0XHQpO1xuXHRcdGNvbW1pdFJvb3QoY29tbWl0UXVldWUsIHZub2RlKTtcblxuXHRcdGlmICh2bm9kZS5fZG9tICE9IG9sZERvbSkge1xuXHRcdFx0dXBkYXRlUGFyZW50RG9tUG9pbnRlcnModm5vZGUpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzKHZub2RlKSB7XG5cdGlmICgodm5vZGUgPSB2bm9kZS5fcGFyZW50KSAhPSBudWxsICYmIHZub2RlLl9jb21wb25lbnQgIT0gbnVsbCkge1xuXHRcdHZub2RlLl9kb20gPSB2bm9kZS5fY29tcG9uZW50LmJhc2UgPSBudWxsO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgY2hpbGQgPSB2bm9kZS5fY2hpbGRyZW5baV07XG5cdFx0XHRpZiAoY2hpbGQgIT0gbnVsbCAmJiBjaGlsZC5fZG9tICE9IG51bGwpIHtcblx0XHRcdFx0dm5vZGUuX2RvbSA9IHZub2RlLl9jb21wb25lbnQuYmFzZSA9IGNoaWxkLl9kb207XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB1cGRhdGVQYXJlbnREb21Qb2ludGVycyh2bm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgcmVuZGVyIHF1ZXVlXG4gKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Pn1cbiAqL1xubGV0IHJlcmVuZGVyUXVldWUgPSBbXTtcblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBzY2hlZHVsZSBhIGNhbGxiYWNrXG4gKiBAdHlwZSB7KGNiOiAoKSA9PiB2b2lkKSA9PiB2b2lkfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLy8gTm90ZSB0aGUgZm9sbG93aW5nIGxpbmUgaXNuJ3QgdHJlZS1zaGFrZW4gYnkgcm9sbHVwIGN1eiBvZiByb2xsdXAvcm9sbHVwIzI1NjZcbmNvbnN0IGRlZmVyID1cblx0dHlwZW9mIFByb21pc2UgPT0gJ2Z1bmN0aW9uJ1xuXHRcdD8gUHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXHRcdDogc2V0VGltZW91dDtcblxuLypcbiAqIFRoZSB2YWx1ZSBvZiBgQ29tcG9uZW50LmRlYm91bmNlYCBtdXN0IGFzeW5jaHJvbm91c2x5IGludm9rZSB0aGUgcGFzc2VkIGluIGNhbGxiYWNrLiBJdCBpc1xuICogaW1wb3J0YW50IHRoYXQgY29udHJpYnV0b3JzIHRvIFByZWFjdCBjYW4gY29uc2lzdGVudGx5IHJlYXNvbiBhYm91dCB3aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAsIGV0Yy5cbiAqIGRvLCBhbmQgd2hlbiB0aGVpciBlZmZlY3RzIHdpbGwgYmUgYXBwbGllZC4gU2VlIHRoZSBsaW5rcyBiZWxvdyBmb3Igc29tZSBmdXJ0aGVyIHJlYWRpbmcgb24gZGVzaWduaW5nXG4gKiBhc3luY2hyb25vdXMgQVBJcy5cbiAqICogW0Rlc2lnbmluZyBBUElzIGZvciBBc3luY2hyb255XShodHRwczovL2Jsb2cuaXpzLm1lLzIwMTMvMDgvZGVzaWduaW5nLWFwaXMtZm9yLWFzeW5jaHJvbnkpXG4gKiAqIFtDYWxsYmFja3Mgc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91c10oaHR0cHM6Ly9ibG9nLm9tZXRlci5jb20vMjAxMS8wNy8yNC9jYWxsYmFja3Mtc3luY2hyb25vdXMtYW5kLWFzeW5jaHJvbm91cy8pXG4gKi9cblxubGV0IHByZXZEZWJvdW5jZTtcblxuLyoqXG4gKiBFbnF1ZXVlIGEgcmVyZW5kZXIgb2YgYSBjb21wb25lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSBjIFRoZSBjb21wb25lbnQgdG8gcmVyZW5kZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVucXVldWVSZW5kZXIoYykge1xuXHRpZiAoXG5cdFx0KCFjLl9kaXJ0eSAmJlxuXHRcdFx0KGMuX2RpcnR5ID0gdHJ1ZSkgJiZcblx0XHRcdHJlcmVuZGVyUXVldWUucHVzaChjKSAmJlxuXHRcdFx0IXByb2Nlc3MuX3JlcmVuZGVyQ291bnQrKykgfHxcblx0XHRwcmV2RGVib3VuY2UgIT09IG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmdcblx0KSB7XG5cdFx0cHJldkRlYm91bmNlID0gb3B0aW9ucy5kZWJvdW5jZVJlbmRlcmluZztcblx0XHQocHJldkRlYm91bmNlIHx8IGRlZmVyKShwcm9jZXNzKTtcblx0fVxufVxuXG4vKiogRmx1c2ggdGhlIHJlbmRlciBxdWV1ZSBieSByZXJlbmRlcmluZyBhbGwgcXVldWVkIGNvbXBvbmVudHMgKi9cbmZ1bmN0aW9uIHByb2Nlc3MoKSB7XG5cdGxldCBxdWV1ZTtcblx0d2hpbGUgKChwcm9jZXNzLl9yZXJlbmRlckNvdW50ID0gcmVyZW5kZXJRdWV1ZS5sZW5ndGgpKSB7XG5cdFx0cXVldWUgPSByZXJlbmRlclF1ZXVlLnNvcnQoKGEsIGIpID0+IGEuX3Zub2RlLl9kZXB0aCAtIGIuX3Zub2RlLl9kZXB0aCk7XG5cdFx0cmVyZW5kZXJRdWV1ZSA9IFtdO1xuXHRcdC8vIERvbid0IHVwZGF0ZSBgcmVuZGVyQ291bnRgIHlldC4gS2VlcCBpdHMgdmFsdWUgbm9uLXplcm8gdG8gcHJldmVudCB1bm5lY2Vzc2FyeVxuXHRcdC8vIHByb2Nlc3MoKSBjYWxscyBmcm9tIGdldHRpbmcgc2NoZWR1bGVkIHdoaWxlIGBxdWV1ZWAgaXMgc3RpbGwgYmVpbmcgY29uc3VtZWQuXG5cdFx0cXVldWUuc29tZShjID0+IHtcblx0XHRcdGlmIChjLl9kaXJ0eSkgcmVuZGVyQ29tcG9uZW50KGMpO1xuXHRcdH0pO1xuXHR9XG59XG5wcm9jZXNzLl9yZXJlbmRlckNvdW50ID0gMDtcbiIsImltcG9ydCB7IGVucXVldWVSZW5kZXIgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBsZXQgaSA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY29udGV4dElkKSB7XG5cdGNvbnRleHRJZCA9ICdfX2NDJyArIGkrKztcblxuXHRjb25zdCBjb250ZXh0ID0ge1xuXHRcdF9pZDogY29udGV4dElkLFxuXHRcdF9kZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcblx0XHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkZ1bmN0aW9uQ29tcG9uZW50fSAqL1xuXHRcdENvbnN1bWVyKHByb3BzLCBjb250ZXh0VmFsdWUpIHtcblx0XHRcdC8vIHJldHVybiBwcm9wcy5jaGlsZHJlbihcblx0XHRcdC8vIFx0Y29udGV4dFtjb250ZXh0SWRdID8gY29udGV4dFtjb250ZXh0SWRdLnByb3BzLnZhbHVlIDogZGVmYXVsdFZhbHVlXG5cdFx0XHQvLyApO1xuXHRcdFx0cmV0dXJuIHByb3BzLmNoaWxkcmVuKGNvbnRleHRWYWx1ZSk7XG5cdFx0fSxcblx0XHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkZ1bmN0aW9uQ29tcG9uZW50fSAqL1xuXHRcdFByb3ZpZGVyKHByb3BzKSB7XG5cdFx0XHRpZiAoIXRoaXMuZ2V0Q2hpbGRDb250ZXh0KSB7XG5cdFx0XHRcdGxldCBzdWJzID0gW107XG5cdFx0XHRcdGxldCBjdHggPSB7fTtcblx0XHRcdFx0Y3R4W2NvbnRleHRJZF0gPSB0aGlzO1xuXG5cdFx0XHRcdHRoaXMuZ2V0Q2hpbGRDb250ZXh0ID0gKCkgPT4gY3R4O1xuXG5cdFx0XHRcdHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24oX3Byb3BzKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMucHJvcHMudmFsdWUgIT09IF9wcm9wcy52YWx1ZSkge1xuXHRcdFx0XHRcdFx0Ly8gSSB0aGluayB0aGUgZm9yY2VkIHZhbHVlIHByb3BhZ2F0aW9uIGhlcmUgd2FzIG9ubHkgbmVlZGVkIHdoZW4gYG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmdgIHdhcyBiZWluZyBieXBhc3NlZDpcblx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVhY3Rqcy9wcmVhY3QvY29tbWl0LzRkMzM5ZmI4MDNiZWEwOWU5ZjE5OGFiZjM4Y2ExYmY4ZWE0Yjc3NzEjZGlmZi01NDY4MmNlMzgwOTM1YTcxN2U0MWI4YmZjNTQ3MzdmNlIzNThcblx0XHRcdFx0XHRcdC8vIEluIHRob3NlIGNhc2VzIHRob3VnaCwgZXZlbiB3aXRoIHRoZSB2YWx1ZSBjb3JyZWN0ZWQsIHdlJ3JlIGRvdWJsZS1yZW5kZXJpbmcgYWxsIG5vZGVzLlxuXHRcdFx0XHRcdFx0Ly8gSXQgbWlnaHQgYmUgYmV0dGVyIHRvIGp1c3QgdGVsbCBmb2xrcyBub3QgdG8gdXNlIGZvcmNlLXN5bmMgbW9kZS5cblx0XHRcdFx0XHRcdC8vIEN1cnJlbnRseSwgdXNpbmcgYHVzZUNvbnRleHQoKWAgaW4gYSBjbGFzcyBjb21wb25lbnQgd2lsbCBvdmVyd3JpdGUgaXRzIGB0aGlzLmNvbnRleHRgIHZhbHVlLlxuXHRcdFx0XHRcdFx0Ly8gc3Vicy5zb21lKGMgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gXHRjLmNvbnRleHQgPSBfcHJvcHMudmFsdWU7XG5cdFx0XHRcdFx0XHQvLyBcdGVucXVldWVSZW5kZXIoYyk7XG5cdFx0XHRcdFx0XHQvLyB9KTtcblxuXHRcdFx0XHRcdFx0Ly8gc3Vicy5zb21lKGMgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gXHRjLmNvbnRleHRbY29udGV4dElkXSA9IF9wcm9wcy52YWx1ZTtcblx0XHRcdFx0XHRcdC8vIFx0ZW5xdWV1ZVJlbmRlcihjKTtcblx0XHRcdFx0XHRcdC8vIH0pO1xuXHRcdFx0XHRcdFx0c3Vicy5zb21lKGVucXVldWVSZW5kZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLnN1YiA9IGMgPT4ge1xuXHRcdFx0XHRcdHN1YnMucHVzaChjKTtcblx0XHRcdFx0XHRsZXQgb2xkID0gYy5jb21wb25lbnRXaWxsVW5tb3VudDtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gKCkgPT4ge1xuXHRcdFx0XHRcdFx0c3Vicy5zcGxpY2Uoc3Vicy5pbmRleE9mKGMpLCAxKTtcblx0XHRcdFx0XHRcdGlmIChvbGQpIG9sZC5jYWxsKGMpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcblx0XHR9XG5cdH07XG5cblx0Ly8gRGV2dG9vbHMgbmVlZHMgYWNjZXNzIHRvIHRoZSBjb250ZXh0IG9iamVjdCB3aGVuIGl0XG5cdC8vIGVuY291bnRlcnMgYSBQcm92aWRlci4gVGhpcyBpcyBuZWNlc3NhcnkgdG8gc3VwcG9ydFxuXHQvLyBzZXR0aW5nIGBkaXNwbGF5TmFtZWAgb24gdGhlIGNvbnRleHQgb2JqZWN0IGluc3RlYWRcblx0Ly8gb2Ygb24gdGhlIGNvbXBvbmVudCBpdHNlbGYuIFNlZTpcblx0Ly8gaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2NvbnRleHQuaHRtbCNjb250ZXh0ZGlzcGxheW5hbWVcblxuXHRyZXR1cm4gKGNvbnRleHQuUHJvdmlkZXIuX2NvbnRleHRSZWYgPSBjb250ZXh0LkNvbnN1bWVyLmNvbnRleHRUeXBlID0gY29udGV4dCk7XG59XG4iLCJleHBvcnQgY29uc3QgRU1QVFlfT0JKID0ge307XG5leHBvcnQgY29uc3QgRU1QVFlfQVJSID0gW107XG5leHBvcnQgY29uc3QgSVNfTk9OX0RJTUVOU0lPTkFMID0gL2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtcbiIsImltcG9ydCB7IGRpZmYsIHVubW91bnQsIGFwcGx5UmVmIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBjcmVhdGVWTm9kZSwgRnJhZ21lbnQgfSBmcm9tICcuLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgeyBFTVBUWV9PQkosIEVNUFRZX0FSUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXREb21TaWJsaW5nIH0gZnJvbSAnLi4vY29tcG9uZW50JztcblxuLyoqXG4gKiBEaWZmIHRoZSBjaGlsZHJlbiBvZiBhIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBET00gZWxlbWVudCB3aG9zZVxuICogY2hpbGRyZW4gYXJlIGJlaW5nIGRpZmZlZFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuQ29tcG9uZW50Q2hpbGRyZW5bXX0gcmVuZGVyUmVzdWx0XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gbmV3UGFyZW50Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsXG4gKiBub2RlIHdob3NlIGNoaWxkcmVuIHNob3VsZCBiZSBkaWZmJ2VkIGFnYWluc3Qgb2xkUGFyZW50Vk5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBvbGRQYXJlbnRWTm9kZSBUaGUgb2xkIHZpcnR1YWxcbiAqIG5vZGUgd2hvc2UgY2hpbGRyZW4gc2hvdWxkIGJlIGRpZmYnZWQgYWdhaW5zdCBuZXdQYXJlbnRWTm9kZVxuICogQHBhcmFtIHtvYmplY3R9IGdsb2JhbENvbnRleHQgVGhlIGN1cnJlbnQgY29udGV4dCBvYmplY3QgLSBtb2RpZmllZCBieSBnZXRDaGlsZENvbnRleHRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBET00gbm9kZSBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudD59IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBvbGREb20gVGhlIGN1cnJlbnQgYXR0YWNoZWQgRE9NXG4gKiBlbGVtZW50IGFueSBuZXcgZG9tIGVsZW1lbnRzIHNob3VsZCBiZSBwbGFjZWQgYXJvdW5kLiBMaWtlbHkgYG51bGxgIG9uIGZpcnN0XG4gKiByZW5kZXIgKGV4Y2VwdCB3aGVuIGh5ZHJhdGluZykuIENhbiBiZSBhIHNpYmxpbmcgRE9NIGVsZW1lbnQgd2hlbiBkaWZmaW5nXG4gKiBGcmFnbWVudHMgdGhhdCBoYXZlIHNpYmxpbmdzLiBJbiBtb3N0IGNhc2VzLCBpdCBzdGFydHMgb3V0IGFzIGBvbGRDaGlsZHJlblswXS5fZG9tYC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNIeWRyYXRpbmcgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZkNoaWxkcmVuKFxuXHRwYXJlbnREb20sXG5cdHJlbmRlclJlc3VsdCxcblx0bmV3UGFyZW50Vk5vZGUsXG5cdG9sZFBhcmVudFZOb2RlLFxuXHRnbG9iYWxDb250ZXh0LFxuXHRpc1N2Zyxcblx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdGNvbW1pdFF1ZXVlLFxuXHRvbGREb20sXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IGksIGosIG9sZFZOb2RlLCBjaGlsZFZOb2RlLCBuZXdEb20sIGZpcnN0Q2hpbGREb20sIHJlZnM7XG5cblx0Ly8gVGhpcyBpcyBhIGNvbXByZXNzaW9uIG9mIG9sZFBhcmVudFZOb2RlIT1udWxsICYmIG9sZFBhcmVudFZOb2RlICE9IEVNUFRZX09CSiAmJiBvbGRQYXJlbnRWTm9kZS5fY2hpbGRyZW4gfHwgRU1QVFlfQVJSXG5cdC8vIGFzIEVNUFRZX09CSi5fY2hpbGRyZW4gc2hvdWxkIGJlIGB1bmRlZmluZWRgLlxuXHRsZXQgb2xkQ2hpbGRyZW4gPSAob2xkUGFyZW50Vk5vZGUgJiYgb2xkUGFyZW50Vk5vZGUuX2NoaWxkcmVuKSB8fCBFTVBUWV9BUlI7XG5cblx0bGV0IG9sZENoaWxkcmVuTGVuZ3RoID0gb2xkQ2hpbGRyZW4ubGVuZ3RoO1xuXG5cdG5ld1BhcmVudFZOb2RlLl9jaGlsZHJlbiA9IFtdO1xuXHRmb3IgKGkgPSAwOyBpIDwgcmVuZGVyUmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2hpbGRWTm9kZSA9IHJlbmRlclJlc3VsdFtpXTtcblxuXHRcdGlmIChjaGlsZFZOb2RlID09IG51bGwgfHwgdHlwZW9mIGNoaWxkVk5vZGUgPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gbnVsbDtcblx0XHR9XG5cdFx0Ly8gSWYgdGhpcyBuZXdWTm9kZSBpcyBiZWluZyByZXVzZWQgKGUuZy4gPGRpdj57cmV1c2V9e3JldXNlfTwvZGl2PikgaW4gdGhlIHNhbWUgZGlmZixcblx0XHQvLyBvciB3ZSBhcmUgcmVuZGVyaW5nIGEgY29tcG9uZW50IChlLmcuIHNldFN0YXRlKSBjb3B5IHRoZSBvbGRWTm9kZXMgc28gaXQgY2FuIGhhdmVcblx0XHQvLyBpdCdzIG93biBET00gJiBldGMuIHBvaW50ZXJzXG5cdFx0ZWxzZSBpZiAoXG5cdFx0XHR0eXBlb2YgY2hpbGRWTm9kZSA9PSAnc3RyaW5nJyB8fFxuXHRcdFx0dHlwZW9mIGNoaWxkVk5vZGUgPT0gJ251bWJlcicgfHxcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2YWxpZC10eXBlb2Zcblx0XHRcdHR5cGVvZiBjaGlsZFZOb2RlID09ICdiaWdpbnQnXG5cdFx0KSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY3JlYXRlVk5vZGUoXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdGNoaWxkVk5vZGUsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdGNoaWxkVk5vZGVcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNoaWxkVk5vZGUpKSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY3JlYXRlVk5vZGUoXG5cdFx0XHRcdEZyYWdtZW50LFxuXHRcdFx0XHR7IGNoaWxkcmVuOiBjaGlsZFZOb2RlIH0sXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdG51bGxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChjaGlsZFZOb2RlLl9kZXB0aCA+IDApIHtcblx0XHRcdC8vIFZOb2RlIGlzIGFscmVhZHkgaW4gdXNlLCBjbG9uZSBpdC4gVGhpcyBjYW4gaGFwcGVuIGluIHRoZSBmb2xsb3dpbmdcblx0XHRcdC8vIHNjZW5hcmlvOlxuXHRcdFx0Ly8gICBjb25zdCByZXVzZSA9IDxkaXYgLz5cblx0XHRcdC8vICAgPGRpdj57cmV1c2V9PHNwYW4gLz57cmV1c2V9PC9kaXY+XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY3JlYXRlVk5vZGUoXG5cdFx0XHRcdGNoaWxkVk5vZGUudHlwZSxcblx0XHRcdFx0Y2hpbGRWTm9kZS5wcm9wcyxcblx0XHRcdFx0Y2hpbGRWTm9kZS5rZXksXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdGNoaWxkVk5vZGUuX29yaWdpbmFsXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjaGlsZFZOb2RlID0gbmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuW2ldID0gY2hpbGRWTm9kZTtcblx0XHR9XG5cblx0XHQvLyBUZXJzZXIgcmVtb3ZlcyB0aGUgYGNvbnRpbnVlYCBoZXJlIGFuZCB3cmFwcyB0aGUgbG9vcCBib2R5XG5cdFx0Ly8gaW4gYSBgaWYgKGNoaWxkVk5vZGUpIHsgLi4uIH0gY29uZGl0aW9uXG5cdFx0aWYgKGNoaWxkVk5vZGUgPT0gbnVsbCkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y2hpbGRWTm9kZS5fcGFyZW50ID0gbmV3UGFyZW50Vk5vZGU7XG5cdFx0Y2hpbGRWTm9kZS5fZGVwdGggPSBuZXdQYXJlbnRWTm9kZS5fZGVwdGggKyAxO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UgZmluZCBhIGNvcnJlc3BvbmRpbmcgZWxlbWVudCBpbiBvbGRDaGlsZHJlbi5cblx0XHQvLyBJZiBmb3VuZCwgZGVsZXRlIHRoZSBhcnJheSBpdGVtIGJ5IHNldHRpbmcgdG8gYHVuZGVmaW5lZGAuXG5cdFx0Ly8gV2UgdXNlIGB1bmRlZmluZWRgLCBhcyBgbnVsbGAgaXMgcmVzZXJ2ZWQgZm9yIGVtcHR5IHBsYWNlaG9sZGVyc1xuXHRcdC8vIChob2xlcykuXG5cdFx0b2xkVk5vZGUgPSBvbGRDaGlsZHJlbltpXTtcblxuXHRcdGlmIChcblx0XHRcdG9sZFZOb2RlID09PSBudWxsIHx8XG5cdFx0XHQob2xkVk5vZGUgJiZcblx0XHRcdFx0Y2hpbGRWTm9kZS5rZXkgPT0gb2xkVk5vZGUua2V5ICYmXG5cdFx0XHRcdGNoaWxkVk5vZGUudHlwZSA9PT0gb2xkVk5vZGUudHlwZSlcblx0XHQpIHtcblx0XHRcdG9sZENoaWxkcmVuW2ldID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBFaXRoZXIgb2xkVk5vZGUgPT09IHVuZGVmaW5lZCBvciBvbGRDaGlsZHJlbkxlbmd0aCA+IDAsXG5cdFx0XHQvLyBzbyBhZnRlciB0aGlzIGxvb3Agb2xkVk5vZGUgPT0gbnVsbCBvciBvbGRWTm9kZSBpcyBhIHZhbGlkIHZhbHVlLlxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IG9sZENoaWxkcmVuTGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0b2xkVk5vZGUgPSBvbGRDaGlsZHJlbltqXTtcblx0XHRcdFx0Ly8gSWYgY2hpbGRWTm9kZSBpcyB1bmtleWVkLCB3ZSBvbmx5IG1hdGNoIHNpbWlsYXJseSB1bmtleWVkIG5vZGVzLCBvdGhlcndpc2Ugd2UgbWF0Y2ggYnkga2V5LlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgbWF0Y2ggYnkgdHlwZSAoaW4gZWl0aGVyIGNhc2UpLlxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0b2xkVk5vZGUgJiZcblx0XHRcdFx0XHRjaGlsZFZOb2RlLmtleSA9PSBvbGRWTm9kZS5rZXkgJiZcblx0XHRcdFx0XHRjaGlsZFZOb2RlLnR5cGUgPT09IG9sZFZOb2RlLnR5cGVcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0b2xkQ2hpbGRyZW5bal0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0b2xkVk5vZGUgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9sZFZOb2RlID0gb2xkVk5vZGUgfHwgRU1QVFlfT0JKO1xuXG5cdFx0Ly8gTW9ycGggdGhlIG9sZCBlbGVtZW50IGludG8gdGhlIG5ldyBvbmUsIGJ1dCBkb24ndCBhcHBlbmQgaXQgdG8gdGhlIGRvbSB5ZXRcblx0XHRkaWZmKFxuXHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0Y2hpbGRWTm9kZSxcblx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdGlzU3ZnLFxuXHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdG9sZERvbSxcblx0XHRcdGlzSHlkcmF0aW5nXG5cdFx0KTtcblxuXHRcdG5ld0RvbSA9IGNoaWxkVk5vZGUuX2RvbTtcblxuXHRcdGlmICgoaiA9IGNoaWxkVk5vZGUucmVmKSAmJiBvbGRWTm9kZS5yZWYgIT0gaikge1xuXHRcdFx0aWYgKCFyZWZzKSByZWZzID0gW107XG5cdFx0XHRpZiAob2xkVk5vZGUucmVmKSByZWZzLnB1c2gob2xkVk5vZGUucmVmLCBudWxsLCBjaGlsZFZOb2RlKTtcblx0XHRcdHJlZnMucHVzaChqLCBjaGlsZFZOb2RlLl9jb21wb25lbnQgfHwgbmV3RG9tLCBjaGlsZFZOb2RlKTtcblx0XHR9XG5cblx0XHRpZiAobmV3RG9tICE9IG51bGwpIHtcblx0XHRcdGlmIChmaXJzdENoaWxkRG9tID09IG51bGwpIHtcblx0XHRcdFx0Zmlyc3RDaGlsZERvbSA9IG5ld0RvbTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKFxuXHRcdFx0XHR0eXBlb2YgY2hpbGRWTm9kZS50eXBlID09ICdmdW5jdGlvbicgJiZcblx0XHRcdFx0Y2hpbGRWTm9kZS5fY2hpbGRyZW4gPT09IG9sZFZOb2RlLl9jaGlsZHJlblxuXHRcdFx0KSB7XG5cdFx0XHRcdGNoaWxkVk5vZGUuX25leHREb20gPSBvbGREb20gPSByZW9yZGVyQ2hpbGRyZW4oXG5cdFx0XHRcdFx0Y2hpbGRWTm9kZSxcblx0XHRcdFx0XHRvbGREb20sXG5cdFx0XHRcdFx0cGFyZW50RG9tXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvbGREb20gPSBwbGFjZUNoaWxkKFxuXHRcdFx0XHRcdHBhcmVudERvbSxcblx0XHRcdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRcdG9sZENoaWxkcmVuLFxuXHRcdFx0XHRcdG5ld0RvbSxcblx0XHRcdFx0XHRvbGREb21cblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBuZXdQYXJlbnRWTm9kZS50eXBlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Ly8gQmVjYXVzZSB0aGUgbmV3UGFyZW50Vk5vZGUgaXMgRnJhZ21lbnQtbGlrZSwgd2UgbmVlZCB0byBzZXQgaXQnc1xuXHRcdFx0XHQvLyBfbmV4dERvbSBwcm9wZXJ0eSB0byB0aGUgbmV4dFNpYmxpbmcgb2YgaXRzIGxhc3QgY2hpbGQgRE9NIG5vZGUuXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIGBvbGREb21gIGNvbnRhaW5zIHRoZSBjb3JyZWN0IHZhbHVlIGhlcmUgYmVjYXVzZSBpZiB0aGUgbGFzdCBjaGlsZFxuXHRcdFx0XHQvLyBpcyBhIEZyYWdtZW50LWxpa2UsIHRoZW4gb2xkRG9tIGhhcyBhbHJlYWR5IGJlZW4gc2V0IHRvIHRoYXQgY2hpbGQncyBfbmV4dERvbS5cblx0XHRcdFx0Ly8gSWYgdGhlIGxhc3QgY2hpbGQgaXMgYSBET00gVk5vZGUsIHRoZW4gb2xkRG9tIHdpbGwgYmUgc2V0IHRvIHRoYXQgRE9NXG5cdFx0XHRcdC8vIG5vZGUncyBuZXh0U2libGluZy5cblx0XHRcdFx0bmV3UGFyZW50Vk5vZGUuX25leHREb20gPSBvbGREb207XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdG9sZERvbSAmJlxuXHRcdFx0b2xkVk5vZGUuX2RvbSA9PSBvbGREb20gJiZcblx0XHRcdG9sZERvbS5wYXJlbnROb2RlICE9IHBhcmVudERvbVxuXHRcdCkge1xuXHRcdFx0Ly8gVGhlIGFib3ZlIGNvbmRpdGlvbiBpcyB0byBoYW5kbGUgbnVsbCBwbGFjZWhvbGRlcnMuIFNlZSB0ZXN0IGluIHBsYWNlaG9sZGVyLnRlc3QuanM6XG5cdFx0XHQvLyBgZWZmaWNpZW50bHkgcmVwbGFjZSBudWxsIHBsYWNlaG9sZGVycyBpbiBwYXJlbnQgcmVyZW5kZXJzYFxuXHRcdFx0b2xkRG9tID0gZ2V0RG9tU2libGluZyhvbGRWTm9kZSk7XG5cdFx0fVxuXHR9XG5cblx0bmV3UGFyZW50Vk5vZGUuX2RvbSA9IGZpcnN0Q2hpbGREb207XG5cblx0Ly8gUmVtb3ZlIHJlbWFpbmluZyBvbGRDaGlsZHJlbiBpZiB0aGVyZSBhcmUgYW55LlxuXHRmb3IgKGkgPSBvbGRDaGlsZHJlbkxlbmd0aDsgaS0tOyApIHtcblx0XHRpZiAob2xkQ2hpbGRyZW5baV0gIT0gbnVsbCkge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHR0eXBlb2YgbmV3UGFyZW50Vk5vZGUudHlwZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0XHRcdG9sZENoaWxkcmVuW2ldLl9kb20gIT0gbnVsbCAmJlxuXHRcdFx0XHRvbGRDaGlsZHJlbltpXS5fZG9tID09IG5ld1BhcmVudFZOb2RlLl9uZXh0RG9tXG5cdFx0XHQpIHtcblx0XHRcdFx0Ly8gSWYgdGhlIG5ld1BhcmVudFZOb2RlLl9fbmV4dERvbSBwb2ludHMgdG8gYSBkb20gbm9kZSB0aGF0IGlzIGFib3V0IHRvXG5cdFx0XHRcdC8vIGJlIHVubW91bnRlZCwgdGhlbiBnZXQgdGhlIG5leHQgc2libGluZyBvZiB0aGF0IHZub2RlIGFuZCBzZXRcblx0XHRcdFx0Ly8gX25leHREb20gdG8gaXRcblx0XHRcdFx0bmV3UGFyZW50Vk5vZGUuX25leHREb20gPSBnZXREb21TaWJsaW5nKG9sZFBhcmVudFZOb2RlLCBpICsgMSk7XG5cdFx0XHR9XG5cblx0XHRcdHVubW91bnQob2xkQ2hpbGRyZW5baV0sIG9sZENoaWxkcmVuW2ldKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgcmVmcyBvbmx5IGFmdGVyIHVubW91bnRcblx0aWYgKHJlZnMpIHtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcmVmcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0YXBwbHlSZWYocmVmc1tpXSwgcmVmc1srK2ldLCByZWZzWysraV0pO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiByZW9yZGVyQ2hpbGRyZW4oY2hpbGRWTm9kZSwgb2xkRG9tLCBwYXJlbnREb20pIHtcblx0Ly8gTm90ZTogVk5vZGVzIGluIG5lc3RlZCBzdXNwZW5kZWQgdHJlZXMgbWF5IGJlIG1pc3NpbmcgX2NoaWxkcmVuLlxuXHRsZXQgYyA9IGNoaWxkVk5vZGUuX2NoaWxkcmVuO1xuXHRsZXQgdG1wID0gMDtcblx0Zm9yICg7IGMgJiYgdG1wIDwgYy5sZW5ndGg7IHRtcCsrKSB7XG5cdFx0bGV0IHZub2RlID0gY1t0bXBdO1xuXHRcdGlmICh2bm9kZSkge1xuXHRcdFx0Ly8gV2UgdHlwaWNhbGx5IGVudGVyIHRoaXMgY29kZSBwYXRoIG9uIHNDVSBiYWlsb3V0LCB3aGVyZSB3ZSBjb3B5XG5cdFx0XHQvLyBvbGRWTm9kZS5fY2hpbGRyZW4gdG8gbmV3Vk5vZGUuX2NoaWxkcmVuLiBJZiB0aGF0IGlzIHRoZSBjYXNlLCB3ZSBuZWVkXG5cdFx0XHQvLyB0byB1cGRhdGUgdGhlIG9sZCBjaGlsZHJlbidzIF9wYXJlbnQgcG9pbnRlciB0byBwb2ludCB0byB0aGUgbmV3Vk5vZGVcblx0XHRcdC8vIChjaGlsZFZOb2RlIGhlcmUpLlxuXHRcdFx0dm5vZGUuX3BhcmVudCA9IGNoaWxkVk5vZGU7XG5cblx0XHRcdGlmICh0eXBlb2Ygdm5vZGUudHlwZSA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdG9sZERvbSA9IHJlb3JkZXJDaGlsZHJlbih2bm9kZSwgb2xkRG9tLCBwYXJlbnREb20pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b2xkRG9tID0gcGxhY2VDaGlsZChcblx0XHRcdFx0XHRwYXJlbnREb20sXG5cdFx0XHRcdFx0dm5vZGUsXG5cdFx0XHRcdFx0dm5vZGUsXG5cdFx0XHRcdFx0Yyxcblx0XHRcdFx0XHR2bm9kZS5fZG9tLFxuXHRcdFx0XHRcdG9sZERvbVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvbGREb207XG59XG5cbi8qKlxuICogRmxhdHRlbiBhbmQgbG9vcCB0aHJvdWdoIHRoZSBjaGlsZHJlbiBvZiBhIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2luZGV4JykuQ29tcG9uZW50Q2hpbGRyZW59IGNoaWxkcmVuIFRoZSB1bmZsYXR0ZW5lZFxuICogY2hpbGRyZW4gb2YgYSB2aXJ0dWFsIG5vZGVcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGVbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ2hpbGRBcnJheShjaGlsZHJlbiwgb3V0KSB7XG5cdG91dCA9IG91dCB8fCBbXTtcblx0aWYgKGNoaWxkcmVuID09IG51bGwgfHwgdHlwZW9mIGNoaWxkcmVuID09ICdib29sZWFuJykge1xuXHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG5cdFx0Y2hpbGRyZW4uc29tZShjaGlsZCA9PiB7XG5cdFx0XHR0b0NoaWxkQXJyYXkoY2hpbGQsIG91dCk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0b3V0LnB1c2goY2hpbGRyZW4pO1xuXHR9XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHBsYWNlQ2hpbGQoXG5cdHBhcmVudERvbSxcblx0Y2hpbGRWTm9kZSxcblx0b2xkVk5vZGUsXG5cdG9sZENoaWxkcmVuLFxuXHRuZXdEb20sXG5cdG9sZERvbVxuKSB7XG5cdGxldCBuZXh0RG9tO1xuXHRpZiAoY2hpbGRWTm9kZS5fbmV4dERvbSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8gT25seSBGcmFnbWVudHMgb3IgY29tcG9uZW50cyB0aGF0IHJldHVybiBGcmFnbWVudCBsaWtlIFZOb2RlcyB3aWxsXG5cdFx0Ly8gaGF2ZSBhIG5vbi11bmRlZmluZWQgX25leHREb20uIENvbnRpbnVlIHRoZSBkaWZmIGZyb20gdGhlIHNpYmxpbmdcblx0XHQvLyBvZiBsYXN0IERPTSBjaGlsZCBvZiB0aGlzIGNoaWxkIFZOb2RlXG5cdFx0bmV4dERvbSA9IGNoaWxkVk5vZGUuX25leHREb207XG5cblx0XHQvLyBFYWdlcmx5IGNsZWFudXAgX25leHREb20uIFdlIGRvbid0IG5lZWQgdG8gcGVyc2lzdCB0aGUgdmFsdWUgYmVjYXVzZVxuXHRcdC8vIGl0IGlzIG9ubHkgdXNlZCBieSBgZGlmZkNoaWxkcmVuYCB0byBkZXRlcm1pbmUgd2hlcmUgdG8gcmVzdW1lIHRoZSBkaWZmIGFmdGVyXG5cdFx0Ly8gZGlmZmluZyBDb21wb25lbnRzIGFuZCBGcmFnbWVudHMuIE9uY2Ugd2Ugc3RvcmUgaXQgdGhlIG5leHRET00gbG9jYWwgdmFyLCB3ZVxuXHRcdC8vIGNhbiBjbGVhbiB1cCB0aGUgcHJvcGVydHlcblx0XHRjaGlsZFZOb2RlLl9uZXh0RG9tID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKFxuXHRcdG9sZFZOb2RlID09IG51bGwgfHxcblx0XHRuZXdEb20gIT0gb2xkRG9tIHx8XG5cdFx0bmV3RG9tLnBhcmVudE5vZGUgPT0gbnVsbFxuXHQpIHtcblx0XHRvdXRlcjogaWYgKG9sZERvbSA9PSBudWxsIHx8IG9sZERvbS5wYXJlbnROb2RlICE9PSBwYXJlbnREb20pIHtcblx0XHRcdHBhcmVudERvbS5hcHBlbmRDaGlsZChuZXdEb20pO1xuXHRcdFx0bmV4dERvbSA9IG51bGw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGBqPG9sZENoaWxkcmVuTGVuZ3RoOyBqKz0yYCBpcyBhbiBhbHRlcm5hdGl2ZSB0byBgaisrPG9sZENoaWxkcmVuTGVuZ3RoLzJgXG5cdFx0XHRmb3IgKFxuXHRcdFx0XHRsZXQgc2liRG9tID0gb2xkRG9tLCBqID0gMDtcblx0XHRcdFx0KHNpYkRvbSA9IHNpYkRvbS5uZXh0U2libGluZykgJiYgaiA8IG9sZENoaWxkcmVuLmxlbmd0aDtcblx0XHRcdFx0aiArPSAyXG5cdFx0XHQpIHtcblx0XHRcdFx0aWYgKHNpYkRvbSA9PSBuZXdEb20pIHtcblx0XHRcdFx0XHRicmVhayBvdXRlcjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cGFyZW50RG9tLmluc2VydEJlZm9yZShuZXdEb20sIG9sZERvbSk7XG5cdFx0XHRuZXh0RG9tID0gb2xkRG9tO1xuXHRcdH1cblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgcHJlLWNhbGN1bGF0ZWQgdGhlIG5leHRET00gbm9kZSwgdXNlIGl0LiBFbHNlIGNhbGN1bGF0ZSBpdCBub3dcblx0Ly8gU3RyaWN0bHkgY2hlY2sgZm9yIGB1bmRlZmluZWRgIGhlcmUgY3V6IGBudWxsYCBpcyBhIHZhbGlkIHZhbHVlIG9mIGBuZXh0RG9tYC5cblx0Ly8gU2VlIG1vcmUgZGV0YWlsIGluIGNyZWF0ZS1lbGVtZW50LmpzOmNyZWF0ZVZOb2RlXG5cdGlmIChuZXh0RG9tICE9PSB1bmRlZmluZWQpIHtcblx0XHRvbGREb20gPSBuZXh0RG9tO1xuXHR9IGVsc2Uge1xuXHRcdG9sZERvbSA9IG5ld0RvbS5uZXh0U2libGluZztcblx0fVxuXG5cdHJldHVybiBvbGREb207XG59XG4iLCJpbXBvcnQgeyBJU19OT05fRElNRU5TSU9OQUwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi4vb3B0aW9ucyc7XG5cbi8qKlxuICogRGlmZiB0aGUgb2xkIGFuZCBuZXcgcHJvcGVydGllcyBvZiBhIFZOb2RlIGFuZCBhcHBseSBjaGFuZ2VzIHRvIHRoZSBET00gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gZG9tIFRoZSBET00gbm9kZSB0byBhcHBseVxuICogY2hhbmdlcyB0b1xuICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzIFRoZSBuZXcgcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvbGRQcm9wcyBUaGUgb2xkIHByb3BzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU3ZnIFdoZXRoZXIgb3Igbm90IHRoaXMgbm9kZSBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtib29sZWFufSBoeWRyYXRlIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb24gbW9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZlByb3BzKGRvbSwgbmV3UHJvcHMsIG9sZFByb3BzLCBpc1N2ZywgaHlkcmF0ZSkge1xuXHRsZXQgaTtcblxuXHRmb3IgKGkgaW4gb2xkUHJvcHMpIHtcblx0XHRpZiAoaSAhPT0gJ2NoaWxkcmVuJyAmJiBpICE9PSAna2V5JyAmJiAhKGkgaW4gbmV3UHJvcHMpKSB7XG5cdFx0XHRzZXRQcm9wZXJ0eShkb20sIGksIG51bGwsIG9sZFByb3BzW2ldLCBpc1N2Zyk7XG5cdFx0fVxuXHR9XG5cblx0Zm9yIChpIGluIG5ld1Byb3BzKSB7XG5cdFx0aWYgKFxuXHRcdFx0KCFoeWRyYXRlIHx8IHR5cGVvZiBuZXdQcm9wc1tpXSA9PSAnZnVuY3Rpb24nKSAmJlxuXHRcdFx0aSAhPT0gJ2NoaWxkcmVuJyAmJlxuXHRcdFx0aSAhPT0gJ2tleScgJiZcblx0XHRcdGkgIT09ICd2YWx1ZScgJiZcblx0XHRcdGkgIT09ICdjaGVja2VkJyAmJlxuXHRcdFx0b2xkUHJvcHNbaV0gIT09IG5ld1Byb3BzW2ldXG5cdFx0KSB7XG5cdFx0XHRzZXRQcm9wZXJ0eShkb20sIGksIG5ld1Byb3BzW2ldLCBvbGRQcm9wc1tpXSwgaXNTdmcpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwga2V5LCB2YWx1ZSkge1xuXHRpZiAoa2V5WzBdID09PSAnLScpIHtcblx0XHRzdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcblx0fSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0c3R5bGVba2V5XSA9ICcnO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnbnVtYmVyJyB8fCBJU19OT05fRElNRU5TSU9OQUwudGVzdChrZXkpKSB7XG5cdFx0c3R5bGVba2V5XSA9IHZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlW2tleV0gPSB2YWx1ZSArICdweCc7XG5cdH1cbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSB2YWx1ZSBvbiBhIERPTSBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBkb20gVGhlIERPTSBub2RlIHRvIG1vZGlmeVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHNldFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0IHRoZSBwcm9wZXJ0eSB0b1xuICogQHBhcmFtIHsqfSBvbGRWYWx1ZSBUaGUgb2xkIHZhbHVlIHRoZSBwcm9wZXJ0eSBoYWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBET00gbm9kZSBpcyBhbiBTVkcgbm9kZSBvciBub3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFByb3BlcnR5KGRvbSwgbmFtZSwgdmFsdWUsIG9sZFZhbHVlLCBpc1N2Zykge1xuXHRsZXQgdXNlQ2FwdHVyZTtcblxuXHRvOiBpZiAobmFtZSA9PT0gJ3N0eWxlJykge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcblx0XHRcdGRvbS5zdHlsZS5jc3NUZXh0ID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlb2Ygb2xkVmFsdWUgPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0ZG9tLnN0eWxlLmNzc1RleHQgPSBvbGRWYWx1ZSA9ICcnO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob2xkVmFsdWUpIHtcblx0XHRcdFx0Zm9yIChuYW1lIGluIG9sZFZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKCEodmFsdWUgJiYgbmFtZSBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0XHRcdHNldFN0eWxlKGRvbS5zdHlsZSwgbmFtZSwgJycpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodmFsdWUpIHtcblx0XHRcdFx0Zm9yIChuYW1lIGluIHZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKCFvbGRWYWx1ZSB8fCB2YWx1ZVtuYW1lXSAhPT0gb2xkVmFsdWVbbmFtZV0pIHtcblx0XHRcdFx0XHRcdHNldFN0eWxlKGRvbS5zdHlsZSwgbmFtZSwgdmFsdWVbbmFtZV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvLyBCZW5jaG1hcmsgZm9yIGNvbXBhcmlzb246IGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNTc0Yzk1NGJkYjk2NWI5YTAwOTY1YWM2XG5cdGVsc2UgaWYgKG5hbWVbMF0gPT09ICdvJyAmJiBuYW1lWzFdID09PSAnbicpIHtcblx0XHR1c2VDYXB0dXJlID0gbmFtZSAhPT0gKG5hbWUgPSBuYW1lLnJlcGxhY2UoL0NhcHR1cmUkLywgJycpKTtcblxuXHRcdC8vIEluZmVyIGNvcnJlY3QgY2FzaW5nIGZvciBET00gYnVpbHQtaW4gZXZlbnRzOlxuXHRcdGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgaW4gZG9tKSBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpO1xuXHRcdGVsc2UgbmFtZSA9IG5hbWUuc2xpY2UoMik7XG5cblx0XHRpZiAoIWRvbS5fbGlzdGVuZXJzKSBkb20uX2xpc3RlbmVycyA9IHt9O1xuXHRcdGRvbS5fbGlzdGVuZXJzW25hbWUgKyB1c2VDYXB0dXJlXSA9IHZhbHVlO1xuXG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRpZiAoIW9sZFZhbHVlKSB7XG5cdFx0XHRcdGNvbnN0IGhhbmRsZXIgPSB1c2VDYXB0dXJlID8gZXZlbnRQcm94eUNhcHR1cmUgOiBldmVudFByb3h5O1xuXHRcdFx0XHRkb20uYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgaGFuZGxlciA9IHVzZUNhcHR1cmUgPyBldmVudFByb3h5Q2FwdHVyZSA6IGV2ZW50UHJveHk7XG5cdFx0XHRkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAobmFtZSAhPT0gJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJykge1xuXHRcdGlmIChpc1N2Zykge1xuXHRcdFx0Ly8gTm9ybWFsaXplIGluY29ycmVjdCBwcm9wIHVzYWdlIGZvciBTVkc6XG5cdFx0XHQvLyAtIHhsaW5rOmhyZWYgLyB4bGlua0hyZWYgLS0+IGhyZWYgKHhsaW5rOmhyZWYgd2FzIHJlbW92ZWQgZnJvbSBTVkcgYW5kIGlzbid0IG5lZWRlZClcblx0XHRcdC8vIC0gY2xhc3NOYW1lIC0tPiBjbGFzc1xuXHRcdFx0bmFtZSA9IG5hbWUucmVwbGFjZSgveGxpbmsoSHw6aCkvLCAnaCcpLnJlcGxhY2UoL3NOYW1lJC8sICdzJyk7XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdG5hbWUgIT09ICdocmVmJyAmJlxuXHRcdFx0bmFtZSAhPT0gJ2xpc3QnICYmXG5cdFx0XHRuYW1lICE9PSAnZm9ybScgJiZcblx0XHRcdC8vIERlZmF1bHQgdmFsdWUgaW4gYnJvd3NlcnMgaXMgYC0xYCBhbmQgYW4gZW1wdHkgc3RyaW5nIGlzXG5cdFx0XHQvLyBjYXN0IHRvIGAwYCBpbnN0ZWFkXG5cdFx0XHRuYW1lICE9PSAndGFiSW5kZXgnICYmXG5cdFx0XHRuYW1lICE9PSAnZG93bmxvYWQnICYmXG5cdFx0XHRuYW1lIGluIGRvbVxuXHRcdCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZG9tW25hbWVdID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG5cdFx0XHRcdC8vIGxhYmVsbGVkIGJyZWFrIGlzIDFiIHNtYWxsZXIgaGVyZSB0aGFuIGEgcmV0dXJuIHN0YXRlbWVudCAoc29ycnkpXG5cdFx0XHRcdGJyZWFrIG87XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdH1cblxuXHRcdC8vIEFSSUEtYXR0cmlidXRlcyBoYXZlIGEgZGlmZmVyZW50IG5vdGlvbiBvZiBib29sZWFuIHZhbHVlcy5cblx0XHQvLyBUaGUgdmFsdWUgYGZhbHNlYCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYXR0cmlidXRlIG5vdFxuXHRcdC8vIGV4aXN0aW5nIG9uIHRoZSBET00sIHNvIHdlIGNhbid0IHJlbW92ZSBpdC4gRm9yIG5vbi1ib29sZWFuXG5cdFx0Ly8gQVJJQS1hdHRyaWJ1dGVzIHdlIGNvdWxkIHRyZWF0IGZhbHNlIGFzIGEgcmVtb3ZhbCwgYnV0IHRoZVxuXHRcdC8vIGFtb3VudCBvZiBleGNlcHRpb25zIHdvdWxkIGNvc3QgdXMgdG9vIG1hbnkgYnl0ZXMuIE9uIHRvcCBvZlxuXHRcdC8vIHRoYXQgb3RoZXIgVkRPTSBmcmFtZXdvcmtzIGFsc28gYWx3YXlzIHN0cmluZ2lmeSBgZmFsc2VgLlxuXG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Ly8gbmV2ZXIgc2VyaWFsaXplIGZ1bmN0aW9ucyBhcyBhdHRyaWJ1dGUgdmFsdWVzXG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdHZhbHVlICE9IG51bGwgJiZcblx0XHRcdCh2YWx1ZSAhPT0gZmFsc2UgfHwgKG5hbWVbMF0gPT09ICdhJyAmJiBuYW1lWzFdID09PSAncicpKVxuXHRcdCkge1xuXHRcdFx0ZG9tLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvbS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogUHJveHkgYW4gZXZlbnQgdG8gaG9va2VkIGV2ZW50IGhhbmRsZXJzXG4gKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBldmVudCBvYmplY3QgZnJvbSB0aGUgYnJvd3NlclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZXZlbnRQcm94eShlKSB7XG5cdHRoaXMuX2xpc3RlbmVyc1tlLnR5cGUgKyBmYWxzZV0ob3B0aW9ucy5ldmVudCA/IG9wdGlvbnMuZXZlbnQoZSkgOiBlKTtcbn1cblxuZnVuY3Rpb24gZXZlbnRQcm94eUNhcHR1cmUoZSkge1xuXHR0aGlzLl9saXN0ZW5lcnNbZS50eXBlICsgdHJ1ZV0ob3B0aW9ucy5ldmVudCA/IG9wdGlvbnMuZXZlbnQoZSkgOiBlKTtcbn1cbiIsImltcG9ydCB7IEVNUFRZX09CSiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGdldERvbVNpYmxpbmcgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICcuLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgeyBkaWZmQ2hpbGRyZW4gfSBmcm9tICcuL2NoaWxkcmVuJztcbmltcG9ydCB7IGRpZmZQcm9wcywgc2V0UHJvcGVydHkgfSBmcm9tICcuL3Byb3BzJztcbmltcG9ydCB7IGFzc2lnbiwgcmVtb3ZlTm9kZSwgc2xpY2UgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4uL29wdGlvbnMnO1xuXG4vKipcbiAqIERpZmYgdHdvIHZpcnR1YWwgbm9kZXMgYW5kIGFwcGx5IHByb3BlciBjaGFuZ2VzIHRvIHRoZSBET01cbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IHBhcmVudERvbSBUaGUgcGFyZW50IG9mIHRoZSBET00gZWxlbWVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG5ld1ZOb2RlIFRoZSBuZXcgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gb2xkVk5vZGUgVGhlIG9sZCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBnbG9iYWxDb250ZXh0IFRoZSBjdXJyZW50IGNvbnRleHQgb2JqZWN0LiBNb2RpZmllZCBieSBnZXRDaGlsZENvbnRleHRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBlbGVtZW50IGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50Pn0gZXhjZXNzRG9tQ2hpbGRyZW5cbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IG9sZERvbSBUaGUgY3VycmVudCBhdHRhY2hlZCBET01cbiAqIGVsZW1lbnQgYW55IG5ldyBkb20gZWxlbWVudHMgc2hvdWxkIGJlIHBsYWNlZCBhcm91bmQuIExpa2VseSBgbnVsbGAgb24gZmlyc3RcbiAqIHJlbmRlciAoZXhjZXB0IHdoZW4gaHlkcmF0aW5nKS4gQ2FuIGJlIGEgc2libGluZyBET00gZWxlbWVudCB3aGVuIGRpZmZpbmdcbiAqIEZyYWdtZW50cyB0aGF0IGhhdmUgc2libGluZ3MuIEluIG1vc3QgY2FzZXMsIGl0IHN0YXJ0cyBvdXQgYXMgYG9sZENoaWxkcmVuWzBdLl9kb21gLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNIeWRyYXRpbmddIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmYoXG5cdHBhcmVudERvbSxcblx0bmV3Vk5vZGUsXG5cdG9sZFZOb2RlLFxuXHRnbG9iYWxDb250ZXh0LFxuXHRpc1N2Zyxcblx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdGNvbW1pdFF1ZXVlLFxuXHRvbGREb20sXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IHRtcCxcblx0XHRuZXdUeXBlID0gbmV3Vk5vZGUudHlwZTtcblxuXHQvLyBXaGVuIHBhc3NpbmcgdGhyb3VnaCBjcmVhdGVFbGVtZW50IGl0IGFzc2lnbnMgdGhlIG9iamVjdFxuXHQvLyBjb25zdHJ1Y3RvciBhcyB1bmRlZmluZWQuIFRoaXMgdG8gcHJldmVudCBKU09OLWluamVjdGlvbi5cblx0aWYgKG5ld1ZOb2RlLmNvbnN0cnVjdG9yICE9PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuXG5cdC8vIElmIHRoZSBwcmV2aW91cyBkaWZmIGJhaWxlZCBvdXQsIHJlc3VtZSBjcmVhdGluZy9oeWRyYXRpbmcuXG5cdGlmIChvbGRWTm9kZS5faHlkcmF0aW5nICE9IG51bGwpIHtcblx0XHRpc0h5ZHJhdGluZyA9IG9sZFZOb2RlLl9oeWRyYXRpbmc7XG5cdFx0b2xkRG9tID0gbmV3Vk5vZGUuX2RvbSA9IG9sZFZOb2RlLl9kb207XG5cdFx0Ly8gaWYgd2UgcmVzdW1lLCB3ZSB3YW50IHRoZSB0cmVlIHRvIGJlIFwidW5sb2NrZWRcIlxuXHRcdG5ld1ZOb2RlLl9oeWRyYXRpbmcgPSBudWxsO1xuXHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID0gW29sZERvbV07XG5cdH1cblxuXHRpZiAoKHRtcCA9IG9wdGlvbnMuX2RpZmYpKSB0bXAobmV3Vk5vZGUpO1xuXG5cdHRyeSB7XG5cdFx0b3V0ZXI6IGlmICh0eXBlb2YgbmV3VHlwZSA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRsZXQgYywgaXNOZXcsIG9sZFByb3BzLCBvbGRTdGF0ZSwgc25hcHNob3QsIGNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbjtcblx0XHRcdGxldCBuZXdQcm9wcyA9IG5ld1ZOb2RlLnByb3BzO1xuXG5cdFx0XHQvLyBOZWNlc3NhcnkgZm9yIGNyZWF0ZUNvbnRleHQgYXBpLiBTZXR0aW5nIHRoaXMgcHJvcGVydHkgd2lsbCBwYXNzXG5cdFx0XHQvLyB0aGUgY29udGV4dCB2YWx1ZSBhcyBgdGhpcy5jb250ZXh0YCBqdXN0IGZvciB0aGlzIGNvbXBvbmVudC5cblx0XHRcdHRtcCA9IG5ld1R5cGUuY29udGV4dFR5cGU7XG5cdFx0XHRsZXQgcHJvdmlkZXIgPSB0bXAgJiYgZ2xvYmFsQ29udGV4dFt0bXAuX2lkXTtcblx0XHRcdGxldCBjb21wb25lbnRDb250ZXh0ID0gdG1wXG5cdFx0XHRcdD8gcHJvdmlkZXJcblx0XHRcdFx0XHQ/IHByb3ZpZGVyLnByb3BzLnZhbHVlXG5cdFx0XHRcdFx0OiB0bXAuX2RlZmF1bHRWYWx1ZVxuXHRcdFx0XHQ6IGdsb2JhbENvbnRleHQ7XG5cblx0XHRcdC8vIEdldCBjb21wb25lbnQgYW5kIHNldCBpdCB0byBgY2Bcblx0XHRcdGlmIChvbGRWTm9kZS5fY29tcG9uZW50KSB7XG5cdFx0XHRcdGMgPSBuZXdWTm9kZS5fY29tcG9uZW50ID0gb2xkVk5vZGUuX2NvbXBvbmVudDtcblx0XHRcdFx0Y2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uID0gYy5fcHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IGMuX3BlbmRpbmdFcnJvcjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEluc3RhbnRpYXRlIHRoZSBuZXcgY29tcG9uZW50XG5cdFx0XHRcdGlmICgncHJvdG90eXBlJyBpbiBuZXdUeXBlICYmIG5ld1R5cGUucHJvdG90eXBlLnJlbmRlcikge1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmUgVGhlIGNoZWNrIGFib3ZlIHZlcmlmaWVzIHRoYXQgbmV3VHlwZSBpcyBzdXBwb3NlIHRvIGJlIGNvbnN0cnVjdGVkXG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NvbXBvbmVudCA9IGMgPSBuZXcgbmV3VHlwZShuZXdQcm9wcywgY29tcG9uZW50Q29udGV4dCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmUgVHJ1c3QgbWUsIENvbXBvbmVudCBpbXBsZW1lbnRzIHRoZSBpbnRlcmZhY2Ugd2Ugd2FudFxuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jb21wb25lbnQgPSBjID0gbmV3IENvbXBvbmVudChuZXdQcm9wcywgY29tcG9uZW50Q29udGV4dCk7XG5cdFx0XHRcdFx0Yy5jb25zdHJ1Y3RvciA9IG5ld1R5cGU7XG5cdFx0XHRcdFx0Yy5yZW5kZXIgPSBkb1JlbmRlcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHJvdmlkZXIpIHByb3ZpZGVyLnN1YihjKTtcblxuXHRcdFx0XHRjLnByb3BzID0gbmV3UHJvcHM7XG5cdFx0XHRcdGlmICghYy5zdGF0ZSkgYy5zdGF0ZSA9IHt9O1xuXHRcdFx0XHRjLmNvbnRleHQgPSBjb21wb25lbnRDb250ZXh0O1xuXHRcdFx0XHRjLl9nbG9iYWxDb250ZXh0ID0gZ2xvYmFsQ29udGV4dDtcblx0XHRcdFx0aXNOZXcgPSBjLl9kaXJ0eSA9IHRydWU7XG5cdFx0XHRcdGMuX3JlbmRlckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbnZva2UgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXG5cdFx0XHRpZiAoYy5fbmV4dFN0YXRlID09IG51bGwpIHtcblx0XHRcdFx0Yy5fbmV4dFN0YXRlID0gYy5zdGF0ZTtcblx0XHRcdH1cblx0XHRcdGlmIChuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPSBudWxsKSB7XG5cdFx0XHRcdGlmIChjLl9uZXh0U3RhdGUgPT0gYy5zdGF0ZSkge1xuXHRcdFx0XHRcdGMuX25leHRTdGF0ZSA9IGFzc2lnbih7fSwgYy5fbmV4dFN0YXRlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFzc2lnbihcblx0XHRcdFx0XHRjLl9uZXh0U3RhdGUsXG5cdFx0XHRcdFx0bmV3VHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV3UHJvcHMsIGMuX25leHRTdGF0ZSlcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0b2xkUHJvcHMgPSBjLnByb3BzO1xuXHRcdFx0b2xkU3RhdGUgPSBjLnN0YXRlO1xuXG5cdFx0XHQvLyBJbnZva2UgcHJlLXJlbmRlciBsaWZlY3ljbGUgbWV0aG9kc1xuXHRcdFx0aWYgKGlzTmV3KSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PSBudWxsICYmXG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsTW91bnQgIT0gbnVsbFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxNb3VudCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50RGlkTW91bnQgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGMuY29tcG9uZW50RGlkTW91bnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0bmV3VHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT0gbnVsbCAmJlxuXHRcdFx0XHRcdG5ld1Byb3BzICE9PSBvbGRQcm9wcyAmJlxuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgY29tcG9uZW50Q29udGV4dCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0KCFjLl9mb3JjZSAmJlxuXHRcdFx0XHRcdFx0Yy5zaG91bGRDb21wb25lbnRVcGRhdGUgIT0gbnVsbCAmJlxuXHRcdFx0XHRcdFx0Yy5zaG91bGRDb21wb25lbnRVcGRhdGUoXG5cdFx0XHRcdFx0XHRcdG5ld1Byb3BzLFxuXHRcdFx0XHRcdFx0XHRjLl9uZXh0U3RhdGUsXG5cdFx0XHRcdFx0XHRcdGNvbXBvbmVudENvbnRleHRcblx0XHRcdFx0XHRcdCkgPT09IGZhbHNlKSB8fFxuXHRcdFx0XHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9PT0gb2xkVk5vZGUuX29yaWdpbmFsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXHRcdFx0XHRcdC8vIE1vcmUgaW5mbyBhYm91dCB0aGlzIGhlcmU6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0pvdmlEZUNyb29jay9iZWM1ZjJjZTkzNTQ0ZDJlNjA3MGVmOGUwMDM2ZTRlOFxuXHRcdFx0XHRcdGlmIChuZXdWTm9kZS5fb3JpZ2luYWwgIT09IG9sZFZOb2RlLl9vcmlnaW5hbCkgYy5fZGlydHkgPSBmYWxzZTtcblx0XHRcdFx0XHRjLl92bm9kZSA9IG5ld1ZOb2RlO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9kb20gPSBvbGRWTm9kZS5fZG9tO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IG9sZFZOb2RlLl9jaGlsZHJlbjtcblx0XHRcdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4uZm9yRWFjaCh2bm9kZSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAodm5vZGUpIHZub2RlLl9wYXJlbnQgPSBuZXdWTm9kZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRpZiAoYy5fcmVuZGVyQ2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Y29tbWl0UXVldWUucHVzaChjKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhayBvdXRlcjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjLmNvbXBvbmVudFdpbGxVcGRhdGUgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFVwZGF0ZShuZXdQcm9wcywgYy5fbmV4dFN0YXRlLCBjb21wb25lbnRDb250ZXh0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjLmNvbXBvbmVudERpZFVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goKCkgPT4ge1xuXHRcdFx0XHRcdFx0Yy5jb21wb25lbnREaWRVcGRhdGUob2xkUHJvcHMsIG9sZFN0YXRlLCBzbmFwc2hvdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Yy5jb250ZXh0ID0gY29tcG9uZW50Q29udGV4dDtcblx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdGMuX3Zub2RlID0gbmV3Vk5vZGU7XG5cdFx0XHRjLl9wYXJlbnREb20gPSBwYXJlbnREb207XG5cblx0XHRcdGxldCByZW5kZXJIb29rID0gb3B0aW9ucy5fcmVuZGVyLFxuXHRcdFx0XHRjb3VudCA9IDA7XG5cdFx0XHRpZiAoJ3Byb3RvdHlwZScgaW4gbmV3VHlwZSAmJiBuZXdUeXBlLnByb3RvdHlwZS5yZW5kZXIpIHtcblx0XHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblx0XHRcdFx0Yy5fZGlydHkgPSBmYWxzZTtcblxuXHRcdFx0XHRpZiAocmVuZGVySG9vaykgcmVuZGVySG9vayhuZXdWTm9kZSk7XG5cblx0XHRcdFx0dG1wID0gYy5yZW5kZXIoYy5wcm9wcywgYy5zdGF0ZSwgYy5jb250ZXh0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRjLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChyZW5kZXJIb29rKSByZW5kZXJIb29rKG5ld1ZOb2RlKTtcblxuXHRcdFx0XHRcdHRtcCA9IGMucmVuZGVyKGMucHJvcHMsIGMuc3RhdGUsIGMuY29udGV4dCk7XG5cblx0XHRcdFx0XHQvLyBIYW5kbGUgc2V0U3RhdGUgY2FsbGVkIGluIHJlbmRlciwgc2VlICMyNTUzXG5cdFx0XHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblx0XHRcdFx0fSB3aGlsZSAoYy5fZGlydHkgJiYgKytjb3VudCA8IDI1KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSGFuZGxlIHNldFN0YXRlIGNhbGxlZCBpbiByZW5kZXIsIHNlZSAjMjU1M1xuXHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblxuXHRcdFx0aWYgKGMuZ2V0Q2hpbGRDb250ZXh0ICE9IG51bGwpIHtcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCA9IGFzc2lnbihhc3NpZ24oe30sIGdsb2JhbENvbnRleHQpLCBjLmdldENoaWxkQ29udGV4dCgpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFpc05ldyAmJiBjLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0c25hcHNob3QgPSBjLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKG9sZFByb3BzLCBvbGRTdGF0ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBpc1RvcExldmVsRnJhZ21lbnQgPVxuXHRcdFx0XHR0bXAgIT0gbnVsbCAmJiB0bXAudHlwZSA9PT0gRnJhZ21lbnQgJiYgdG1wLmtleSA9PSBudWxsO1xuXHRcdFx0bGV0IHJlbmRlclJlc3VsdCA9IGlzVG9wTGV2ZWxGcmFnbWVudCA/IHRtcC5wcm9wcy5jaGlsZHJlbiA6IHRtcDtcblxuXHRcdFx0ZGlmZkNoaWxkcmVuKFxuXHRcdFx0XHRwYXJlbnREb20sXG5cdFx0XHRcdEFycmF5LmlzQXJyYXkocmVuZGVyUmVzdWx0KSA/IHJlbmRlclJlc3VsdCA6IFtyZW5kZXJSZXN1bHRdLFxuXHRcdFx0XHRuZXdWTm9kZSxcblx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdGdsb2JhbENvbnRleHQsXG5cdFx0XHRcdGlzU3ZnLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdG9sZERvbSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cblx0XHRcdGMuYmFzZSA9IG5ld1ZOb2RlLl9kb207XG5cblx0XHRcdC8vIFdlIHN1Y2Nlc3NmdWxseSByZW5kZXJlZCB0aGlzIFZOb2RlLCB1bnNldCBhbnkgc3RvcmVkIGh5ZHJhdGlvbi9iYWlsb3V0IHN0YXRlOlxuXHRcdFx0bmV3Vk5vZGUuX2h5ZHJhdGluZyA9IG51bGw7XG5cblx0XHRcdGlmIChjLl9yZW5kZXJDYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbW1pdFF1ZXVlLnB1c2goYyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24pIHtcblx0XHRcdFx0Yy5fcGVuZGluZ0Vycm9yID0gYy5fcHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGMuX2ZvcmNlID0gZmFsc2U7XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID09IG51bGwgJiZcblx0XHRcdG5ld1ZOb2RlLl9vcmlnaW5hbCA9PT0gb2xkVk5vZGUuX29yaWdpbmFsXG5cdFx0KSB7XG5cdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBvbGRWTm9kZS5fY2hpbGRyZW47XG5cdFx0XHRuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV3Vk5vZGUuX2RvbSA9IGRpZmZFbGVtZW50Tm9kZXMoXG5cdFx0XHRcdG9sZFZOb2RlLl9kb20sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCh0bXAgPSBvcHRpb25zLmRpZmZlZCkpIHRtcChuZXdWTm9kZSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRuZXdWTm9kZS5fb3JpZ2luYWwgPSBudWxsO1xuXHRcdC8vIGlmIGh5ZHJhdGluZyBvciBjcmVhdGluZyBpbml0aWFsIHRyZWUsIGJhaWxvdXQgcHJlc2VydmVzIERPTTpcblx0XHRpZiAoaXNIeWRyYXRpbmcgfHwgZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0bmV3Vk5vZGUuX2RvbSA9IG9sZERvbTtcblx0XHRcdG5ld1ZOb2RlLl9oeWRyYXRpbmcgPSAhIWlzSHlkcmF0aW5nO1xuXHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW5bZXhjZXNzRG9tQ2hpbGRyZW4uaW5kZXhPZihvbGREb20pXSA9IG51bGw7XG5cdFx0XHQvLyBeIGNvdWxkIHBvc3NpYmx5IGJlIHNpbXBsaWZpZWQgdG86XG5cdFx0XHQvLyBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGggPSAwO1xuXHRcdH1cblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIG5ld1ZOb2RlLCBvbGRWTm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gcm9vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0Um9vdChjb21taXRRdWV1ZSwgcm9vdCkge1xuXHRpZiAob3B0aW9ucy5fY29tbWl0KSBvcHRpb25zLl9jb21taXQocm9vdCwgY29tbWl0UXVldWUpO1xuXG5cdGNvbW1pdFF1ZXVlLnNvbWUoYyA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIEB0cy1pZ25vcmUgUmV1c2UgdGhlIGNvbW1pdFF1ZXVlIHZhcmlhYmxlIGhlcmUgc28gdGhlIHR5cGUgY2hhbmdlc1xuXHRcdFx0Y29tbWl0UXVldWUgPSBjLl9yZW5kZXJDYWxsYmFja3M7XG5cdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MgPSBbXTtcblx0XHRcdGNvbW1pdFF1ZXVlLnNvbWUoY2IgPT4ge1xuXHRcdFx0XHQvLyBAdHMtaWdub3JlIFNlZSBhYm92ZSB0cy1pZ25vcmUgb24gY29tbWl0UXVldWVcblx0XHRcdFx0Y2IuY2FsbChjKTtcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgYy5fdm5vZGUpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyByZXByZXNlbnRpbmcgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nXG4gKiB0aGUgdmlydHVhbCBub2RlcyBiZWluZyBkaWZmZWRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBuZXdWTm9kZSBUaGUgbmV3IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG9sZFZOb2RlIFRoZSBvbGQgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gZ2xvYmFsQ29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0geyp9IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzSHlkcmF0aW5nIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZGlmZkVsZW1lbnROb2Rlcyhcblx0ZG9tLFxuXHRuZXdWTm9kZSxcblx0b2xkVk5vZGUsXG5cdGdsb2JhbENvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IG9sZFByb3BzID0gb2xkVk5vZGUucHJvcHM7XG5cdGxldCBuZXdQcm9wcyA9IG5ld1ZOb2RlLnByb3BzO1xuXHRsZXQgbm9kZVR5cGUgPSBuZXdWTm9kZS50eXBlO1xuXHRsZXQgaSA9IDA7XG5cblx0Ly8gVHJhY2tzIGVudGVyaW5nIGFuZCBleGl0aW5nIFNWRyBuYW1lc3BhY2Ugd2hlbiBkZXNjZW5kaW5nIHRocm91Z2ggdGhlIHRyZWUuXG5cdGlmIChub2RlVHlwZSA9PT0gJ3N2ZycpIGlzU3ZnID0gdHJ1ZTtcblxuXHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdGZvciAoOyBpIDwgZXhjZXNzRG9tQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGNoaWxkID0gZXhjZXNzRG9tQ2hpbGRyZW5baV07XG5cblx0XHRcdC8vIGlmIG5ld1ZOb2RlIG1hdGNoZXMgYW4gZWxlbWVudCBpbiBleGNlc3NEb21DaGlsZHJlbiBvciB0aGUgYGRvbWBcblx0XHRcdC8vIGFyZ3VtZW50IG1hdGNoZXMgYW4gZWxlbWVudCBpbiBleGNlc3NEb21DaGlsZHJlbiwgcmVtb3ZlIGl0IGZyb21cblx0XHRcdC8vIGV4Y2Vzc0RvbUNoaWxkcmVuIHNvIGl0IGlzbid0IGxhdGVyIHJlbW92ZWQgaW4gZGlmZkNoaWxkcmVuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdGNoaWxkICYmXG5cdFx0XHRcdCdzZXRBdHRyaWJ1dGUnIGluIGNoaWxkID09PSAhIW5vZGVUeXBlICYmXG5cdFx0XHRcdChub2RlVHlwZSA/IGNoaWxkLmxvY2FsTmFtZSA9PT0gbm9kZVR5cGUgOiBjaGlsZC5ub2RlVHlwZSA9PT0gMylcblx0XHRcdCkge1xuXHRcdFx0XHRkb20gPSBjaGlsZDtcblx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW5baV0gPSBudWxsO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoZG9tID09IG51bGwpIHtcblx0XHRpZiAobm9kZVR5cGUgPT09IG51bGwpIHtcblx0XHRcdC8vIEB0cy1pZ25vcmUgY3JlYXRlVGV4dE5vZGUgcmV0dXJucyBUZXh0LCB3ZSBleHBlY3QgUHJlYWN0RWxlbWVudFxuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5ld1Byb3BzKTtcblx0XHR9XG5cblx0XHRpZiAoaXNTdmcpIHtcblx0XHRcdGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcblx0XHRcdFx0J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZSBXZSBrbm93IGBuZXdWTm9kZS50eXBlYCBpcyBhIHN0cmluZ1xuXHRcdFx0XHRub2RlVHlwZVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZSBXZSBrbm93IGBuZXdWTm9kZS50eXBlYCBpcyBhIHN0cmluZ1xuXHRcdFx0XHRub2RlVHlwZSxcblx0XHRcdFx0bmV3UHJvcHMuaXMgJiYgbmV3UHJvcHNcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gd2UgY3JlYXRlZCBhIG5ldyBwYXJlbnQsIHNvIG5vbmUgb2YgdGhlIHByZXZpb3VzbHkgYXR0YWNoZWQgY2hpbGRyZW4gY2FuIGJlIHJldXNlZDpcblx0XHRleGNlc3NEb21DaGlsZHJlbiA9IG51bGw7XG5cdFx0Ly8gd2UgYXJlIGNyZWF0aW5nIGEgbmV3IG5vZGUsIHNvIHdlIGNhbiBhc3N1bWUgdGhpcyBpcyBhIG5ldyBzdWJ0cmVlIChpbiBjYXNlIHdlIGFyZSBoeWRyYXRpbmcpLCB0aGlzIGRlb3B0cyB0aGUgaHlkcmF0ZVxuXHRcdGlzSHlkcmF0aW5nID0gZmFsc2U7XG5cdH1cblxuXHRpZiAobm9kZVR5cGUgPT09IG51bGwpIHtcblx0XHQvLyBEdXJpbmcgaHlkcmF0aW9uLCB3ZSBzdGlsbCBoYXZlIHRvIHNwbGl0IG1lcmdlZCB0ZXh0IGZyb20gU1NSJ2QgSFRNTC5cblx0XHRpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzICYmICghaXNIeWRyYXRpbmcgfHwgZG9tLmRhdGEgIT09IG5ld1Byb3BzKSkge1xuXHRcdFx0ZG9tLmRhdGEgPSBuZXdQcm9wcztcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Ly8gSWYgZXhjZXNzRG9tQ2hpbGRyZW4gd2FzIG5vdCBudWxsLCByZXBvcHVsYXRlIGl0IHdpdGggdGhlIGN1cnJlbnQgZWxlbWVudCdzIGNoaWxkcmVuOlxuXHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID0gZXhjZXNzRG9tQ2hpbGRyZW4gJiYgc2xpY2UuY2FsbChkb20uY2hpbGROb2Rlcyk7XG5cblx0XHRvbGRQcm9wcyA9IG9sZFZOb2RlLnByb3BzIHx8IEVNUFRZX09CSjtcblxuXHRcdGxldCBvbGRIdG1sID0gb2xkUHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG5cdFx0bGV0IG5ld0h0bWwgPSBuZXdQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcblxuXHRcdC8vIER1cmluZyBoeWRyYXRpb24sIHByb3BzIGFyZSBub3QgZGlmZmVkIGF0IGFsbCAoaW5jbHVkaW5nIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKVxuXHRcdC8vIEBUT0RPIHdlIHNob3VsZCB3YXJuIGluIGRlYnVnIG1vZGUgd2hlbiBwcm9wcyBkb24ndCBtYXRjaCBoZXJlLlxuXHRcdGlmICghaXNIeWRyYXRpbmcpIHtcblx0XHRcdC8vIEJ1dCwgaWYgd2UgYXJlIGluIGEgc2l0dWF0aW9uIHdoZXJlIHdlIGFyZSB1c2luZyBleGlzdGluZyBET00gKGUuZy4gcmVwbGFjZU5vZGUpXG5cdFx0XHQvLyB3ZSBzaG91bGQgcmVhZCB0aGUgZXhpc3RpbmcgRE9NIGF0dHJpYnV0ZXMgdG8gZGlmZiB0aGVtXG5cdFx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0XHRvbGRQcm9wcyA9IHt9O1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZG9tLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvbGRQcm9wc1tkb20uYXR0cmlidXRlc1tpXS5uYW1lXSA9IGRvbS5hdHRyaWJ1dGVzW2ldLnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChuZXdIdG1sIHx8IG9sZEh0bWwpIHtcblx0XHRcdFx0Ly8gQXZvaWQgcmUtYXBwbHlpbmcgdGhlIHNhbWUgJ19faHRtbCcgaWYgaXQgZGlkIG5vdCBjaGFuZ2VkIGJldHdlZW4gcmUtcmVuZGVyXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhbmV3SHRtbCB8fFxuXHRcdFx0XHRcdCgoIW9sZEh0bWwgfHwgbmV3SHRtbC5fX2h0bWwgIT0gb2xkSHRtbC5fX2h0bWwpICYmXG5cdFx0XHRcdFx0XHRuZXdIdG1sLl9faHRtbCAhPT0gZG9tLmlubmVySFRNTClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0ZG9tLmlubmVySFRNTCA9IChuZXdIdG1sICYmIG5ld0h0bWwuX19odG1sKSB8fCAnJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGRpZmZQcm9wcyhkb20sIG5ld1Byb3BzLCBvbGRQcm9wcywgaXNTdmcsIGlzSHlkcmF0aW5nKTtcblxuXHRcdC8vIElmIHRoZSBuZXcgdm5vZGUgZGlkbid0IGhhdmUgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsIGRpZmYgaXRzIGNoaWxkcmVuXG5cdFx0aWYgKG5ld0h0bWwpIHtcblx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IFtdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpID0gbmV3Vk5vZGUucHJvcHMuY2hpbGRyZW47XG5cdFx0XHRkaWZmQ2hpbGRyZW4oXG5cdFx0XHRcdGRvbSxcblx0XHRcdFx0QXJyYXkuaXNBcnJheShpKSA/IGkgOiBbaV0sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Z2xvYmFsQ29udGV4dCxcblx0XHRcdFx0aXNTdmcgJiYgbm9kZVR5cGUgIT09ICdmb3JlaWduT2JqZWN0Jyxcblx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlblxuXHRcdFx0XHRcdD8gZXhjZXNzRG9tQ2hpbGRyZW5bMF1cblx0XHRcdFx0XHQ6IG9sZFZOb2RlLl9jaGlsZHJlbiAmJiBnZXREb21TaWJsaW5nKG9sZFZOb2RlLCAwKSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cblx0XHRcdC8vIFJlbW92ZSBjaGlsZHJlbiB0aGF0IGFyZSBub3QgcGFydCBvZiBhbnkgdm5vZGUuXG5cdFx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0XHRmb3IgKGkgPSBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGg7IGktLTsgKSB7XG5cdFx0XHRcdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuW2ldICE9IG51bGwpIHJlbW92ZU5vZGUoZXhjZXNzRG9tQ2hpbGRyZW5baV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gKGFzIGFib3ZlLCBkb24ndCBkaWZmIHByb3BzIGR1cmluZyBoeWRyYXRpb24pXG5cdFx0aWYgKCFpc0h5ZHJhdGluZykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQndmFsdWUnIGluIG5ld1Byb3BzICYmXG5cdFx0XHRcdChpID0gbmV3UHJvcHMudmFsdWUpICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0Ly8gIzI3NTYgRm9yIHRoZSA8cHJvZ3Jlc3M+LWVsZW1lbnQgdGhlIGluaXRpYWwgdmFsdWUgaXMgMCxcblx0XHRcdFx0Ly8gZGVzcGl0ZSB0aGUgYXR0cmlidXRlIG5vdCBiZWluZyBwcmVzZW50LiBXaGVuIHRoZSBhdHRyaWJ1dGVcblx0XHRcdFx0Ly8gaXMgbWlzc2luZyB0aGUgcHJvZ3Jlc3MgYmFyIGlzIHRyZWF0ZWQgYXMgaW5kZXRlcm1pbmF0ZS5cblx0XHRcdFx0Ly8gVG8gZml4IHRoYXQgd2UnbGwgYWx3YXlzIHVwZGF0ZSBpdCB3aGVuIGl0IGlzIDAgZm9yIHByb2dyZXNzIGVsZW1lbnRzXG5cdFx0XHRcdChpICE9PSBkb20udmFsdWUgfHxcblx0XHRcdFx0XHQobm9kZVR5cGUgPT09ICdwcm9ncmVzcycgJiYgIWkpIHx8XG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyBvbmx5IGZvciBJRSAxMSB0byBmaXggPHNlbGVjdD4gdmFsdWUgbm90IGJlaW5nIHVwZGF0ZWQuXG5cdFx0XHRcdFx0Ly8gVG8gYXZvaWQgYSBzdGFsZSBzZWxlY3QgdmFsdWUgd2UgbmVlZCB0byBzZXQgdGhlIG9wdGlvbi52YWx1ZVxuXHRcdFx0XHRcdC8vIGFnYWluLCB3aGljaCB0cmlnZ2VycyBJRTExIHRvIHJlLWV2YWx1YXRlIHRoZSBzZWxlY3QgdmFsdWVcblx0XHRcdFx0XHQobm9kZVR5cGUgPT09ICdvcHRpb24nICYmIGkgIT09IG9sZFByb3BzLnZhbHVlKSlcblx0XHRcdCkge1xuXHRcdFx0XHRzZXRQcm9wZXJ0eShkb20sICd2YWx1ZScsIGksIG9sZFByb3BzLnZhbHVlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCdjaGVja2VkJyBpbiBuZXdQcm9wcyAmJlxuXHRcdFx0XHQoaSA9IG5ld1Byb3BzLmNoZWNrZWQpICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0aSAhPT0gZG9tLmNoZWNrZWRcblx0XHRcdCkge1xuXHRcdFx0XHRzZXRQcm9wZXJ0eShkb20sICdjaGVja2VkJywgaSwgb2xkUHJvcHMuY2hlY2tlZCwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBkb207XG59XG5cbi8qKlxuICogSW52b2tlIG9yIHVwZGF0ZSBhIHJlZiwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgaXQgaXMgYSBmdW5jdGlvbiBvciBvYmplY3QgcmVmLlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHJlZlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UmVmKHJlZiwgdmFsdWUsIHZub2RlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKHR5cGVvZiByZWYgPT0gJ2Z1bmN0aW9uJykgcmVmKHZhbHVlKTtcblx0XHRlbHNlIHJlZi5jdXJyZW50ID0gdmFsdWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIHZub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIFVubW91bnQgYSB2aXJ0dWFsIG5vZGUgZnJvbSB0aGUgdHJlZSBhbmQgYXBwbHkgRE9NIGNoYW5nZXNcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHVubW91bnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBwYXJlbnRWTm9kZSBUaGUgcGFyZW50IG9mIHRoZSBWTm9kZSB0aGF0XG4gKiBpbml0aWF0ZWQgdGhlIHVubW91bnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBSZW1vdmVdIEZsYWcgdGhhdCBpbmRpY2F0ZXMgdGhhdCBhIHBhcmVudCBub2RlIG9mIHRoZVxuICogY3VycmVudCBlbGVtZW50IGlzIGFscmVhZHkgZGV0YWNoZWQgZnJvbSB0aGUgRE9NLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSwgcGFyZW50Vk5vZGUsIHNraXBSZW1vdmUpIHtcblx0bGV0IHI7XG5cdGlmIChvcHRpb25zLnVubW91bnQpIG9wdGlvbnMudW5tb3VudCh2bm9kZSk7XG5cblx0aWYgKChyID0gdm5vZGUucmVmKSkge1xuXHRcdGlmICghci5jdXJyZW50IHx8IHIuY3VycmVudCA9PT0gdm5vZGUuX2RvbSkgYXBwbHlSZWYociwgbnVsbCwgcGFyZW50Vk5vZGUpO1xuXHR9XG5cblx0aWYgKChyID0gdm5vZGUuX2NvbXBvbmVudCkgIT0gbnVsbCkge1xuXHRcdGlmIChyLmNvbXBvbmVudFdpbGxVbm1vdW50KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgcGFyZW50Vk5vZGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHIuYmFzZSA9IHIuX3BhcmVudERvbSA9IG51bGw7XG5cdH1cblxuXHRpZiAoKHIgPSB2bm9kZS5fY2hpbGRyZW4pKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAocltpXSkge1xuXHRcdFx0XHR1bm1vdW50KHJbaV0sIHBhcmVudFZOb2RlLCB0eXBlb2Ygdm5vZGUudHlwZSAhPSAnZnVuY3Rpb24nKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIXNraXBSZW1vdmUgJiYgdm5vZGUuX2RvbSAhPSBudWxsKSByZW1vdmVOb2RlKHZub2RlLl9kb20pO1xuXG5cdC8vIE11c3QgYmUgc2V0IHRvIGB1bmRlZmluZWRgIHRvIHByb3Blcmx5IGNsZWFuIHVwIGBfbmV4dERvbWBcblx0Ly8gZm9yIHdoaWNoIGBudWxsYCBpcyBhIHZhbGlkIHZhbHVlLiBTZWUgY29tbWVudCBpbiBgY3JlYXRlLWVsZW1lbnQuanNgXG5cdHZub2RlLl9kb20gPSB2bm9kZS5fbmV4dERvbSA9IHVuZGVmaW5lZDtcbn1cblxuLyoqIFRoZSBgLnJlbmRlcigpYCBtZXRob2QgZm9yIGEgUEZDIGJhY2tpbmcgaW5zdGFuY2UuICovXG5mdW5jdGlvbiBkb1JlbmRlcihwcm9wcywgc3RhdGUsIGNvbnRleHQpIHtcblx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHsgRU1QVFlfT0JKIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgY29tbWl0Um9vdCwgZGlmZiB9IGZyb20gJy4vZGlmZi9pbmRleCc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBSZW5kZXIgYSBQcmVhY3QgdmlydHVhbCBub2RlIGludG8gYSBET00gZWxlbWVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnRDaGlsZH0gdm5vZGUgVGhlIHZpcnR1YWwgbm9kZSB0byByZW5kZXJcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBET00gZWxlbWVudCB0b1xuICogcmVuZGVyIGludG9cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudCB8IG9iamVjdH0gW3JlcGxhY2VOb2RlXSBPcHRpb25hbDogQXR0ZW1wdCB0byByZS11c2UgYW5cbiAqIGV4aXN0aW5nIERPTSB0cmVlIHJvb3RlZCBhdCBgcmVwbGFjZU5vZGVgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIodm5vZGUsIHBhcmVudERvbSwgcmVwbGFjZU5vZGUpIHtcblx0aWYgKG9wdGlvbnMuX3Jvb3QpIG9wdGlvbnMuX3Jvb3Qodm5vZGUsIHBhcmVudERvbSk7XG5cblx0Ly8gV2UgYWJ1c2UgdGhlIGByZXBsYWNlTm9kZWAgcGFyYW1ldGVyIGluIGBoeWRyYXRlKClgIHRvIHNpZ25hbCBpZiB3ZSBhcmUgaW5cblx0Ly8gaHlkcmF0aW9uIG1vZGUgb3Igbm90IGJ5IHBhc3NpbmcgdGhlIGBoeWRyYXRlYCBmdW5jdGlvbiBpbnN0ZWFkIG9mIGEgRE9NXG5cdC8vIGVsZW1lbnQuLlxuXHRsZXQgaXNIeWRyYXRpbmcgPSB0eXBlb2YgcmVwbGFjZU5vZGUgPT09ICdmdW5jdGlvbic7XG5cblx0Ly8gVG8gYmUgYWJsZSB0byBzdXBwb3J0IGNhbGxpbmcgYHJlbmRlcigpYCBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZVxuXHQvLyBET00gbm9kZSwgd2UgbmVlZCB0byBvYnRhaW4gYSByZWZlcmVuY2UgdG8gdGhlIHByZXZpb3VzIHRyZWUuIFdlIGRvXG5cdC8vIHRoaXMgYnkgYXNzaWduaW5nIGEgbmV3IGBfY2hpbGRyZW5gIHByb3BlcnR5IHRvIERPTSBub2RlcyB3aGljaCBwb2ludHNcblx0Ly8gdG8gdGhlIGxhc3QgcmVuZGVyZWQgdHJlZS4gQnkgZGVmYXVsdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBwcmVzZW50LCB3aGljaFxuXHQvLyBtZWFucyB0aGF0IHdlIGFyZSBtb3VudGluZyBhIG5ldyB0cmVlIGZvciB0aGUgZmlyc3QgdGltZS5cblx0bGV0IG9sZFZOb2RlID0gaXNIeWRyYXRpbmdcblx0XHQ/IG51bGxcblx0XHQ6IChyZXBsYWNlTm9kZSAmJiByZXBsYWNlTm9kZS5fY2hpbGRyZW4pIHx8IHBhcmVudERvbS5fY2hpbGRyZW47XG5cblx0dm5vZGUgPSAoXG5cdFx0KCFpc0h5ZHJhdGluZyAmJiByZXBsYWNlTm9kZSkgfHxcblx0XHRwYXJlbnREb21cblx0KS5fY2hpbGRyZW4gPSBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBbdm5vZGVdKTtcblxuXHQvLyBMaXN0IG9mIGVmZmVjdHMgdGhhdCBuZWVkIHRvIGJlIGNhbGxlZCBhZnRlciBkaWZmaW5nLlxuXHRsZXQgY29tbWl0UXVldWUgPSBbXTtcblx0ZGlmZihcblx0XHRwYXJlbnREb20sXG5cdFx0Ly8gRGV0ZXJtaW5lIHRoZSBuZXcgdm5vZGUgdHJlZSBhbmQgc3RvcmUgaXQgb24gdGhlIERPTSBlbGVtZW50IG9uXG5cdFx0Ly8gb3VyIGN1c3RvbSBgX2NoaWxkcmVuYCBwcm9wZXJ0eS5cblx0XHR2bm9kZSxcblx0XHRvbGRWTm9kZSB8fCBFTVBUWV9PQkosXG5cdFx0RU1QVFlfT0JKLFxuXHRcdHBhcmVudERvbS5vd25lclNWR0VsZW1lbnQgIT09IHVuZGVmaW5lZCxcblx0XHQhaXNIeWRyYXRpbmcgJiYgcmVwbGFjZU5vZGVcblx0XHRcdD8gW3JlcGxhY2VOb2RlXVxuXHRcdFx0OiBvbGRWTm9kZVxuXHRcdFx0PyBudWxsXG5cdFx0XHQ6IHBhcmVudERvbS5maXJzdENoaWxkXG5cdFx0XHQ/IHNsaWNlLmNhbGwocGFyZW50RG9tLmNoaWxkTm9kZXMpXG5cdFx0XHQ6IG51bGwsXG5cdFx0Y29tbWl0UXVldWUsXG5cdFx0IWlzSHlkcmF0aW5nICYmIHJlcGxhY2VOb2RlXG5cdFx0XHQ/IHJlcGxhY2VOb2RlXG5cdFx0XHQ6IG9sZFZOb2RlXG5cdFx0XHQ/IG9sZFZOb2RlLl9kb21cblx0XHRcdDogcGFyZW50RG9tLmZpcnN0Q2hpbGQsXG5cdFx0aXNIeWRyYXRpbmdcblx0KTtcblxuXHQvLyBGbHVzaCBhbGwgcXVldWVkIGVmZmVjdHNcblx0Y29tbWl0Um9vdChjb21taXRRdWV1ZSwgdm5vZGUpO1xufVxuXG4vKipcbiAqIFVwZGF0ZSBhbiBleGlzdGluZyBET00gZWxlbWVudCB3aXRoIGRhdGEgZnJvbSBhIFByZWFjdCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Q2hpbGR9IHZub2RlIFRoZSB2aXJ0dWFsIG5vZGUgdG8gcmVuZGVyXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IHBhcmVudERvbSBUaGUgRE9NIGVsZW1lbnQgdG9cbiAqIHVwZGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0ZSh2bm9kZSwgcGFyZW50RG9tKSB7XG5cdHJlbmRlcih2bm9kZSwgcGFyZW50RG9tLCBoeWRyYXRlKTtcbn1cbiIsIi8qKlxuICogRmluZCB0aGUgY2xvc2VzdCBlcnJvciBib3VuZGFyeSB0byBhIHRocm93biBlcnJvciBhbmQgY2FsbCBpdFxuICogQHBhcmFtIHtvYmplY3R9IGVycm9yIFRoZSB0aHJvd24gdmFsdWVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdm5vZGUgdGhhdCB0aHJld1xuICogdGhlIGVycm9yIHRoYXQgd2FzIGNhdWdodCAoZXhjZXB0IGZvciB1bm1vdW50aW5nIHdoZW4gdGhpcyBwYXJhbWV0ZXJcbiAqIGlzIHRoZSBoaWdoZXN0IHBhcmVudCB0aGF0IHdhcyBiZWluZyB1bm1vdW50ZWQpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gW29sZFZOb2RlXVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuRXJyb3JJbmZvfSBbZXJyb3JJbmZvXVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoRXJyb3IoZXJyb3IsIHZub2RlLCBvbGRWTm9kZSwgZXJyb3JJbmZvKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gKi9cblx0bGV0IGNvbXBvbmVudCwgY3RvciwgaGFuZGxlZDtcblxuXHRmb3IgKDsgKHZub2RlID0gdm5vZGUuX3BhcmVudCk7ICkge1xuXHRcdGlmICgoY29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudCkgJiYgIWNvbXBvbmVudC5fcHJvY2Vzc2luZ0V4Y2VwdGlvbikge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y3RvciA9IGNvbXBvbmVudC5jb25zdHJ1Y3RvcjtcblxuXHRcdFx0XHRpZiAoY3RvciAmJiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Y29tcG9uZW50LnNldFN0YXRlKGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSk7XG5cdFx0XHRcdFx0aGFuZGxlZCA9IGNvbXBvbmVudC5fZGlydHk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoICE9IG51bGwpIHtcblx0XHRcdFx0XHRjb21wb25lbnQuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbyB8fCB7fSk7XG5cdFx0XHRcdFx0aGFuZGxlZCA9IGNvbXBvbmVudC5fZGlydHk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUaGlzIGlzIGFuIGVycm9yIGJvdW5kYXJ5LiBNYXJrIGl0IGFzIGhhdmluZyBiYWlsZWQgb3V0LCBhbmQgd2hldGhlciBpdCB3YXMgbWlkLWh5ZHJhdGlvbi5cblx0XHRcdFx0aWYgKGhhbmRsZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gKGNvbXBvbmVudC5fcGVuZGluZ0Vycm9yID0gY29tcG9uZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRlcnJvciA9IGU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dGhyb3cgZXJyb3I7XG59XG4iLCJpbXBvcnQgeyBvcHRpb25zLCBGcmFnbWVudCB9IGZyb20gJ3ByZWFjdCc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCdwcmVhY3QnKS5WTm9kZX0gVk5vZGUgKi9cblxubGV0IHZub2RlSWQgPSAwO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIFRoaXMgZmlsZSBleHBvcnRzIHZhcmlvdXMgbWV0aG9kcyB0aGF0IGltcGxlbWVudCBCYWJlbCdzIFwiYXV0b21hdGljXCIgSlNYIHJ1bnRpbWUgQVBJOlxuICogLSBqc3godHlwZSwgcHJvcHMsIGtleSlcbiAqIC0ganN4cyh0eXBlLCBwcm9wcywga2V5KVxuICogLSBqc3hERVYodHlwZSwgcHJvcHMsIGtleSwgX19zb3VyY2UsIF9fc2VsZilcbiAqXG4gKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgY3JlYXRlVk5vZGUgaGVyZSBpcyBvcHRpbWl6ZWQgZm9yIHBlcmZvcm1hbmNlLlxuICogQmVuY2htYXJrczogaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81ZjZiNTRhMGI0NjMyMTAwYTdkY2QyYjNcbiAqL1xuXG4vKipcbiAqIEpTWC5FbGVtZW50IGZhY3RvcnkgdXNlZCBieSBCYWJlbCdzIHtydW50aW1lOlwiYXV0b21hdGljXCJ9IEpTWCB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7Vk5vZGVbJ3R5cGUnXX0gdHlwZVxuICogQHBhcmFtIHtWTm9kZVsncHJvcHMnXX0gcHJvcHNcbiAqIEBwYXJhbSB7Vk5vZGVbJ2tleSddfSBba2V5XVxuICogQHBhcmFtIHtzdHJpbmd9IFtfX3NlbGZdXG4gKiBAcGFyYW0ge3N0cmluZ30gW19fc291cmNlXVxuICovXG5mdW5jdGlvbiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wcywga2V5LCBfX3NlbGYsIF9fc291cmNlKSB7XG5cdC8vIFdlJ2xsIHdhbnQgdG8gcHJlc2VydmUgYHJlZmAgaW4gcHJvcHMgdG8gZ2V0IHJpZCBvZiB0aGUgbmVlZCBmb3Jcblx0Ly8gZm9yd2FyZFJlZiBjb21wb25lbnRzIGluIHRoZSBmdXR1cmUsIGJ1dCB0aGF0IHNob3VsZCBoYXBwZW4gdmlhXG5cdC8vIGEgc2VwYXJhdGUgUFIuXG5cdGxldCBub3JtYWxpemVkUHJvcHMgPSB7fSxcblx0XHRyZWYsXG5cdFx0aTtcblx0Zm9yIChpIGluIHByb3BzKSB7XG5cdFx0aWYgKGkgPT0gJ3JlZicpIHtcblx0XHRcdHJlZiA9IHByb3BzW2ldO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRub3JtYWxpemVkUHJvcHNbaV0gPSBwcm9wc1tpXTtcblx0XHR9XG5cdH1cblxuXHRjb25zdCB2bm9kZSA9IHtcblx0XHR0eXBlLFxuXHRcdHByb3BzOiBub3JtYWxpemVkUHJvcHMsXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRfY2hpbGRyZW46IG51bGwsXG5cdFx0X3BhcmVudDogbnVsbCxcblx0XHRfZGVwdGg6IDAsXG5cdFx0X2RvbTogbnVsbCxcblx0XHRfbmV4dERvbTogdW5kZWZpbmVkLFxuXHRcdF9jb21wb25lbnQ6IG51bGwsXG5cdFx0X2h5ZHJhdGluZzogbnVsbCxcblx0XHRjb25zdHJ1Y3RvcjogdW5kZWZpbmVkLFxuXHRcdF9vcmlnaW5hbDogLS12bm9kZUlkLFxuXHRcdF9fc291cmNlLFxuXHRcdF9fc2VsZlxuXHR9O1xuXG5cdC8vIElmIGEgQ29tcG9uZW50IFZOb2RlLCBjaGVjayBmb3IgYW5kIGFwcGx5IGRlZmF1bHRQcm9wcy5cblx0Ly8gTm90ZTogYHR5cGVgIGlzIG9mdGVuIGEgU3RyaW5nLCBhbmQgY2FuIGJlIGB1bmRlZmluZWRgIGluIGRldmVsb3BtZW50LlxuXHRpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgKHJlZiA9IHR5cGUuZGVmYXVsdFByb3BzKSkge1xuXHRcdGZvciAoaSBpbiByZWYpXG5cdFx0XHRpZiAodHlwZW9mIG5vcm1hbGl6ZWRQcm9wc1tpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0bm9ybWFsaXplZFByb3BzW2ldID0gcmVmW2ldO1xuXHRcdFx0fVxuXHR9XG5cblx0aWYgKG9wdGlvbnMudm5vZGUpIG9wdGlvbnMudm5vZGUodm5vZGUpO1xuXHRyZXR1cm4gdm5vZGU7XG59XG5cbmV4cG9ydCB7XG5cdGNyZWF0ZVZOb2RlIGFzIGpzeCxcblx0Y3JlYXRlVk5vZGUgYXMganN4cyxcblx0Y3JlYXRlVk5vZGUgYXMganN4REVWLFxuXHRGcmFnbWVudFxufTtcbiIsImltcG9ydCB7IG9wdGlvbnMgfSBmcm9tICdwcmVhY3QnO1xuXG4vKiogQHR5cGUge251bWJlcn0gKi9cbmxldCBjdXJyZW50SW5kZXg7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xubGV0IGN1cnJlbnRDb21wb25lbnQ7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xubGV0IHByZXZpb3VzQ29tcG9uZW50O1xuXG4vKiogQHR5cGUge251bWJlcn0gKi9cbmxldCBjdXJyZW50SG9vayA9IDA7XG5cbi8qKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Pn0gKi9cbmxldCBhZnRlclBhaW50RWZmZWN0cyA9IFtdO1xuXG5sZXQgb2xkQmVmb3JlRGlmZiA9IG9wdGlvbnMuX2RpZmY7XG5sZXQgb2xkQmVmb3JlUmVuZGVyID0gb3B0aW9ucy5fcmVuZGVyO1xubGV0IG9sZEFmdGVyRGlmZiA9IG9wdGlvbnMuZGlmZmVkO1xubGV0IG9sZENvbW1pdCA9IG9wdGlvbnMuX2NvbW1pdDtcbmxldCBvbGRCZWZvcmVVbm1vdW50ID0gb3B0aW9ucy51bm1vdW50O1xuXG5jb25zdCBSQUZfVElNRU9VVCA9IDEwMDtcbmxldCBwcmV2UmFmO1xuXG5vcHRpb25zLl9kaWZmID0gdm5vZGUgPT4ge1xuXHRjdXJyZW50Q29tcG9uZW50ID0gbnVsbDtcblx0aWYgKG9sZEJlZm9yZURpZmYpIG9sZEJlZm9yZURpZmYodm5vZGUpO1xufTtcblxub3B0aW9ucy5fcmVuZGVyID0gdm5vZGUgPT4ge1xuXHRpZiAob2xkQmVmb3JlUmVuZGVyKSBvbGRCZWZvcmVSZW5kZXIodm5vZGUpO1xuXG5cdGN1cnJlbnRDb21wb25lbnQgPSB2bm9kZS5fY29tcG9uZW50O1xuXHRjdXJyZW50SW5kZXggPSAwO1xuXG5cdGNvbnN0IGhvb2tzID0gY3VycmVudENvbXBvbmVudC5fX2hvb2tzO1xuXHRpZiAoaG9va3MpIHtcblx0XHRpZiAocHJldmlvdXNDb21wb25lbnQgPT09IGN1cnJlbnRDb21wb25lbnQpIHtcblx0XHRcdGhvb2tzLl9wZW5kaW5nRWZmZWN0cyA9IFtdO1xuXHRcdFx0Y3VycmVudENvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHRob29rcy5fbGlzdC5mb3JFYWNoKGhvb2tJdGVtID0+IHtcblx0XHRcdFx0aG9va0l0ZW0uX3BlbmRpbmdWYWx1ZSA9IGhvb2tJdGVtLl9wZW5kaW5nQXJncyA9IHVuZGVmaW5lZDtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRob29rcy5fbGlzdC5mb3JFYWNoKGhvb2tJdGVtID0+IHtcblx0XHRcdFx0aWYgKGhvb2tJdGVtLl9wZW5kaW5nQXJncykge1xuXHRcdFx0XHRcdGhvb2tJdGVtLl9hcmdzID0gaG9va0l0ZW0uX3BlbmRpbmdBcmdzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChob29rSXRlbS5fcGVuZGluZ1ZhbHVlKSB7XG5cdFx0XHRcdFx0aG9va0l0ZW0uX3ZhbHVlID0gaG9va0l0ZW0uX3BlbmRpbmdWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRob29rSXRlbS5fcGVuZGluZ1ZhbHVlID0gaG9va0l0ZW0uX3BlbmRpbmdBcmdzID0gdW5kZWZpbmVkO1xuXHRcdFx0fSk7XG5cdFx0XHRob29rcy5fcGVuZGluZ0VmZmVjdHMuZm9yRWFjaChpbnZva2VDbGVhbnVwKTtcblx0XHRcdGhvb2tzLl9wZW5kaW5nRWZmZWN0cy5mb3JFYWNoKGludm9rZUVmZmVjdCk7XG5cdFx0XHRob29rcy5fcGVuZGluZ0VmZmVjdHMgPSBbXTtcblx0XHR9XG5cdH1cblx0cHJldmlvdXNDb21wb25lbnQgPSBjdXJyZW50Q29tcG9uZW50O1xufTtcblxub3B0aW9ucy5kaWZmZWQgPSB2bm9kZSA9PiB7XG5cdGlmIChvbGRBZnRlckRpZmYpIG9sZEFmdGVyRGlmZih2bm9kZSk7XG5cblx0Y29uc3QgYyA9IHZub2RlLl9jb21wb25lbnQ7XG5cdGlmIChjICYmIGMuX19ob29rcyAmJiBjLl9faG9va3MuX3BlbmRpbmdFZmZlY3RzLmxlbmd0aCkge1xuXHRcdGFmdGVyUGFpbnQoYWZ0ZXJQYWludEVmZmVjdHMucHVzaChjKSk7XG5cdH1cblx0Y3VycmVudENvbXBvbmVudCA9IG51bGw7XG5cdHByZXZpb3VzQ29tcG9uZW50ID0gbnVsbDtcbn07XG5cbm9wdGlvbnMuX2NvbW1pdCA9ICh2bm9kZSwgY29tbWl0UXVldWUpID0+IHtcblx0Y29tbWl0UXVldWUuc29tZShjb21wb25lbnQgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAoY29tcG9uZW50Ll9faG9va3MpIHtcblx0XHRcdFx0Y29tcG9uZW50Ll9faG9va3MuX2xpc3QuZm9yRWFjaChob29rSXRlbSA9PiB7XG5cdFx0XHRcdFx0aWYgKGhvb2tJdGVtLl9wZW5kaW5nQXJncykge1xuXHRcdFx0XHRcdFx0aG9va0l0ZW0uX2FyZ3MgPSBob29rSXRlbS5fcGVuZGluZ0FyZ3M7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChob29rSXRlbS5fcGVuZGluZ1ZhbHVlKSB7XG5cdFx0XHRcdFx0XHRob29rSXRlbS5fdmFsdWUgPSBob29rSXRlbS5fcGVuZGluZ1ZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRob29rSXRlbS5fcGVuZGluZ1ZhbHVlID0gaG9va0l0ZW0uX3BlbmRpbmdBcmdzID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Y29tcG9uZW50Ll9yZW5kZXJDYWxsYmFja3MuZm9yRWFjaChpbnZva2VDbGVhbnVwKTtcblx0XHRcdGNvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzID0gY29tcG9uZW50Ll9yZW5kZXJDYWxsYmFja3MuZmlsdGVyKGNiID0+XG5cdFx0XHRcdGNiLl92YWx1ZSA/IGludm9rZUVmZmVjdChjYikgOiB0cnVlXG5cdFx0XHQpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbW1pdFF1ZXVlLnNvbWUoYyA9PiB7XG5cdFx0XHRcdGlmIChjLl9yZW5kZXJDYWxsYmFja3MpIGMuX3JlbmRlckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0fSk7XG5cdFx0XHRjb21taXRRdWV1ZSA9IFtdO1xuXHRcdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCBjb21wb25lbnQuX3Zub2RlKTtcblx0XHR9XG5cdH0pO1xuXG5cdGlmIChvbGRDb21taXQpIG9sZENvbW1pdCh2bm9kZSwgY29tbWl0UXVldWUpO1xufTtcblxub3B0aW9ucy51bm1vdW50ID0gdm5vZGUgPT4ge1xuXHRpZiAob2xkQmVmb3JlVW5tb3VudCkgb2xkQmVmb3JlVW5tb3VudCh2bm9kZSk7XG5cblx0Y29uc3QgYyA9IHZub2RlLl9jb21wb25lbnQ7XG5cdGlmIChjICYmIGMuX19ob29rcykge1xuXHRcdGxldCBoYXNFcnJvcmVkO1xuXHRcdGMuX19ob29rcy5fbGlzdC5mb3JFYWNoKHMgPT4ge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aW52b2tlQ2xlYW51cChzKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0aGFzRXJyb3JlZCA9IGU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0aWYgKGhhc0Vycm9yZWQpIG9wdGlvbnMuX2NhdGNoRXJyb3IoaGFzRXJyb3JlZCwgYy5fdm5vZGUpO1xuXHR9XG59O1xuXG4vKipcbiAqIEdldCBhIGhvb2sncyBzdGF0ZSBmcm9tIHRoZSBjdXJyZW50Q29tcG9uZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBob29rIHRvIGdldFxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGUgVGhlIGluZGV4IG9mIHRoZSBob29rIHRvIGdldFxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZ2V0SG9va1N0YXRlKGluZGV4LCB0eXBlKSB7XG5cdGlmIChvcHRpb25zLl9ob29rKSB7XG5cdFx0b3B0aW9ucy5faG9vayhjdXJyZW50Q29tcG9uZW50LCBpbmRleCwgY3VycmVudEhvb2sgfHwgdHlwZSk7XG5cdH1cblx0Y3VycmVudEhvb2sgPSAwO1xuXG5cdC8vIExhcmdlbHkgaW5zcGlyZWQgYnk6XG5cdC8vICogaHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWwta2xlaW4vZnVuY3kuanMvYmxvYi9mNmJlNzM0NjhlNmVjNDZiMGZmNWFhM2NjNGM5YmFmNzJhMjkwMjVhL3NyYy9ob29rcy9jb3JlX2hvb2tzLm1qc1xuXHQvLyAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNoYWVsLWtsZWluL2Z1bmN5LmpzL2Jsb2IvNjUwYmVhYTU4YzQzYzMzYTc0ODIwYTNjOThiM2M3MDc5Y2YyZTMzMy9zcmMvcmVuZGVyZXIubWpzXG5cdC8vIE90aGVyIGltcGxlbWVudGF0aW9ucyB0byBsb29rIGF0OlxuXHQvLyAqIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9tbm94MDVxcDhcblx0Y29uc3QgaG9va3MgPVxuXHRcdGN1cnJlbnRDb21wb25lbnQuX19ob29rcyB8fFxuXHRcdChjdXJyZW50Q29tcG9uZW50Ll9faG9va3MgPSB7XG5cdFx0XHRfbGlzdDogW10sXG5cdFx0XHRfcGVuZGluZ0VmZmVjdHM6IFtdXG5cdFx0fSk7XG5cblx0aWYgKGluZGV4ID49IGhvb2tzLl9saXN0Lmxlbmd0aCkge1xuXHRcdGhvb2tzLl9saXN0LnB1c2goe30pO1xuXHR9XG5cdHJldHVybiBob29rcy5fbGlzdFtpbmRleF07XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5TdGF0ZVVwZGF0ZXI8YW55Pn0gW2luaXRpYWxTdGF0ZV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0YXRlKGluaXRpYWxTdGF0ZSkge1xuXHRjdXJyZW50SG9vayA9IDE7XG5cdHJldHVybiB1c2VSZWR1Y2VyKGludm9rZU9yUmV0dXJuLCBpbml0aWFsU3RhdGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2luZGV4JykuUmVkdWNlcjxhbnksIGFueT59IHJlZHVjZXJcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2luZGV4JykuU3RhdGVVcGRhdGVyPGFueT59IGluaXRpYWxTdGF0ZVxuICogQHBhcmFtIHsoaW5pdGlhbFN0YXRlOiBhbnkpID0+IHZvaWR9IFtpbml0XVxuICogQHJldHVybnMge1sgYW55LCAoc3RhdGU6IGFueSkgPT4gdm9pZCBdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsU3RhdGUsIGluaXQpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5SZWR1Y2VySG9va1N0YXRlfSAqL1xuXHRjb25zdCBob29rU3RhdGUgPSBnZXRIb29rU3RhdGUoY3VycmVudEluZGV4KyssIDIpO1xuXHRob29rU3RhdGUuX3JlZHVjZXIgPSByZWR1Y2VyO1xuXHRpZiAoIWhvb2tTdGF0ZS5fY29tcG9uZW50KSB7XG5cdFx0aG9va1N0YXRlLl92YWx1ZSA9IFtcblx0XHRcdCFpbml0ID8gaW52b2tlT3JSZXR1cm4odW5kZWZpbmVkLCBpbml0aWFsU3RhdGUpIDogaW5pdChpbml0aWFsU3RhdGUpLFxuXG5cdFx0XHRhY3Rpb24gPT4ge1xuXHRcdFx0XHRjb25zdCBuZXh0VmFsdWUgPSBob29rU3RhdGUuX3JlZHVjZXIoaG9va1N0YXRlLl92YWx1ZVswXSwgYWN0aW9uKTtcblx0XHRcdFx0aWYgKGhvb2tTdGF0ZS5fdmFsdWVbMF0gIT09IG5leHRWYWx1ZSkge1xuXHRcdFx0XHRcdGhvb2tTdGF0ZS5fdmFsdWUgPSBbbmV4dFZhbHVlLCBob29rU3RhdGUuX3ZhbHVlWzFdXTtcblx0XHRcdFx0XHRob29rU3RhdGUuX2NvbXBvbmVudC5zZXRTdGF0ZSh7fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRdO1xuXG5cdFx0aG9va1N0YXRlLl9jb21wb25lbnQgPSBjdXJyZW50Q29tcG9uZW50O1xuXHR9XG5cblx0cmV0dXJuIGhvb2tTdGF0ZS5fdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3R9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge2FueVtdfSBhcmdzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VFZmZlY3QoY2FsbGJhY2ssIGFyZ3MpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3RIb29rU3RhdGV9ICovXG5cdGNvbnN0IHN0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrLCAzKTtcblx0aWYgKCFvcHRpb25zLl9za2lwRWZmZWN0cyAmJiBhcmdzQ2hhbmdlZChzdGF0ZS5fYXJncywgYXJncykpIHtcblx0XHRzdGF0ZS5fdmFsdWUgPSBjYWxsYmFjaztcblx0XHRzdGF0ZS5fcGVuZGluZ0FyZ3MgPSBhcmdzO1xuXG5cdFx0Y3VycmVudENvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cy5wdXNoKHN0YXRlKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuRWZmZWN0fSBjYWxsYmFja1xuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTGF5b3V0RWZmZWN0KGNhbGxiYWNrLCBhcmdzKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuRWZmZWN0SG9va1N0YXRlfSAqL1xuXHRjb25zdCBzdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgNCk7XG5cdGlmICghb3B0aW9ucy5fc2tpcEVmZmVjdHMgJiYgYXJnc0NoYW5nZWQoc3RhdGUuX2FyZ3MsIGFyZ3MpKSB7XG5cdFx0c3RhdGUuX3ZhbHVlID0gY2FsbGJhY2s7XG5cdFx0c3RhdGUuX3BlbmRpbmdBcmdzID0gYXJncztcblxuXHRcdGN1cnJlbnRDb21wb25lbnQuX3JlbmRlckNhbGxiYWNrcy5wdXNoKHN0YXRlKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVmKGluaXRpYWxWYWx1ZSkge1xuXHRjdXJyZW50SG9vayA9IDU7XG5cdHJldHVybiB1c2VNZW1vKCgpID0+ICh7IGN1cnJlbnQ6IGluaXRpYWxWYWx1ZSB9KSwgW10pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7KCkgPT4gb2JqZWN0fSBjcmVhdGVIYW5kbGVcbiAqIEBwYXJhbSB7YW55W119IGFyZ3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGVIYW5kbGUsIGFyZ3MpIHtcblx0Y3VycmVudEhvb2sgPSA2O1xuXHR1c2VMYXlvdXRFZmZlY3QoXG5cdFx0KCkgPT4ge1xuXHRcdFx0aWYgKHR5cGVvZiByZWYgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRyZWYoY3JlYXRlSGFuZGxlKCkpO1xuXHRcdFx0XHRyZXR1cm4gKCkgPT4gcmVmKG51bGwpO1xuXHRcdFx0fSBlbHNlIGlmIChyZWYpIHtcblx0XHRcdFx0cmVmLmN1cnJlbnQgPSBjcmVhdGVIYW5kbGUoKTtcblx0XHRcdFx0cmV0dXJuICgpID0+IChyZWYuY3VycmVudCA9IG51bGwpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXJncyA9PSBudWxsID8gYXJncyA6IGFyZ3MuY29uY2F0KHJlZilcblx0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygpID0+IGFueX0gZmFjdG9yeVxuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVtbyhmYWN0b3J5LCBhcmdzKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuTWVtb0hvb2tTdGF0ZX0gKi9cblx0Y29uc3Qgc3RhdGUgPSBnZXRIb29rU3RhdGUoY3VycmVudEluZGV4KyssIDcpO1xuXHRpZiAoYXJnc0NoYW5nZWQoc3RhdGUuX2FyZ3MsIGFyZ3MpKSB7XG5cdFx0c3RhdGUuX3BlbmRpbmdWYWx1ZSA9IGZhY3RvcnkoKTtcblx0XHRzdGF0ZS5fcGVuZGluZ0FyZ3MgPSBhcmdzO1xuXHRcdHN0YXRlLl9mYWN0b3J5ID0gZmFjdG9yeTtcblx0XHRyZXR1cm4gc3RhdGUuX3BlbmRpbmdWYWx1ZTtcblx0fVxuXG5cdHJldHVybiBzdGF0ZS5fdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBjYWxsYmFja1xuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FsbGJhY2soY2FsbGJhY2ssIGFyZ3MpIHtcblx0Y3VycmVudEhvb2sgPSA4O1xuXHRyZXR1cm4gdXNlTWVtbygoKSA9PiBjYWxsYmFjaywgYXJncyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RDb250ZXh0fSBjb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDb250ZXh0KGNvbnRleHQpIHtcblx0Y29uc3QgcHJvdmlkZXIgPSBjdXJyZW50Q29tcG9uZW50LmNvbnRleHRbY29udGV4dC5faWRdO1xuXHQvLyBXZSBjb3VsZCBza2lwIHRoaXMgY2FsbCBoZXJlLCBidXQgdGhhbiB3ZSdkIG5vdCBjYWxsXG5cdC8vIGBvcHRpb25zLl9ob29rYC4gV2UgbmVlZCB0byBkbyB0aGF0IGluIG9yZGVyIHRvIG1ha2Vcblx0Ly8gdGhlIGRldnRvb2xzIGF3YXJlIG9mIHRoaXMgaG9vay5cblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db250ZXh0SG9va1N0YXRlfSAqL1xuXHRjb25zdCBzdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgOSk7XG5cdC8vIFRoZSBkZXZ0b29scyBuZWVkcyBhY2Nlc3MgdG8gdGhlIGNvbnRleHQgb2JqZWN0IHRvXG5cdC8vIGJlIGFibGUgdG8gcHVsbCBvZiB0aGUgZGVmYXVsdCB2YWx1ZSB3aGVuIG5vIHByb3ZpZGVyXG5cdC8vIGlzIHByZXNlbnQgaW4gdGhlIHRyZWUuXG5cdHN0YXRlLl9jb250ZXh0ID0gY29udGV4dDtcblx0aWYgKCFwcm92aWRlcikgcmV0dXJuIGNvbnRleHQuX2RlZmF1bHRWYWx1ZTtcblx0Ly8gVGhpcyBpcyBwcm9iYWJseSBub3Qgc2FmZSB0byBjb252ZXJ0IHRvIFwiIVwiXG5cdGlmIChzdGF0ZS5fdmFsdWUgPT0gbnVsbCkge1xuXHRcdHN0YXRlLl92YWx1ZSA9IHRydWU7XG5cdFx0cHJvdmlkZXIuc3ViKGN1cnJlbnRDb21wb25lbnQpO1xuXHR9XG5cdHJldHVybiBwcm92aWRlci5wcm9wcy52YWx1ZTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5IGEgY3VzdG9tIGxhYmVsIGZvciBhIGN1c3RvbSBob29rIGZvciB0aGUgZGV2dG9vbHMgcGFuZWxcbiAqIEB0eXBlIHs8VD4odmFsdWU6IFQsIGNiPzogKHZhbHVlOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpID0+IHZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEZWJ1Z1ZhbHVlKHZhbHVlLCBmb3JtYXR0ZXIpIHtcblx0aWYgKG9wdGlvbnMudXNlRGVidWdWYWx1ZSkge1xuXHRcdG9wdGlvbnMudXNlRGVidWdWYWx1ZShmb3JtYXR0ZXIgPyBmb3JtYXR0ZXIodmFsdWUpIDogdmFsdWUpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHsoZXJyb3I6IGFueSkgPT4gdm9pZH0gY2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVycm9yQm91bmRhcnkoY2IpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FcnJvckJvdW5kYXJ5SG9va1N0YXRlfSAqL1xuXHRjb25zdCBzdGF0ZSA9IGdldEhvb2tTdGF0ZShjdXJyZW50SW5kZXgrKywgMTApO1xuXHRjb25zdCBlcnJTdGF0ZSA9IHVzZVN0YXRlKCk7XG5cdHN0YXRlLl92YWx1ZSA9IGNiO1xuXHRpZiAoIWN1cnJlbnRDb21wb25lbnQuY29tcG9uZW50RGlkQ2F0Y2gpIHtcblx0XHRjdXJyZW50Q29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoID0gZXJyID0+IHtcblx0XHRcdGlmIChzdGF0ZS5fdmFsdWUpIHN0YXRlLl92YWx1ZShlcnIpO1xuXHRcdFx0ZXJyU3RhdGVbMV0oZXJyKTtcblx0XHR9O1xuXHR9XG5cdHJldHVybiBbXG5cdFx0ZXJyU3RhdGVbMF0sXG5cdFx0KCkgPT4ge1xuXHRcdFx0ZXJyU3RhdGVbMV0odW5kZWZpbmVkKTtcblx0XHR9XG5cdF07XG59XG5cbi8qKlxuICogQWZ0ZXIgcGFpbnQgZWZmZWN0cyBjb25zdW1lci5cbiAqL1xuZnVuY3Rpb24gZmx1c2hBZnRlclBhaW50RWZmZWN0cygpIHtcblx0bGV0IGNvbXBvbmVudDtcblx0d2hpbGUgKChjb21wb25lbnQgPSBhZnRlclBhaW50RWZmZWN0cy5zaGlmdCgpKSkge1xuXHRcdGlmICghY29tcG9uZW50Ll9wYXJlbnREb20pIGNvbnRpbnVlO1xuXHRcdHRyeSB7XG5cdFx0XHRjb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMuZm9yRWFjaChpbnZva2VDbGVhbnVwKTtcblx0XHRcdGNvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cy5mb3JFYWNoKGludm9rZUVmZmVjdCk7XG5cdFx0XHRjb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMgPSBbXTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMgPSBbXTtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgY29tcG9uZW50Ll92bm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmxldCBIQVNfUkFGID0gdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PSAnZnVuY3Rpb24nO1xuXG4vKipcbiAqIFNjaGVkdWxlIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgYnJvd3NlciBoYXMgYSBjaGFuY2UgdG8gcGFpbnQgYSBuZXcgZnJhbWUuXG4gKiBEbyB0aGlzIGJ5IGNvbWJpbmluZyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKHJBRikgKyBzZXRUaW1lb3V0IHRvIGludm9rZSBhIGNhbGxiYWNrIGFmdGVyXG4gKiB0aGUgbmV4dCBicm93c2VyIGZyYW1lLlxuICpcbiAqIEFsc28sIHNjaGVkdWxlIGEgdGltZW91dCBpbiBwYXJhbGxlbCB0byB0aGUgdGhlIHJBRiB0byBlbnN1cmUgdGhlIGNhbGxiYWNrIGlzIGludm9rZWRcbiAqIGV2ZW4gaWYgUkFGIGRvZXNuJ3QgZmlyZSAoZm9yIGV4YW1wbGUgaWYgdGhlIGJyb3dzZXIgdGFiIGlzIG5vdCB2aXNpYmxlKVxuICpcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gYWZ0ZXJOZXh0RnJhbWUoY2FsbGJhY2spIHtcblx0Y29uc3QgZG9uZSA9ICgpID0+IHtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0aWYgKEhBU19SQUYpIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG5cdFx0c2V0VGltZW91dChjYWxsYmFjayk7XG5cdH07XG5cdGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KGRvbmUsIFJBRl9USU1FT1VUKTtcblxuXHRsZXQgcmFmO1xuXHRpZiAoSEFTX1JBRikge1xuXHRcdHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShkb25lKTtcblx0fVxufVxuXG4vLyBOb3RlOiBpZiBzb21lb25lIHVzZWQgb3B0aW9ucy5kZWJvdW5jZVJlbmRlcmluZyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSxcbi8vIHRoZW4gZWZmZWN0cyB3aWxsIEFMV0FZUyBydW4gb24gdGhlIE5FWFQgZnJhbWUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBvbmUsIGluY3VycmluZyBhIH4xNm1zIGRlbGF5LlxuLy8gUGVyaGFwcyB0aGlzIGlzIG5vdCBzdWNoIGEgYmlnIGRlYWwuXG4vKipcbiAqIFNjaGVkdWxlIGFmdGVyUGFpbnRFZmZlY3RzIGZsdXNoIGFmdGVyIHRoZSBicm93c2VyIHBhaW50c1xuICogQHBhcmFtIHtudW1iZXJ9IG5ld1F1ZXVlTGVuZ3RoXG4gKi9cbmZ1bmN0aW9uIGFmdGVyUGFpbnQobmV3UXVldWVMZW5ndGgpIHtcblx0aWYgKG5ld1F1ZXVlTGVuZ3RoID09PSAxIHx8IHByZXZSYWYgIT09IG9wdGlvbnMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG5cdFx0cHJldlJhZiA9IG9wdGlvbnMucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXHRcdChwcmV2UmFmIHx8IGFmdGVyTmV4dEZyYW1lKShmbHVzaEFmdGVyUGFpbnRFZmZlY3RzKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuRWZmZWN0SG9va1N0YXRlfSBob29rXG4gKi9cbmZ1bmN0aW9uIGludm9rZUNsZWFudXAoaG9vaykge1xuXHQvLyBBIGhvb2sgY2xlYW51cCBjYW4gaW50cm9kdWNlIGEgY2FsbCB0byByZW5kZXIgd2hpY2ggY3JlYXRlcyBhIG5ldyByb290LCB0aGlzIHdpbGwgY2FsbCBvcHRpb25zLnZub2RlXG5cdC8vIGFuZCBtb3ZlIHRoZSBjdXJyZW50Q29tcG9uZW50IGF3YXkuXG5cdGNvbnN0IGNvbXAgPSBjdXJyZW50Q29tcG9uZW50O1xuXHRsZXQgY2xlYW51cCA9IGhvb2suX2NsZWFudXA7XG5cdGlmICh0eXBlb2YgY2xlYW51cCA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0aG9vay5fY2xlYW51cCA9IHVuZGVmaW5lZDtcblx0XHRjbGVhbnVwKCk7XG5cdH1cblx0Y3VycmVudENvbXBvbmVudCA9IGNvbXA7XG59XG5cbi8qKlxuICogSW52b2tlIGEgSG9vaydzIGVmZmVjdFxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3RIb29rU3RhdGV9IGhvb2tcbiAqL1xuZnVuY3Rpb24gaW52b2tlRWZmZWN0KGhvb2spIHtcblx0Ly8gQSBob29rIGNhbGwgY2FuIGludHJvZHVjZSBhIGNhbGwgdG8gcmVuZGVyIHdoaWNoIGNyZWF0ZXMgYSBuZXcgcm9vdCwgdGhpcyB3aWxsIGNhbGwgb3B0aW9ucy52bm9kZVxuXHQvLyBhbmQgbW92ZSB0aGUgY3VycmVudENvbXBvbmVudCBhd2F5LlxuXHRjb25zdCBjb21wID0gY3VycmVudENvbXBvbmVudDtcblx0aG9vay5fY2xlYW51cCA9IGhvb2suX3ZhbHVlKCk7XG5cdGN1cnJlbnRDb21wb25lbnQgPSBjb21wO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IG9sZEFyZ3NcbiAqIEBwYXJhbSB7YW55W119IG5ld0FyZ3NcbiAqL1xuZnVuY3Rpb24gYXJnc0NoYW5nZWQob2xkQXJncywgbmV3QXJncykge1xuXHRyZXR1cm4gKFxuXHRcdCFvbGRBcmdzIHx8XG5cdFx0b2xkQXJncy5sZW5ndGggIT09IG5ld0FyZ3MubGVuZ3RoIHx8XG5cdFx0bmV3QXJncy5zb21lKChhcmcsIGluZGV4KSA9PiBhcmcgIT09IG9sZEFyZ3NbaW5kZXhdKVxuXHQpO1xufVxuXG5mdW5jdGlvbiBpbnZva2VPclJldHVybihhcmcsIGYpIHtcblx0cmV0dXJuIHR5cGVvZiBmID09ICdmdW5jdGlvbicgPyBmKGFyZykgOiBmO1xufVxuIiwiLyoqXG4gKiBBc3NpZ24gcHJvcGVydGllcyBmcm9tIGBwcm9wc2AgdG8gYG9iamBcbiAqIEB0ZW1wbGF0ZSBPLCBQIFRoZSBvYmogYW5kIHByb3BzIHR5cGVzXG4gKiBAcGFyYW0ge099IG9iaiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0b1xuICogQHBhcmFtIHtQfSBwcm9wcyBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcmV0dXJucyB7TyAmIFB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24ob2JqLCBwcm9wcykge1xuXHRmb3IgKGxldCBpIGluIHByb3BzKSBvYmpbaV0gPSBwcm9wc1tpXTtcblx0cmV0dXJuIC8qKiBAdHlwZSB7TyAmIFB9ICovIChvYmopO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byBvYmplY3RzIGhhdmUgYSBkaWZmZXJlbnQgc2hhcGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBhXG4gKiBAcGFyYW0ge29iamVjdH0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93RGlmZmVycyhhLCBiKSB7XG5cdGZvciAobGV0IGkgaW4gYSkgaWYgKGkgIT09ICdfX3NvdXJjZScgJiYgIShpIGluIGIpKSByZXR1cm4gdHJ1ZTtcblx0Zm9yIChsZXQgaSBpbiBiKSBpZiAoaSAhPT0gJ19fc291cmNlJyAmJiBhW2ldICE9PSBiW2ldKSByZXR1cm4gdHJ1ZTtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG5cdGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuXHRpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyBzaGFsbG93RGlmZmVycyB9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogQ29tcG9uZW50IGNsYXNzIHdpdGggYSBwcmVkZWZpbmVkIGBzaG91bGRDb21wb25lbnRVcGRhdGVgIGltcGxlbWVudGF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQdXJlQ29tcG9uZW50KHApIHtcblx0dGhpcy5wcm9wcyA9IHA7XG59XG5QdXJlQ29tcG9uZW50LnByb3RvdHlwZSA9IG5ldyBDb21wb25lbnQoKTtcbi8vIFNvbWUgdGhpcmQtcGFydHkgbGlicmFyaWVzIGNoZWNrIGlmIHRoaXMgcHJvcGVydHkgaXMgcHJlc2VudFxuUHVyZUNvbXBvbmVudC5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSB0cnVlO1xuUHVyZUNvbXBvbmVudC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24ocHJvcHMsIHN0YXRlKSB7XG5cdHJldHVybiBzaGFsbG93RGlmZmVycyh0aGlzLnByb3BzLCBwcm9wcykgfHwgc2hhbGxvd0RpZmZlcnModGhpcy5zdGF0ZSwgc3RhdGUpO1xufTtcbiIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgc2hhbGxvd0RpZmZlcnMgfSBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIE1lbW9pemUgYSBjb21wb25lbnQsIHNvIHRoYXQgaXQgb25seSB1cGRhdGVzIHdoZW4gdGhlIHByb3BzIGFjdHVhbGx5IGhhdmVcbiAqIGNoYW5nZWQuIFRoaXMgd2FzIHByZXZpb3VzbHkga25vd24gYXMgYFJlYWN0LnB1cmVgLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5GdW5jdGlvbkNvbXBvbmVudH0gYyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICogQHBhcmFtIHsocHJldjogb2JqZWN0LCBuZXh0OiBvYmplY3QpID0+IGJvb2xlYW59IFtjb21wYXJlcl0gQ3VzdG9tIGVxdWFsaXR5IGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuRnVuY3Rpb25Db21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZW1vKGMsIGNvbXBhcmVyKSB7XG5cdGZ1bmN0aW9uIHNob3VsZFVwZGF0ZShuZXh0UHJvcHMpIHtcblx0XHRsZXQgcmVmID0gdGhpcy5wcm9wcy5yZWY7XG5cdFx0bGV0IHVwZGF0ZVJlZiA9IHJlZiA9PSBuZXh0UHJvcHMucmVmO1xuXHRcdGlmICghdXBkYXRlUmVmICYmIHJlZikge1xuXHRcdFx0cmVmLmNhbGwgPyByZWYobnVsbCkgOiAocmVmLmN1cnJlbnQgPSBudWxsKTtcblx0XHR9XG5cblx0XHRpZiAoIWNvbXBhcmVyKSB7XG5cdFx0XHRyZXR1cm4gc2hhbGxvd0RpZmZlcnModGhpcy5wcm9wcywgbmV4dFByb3BzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gIWNvbXBhcmVyKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgIXVwZGF0ZVJlZjtcblx0fVxuXG5cdGZ1bmN0aW9uIE1lbW9lZChwcm9wcykge1xuXHRcdHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gc2hvdWxkVXBkYXRlO1xuXHRcdHJldHVybiBjcmVhdGVFbGVtZW50KGMsIHByb3BzKTtcblx0fVxuXHRNZW1vZWQuZGlzcGxheU5hbWUgPSAnTWVtbygnICsgKGMuZGlzcGxheU5hbWUgfHwgYy5uYW1lKSArICcpJztcblx0TWVtb2VkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0gdHJ1ZTtcblx0TWVtb2VkLl9mb3J3YXJkZWQgPSB0cnVlO1xuXHRyZXR1cm4gTWVtb2VkO1xufVxuIiwiaW1wb3J0IHsgb3B0aW9ucyB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICcuL3V0aWwnO1xuXG5sZXQgb2xkRGlmZkhvb2sgPSBvcHRpb25zLl9kaWZmO1xub3B0aW9ucy5fZGlmZiA9IHZub2RlID0+IHtcblx0aWYgKHZub2RlLnR5cGUgJiYgdm5vZGUudHlwZS5fZm9yd2FyZGVkICYmIHZub2RlLnJlZikge1xuXHRcdHZub2RlLnByb3BzLnJlZiA9IHZub2RlLnJlZjtcblx0XHR2bm9kZS5yZWYgPSBudWxsO1xuXHR9XG5cdGlmIChvbGREaWZmSG9vaykgb2xkRGlmZkhvb2sodm5vZGUpO1xufTtcblxuZXhwb3J0IGNvbnN0IFJFQUNUX0ZPUldBUkRfU1lNQk9MID1cblx0KHR5cGVvZiBTeW1ib2wgIT0gJ3VuZGVmaW5lZCcgJiZcblx0XHRTeW1ib2wuZm9yICYmXG5cdFx0U3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKSkgfHxcblx0MHhmNDc7XG5cbi8qKlxuICogUGFzcyByZWYgZG93biB0byBhIGNoaWxkLiBUaGlzIGlzIG1haW5seSB1c2VkIGluIGxpYnJhcmllcyB3aXRoIEhPQ3MgdGhhdFxuICogd3JhcCBjb21wb25lbnRzLiBVc2luZyBgZm9yd2FyZFJlZmAgdGhlcmUgaXMgYW4gZWFzeSB3YXkgdG8gZ2V0IGEgcmVmZXJlbmNlXG4gKiBvZiB0aGUgd3JhcHBlZCBjb21wb25lbnQgaW5zdGVhZCBvZiBvbmUgb2YgdGhlIHdyYXBwZXIgaXRzZWxmLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5Gb3J3YXJkRm59IGZuXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuRnVuY3Rpb25Db21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkUmVmKGZuKSB7XG5cdGZ1bmN0aW9uIEZvcndhcmRlZChwcm9wcykge1xuXHRcdGxldCBjbG9uZSA9IGFzc2lnbih7fSwgcHJvcHMpO1xuXHRcdGRlbGV0ZSBjbG9uZS5yZWY7XG5cdFx0cmV0dXJuIGZuKGNsb25lLCBwcm9wcy5yZWYgfHwgbnVsbCk7XG5cdH1cblxuXHQvLyBtb2J4LXJlYWN0IGNoZWNrcyBmb3IgdGhpcyBiZWluZyBwcmVzZW50XG5cdEZvcndhcmRlZC4kJHR5cGVvZiA9IFJFQUNUX0ZPUldBUkRfU1lNQk9MO1xuXHQvLyBtb2J4LXJlYWN0IGhlYXZpbHkgcmVsaWVzIG9uIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG5cdC8vIEl0IGV4cGVjdHMgYW4gb2JqZWN0IGhlcmUgd2l0aCBhIGByZW5kZXJgIHByb3BlcnR5LFxuXHQvLyBhbmQgcHJvdG90eXBlLnJlbmRlciB3aWxsIGZhaWwuIFdpdGhvdXQgdGhpc1xuXHQvLyBtb2J4LXJlYWN0IHRocm93cy5cblx0Rm9yd2FyZGVkLnJlbmRlciA9IEZvcndhcmRlZDtcblxuXHRGb3J3YXJkZWQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSBGb3J3YXJkZWQuX2ZvcndhcmRlZCA9IHRydWU7XG5cdEZvcndhcmRlZC5kaXNwbGF5TmFtZSA9ICdGb3J3YXJkUmVmKCcgKyAoZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSkgKyAnKSc7XG5cdHJldHVybiBGb3J3YXJkZWQ7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQsIG9wdGlvbnMsIEZyYWdtZW50IH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IG9sZENhdGNoRXJyb3IgPSBvcHRpb25zLl9jYXRjaEVycm9yO1xub3B0aW9ucy5fY2F0Y2hFcnJvciA9IGZ1bmN0aW9uKGVycm9yLCBuZXdWTm9kZSwgb2xkVk5vZGUsIGVycm9ySW5mbykge1xuXHRpZiAoZXJyb3IudGhlbikge1xuXHRcdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xuXHRcdGxldCBjb21wb25lbnQ7XG5cdFx0bGV0IHZub2RlID0gbmV3Vk5vZGU7XG5cblx0XHRmb3IgKDsgKHZub2RlID0gdm5vZGUuX3BhcmVudCk7ICkge1xuXHRcdFx0aWYgKChjb21wb25lbnQgPSB2bm9kZS5fY29tcG9uZW50KSAmJiBjb21wb25lbnQuX2NoaWxkRGlkU3VzcGVuZCkge1xuXHRcdFx0XHRpZiAobmV3Vk5vZGUuX2RvbSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2RvbSA9IG9sZFZOb2RlLl9kb207XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NoaWxkcmVuID0gb2xkVk5vZGUuX2NoaWxkcmVuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIERvbid0IGNhbGwgb2xkQ2F0Y2hFcnJvciBpZiB3ZSBmb3VuZCBhIFN1c3BlbnNlXG5cdFx0XHRcdHJldHVybiBjb21wb25lbnQuX2NoaWxkRGlkU3VzcGVuZChlcnJvciwgbmV3Vk5vZGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRvbGRDYXRjaEVycm9yKGVycm9yLCBuZXdWTm9kZSwgb2xkVk5vZGUsIGVycm9ySW5mbyk7XG59O1xuXG5jb25zdCBvbGRVbm1vdW50ID0gb3B0aW9ucy51bm1vdW50O1xub3B0aW9ucy51bm1vdW50ID0gZnVuY3Rpb24odm5vZGUpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9ICovXG5cdGNvbnN0IGNvbXBvbmVudCA9IHZub2RlLl9jb21wb25lbnQ7XG5cdGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50Ll9vblJlc29sdmUpIHtcblx0XHRjb21wb25lbnQuX29uUmVzb2x2ZSgpO1xuXHR9XG5cblx0Ly8gaWYgdGhlIGNvbXBvbmVudCBpcyBzdGlsbCBoeWRyYXRpbmdcblx0Ly8gbW9zdCBsaWtlbHkgaXQgaXMgYmVjYXVzZSB0aGUgY29tcG9uZW50IGlzIHN1c3BlbmRlZFxuXHQvLyB3ZSBzZXQgdGhlIHZub2RlLnR5cGUgYXMgYG51bGxgIHNvIHRoYXQgaXQgaXMgbm90IGEgdHlwZW9mIGZ1bmN0aW9uXG5cdC8vIHNvIHRoZSB1bm1vdW50IHdpbGwgcmVtb3ZlIHRoZSB2bm9kZS5fZG9tXG5cdGlmIChjb21wb25lbnQgJiYgdm5vZGUuX2h5ZHJhdGluZyA9PT0gdHJ1ZSkge1xuXHRcdHZub2RlLnR5cGUgPSBudWxsO1xuXHR9XG5cblx0aWYgKG9sZFVubW91bnQpIG9sZFVubW91bnQodm5vZGUpO1xufTtcblxuZnVuY3Rpb24gZGV0YWNoZWRDbG9uZSh2bm9kZSwgZGV0YWNoZWRQYXJlbnQsIHBhcmVudERvbSkge1xuXHRpZiAodm5vZGUpIHtcblx0XHRpZiAodm5vZGUuX2NvbXBvbmVudCAmJiB2bm9kZS5fY29tcG9uZW50Ll9faG9va3MpIHtcblx0XHRcdHZub2RlLl9jb21wb25lbnQuX19ob29rcy5fbGlzdC5mb3JFYWNoKGVmZmVjdCA9PiB7XG5cdFx0XHRcdGlmICh0eXBlb2YgZWZmZWN0Ll9jbGVhbnVwID09ICdmdW5jdGlvbicpIGVmZmVjdC5fY2xlYW51cCgpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHZub2RlLl9jb21wb25lbnQuX19ob29rcyA9IG51bGw7XG5cdFx0fVxuXG5cdFx0dm5vZGUgPSBhc3NpZ24oe30sIHZub2RlKTtcblx0XHRpZiAodm5vZGUuX2NvbXBvbmVudCAhPSBudWxsKSB7XG5cdFx0XHRpZiAodm5vZGUuX2NvbXBvbmVudC5fcGFyZW50RG9tID09PSBwYXJlbnREb20pIHtcblx0XHRcdFx0dm5vZGUuX2NvbXBvbmVudC5fcGFyZW50RG9tID0gZGV0YWNoZWRQYXJlbnQ7XG5cdFx0XHR9XG5cdFx0XHR2bm9kZS5fY29tcG9uZW50ID0gbnVsbDtcblx0XHR9XG5cblx0XHR2bm9kZS5fY2hpbGRyZW4gPVxuXHRcdFx0dm5vZGUuX2NoaWxkcmVuICYmXG5cdFx0XHR2bm9kZS5fY2hpbGRyZW4ubWFwKGNoaWxkID0+XG5cdFx0XHRcdGRldGFjaGVkQ2xvbmUoY2hpbGQsIGRldGFjaGVkUGFyZW50LCBwYXJlbnREb20pXG5cdFx0XHQpO1xuXHR9XG5cblx0cmV0dXJuIHZub2RlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVPcmlnaW5hbCh2bm9kZSwgZGV0YWNoZWRQYXJlbnQsIG9yaWdpbmFsUGFyZW50KSB7XG5cdGlmICh2bm9kZSkge1xuXHRcdHZub2RlLl9vcmlnaW5hbCA9IG51bGw7XG5cdFx0dm5vZGUuX2NoaWxkcmVuID1cblx0XHRcdHZub2RlLl9jaGlsZHJlbiAmJlxuXHRcdFx0dm5vZGUuX2NoaWxkcmVuLm1hcChjaGlsZCA9PlxuXHRcdFx0XHRyZW1vdmVPcmlnaW5hbChjaGlsZCwgZGV0YWNoZWRQYXJlbnQsIG9yaWdpbmFsUGFyZW50KVxuXHRcdFx0KTtcblxuXHRcdGlmICh2bm9kZS5fY29tcG9uZW50KSB7XG5cdFx0XHRpZiAodm5vZGUuX2NvbXBvbmVudC5fcGFyZW50RG9tID09PSBkZXRhY2hlZFBhcmVudCkge1xuXHRcdFx0XHRpZiAodm5vZGUuX2RvbSkge1xuXHRcdFx0XHRcdG9yaWdpbmFsUGFyZW50Lmluc2VydEJlZm9yZSh2bm9kZS5fZG9tLCB2bm9kZS5fbmV4dERvbSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dm5vZGUuX2NvbXBvbmVudC5fZm9yY2UgPSB0cnVlO1xuXHRcdFx0XHR2bm9kZS5fY29tcG9uZW50Ll9wYXJlbnREb20gPSBvcmlnaW5hbFBhcmVudDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdm5vZGU7XG59XG5cbi8vIGhhdmluZyBjdXN0b20gaW5oZXJpdGFuY2UgaW5zdGVhZCBvZiBhIGNsYXNzIGhlcmUgc2F2ZXMgYSBsb3Qgb2YgYnl0ZXNcbmV4cG9ydCBmdW5jdGlvbiBTdXNwZW5zZSgpIHtcblx0Ly8gd2UgZG8gbm90IGNhbGwgc3VwZXIgaGVyZSB0byBnb2xmIHNvbWUgYnl0ZXMuLi5cblx0dGhpcy5fcGVuZGluZ1N1c3BlbnNpb25Db3VudCA9IDA7XG5cdHRoaXMuX3N1c3BlbmRlcnMgPSBudWxsO1xuXHR0aGlzLl9kZXRhY2hPbk5leHRSZW5kZXIgPSBudWxsO1xufVxuXG4vLyBUaGluZ3Mgd2UgZG8gaGVyZSB0byBzYXZlIHNvbWUgYnl0ZXMgYnV0IGFyZSBub3QgcHJvcGVyIEpTIGluaGVyaXRhbmNlOlxuLy8gLSBjYWxsIGBuZXcgQ29tcG9uZW50KClgIGFzIHRoZSBwcm90b3R5cGVcbi8vIC0gZG8gbm90IHNldCBgU3VzcGVuc2UucHJvdG90eXBlLmNvbnN0cnVjdG9yYCB0byBgU3VzcGVuc2VgXG5TdXNwZW5zZS5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50KCk7XG5cbi8qKlxuICogQHRoaXMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlN1c3BlbnNlQ29tcG9uZW50fVxuICogQHBhcmFtIHtQcm9taXNlfSBwcm9taXNlIFRoZSB0aHJvd24gcHJvbWlzZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZTxhbnksIGFueT59IHN1c3BlbmRpbmdWTm9kZSBUaGUgc3VzcGVuZGluZyBjb21wb25lbnRcbiAqL1xuU3VzcGVuc2UucHJvdG90eXBlLl9jaGlsZERpZFN1c3BlbmQgPSBmdW5jdGlvbihwcm9taXNlLCBzdXNwZW5kaW5nVk5vZGUpIHtcblx0Y29uc3Qgc3VzcGVuZGluZ0NvbXBvbmVudCA9IHN1c3BlbmRpbmdWTm9kZS5fY29tcG9uZW50O1xuXG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuU3VzcGVuc2VDb21wb25lbnR9ICovXG5cdGNvbnN0IGMgPSB0aGlzO1xuXG5cdGlmIChjLl9zdXNwZW5kZXJzID09IG51bGwpIHtcblx0XHRjLl9zdXNwZW5kZXJzID0gW107XG5cdH1cblx0Yy5fc3VzcGVuZGVycy5wdXNoKHN1c3BlbmRpbmdDb21wb25lbnQpO1xuXG5cdGNvbnN0IHJlc29sdmUgPSBzdXNwZW5kZWQoYy5fdm5vZGUpO1xuXG5cdGxldCByZXNvbHZlZCA9IGZhbHNlO1xuXHRjb25zdCBvblJlc29sdmVkID0gKCkgPT4ge1xuXHRcdGlmIChyZXNvbHZlZCkgcmV0dXJuO1xuXG5cdFx0cmVzb2x2ZWQgPSB0cnVlO1xuXHRcdHN1c3BlbmRpbmdDb21wb25lbnQuX29uUmVzb2x2ZSA9IG51bGw7XG5cblx0XHRpZiAocmVzb2x2ZSkge1xuXHRcdFx0cmVzb2x2ZShvblN1c3BlbnNpb25Db21wbGV0ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9uU3VzcGVuc2lvbkNvbXBsZXRlKCk7XG5cdFx0fVxuXHR9O1xuXG5cdHN1c3BlbmRpbmdDb21wb25lbnQuX29uUmVzb2x2ZSA9IG9uUmVzb2x2ZWQ7XG5cblx0Y29uc3Qgb25TdXNwZW5zaW9uQ29tcGxldGUgPSAoKSA9PiB7XG5cdFx0aWYgKCEtLWMuX3BlbmRpbmdTdXNwZW5zaW9uQ291bnQpIHtcblx0XHRcdC8vIElmIHRoZSBzdXNwZW5zaW9uIHdhcyBkdXJpbmcgaHlkcmF0aW9uIHdlIGRvbid0IG5lZWQgdG8gcmVzdG9yZSB0aGVcblx0XHRcdC8vIHN1c3BlbmRlZCBjaGlsZHJlbiBpbnRvIHRoZSBfY2hpbGRyZW4gYXJyYXlcblx0XHRcdGlmIChjLnN0YXRlLl9zdXNwZW5kZWQpIHtcblx0XHRcdFx0Y29uc3Qgc3VzcGVuZGVkVk5vZGUgPSBjLnN0YXRlLl9zdXNwZW5kZWQ7XG5cdFx0XHRcdGMuX3Zub2RlLl9jaGlsZHJlblswXSA9IHJlbW92ZU9yaWdpbmFsKFxuXHRcdFx0XHRcdHN1c3BlbmRlZFZOb2RlLFxuXHRcdFx0XHRcdHN1c3BlbmRlZFZOb2RlLl9jb21wb25lbnQuX3BhcmVudERvbSxcblx0XHRcdFx0XHRzdXNwZW5kZWRWTm9kZS5fY29tcG9uZW50Ll9vcmlnaW5hbFBhcmVudERvbVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRjLnNldFN0YXRlKHsgX3N1c3BlbmRlZDogKGMuX2RldGFjaE9uTmV4dFJlbmRlciA9IG51bGwpIH0pO1xuXG5cdFx0XHRsZXQgc3VzcGVuZGVkO1xuXHRcdFx0d2hpbGUgKChzdXNwZW5kZWQgPSBjLl9zdXNwZW5kZXJzLnBvcCgpKSkge1xuXHRcdFx0XHRzdXNwZW5kZWQuZm9yY2VVcGRhdGUoKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFdlIGRvIG5vdCBzZXQgYHN1c3BlbmRlZDogdHJ1ZWAgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHdlIHdhbnQgdGhlIGFjdHVhbCBtYXJrdXBcblx0ICogdG8gcmVtYWluIG9uIHNjcmVlbiBhbmQgaHlkcmF0ZSBpdCB3aGVuIHRoZSBzdXNwZW5zZSBhY3R1YWxseSBnZXRzIHJlc29sdmVkLlxuXHQgKiBXaGlsZSBpbiBub24taHlkcmF0aW9uIGNhc2VzIHRoZSB1c3VhbCBmYWxsYmFjayAtPiBjb21wb25lbnQgZmxvdyB3b3VsZCBvY2NvdXIuXG5cdCAqL1xuXHRjb25zdCB3YXNIeWRyYXRpbmcgPSBzdXNwZW5kaW5nVk5vZGUuX2h5ZHJhdGluZyA9PT0gdHJ1ZTtcblx0aWYgKCFjLl9wZW5kaW5nU3VzcGVuc2lvbkNvdW50KysgJiYgIXdhc0h5ZHJhdGluZykge1xuXHRcdGMuc2V0U3RhdGUoeyBfc3VzcGVuZGVkOiAoYy5fZGV0YWNoT25OZXh0UmVuZGVyID0gYy5fdm5vZGUuX2NoaWxkcmVuWzBdKSB9KTtcblx0fVxuXHRwcm9taXNlLnRoZW4ob25SZXNvbHZlZCwgb25SZXNvbHZlZCk7XG59O1xuXG5TdXNwZW5zZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbigpIHtcblx0dGhpcy5fc3VzcGVuZGVycyA9IFtdO1xufTtcblxuLyoqXG4gKiBAdGhpcyB7aW1wb3J0KCcuL2ludGVybmFsJykuU3VzcGVuc2VDb21wb25lbnR9XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlN1c3BlbnNlQ29tcG9uZW50W1wicHJvcHNcIl19IHByb3BzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlN1c3BlbnNlU3RhdGV9IHN0YXRlXG4gKi9cblN1c3BlbnNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihwcm9wcywgc3RhdGUpIHtcblx0aWYgKHRoaXMuX2RldGFjaE9uTmV4dFJlbmRlcikge1xuXHRcdC8vIFdoZW4gdGhlIFN1c3BlbnNlJ3MgX3Zub2RlIHdhcyBjcmVhdGVkIGJ5IGEgY2FsbCB0byBjcmVhdGVWTm9kZVxuXHRcdC8vIChpLmUuIGR1ZSB0byBhIHNldFN0YXRlIGZ1cnRoZXIgdXAgaW4gdGhlIHRyZWUpXG5cdFx0Ly8gaXQncyBfY2hpbGRyZW4gcHJvcCBpcyBudWxsLCBpbiB0aGlzIGNhc2Ugd2UgXCJmb3JnZXRcIiBhYm91dCB0aGUgcGFya2VkIHZub2RlcyB0byBkZXRhY2hcblx0XHRpZiAodGhpcy5fdm5vZGUuX2NoaWxkcmVuKSB7XG5cdFx0XHRjb25zdCBkZXRhY2hlZFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0Y29uc3QgZGV0YWNoZWRDb21wb25lbnQgPSB0aGlzLl92bm9kZS5fY2hpbGRyZW5bMF0uX2NvbXBvbmVudDtcblx0XHRcdHRoaXMuX3Zub2RlLl9jaGlsZHJlblswXSA9IGRldGFjaGVkQ2xvbmUoXG5cdFx0XHRcdHRoaXMuX2RldGFjaE9uTmV4dFJlbmRlcixcblx0XHRcdFx0ZGV0YWNoZWRQYXJlbnQsXG5cdFx0XHRcdChkZXRhY2hlZENvbXBvbmVudC5fb3JpZ2luYWxQYXJlbnREb20gPSBkZXRhY2hlZENvbXBvbmVudC5fcGFyZW50RG9tKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHR0aGlzLl9kZXRhY2hPbk5leHRSZW5kZXIgPSBudWxsO1xuXHR9XG5cblx0Ly8gV3JhcCBmYWxsYmFjayB0cmVlIGluIGEgVk5vZGUgdGhhdCBwcmV2ZW50cyBpdHNlbGYgZnJvbSBiZWluZyBtYXJrZWQgYXMgYWJvcnRpbmcgbWlkLWh5ZHJhdGlvbjpcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gKi9cblx0Y29uc3QgZmFsbGJhY2sgPVxuXHRcdHN0YXRlLl9zdXNwZW5kZWQgJiYgY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgcHJvcHMuZmFsbGJhY2spO1xuXHRpZiAoZmFsbGJhY2spIGZhbGxiYWNrLl9oeWRyYXRpbmcgPSBudWxsO1xuXG5cdHJldHVybiBbXG5cdFx0Y3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgc3RhdGUuX3N1c3BlbmRlZCA/IG51bGwgOiBwcm9wcy5jaGlsZHJlbiksXG5cdFx0ZmFsbGJhY2tcblx0XTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGFuZCBjYWxscyB0aGUgcGFyZW50IGNvbXBvbmVudCdzIF9zdXNwZW5kZWQgbWV0aG9kLCBwYXNzaW5nIGluIHRoZVxuICogc3VzcGVuZGVkIHZub2RlLiBUaGlzIGlzIGEgd2F5IGZvciBhIHBhcmVudCAoZS5nLiBTdXNwZW5zZUxpc3QpIHRvIGdldCBub3RpZmllZFxuICogdGhhdCBvbmUgb2YgaXRzIGNoaWxkcmVuL2Rlc2NlbmRhbnRzIHN1c3BlbmRlZC5cbiAqXG4gKiBUaGUgcGFyZW50IE1BWSByZXR1cm4gYSBjYWxsYmFjay4gVGhlIGNhbGxiYWNrIHdpbGwgZ2V0IGNhbGxlZCB3aGVuIHRoZVxuICogc3VzcGVuc2lvbiByZXNvbHZlcywgbm90aWZ5aW5nIHRoZSBwYXJlbnQgb2YgdGhlIGZhY3QuXG4gKiBNb3Jlb3ZlciwgdGhlIGNhbGxiYWNrIGdldHMgZnVuY3Rpb24gYHVuc3VzcGVuZGAgYXMgYSBwYXJhbWV0ZXIuIFRoZSByZXNvbHZlZFxuICogY2hpbGQgZGVzY2VuZGFudCB3aWxsIG5vdCBhY3R1YWxseSBnZXQgdW5zdXNwZW5kZWQgdW50aWwgYHVuc3VzcGVuZGAgZ2V0cyBjYWxsZWQuXG4gKiBUaGlzIGlzIGEgd2F5IGZvciB0aGUgcGFyZW50IHRvIGRlbGF5IHVuc3VzcGVuZGluZy5cbiAqXG4gKiBJZiB0aGUgcGFyZW50IGRvZXMgbm90IHJldHVybiBhIGNhbGxiYWNrIHRoZW4gdGhlIHJlc29sdmVkIHZub2RlXG4gKiBnZXRzIHVuc3VzcGVuZGVkIGltbWVkaWF0ZWx5IHdoZW4gaXQgcmVzb2x2ZXMuXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqIEByZXR1cm5zIHsoKHVuc3VzcGVuZDogKCkgPT4gdm9pZCkgPT4gdm9pZCk/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VzcGVuZGVkKHZub2RlKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xuXHRsZXQgY29tcG9uZW50ID0gdm5vZGUuX3BhcmVudC5fY29tcG9uZW50O1xuXHRyZXR1cm4gY29tcG9uZW50ICYmIGNvbXBvbmVudC5fc3VzcGVuZGVkICYmIGNvbXBvbmVudC5fc3VzcGVuZGVkKHZub2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxhenkobG9hZGVyKSB7XG5cdGxldCBwcm9tO1xuXHRsZXQgY29tcG9uZW50O1xuXHRsZXQgZXJyb3I7XG5cblx0ZnVuY3Rpb24gTGF6eShwcm9wcykge1xuXHRcdGlmICghcHJvbSkge1xuXHRcdFx0cHJvbSA9IGxvYWRlcigpO1xuXHRcdFx0cHJvbS50aGVuKFxuXHRcdFx0XHRleHBvcnRzID0+IHtcblx0XHRcdFx0XHRjb21wb25lbnQgPSBleHBvcnRzLmRlZmF1bHQgfHwgZXhwb3J0cztcblx0XHRcdFx0fSxcblx0XHRcdFx0ZSA9PiB7XG5cdFx0XHRcdFx0ZXJyb3IgPSBlO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXG5cdFx0aWYgKCFjb21wb25lbnQpIHtcblx0XHRcdHRocm93IHByb207XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG5cdH1cblxuXHRMYXp5LmRpc3BsYXlOYW1lID0gJ0xhenknO1xuXHRMYXp5Ll9mb3J3YXJkZWQgPSB0cnVlO1xuXHRyZXR1cm4gTGF6eTtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgdG9DaGlsZEFycmF5IH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IHN1c3BlbmRlZCB9IGZyb20gJy4vc3VzcGVuc2UuanMnO1xuXG4vLyBJbmRleGVzIHRvIGxpbmtlZCBsaXN0IG5vZGVzIChub2RlcyBhcmUgc3RvcmVkIGFzIGFycmF5cyB0byBzYXZlIGJ5dGVzKS5cbmNvbnN0IFNVU1BFTkRFRF9DT1VOVCA9IDA7XG5jb25zdCBSRVNPTFZFRF9DT1VOVCA9IDE7XG5jb25zdCBORVhUX05PREUgPSAyO1xuXG4vLyBIYXZpbmcgY3VzdG9tIGluaGVyaXRhbmNlIGluc3RlYWQgb2YgYSBjbGFzcyBoZXJlIHNhdmVzIGEgbG90IG9mIGJ5dGVzLlxuZXhwb3J0IGZ1bmN0aW9uIFN1c3BlbnNlTGlzdCgpIHtcblx0dGhpcy5fbmV4dCA9IG51bGw7XG5cdHRoaXMuX21hcCA9IG51bGw7XG59XG5cbi8vIE1hcmsgb25lIG9mIGNoaWxkJ3MgZWFybGllciBzdXNwZW5zaW9ucyBhcyByZXNvbHZlZC5cbi8vIFNvbWUgcGVuZGluZyBjYWxsYmFja3MgbWF5IGJlY29tZSBjYWxsYWJsZSBkdWUgdG8gdGhpc1xuLy8gKGUuZy4gdGhlIGxhc3Qgc3VzcGVuZGVkIGRlc2NlbmRhbnQgZ2V0cyByZXNvbHZlZCB3aGVuXG4vLyByZXZlYWxPcmRlciA9PT0gJ3RvZ2V0aGVyJykuIFByb2Nlc3MgdGhvc2UgY2FsbGJhY2tzIGFzIHdlbGwuXG5jb25zdCByZXNvbHZlID0gKGxpc3QsIGNoaWxkLCBub2RlKSA9PiB7XG5cdGlmICgrK25vZGVbUkVTT0xWRURfQ09VTlRdID09PSBub2RlW1NVU1BFTkRFRF9DT1VOVF0pIHtcblx0XHQvLyBUaGUgbnVtYmVyIGEgY2hpbGQgKG9yIGFueSBvZiBpdHMgZGVzY2VuZGFudHMpIGhhcyBiZWVuIHN1c3BlbmRlZFxuXHRcdC8vIG1hdGNoZXMgdGhlIG51bWJlciBvZiB0aW1lcyBpdCdzIGJlZW4gcmVzb2x2ZWQuIFRoZXJlZm9yZSB3ZVxuXHRcdC8vIG1hcmsgdGhlIGNoaWxkIGFzIGNvbXBsZXRlbHkgcmVzb2x2ZWQgYnkgZGVsZXRpbmcgaXQgZnJvbSAuX21hcC5cblx0XHQvLyBUaGlzIGlzIHVzZWQgdG8gZmlndXJlIG91dCB3aGVuICphbGwqIGNoaWxkcmVuIGhhdmUgYmVlbiBjb21wbGV0ZWx5XG5cdFx0Ly8gcmVzb2x2ZWQgd2hlbiByZXZlYWxPcmRlciBpcyAndG9nZXRoZXInLlxuXHRcdGxpc3QuX21hcC5kZWxldGUoY2hpbGQpO1xuXHR9XG5cblx0Ly8gSWYgcmV2ZWFsT3JkZXIgaXMgZmFsc3kgdGhlbiB3ZSBjYW4gZG8gYW4gZWFybHkgZXhpdCwgYXMgdGhlXG5cdC8vIGNhbGxiYWNrcyB3b24ndCBnZXQgcXVldWVkIGluIHRoZSBub2RlIGFueXdheS5cblx0Ly8gSWYgcmV2ZWFsT3JkZXIgaXMgJ3RvZ2V0aGVyJyB0aGVuIGFsc28gZG8gYW4gZWFybHkgZXhpdFxuXHQvLyBpZiBhbGwgc3VzcGVuZGVkIGRlc2NlbmRhbnRzIGhhdmUgbm90IHlldCBiZWVuIHJlc29sdmVkLlxuXHRpZiAoXG5cdFx0IWxpc3QucHJvcHMucmV2ZWFsT3JkZXIgfHxcblx0XHQobGlzdC5wcm9wcy5yZXZlYWxPcmRlclswXSA9PT0gJ3QnICYmIGxpc3QuX21hcC5zaXplKVxuXHQpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBXYWxrIHRoZSBjdXJyZW50bHkgc3VzcGVuZGVkIGNoaWxkcmVuIGluIG9yZGVyLCBjYWxsaW5nIHRoZWlyXG5cdC8vIHN0b3JlZCBjYWxsYmFja3Mgb24gdGhlIHdheS4gU3RvcCBpZiB3ZSBlbmNvdW50ZXIgYSBjaGlsZCB0aGF0XG5cdC8vIGhhcyBub3QgYmVlbiBjb21wbGV0ZWx5IHJlc29sdmVkIHlldC5cblx0bm9kZSA9IGxpc3QuX25leHQ7XG5cdHdoaWxlIChub2RlKSB7XG5cdFx0d2hpbGUgKG5vZGUubGVuZ3RoID4gMykge1xuXHRcdFx0bm9kZS5wb3AoKSgpO1xuXHRcdH1cblx0XHRpZiAobm9kZVtSRVNPTFZFRF9DT1VOVF0gPCBub2RlW1NVU1BFTkRFRF9DT1VOVF0pIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRsaXN0Ll9uZXh0ID0gbm9kZSA9IG5vZGVbTkVYVF9OT0RFXTtcblx0fVxufTtcblxuLy8gVGhpbmdzIHdlIGRvIGhlcmUgdG8gc2F2ZSBzb21lIGJ5dGVzIGJ1dCBhcmUgbm90IHByb3BlciBKUyBpbmhlcml0YW5jZTpcbi8vIC0gY2FsbCBgbmV3IENvbXBvbmVudCgpYCBhcyB0aGUgcHJvdG90eXBlXG4vLyAtIGRvIG5vdCBzZXQgYFN1c3BlbnNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvcmAgdG8gYFN1c3BlbnNlYFxuU3VzcGVuc2VMaXN0LnByb3RvdHlwZSA9IG5ldyBDb21wb25lbnQoKTtcblxuU3VzcGVuc2VMaXN0LnByb3RvdHlwZS5fc3VzcGVuZGVkID0gZnVuY3Rpb24oY2hpbGQpIHtcblx0Y29uc3QgbGlzdCA9IHRoaXM7XG5cdGNvbnN0IGRlbGVnYXRlZCA9IHN1c3BlbmRlZChsaXN0Ll92bm9kZSk7XG5cblx0bGV0IG5vZGUgPSBsaXN0Ll9tYXAuZ2V0KGNoaWxkKTtcblx0bm9kZVtTVVNQRU5ERURfQ09VTlRdKys7XG5cblx0cmV0dXJuIHVuc3VzcGVuZCA9PiB7XG5cdFx0Y29uc3Qgd3JhcHBlZFVuc3VzcGVuZCA9ICgpID0+IHtcblx0XHRcdGlmICghbGlzdC5wcm9wcy5yZXZlYWxPcmRlcikge1xuXHRcdFx0XHQvLyBTcGVjaWFsIGNhc2UgdGhlIHVuZGVmaW5lZCAoZmFsc3kpIHJldmVhbE9yZGVyLCBhcyB0aGVyZVxuXHRcdFx0XHQvLyBpcyBubyBuZWVkIHRvIGNvb3JkaW5hdGUgYSBzcGVjaWZpYyBvcmRlciBvciB1bnN1c3BlbmRzLlxuXHRcdFx0XHR1bnN1c3BlbmQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5vZGUucHVzaCh1bnN1c3BlbmQpO1xuXHRcdFx0XHRyZXNvbHZlKGxpc3QsIGNoaWxkLCBub2RlKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmIChkZWxlZ2F0ZWQpIHtcblx0XHRcdGRlbGVnYXRlZCh3cmFwcGVkVW5zdXNwZW5kKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d3JhcHBlZFVuc3VzcGVuZCgpO1xuXHRcdH1cblx0fTtcbn07XG5cblN1c3BlbnNlTGlzdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24ocHJvcHMpIHtcblx0dGhpcy5fbmV4dCA9IG51bGw7XG5cdHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcblxuXHRjb25zdCBjaGlsZHJlbiA9IHRvQ2hpbGRBcnJheShwcm9wcy5jaGlsZHJlbik7XG5cdGlmIChwcm9wcy5yZXZlYWxPcmRlciAmJiBwcm9wcy5yZXZlYWxPcmRlclswXSA9PT0gJ2InKSB7XG5cdFx0Ly8gSWYgb3JkZXIgPT09ICdiYWNrd2FyZHMnIChvciwgd2VsbCwgYW55dGhpbmcgc3RhcnRpbmcgd2l0aCBhICdiJylcblx0XHQvLyB0aGVuIGZsaXAgdGhlIGNoaWxkIGxpc3QgYXJvdW5kIHNvIHRoYXQgdGhlIGxhc3QgY2hpbGQgd2lsbCBiZVxuXHRcdC8vIHRoZSBmaXJzdCBpbiB0aGUgbGlua2VkIGxpc3QuXG5cdFx0Y2hpbGRyZW4ucmV2ZXJzZSgpO1xuXHR9XG5cdC8vIEJ1aWxkIHRoZSBsaW5rZWQgbGlzdC4gSXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBpbiByZXZlcnNlIG9yZGVyXG5cdC8vIHNvIHRoYXQgYF9uZXh0YCBwb2ludHMgdG8gdGhlIGZpcnN0IGxpbmtlZCBsaXN0IG5vZGUgdG8gYmUgcmVzb2x2ZWQuXG5cdGZvciAobGV0IGkgPSBjaGlsZHJlbi5sZW5ndGg7IGktLTsgKSB7XG5cdFx0Ly8gQ3JlYXRlIGEgbmV3IGxpbmtlZCBsaXN0IG5vZGUgYXMgYW4gYXJyYXkgb2YgZm9ybTpcblx0XHQvLyBcdFtzdXNwZW5kZWRfY291bnQsIHJlc29sdmVkX2NvdW50LCBuZXh0X25vZGVdXG5cdFx0Ly8gd2hlcmUgc3VzcGVuZGVkX2NvdW50IGFuZCByZXNvbHZlZF9jb3VudCBhcmUgbnVtZXJpYyBjb3VudGVycyBmb3Jcblx0XHQvLyBrZWVwaW5nIHRyYWNrIGhvdyBtYW55IHRpbWVzIGEgbm9kZSBoYXMgYmVlbiBzdXNwZW5kZWQgYW5kIHJlc29sdmVkLlxuXHRcdC8vXG5cdFx0Ly8gTm90ZSB0aGF0IHN1c3BlbmRlZF9jb3VudCBzdGFydHMgZnJvbSAxIGluc3RlYWQgb2YgMCwgc28gd2UgY2FuIGJsb2NrXG5cdFx0Ly8gcHJvY2Vzc2luZyBjYWxsYmFja3MgdW50aWwgY29tcG9uZW50RGlkTW91bnQgaGFzIGJlZW4gY2FsbGVkLiBJbiBhIHNlbnNlXG5cdFx0Ly8gbm9kZSBpcyBzdXNwZW5kZWQgYXQgbGVhc3QgdW50aWwgY29tcG9uZW50RGlkTW91bnQgZ2V0cyBjYWxsZWQhXG5cdFx0Ly9cblx0XHQvLyBQZW5kaW5nIGNhbGxiYWNrcyBhcmUgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgbm9kZTpcblx0XHQvLyBcdFtzdXNwZW5kZWRfY291bnQsIHJlc29sdmVkX2NvdW50LCBuZXh0X25vZGUsIGNhbGxiYWNrXzAsIGNhbGxiYWNrXzEsIC4uLl1cblx0XHR0aGlzLl9tYXAuc2V0KGNoaWxkcmVuW2ldLCAodGhpcy5fbmV4dCA9IFsxLCAwLCB0aGlzLl9uZXh0XSkpO1xuXHR9XG5cdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbn07XG5cblN1c3BlbnNlTGlzdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gU3VzcGVuc2VMaXN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuXHQvLyBJdGVyYXRlIHRocm91Z2ggYWxsIGNoaWxkcmVuIGFmdGVyIG1vdW50aW5nIGZvciB0d28gcmVhc29uczpcblx0Ly8gMS4gQXMgZWFjaCBub2RlW1NVU1BFTkRFRF9DT1VOVF0gc3RhcnRzIGZyb20gMSwgdGhpcyBpdGVyYXRpb24gaW5jcmVhc2VzXG5cdC8vICAgIGVhY2ggbm9kZVtSRUxFQVNFRF9DT1VOVF0gYnkgMSwgdGhlcmVmb3JlIGJhbGFuY2luZyB0aGUgY291bnRlcnMuXG5cdC8vICAgIFRoZSBub2RlcyBjYW4gbm93IGJlIGNvbXBsZXRlbHkgY29uc3VtZWQgZnJvbSB0aGUgbGlua2VkIGxpc3QuXG5cdC8vIDIuIEhhbmRsZSBub2RlcyB0aGF0IG1pZ2h0IGhhdmUgZ290dGVuIHJlc29sdmVkIGJldHdlZW4gcmVuZGVyIGFuZFxuXHQvLyAgICBjb21wb25lbnREaWRNb3VudC5cblx0dGhpcy5fbWFwLmZvckVhY2goKG5vZGUsIGNoaWxkKSA9PiB7XG5cdFx0cmVzb2x2ZSh0aGlzLCBjaGlsZCwgbm9kZSk7XG5cdH0pO1xufTtcbiIsImltcG9ydCB7XG5cdHJlbmRlciBhcyBwcmVhY3RSZW5kZXIsXG5cdGh5ZHJhdGUgYXMgcHJlYWN0SHlkcmF0ZSxcblx0b3B0aW9ucyxcblx0dG9DaGlsZEFycmF5LFxuXHRDb21wb25lbnRcbn0gZnJvbSAncHJlYWN0JztcblxuZXhwb3J0IGNvbnN0IFJFQUNUX0VMRU1FTlRfVFlQRSA9XG5cdCh0eXBlb2YgU3ltYm9sICE9ICd1bmRlZmluZWQnICYmIFN5bWJvbC5mb3IgJiYgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuXHQweGVhYzc7XG5cbmNvbnN0IENBTUVMX1BST1BTID0gL14oPzphY2NlbnR8YWxpZ25tZW50fGFyYWJpY3xiYXNlbGluZXxjYXB8Y2xpcCg/IVBhdGhVKXxjb2xvcnxkb21pbmFudHxmaWxsfGZsb29kfGZvbnR8Z2x5cGgoPyFSKXxob3JpenxtYXJrZXIoPyFIfFd8VSl8b3ZlcmxpbmV8cGFpbnR8c3RvcHxzdHJpa2V0aHJvdWdofHN0cm9rZXx0ZXh0KD8hTCl8dW5kZXJsaW5lfHVuaWNvZGV8dW5pdHN8dnx2ZWN0b3J8dmVydHx3b3JkfHdyaXRpbmd8eCg/IUMpKVtBLVpdLztcblxuY29uc3QgSVNfRE9NID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLy8gSW5wdXQgdHlwZXMgZm9yIHdoaWNoIG9uY2hhbmdlIHNob3VsZCBub3QgYmUgY29udmVydGVkIHRvIG9uaW5wdXQuXG4vLyB0eXBlPVwiZmlsZXxjaGVja2JveHxyYWRpb1wiLCBwbHVzIFwicmFuZ2VcIiBpbiBJRTExLlxuLy8gKElFMTEgZG9lc24ndCBzdXBwb3J0IFN5bWJvbCwgd2hpY2ggd2UgdXNlIGhlcmUgdG8gdHVybiBgcmFkYCBpbnRvIGByYWAgd2hpY2ggbWF0Y2hlcyBcInJhbmdlXCIpXG5jb25zdCBvbkNoYW5nZUlucHV0VHlwZSA9IHR5cGUgPT5cblx0KHR5cGVvZiBTeW1ib2wgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFN5bWJvbCgpID09ICdzeW1ib2wnXG5cdFx0PyAvZmlsfGNoZXxyYWQvaVxuXHRcdDogL2ZpbHxjaGV8cmEvaVxuXHQpLnRlc3QodHlwZSk7XG5cbi8vIFNvbWUgbGlicmFyaWVzIGxpa2UgYHJlYWN0LXZpcnR1YWxpemVkYCBleHBsaWNpdGx5IGNoZWNrIGZvciB0aGlzLlxuQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG5cbi8vIGBVTlNBRkVfKmAgbGlmZWN5Y2xlIGhvb2tzXG4vLyBQcmVhY3Qgb25seSBldmVyIGludm9rZXMgdGhlIHVucHJlZml4ZWQgbWV0aG9kcy5cbi8vIEhlcmUgd2UgcHJvdmlkZSBhIGJhc2UgXCJmYWxsYmFja1wiIGltcGxlbWVudGF0aW9uIHRoYXQgY2FsbHMgYW55IGRlZmluZWQgVU5TQUZFXyBwcmVmaXhlZCBtZXRob2QuXG4vLyAtIElmIGEgY29tcG9uZW50IGRlZmluZXMgaXRzIG93biBgY29tcG9uZW50RGlkTW91bnQoKWAgKGluY2x1ZGluZyB2aWEgZGVmaW5lUHJvcGVydHkpLCB1c2UgdGhhdC5cbi8vIC0gSWYgYSBjb21wb25lbnQgZGVmaW5lcyBgVU5TQUZFX2NvbXBvbmVudERpZE1vdW50KClgLCBgY29tcG9uZW50RGlkTW91bnRgIGlzIHRoZSBhbGlhcyBnZXR0ZXIvc2V0dGVyLlxuLy8gLSBJZiBhbnl0aGluZyBhc3NpZ25zIHRvIGFuIGBVTlNBRkVfKmAgcHJvcGVydHksIHRoZSBhc3NpZ25tZW50IGlzIGZvcndhcmRlZCB0byB0aGUgdW5wcmVmaXhlZCBwcm9wZXJ0eS5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJlYWN0anMvcHJlYWN0L2lzc3Vlcy8xOTQxXG5bXG5cdCdjb21wb25lbnRXaWxsTW91bnQnLFxuXHQnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG5cdCdjb21wb25lbnRXaWxsVXBkYXRlJ1xuXS5mb3JFYWNoKGtleSA9PiB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnQucHJvdG90eXBlLCBrZXksIHtcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0Z2V0KCkge1xuXHRcdFx0cmV0dXJuIHRoaXNbJ1VOU0FGRV8nICsga2V5XTtcblx0XHR9LFxuXHRcdHNldCh2KSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiB2XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xufSk7XG5cbi8qKlxuICogUHJveHkgcmVuZGVyKCkgc2luY2UgUmVhY3QgcmV0dXJucyBhIENvbXBvbmVudCByZWZlcmVuY2UuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBWTm9kZSB0cmVlIHRvIHJlbmRlclxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnQgRE9NIG5vZGUgdG8gcmVuZGVyIHZub2RlIHRyZWUgaW50b1xuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIE9wdGlvbmFsIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgcmVuZGVyaW5nXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50IHwgbnVsbH0gVGhlIHJvb3QgY29tcG9uZW50IHJlZmVyZW5jZSBvciBudWxsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIodm5vZGUsIHBhcmVudCwgY2FsbGJhY2spIHtcblx0Ly8gUmVhY3QgZGVzdHJveXMgYW55IGV4aXN0aW5nIERPTSBub2Rlcywgc2VlICMxNzI3XG5cdC8vIC4uLmJ1dCBvbmx5IG9uIHRoZSBmaXJzdCByZW5kZXIsIHNlZSAjMTgyOFxuXHRpZiAocGFyZW50Ll9jaGlsZHJlbiA9PSBudWxsKSB7XG5cdFx0cGFyZW50LnRleHRDb250ZW50ID0gJyc7XG5cdH1cblxuXHRwcmVhY3RSZW5kZXIodm5vZGUsIHBhcmVudCk7XG5cdGlmICh0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcblxuXHRyZXR1cm4gdm5vZGUgPyB2bm9kZS5fY29tcG9uZW50IDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh5ZHJhdGUodm5vZGUsIHBhcmVudCwgY2FsbGJhY2spIHtcblx0cHJlYWN0SHlkcmF0ZSh2bm9kZSwgcGFyZW50KTtcblx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuXG5cdHJldHVybiB2bm9kZSA/IHZub2RlLl9jb21wb25lbnQgOiBudWxsO1xufVxuXG5sZXQgb2xkRXZlbnRIb29rID0gb3B0aW9ucy5ldmVudDtcbm9wdGlvbnMuZXZlbnQgPSBlID0+IHtcblx0aWYgKG9sZEV2ZW50SG9vaykgZSA9IG9sZEV2ZW50SG9vayhlKTtcblx0ZS5wZXJzaXN0ID0gZW1wdHk7XG5cdGUuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBpc1Byb3BhZ2F0aW9uU3RvcHBlZDtcblx0ZS5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBpc0RlZmF1bHRQcmV2ZW50ZWQ7XG5cdHJldHVybiAoZS5uYXRpdmVFdmVudCA9IGUpO1xufTtcblxuZnVuY3Rpb24gZW1wdHkoKSB7fVxuXG5mdW5jdGlvbiBpc1Byb3BhZ2F0aW9uU3RvcHBlZCgpIHtcblx0cmV0dXJuIHRoaXMuY2FuY2VsQnViYmxlO1xufVxuXG5mdW5jdGlvbiBpc0RlZmF1bHRQcmV2ZW50ZWQoKSB7XG5cdHJldHVybiB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ7XG59XG5cbmxldCBjbGFzc05hbWVEZXNjcmlwdG9yID0ge1xuXHRjb25maWd1cmFibGU6IHRydWUsXG5cdGdldCgpIHtcblx0XHRyZXR1cm4gdGhpcy5jbGFzcztcblx0fVxufTtcblxubGV0IG9sZFZOb2RlSG9vayA9IG9wdGlvbnMudm5vZGU7XG5vcHRpb25zLnZub2RlID0gdm5vZGUgPT4ge1xuXHRsZXQgdHlwZSA9IHZub2RlLnR5cGU7XG5cdGxldCBwcm9wcyA9IHZub2RlLnByb3BzO1xuXHRsZXQgbm9ybWFsaXplZFByb3BzID0gcHJvcHM7XG5cblx0Ly8gb25seSBub3JtYWxpemUgcHJvcHMgb24gRWxlbWVudCBub2Rlc1xuXHRpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG5cdFx0Y29uc3Qgbm9uQ3VzdG9tRWxlbWVudCA9IHR5cGUuaW5kZXhPZignLScpID09PSAtMTtcblx0XHRub3JtYWxpemVkUHJvcHMgPSB7fTtcblxuXHRcdGZvciAobGV0IGkgaW4gcHJvcHMpIHtcblx0XHRcdGxldCB2YWx1ZSA9IHByb3BzW2ldO1xuXG5cdFx0XHRpZiAoSVNfRE9NICYmIGkgPT09ICdjaGlsZHJlbicgJiYgdHlwZSA9PT0gJ25vc2NyaXB0Jykge1xuXHRcdFx0XHQvLyBFbXVsYXRlIFJlYWN0J3MgYmVoYXZpb3Igb2Ygbm90IHJlbmRlcmluZyB0aGUgY29udGVudHMgb2Ygbm9zY3JpcHQgdGFncyBvbiB0aGUgY2xpZW50LlxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH0gZWxzZSBpZiAoaSA9PT0gJ3ZhbHVlJyAmJiAnZGVmYXVsdFZhbHVlJyBpbiBwcm9wcyAmJiB2YWx1ZSA9PSBudWxsKSB7XG5cdFx0XHRcdC8vIFNraXAgYXBwbHlpbmcgdmFsdWUgaWYgaXQgaXMgbnVsbC91bmRlZmluZWQgYW5kIHdlIGFscmVhZHkgc2V0XG5cdFx0XHRcdC8vIGEgZGVmYXVsdCB2YWx1ZVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRcdGkgPT09ICdkZWZhdWx0VmFsdWUnICYmXG5cdFx0XHRcdCd2YWx1ZScgaW4gcHJvcHMgJiZcblx0XHRcdFx0cHJvcHMudmFsdWUgPT0gbnVsbFxuXHRcdFx0KSB7XG5cdFx0XHRcdC8vIGBkZWZhdWx0VmFsdWVgIGlzIHRyZWF0ZWQgYXMgYSBmYWxsYmFjayBgdmFsdWVgIHdoZW4gYSB2YWx1ZSBwcm9wIGlzIHByZXNlbnQgYnV0IG51bGwvdW5kZWZpbmVkLlxuXHRcdFx0XHQvLyBgZGVmYXVsdFZhbHVlYCBmb3IgRWxlbWVudHMgd2l0aCBubyB2YWx1ZSBwcm9wIGlzIHRoZSBzYW1lIGFzIHRoZSBET00gZGVmYXVsdFZhbHVlIHByb3BlcnR5LlxuXHRcdFx0XHRpID0gJ3ZhbHVlJztcblx0XHRcdH0gZWxzZSBpZiAoaSA9PT0gJ2Rvd25sb2FkJyAmJiB2YWx1ZSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHQvLyBDYWxsaW5nIGBzZXRBdHRyaWJ1dGVgIHdpdGggYSB0cnV0aHkgdmFsdWUgd2lsbCBsZWFkIHRvIGl0IGJlaW5nXG5cdFx0XHRcdC8vIHBhc3NlZCBhcyBhIHN0cmluZ2lmaWVkIHZhbHVlLCBlLmcuIGBkb3dubG9hZD1cInRydWVcImAuIFJlYWN0XG5cdFx0XHRcdC8vIGNvbnZlcnRzIGl0IHRvIGFuIGVtcHR5IHN0cmluZyBpbnN0ZWFkLCBvdGhlcndpc2UgdGhlIGF0dHJpYnV0ZVxuXHRcdFx0XHQvLyB2YWx1ZSB3aWxsIGJlIHVzZWQgYXMgdGhlIGZpbGUgbmFtZSBhbmQgdGhlIGZpbGUgd2lsbCBiZSBjYWxsZWRcblx0XHRcdFx0Ly8gXCJ0cnVlXCIgdXBvbiBkb3dubG9hZGluZyBpdC5cblx0XHRcdFx0dmFsdWUgPSAnJztcblx0XHRcdH0gZWxzZSBpZiAoL29uZG91YmxlY2xpY2svaS50ZXN0KGkpKSB7XG5cdFx0XHRcdGkgPSAnb25kYmxjbGljayc7XG5cdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHQvXm9uY2hhbmdlKHRleHRhcmVhfGlucHV0KS9pLnRlc3QoaSArIHR5cGUpICYmXG5cdFx0XHRcdCFvbkNoYW5nZUlucHV0VHlwZShwcm9wcy50eXBlKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGkgPSAnb25pbnB1dCc7XG5cdFx0XHR9IGVsc2UgaWYgKC9eb25mb2N1cyQvaS50ZXN0KGkpKSB7XG5cdFx0XHRcdGkgPSAnb25mb2N1c2luJztcblx0XHRcdH0gZWxzZSBpZiAoL15vbmJsdXIkL2kudGVzdChpKSkge1xuXHRcdFx0XHRpID0gJ29uZm9jdXNvdXQnO1xuXHRcdFx0fSBlbHNlIGlmICgvXm9uKEFuaXxUcmF8VG91fEJlZm9yZUlucHxDb21wbykvLnRlc3QoaSkpIHtcblx0XHRcdFx0aSA9IGkudG9Mb3dlckNhc2UoKTtcblx0XHRcdH0gZWxzZSBpZiAobm9uQ3VzdG9tRWxlbWVudCAmJiBDQU1FTF9QUk9QUy50ZXN0KGkpKSB7XG5cdFx0XHRcdGkgPSBpLnJlcGxhY2UoL1tBLVowLTldLywgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdHZhbHVlID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgc3VwcG9ydCBmb3Igb25JbnB1dCBhbmQgb25DaGFuZ2UsIHNlZSAjMzU2MVxuXHRcdFx0Ly8gaWYgd2UgaGF2ZSBhbiBvbmlucHV0IHByb3AgYWxyZWFkeSBjaGFuZ2UgaXQgdG8gb25pbnB1dENhcHR1cmVcblx0XHRcdGlmICgvXm9uaW5wdXQvaS50ZXN0KGkpKSB7XG5cdFx0XHRcdGkgPSBpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdGlmIChub3JtYWxpemVkUHJvcHNbaV0pIHtcblx0XHRcdFx0XHRpID0gJ29uaW5wdXRDYXB0dXJlJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRub3JtYWxpemVkUHJvcHNbaV0gPSB2YWx1ZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgc3VwcG9ydCBmb3IgYXJyYXkgc2VsZWN0IHZhbHVlczogPHNlbGVjdCBtdWx0aXBsZSB2YWx1ZT17W119IC8+XG5cdFx0aWYgKFxuXHRcdFx0dHlwZSA9PSAnc2VsZWN0JyAmJlxuXHRcdFx0bm9ybWFsaXplZFByb3BzLm11bHRpcGxlICYmXG5cdFx0XHRBcnJheS5pc0FycmF5KG5vcm1hbGl6ZWRQcm9wcy52YWx1ZSlcblx0XHQpIHtcblx0XHRcdC8vIGZvckVhY2goKSBhbHdheXMgcmV0dXJucyB1bmRlZmluZWQsIHdoaWNoIHdlIGFidXNlIGhlcmUgdG8gdW5zZXQgdGhlIHZhbHVlIHByb3AuXG5cdFx0XHRub3JtYWxpemVkUHJvcHMudmFsdWUgPSB0b0NoaWxkQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4ge1xuXHRcdFx0XHRjaGlsZC5wcm9wcy5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0bm9ybWFsaXplZFByb3BzLnZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpICE9IC0xO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkaW5nIHN1cHBvcnQgZm9yIGRlZmF1bHRWYWx1ZSBpbiBzZWxlY3QgdGFnXG5cdFx0aWYgKHR5cGUgPT0gJ3NlbGVjdCcgJiYgbm9ybWFsaXplZFByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRub3JtYWxpemVkUHJvcHMudmFsdWUgPSB0b0NoaWxkQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4ge1xuXHRcdFx0XHRpZiAobm9ybWFsaXplZFByb3BzLm11bHRpcGxlKSB7XG5cdFx0XHRcdFx0Y2hpbGQucHJvcHMuc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0bm9ybWFsaXplZFByb3BzLmRlZmF1bHRWYWx1ZS5pbmRleE9mKGNoaWxkLnByb3BzLnZhbHVlKSAhPSAtMTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjaGlsZC5wcm9wcy5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRub3JtYWxpemVkUHJvcHMuZGVmYXVsdFZhbHVlID09IGNoaWxkLnByb3BzLnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2bm9kZS5wcm9wcyA9IG5vcm1hbGl6ZWRQcm9wcztcblxuXHRcdGlmIChwcm9wcy5jbGFzcyAhPSBwcm9wcy5jbGFzc05hbWUpIHtcblx0XHRcdGNsYXNzTmFtZURlc2NyaXB0b3IuZW51bWVyYWJsZSA9ICdjbGFzc05hbWUnIGluIHByb3BzO1xuXHRcdFx0aWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSBub3JtYWxpemVkUHJvcHMuY2xhc3MgPSBwcm9wcy5jbGFzc05hbWU7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsaXplZFByb3BzLCAnY2xhc3NOYW1lJywgY2xhc3NOYW1lRGVzY3JpcHRvcik7XG5cdFx0fVxuXHR9XG5cblx0dm5vZGUuJCR0eXBlb2YgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG5cblx0aWYgKG9sZFZOb2RlSG9vaykgb2xkVk5vZGVIb29rKHZub2RlKTtcbn07XG5cbi8vIE9ubHkgbmVlZGVkIGZvciByZWFjdC1yZWxheVxubGV0IGN1cnJlbnRDb21wb25lbnQ7XG5jb25zdCBvbGRCZWZvcmVSZW5kZXIgPSBvcHRpb25zLl9yZW5kZXI7XG5vcHRpb25zLl9yZW5kZXIgPSBmdW5jdGlvbih2bm9kZSkge1xuXHRpZiAob2xkQmVmb3JlUmVuZGVyKSB7XG5cdFx0b2xkQmVmb3JlUmVuZGVyKHZub2RlKTtcblx0fVxuXHRjdXJyZW50Q29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudDtcbn07XG5cbi8vIFRoaXMgaXMgYSB2ZXJ5IHZlcnkgcHJpdmF0ZSBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgUmVhY3QgaXRcbi8vIGlzIHVzZWQgdG8gc29ydC1vZiBkbyBydW50aW1lIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBTbyBmYXJcbi8vIG9ubHkgYHJlYWN0LXJlbGF5YCBtYWtlcyB1c2Ugb2YgaXQuIEl0IHVzZXMgaXQgdG8gcmVhZCB0aGVcbi8vIGNvbnRleHQgdmFsdWUuXG5leHBvcnQgY29uc3QgX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQgPSB7XG5cdFJlYWN0Q3VycmVudERpc3BhdGNoZXI6IHtcblx0XHRjdXJyZW50OiB7XG5cdFx0XHRyZWFkQ29udGV4dChjb250ZXh0KSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50Q29tcG9uZW50Ll9nbG9iYWxDb250ZXh0W2NvbnRleHQuX2lkXS5wcm9wcy52YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG4iLCJmdW5jdGlvbiB0b1ZhbChtaXgpIHtcblx0dmFyIGssIHksIHN0cj0nJztcblxuXHRpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG1peCA9PT0gJ251bWJlcicpIHtcblx0XHRzdHIgKz0gbWl4O1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtaXggPT09ICdvYmplY3QnKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobWl4KSkge1xuXHRcdFx0Zm9yIChrPTA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdGlmICh5ID0gdG9WYWwobWl4W2tdKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdHN0ciArPSBrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuXHR2YXIgaT0wLCB0bXAsIHgsIHN0cj0nJztcblx0d2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0aWYgKHRtcCA9IGFyZ3VtZW50c1tpKytdKSB7XG5cdFx0XHRpZiAoeCA9IHRvVmFsKHRtcCkpIHtcblx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0c3RyICs9IHhcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cbiIsImltcG9ydCBjbHN4IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREb2N1bWVudChlbGVtZW50PzogTm9kZSkgeyByZXR1cm4gKGVsZW1lbnQ/Lm93bmVyRG9jdW1lbnQgPz8gZG9jdW1lbnQgPz8gd2luZG93LmRvY3VtZW50ID8/IGdsb2JhbFRoaXMuZG9jdW1lbnQpOyB9XG5cbnR5cGUgUCA9IFBhcmFtZXRlcnM8dHlwZW9mIGNsc3g+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRG9jdW1lbnRDbGFzcyhjbGFzc05hbWU6IFBbMF0sIGFjdGl2ZT86IGJvb2xlYW4sIGVsZW1lbnQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGVsZW1lbnQgPz89IGdldERvY3VtZW50KCkuZG9jdW1lbnRFbGVtZW50O1xuICAgIGNsYXNzTmFtZSA9IGNsc3goY2xhc3NOYW1lKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoYWN0aXZlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gZWxlbWVudCEuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSwgW2NsYXNzTmFtZSwgYWN0aXZlLCBlbGVtZW50XSk7XG5cbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZHVjZXIsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcblxuXG5leHBvcnQgdHlwZSBQYXNzaXZlU3RhdGVVcGRhdGVyPFM+ID0gKHZhbHVlOiBTIHwgKChwcmV2U3RhdGU6IFMgfCB1bmRlZmluZWQpID0+IFMpKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgT25QYXNzaXZlU3RhdGVDaGFuZ2U8VD4gPSAoKHZhbHVlOiBULCBwcmV2VmFsdWU6IFQgfCB1bmRlZmluZWQpID0+ICh2b2lkIHwgKCgpID0+IHZvaWQpKSk7XG5cbi8qKlxuICogRGVidWcgaG9vay5cbiAqIFxuICogR2l2ZW4gYSB2YWx1ZSBvciBzZXQgb2YgdmFsdWVzLCBlbWl0cyBhIGNvbnNvbGUgZXJyb3IgaWYgYW55IG9mIHRoZW0gY2hhbmdlIGZyb20gb25lIHJlbmRlciB0byB0aGUgbmV4dC5cbiAqIFxuICogRXZlbnR1YWxseSwgd2hlbiB1c2VFdmVudCBsYW5kcywgd2UgaG9wZWZ1bGx5IHdvbid0IG5lZWQgdGhpcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVuc3VyZVN0YWJpbGl0eTxUIGV4dGVuZHMgYW55W10+KHBhcmVudEhvb2tOYW1lOiBzdHJpbmcsIC4uLnZhbHVlczogVCkge1xuICAgIHVzZUhlbHBlcih2YWx1ZXMubGVuZ3RoLCAwKTtcbiAgICB2YWx1ZXMuZm9yRWFjaCh1c2VIZWxwZXIpO1xuICAgIHJldHVybjtcblxuXG4gICAgZnVuY3Rpb24gdXNlSGVscGVyPFU+KHZhbHVlOiBVLCBpbmRleDogbnVtYmVyKSB7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHByb3ZpZGVkIGZ1bmN0aW9ucyBhcmUgcGVyZmVjdGx5IHN0YWJsZSBhY3Jvc3MgcmVuZGVyc1xuICAgICAgICBjb25zdCBoZWxwZXJUb0Vuc3VyZVN0YWJpbGl0eSA9IHVzZVJlZih2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHNob3duRXJyb3IgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgICBpZiAoaGVscGVyVG9FbnN1cmVTdGFiaWxpdHkuY3VycmVudCAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzaG93bkVycm9yLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1kZWJ1Z2dlciAqL1xuICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBob29rICR7cGFyZW50SG9va05hbWV9IHJlcXVpcmVzIHNvbWUgb3IgYWxsIG9mIGl0cyBhcmd1bWVudHMgcmVtYWluIHN0YWJsZSBhY3Jvc3MgZWFjaCByZW5kZXI7IHBsZWFzZSBjaGVjayB0aGUgJHtpbmRleH0taW5kZXhlZCBhcmd1bWVudC5gKTtcbiAgICAgICAgICAgICAgICBzaG93bkVycm9yLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VQYXNzaXZlU3RhdGUyPFQ+KG9uQ2hhbmdlOiB1bmRlZmluZWQgfCBudWxsIHwgT25QYXNzaXZlU3RhdGVDaGFuZ2U8VD4sIGdldEluaXRpYWw6ICgpID0+IFQpOiBbKCkgPT4gVCwgUGFzc2l2ZVN0YXRlVXBkYXRlcjxUPl0ge1xuICAgIHR5cGUgU3RhdGVUeXBlID0geyB2YWx1ZTogVCB8IHR5cGVvZiBVbnNldCB9XG4gICAgXG4gICAgY29uc3Qgd2FybmluZ1JlZiA9IHVzZVJlZihmYWxzZSk7XG4gICAgY29uc3QgY2xlYW51cENhbGxiYWNrUmVmID0gdXNlUmVmPHZvaWQgfCB1bmRlZmluZWQgfCAoKCkgPT4gdm9pZCk+KHVuZGVmaW5lZCk7XG5cbiAgICBjb25zdCBbc3RvcmVkLCBzZXRTdG9yZWRdID0gdXNlUmVkdWNlcjxTdGF0ZVR5cGUsIFQ+KChwcmV2LCBhY3Rpb24pID0+IHtcbiAgICAgICAgaWYgKHByZXYudmFsdWUgIT09IGFjdGlvbikge1xuICAgICAgICAgICAgd2FybmluZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjbGVhbnVwQ2FsbGJhY2tSZWYuY3VycmVudCkgXG4gICAgICAgICAgICAgICAgY2xlYW51cENhbGxiYWNrUmVmLmN1cnJlbnQoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2xlYW51cENhbGxiYWNrUmVmLmN1cnJlbnQgPSBvbkNoYW5nZT8uKGFjdGlvbiwgcHJldi52YWx1ZSA9PT0gVW5zZXQ/IGdldEluaXRpYWwoKSA6IHByZXYudmFsdWUpO1xuICAgICAgICAgICAgd2FybmluZ1JlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcHJldi52YWx1ZSA9IGFjdGlvbjtcbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgfSwgeyB2YWx1ZTogVW5zZXQgfSk7XG5cbiAgICBjb25zdCBnZXRTdGF0ZSA9IHVzZUNhbGxiYWNrKCgpOiBUID0+IHsgXG4gICAgICAgIGlmICh3YXJuaW5nUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJEdXJpbmcgb25DaGFuZ2UsIHByZWZlciB1c2luZyB0aGUgKHZhbHVlLCBwcmV2VmFsdWUpIGFyZ3VtZW50cyBpbnN0ZWFkIG9mIGdldFZhbHVlIC0tIGl0J3MgYW1iaWd1b3VzIGFzIHRvIGlmIHlvdSdyZSBhc2tpbmcgZm9yIHRoZSBvbGQgb3IgbmV3IHZhbHVlIGF0IHRoaXMgcG9pbnQgaW4gdGltZSBmb3IgdGhpcyBjb21wb25lbnQuXCIpO1xuXG4gICAgICAgIHJldHVybiBzdG9yZWQudmFsdWUgPT09IFVuc2V0PyBnZXRJbml0aWFsKCkgOiBzdG9yZWQudmFsdWU7XG4gICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IHNldFN0YXRlID0gdXNlQ2FsbGJhY2s8UGFzc2l2ZVN0YXRlVXBkYXRlcjxUPj4oKG5leHRWYWx1ZUdldHRlcikgPT4ge1xuICAgICAgICBsZXQgbmV4dFZhbHVlOiBUO1xuICAgICAgICBpZiAobmV4dFZhbHVlR2V0dGVyIGluc3RhbmNlb2YgRnVuY3Rpb24pXG4gICAgICAgICAgICBuZXh0VmFsdWVHZXR0ZXIoZ2V0U3RhdGUoKSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG5leHRWYWx1ZSA9IG5leHRWYWx1ZUdldHRlcjtcblxuICAgICAgICBzZXRTdG9yZWQobmV4dFZhbHVlISk7XG5cbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gW2dldFN0YXRlLCBzZXRTdGF0ZV07XG59XG5cbi8qKlxuICogU2ltaWxhciB0byBgdXNlU3RhdGVgLCBidXQgZm9yIHZhbHVlcyB0aGF0IGFyZW4ndCBcInJlbmRlci1pbXBvcnRhbnRcIiAmbmRhc2g7IHVwZGF0ZXMgZG9uJ3QgY2F1c2UgYSByZS1yZW5kZXIgYW5kIHNvIHRoZSB2YWx1ZSBzaG91bGRuJ3QgYmUgdXNlZCBkdXJpbmcgcmVuZGVyICh0aG91Z2ggaXQgY2VydGFpbmx5IGNhbiwgYXQgbGVhc3QgYnkgcmUtcmVuZGVyaW5nIGFnYWluKS5cbiAqIFxuICogVG8gY29tcGVuc2F0ZSBmb3IgdGhpcywgeW91IHNob3VsZCBwYXNzIGEgYHVzZUVmZmVjdGAtZXNxdWUgY2FsbGJhY2sgdGhhdCBpcyBydW4gd2hlbmV2ZXIgdGhlIHZhbHVlIGNoYW5nZXMuICBKdXN0IGxpa2UgYHVzZUVmZmVjdGAsIHRoaXMgY2FsbGJhY2sgY2FuIHJldHVybiBhIGNsZWFudXAgZnVuY3Rpb24gdGhhdCdzIHJ1biBiZWZvcmUgdGhlIHZhbHVlIGNoYW5nZXMuICBJZiB5b3Ugd291bGQgbGlrZSB0byByZS1yZW5kZXIgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcyAob3IsIHNheSwgd2hlbiB0aGUgdmFsdWUgbWVldHMgc29tZSBjcml0ZXJpYSksIHRoaXMgaXMgd2hlcmUgeW91J2xsIHdhbnQgdG8gcHV0IGluIGEgY2FsbCB0byBhIGBzZXRTdGF0ZWAgZnVuY3Rpb24uXG4gKiBcbiAqIFRvIHN1bW1hcml6ZSwgaXQncyBsaWtlIGEgYHVzZVN0YXRlYC1gdXNlRWZmZWN0YCBtYXNodXA6XG4gKiBcbiAqIDEuIEl0J3MgbGlrZSBgdXNlU3RhdGVgLCBleGNlcHQgdGhpcyB2ZXJzaW9uIG9mIGBzZXRTdGF0ZWAgZG9lc24ndCByZS1yZW5kZXIgdGhlIHdob2xlIGNvbXBvbmVudFxuICogMi4gSXQncyBsaWtlIGB1c2VTdGF0ZWAsIGV4Y2VwdCB5b3UgY2FuIHJ1biBhIGZ1bmN0aW9uIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMgdGhhdCBvcHRpb25hbGx5IHJldHVybnMgYSBjbGVhbnVwIGZ1bmN0aW9uXG4gKiAzLiBJdCdzIGxpa2UgYHVzZUVmZmVjdGAsIGV4Y2VwdCB5b3UgdHJpZ2dlciB0aGUgZWZmZWN0IGZ1bmN0aW9uIFwicmVtb3RlbHlcIiBpbnN0ZWFkIG9mIGl0IHJ1bm5pbmcgYWZ0ZXIgcmVuZGVyaW5nXG4gKiA0LiBJdCdzIGxpa2UgYHVzZUVmZmVjdGAsIGV4Y2VwdCB0aGUgc2luZ2xlIFwiZGVwZW5kZW5jeVwiIGlzIGJhc2VkIG9uIHlvdXIgY2FsbHMgdG8gYHNldFN0YXRlYFxuICogXG4gKiBOb3RlIHRoYXQgd2hpbGUgY2FsbGluZyBgc2V0U3RhdGVgIGRvZXNuJ3QgY2F1c2UgYW55IHJlLXJlbmRlcnMsIHlvdSBjYW4gZG8gdGhhdCB3aXRoaW4geW91ciBgb25DaGFuZ2VgIGZ1bmN0aW9uLCBjYWxsZWQgd2hlbmV2ZXIgdGhlIHZhbHVlIGNoYW5nZXMgdmlhIHRoYXQgYHNldFN0YXRlYC5cbiAqIFxuICogQHBhcmFtIG9uQ2hhbmdlIFRoZSBcImVmZmVjdFwiIGZ1bmN0aW9uIHRvIHJ1biB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLiBFZmZlY3RpdmVseSB0aGUgc2FtZSBhcyBgdXNlRWZmZWN0YCdzIFwiZWZmZWN0XCIgZnVuY3Rpb24uICBNVVNUIEJFIFNUQUJMRSwgZWl0aGVyIGJlY2F1c2UgaXQgaGFzIG5vIGRlcGVuZGVuY2llcywgb3IgYmVjYXVzZSBpdCdzIGZyb20gdXNlU3RhYmxlQ2FsbGJhY2ssIGJ1dCB0aGlzIHdpbGwgbWVhbiB5b3UgY2Fubm90IHVzZSBnZXRTdGF0ZSBvciBzZXRTdGF0ZSBkdXJpbmcgcmVuZGVyLlxuICogQHBhcmFtIGdldEluaXRpYWxWYWx1ZSBJZiBwcm92aWRlZCwgdGhlIGVmZmVjdCB3aWxsIGJlIGludm9rZWQgb25jZSB3aXRoIHRoaXMgdmFsdWUgb24gbW91bnQuIE1VU1QgQkUgU1RBQkxFLCBlaXRoZXIgYmVjYXVzZSBpdCBoYXMgbm8gZGVwZW5kZW5jaWVzLCBvciBiZWNhdXNlIGl0J3MgZnJvbSB1c2VTdGFibGVDYWxsYmFjaywgYnV0IHRoaXMgd2lsbCBtZWFuIHlvdSBjYW5ub3QgdXNlIGdldFN0YXRlIG9yIHNldFN0YXRlIGR1cmluZyByZW5kZXIuXG4gKiBAcmV0dXJucyBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVBhc3NpdmVTdGF0ZTxUPihvbkNoYW5nZTogdW5kZWZpbmVkIHwgbnVsbCB8IE9uUGFzc2l2ZVN0YXRlQ2hhbmdlPFQ+LCBnZXRJbml0aWFsVmFsdWU/OiAoKSA9PiBUKTogcmVhZG9ubHkgWygpID0+IFQsIFBhc3NpdmVTdGF0ZVVwZGF0ZXI8VD5dIHtcblxuICAgIGNvbnN0IHZhbHVlUmVmID0gdXNlUmVmPFQgfCB0eXBlb2YgVW5zZXQ+KFVuc2V0KTtcbiAgICBjb25zdCB3YXJuaW5nUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBjbGVhbnVwQ2FsbGJhY2tSZWYgPSB1c2VSZWY8dW5kZWZpbmVkIHwgKCgpID0+IHZvaWQpPih1bmRlZmluZWQpO1xuXG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHByb3ZpZGVkIGZ1bmN0aW9ucyBhcmUgcGVyZmVjdGx5IHN0YWJsZSBhY3Jvc3MgcmVuZGVyc1xuICAgIHVzZUVuc3VyZVN0YWJpbGl0eShcInVzZVBhc3NpdmVTdGF0ZVwiLCBvbkNoYW5nZSwgZ2V0SW5pdGlhbFZhbHVlKTtcblxuICAgIC8vIFNoYXJlZCBiZXR3ZWVuIFwiZGVwZW5kZW5jeSBjaGFuZ2VkXCIgYW5kIFwiY29tcG9uZW50IHVubW91bnRlZFwiLlxuICAgIGNvbnN0IG9uU2hvdWxkQ2xlYW5VcCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgY2xlYW51cENhbGxiYWNrID0gY2xlYW51cENhbGxiYWNrUmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChjbGVhbnVwQ2FsbGJhY2spXG4gICAgICAgICAgICBjbGVhbnVwQ2FsbGJhY2soKTtcbiAgICB9LCBbXSk7XG5cbiAgICAvLyBUaGVyZSBhcmUgYSBjb3VwbGUgcGxhY2VzIHdoZXJlIHdlJ2QgbGlrZSB0byB1c2Ugb3VyIGluaXRpYWxcbiAgICAvLyB2YWx1ZSBpbiBwbGFjZSBvZiBoYXZpbmcgbm8gdmFsdWUgYXQgYWxsIHlldC5cbiAgICAvLyBUaGlzIGlzIHRoZSBzaGFyZWQgY29kZSBmb3IgdGhhdCwgdXNlZCBvbiBtb3VudCBhbmQgd2hlbmV2ZXJcbiAgICAvLyBnZXRWYWx1ZSBpcyBjYWxsZWQuXG4gICAgY29uc3QgdHJ5RW5zdXJlVmFsdWUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZVJlZi5jdXJyZW50ID09PSBVbnNldCAmJiBnZXRJbml0aWFsVmFsdWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IGdldEluaXRpYWxWYWx1ZSgpO1xuICAgICAgICAgICAgICAgIHZhbHVlUmVmLmN1cnJlbnQgPSBpbml0aWFsVmFsdWU7XG4gICAgICAgICAgICAgICAgY2xlYW51cENhbGxiYWNrUmVmLmN1cnJlbnQgPSAob25DaGFuZ2U/Lihpbml0aWFsVmFsdWUsIHVuZGVmaW5lZCkgPz8gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIC8vIEV4Y2VwdGlvbnMgYXJlIGludGVudGlvbmFsIHRvIGFsbG93IGJhaWxvdXQgKHdpdGhvdXQgZXhwb3NpbmcgdGhlIFVuc2V0IHN5bWJvbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFsvKiBnZXRJbml0aWFsVmFsdWUgYW5kIG9uQ2hhbmdlIGludGVudGlvbmFsbHkgb21pdHRlZCAqL10pO1xuXG5cbiAgICBjb25zdCBnZXRWYWx1ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKHdhcm5pbmdSZWYuY3VycmVudClcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkR1cmluZyBvbkNoYW5nZSwgcHJlZmVyIHVzaW5nIHRoZSAodmFsdWUsIHByZXZWYWx1ZSkgYXJndW1lbnRzIGluc3RlYWQgb2YgZ2V0VmFsdWUgLS0gaXQncyBhbWJpZ3VvdXMgYXMgdG8gaWYgeW91J3JlIGFza2luZyBmb3IgdGhlIG9sZCBvciBuZXcgdmFsdWUgYXQgdGhpcyBwb2ludCBpbiB0aW1lIGZvciB0aGlzIGNvbXBvbmVudC5cIik7XG5cbiAgICAgICAgLy8gVGhlIGZpcnN0IHRpbWUgd2UgY2FsbCBnZXRWYWx1ZSwgaWYgd2UgaGF2ZW4ndCBiZWVuIGdpdmVuIGEgdmFsdWUgeWV0LFxuICAgICAgICAvLyAoYW5kIHdlIHdlcmUgZ2l2ZW4gYW4gaW5pdGlhbCB2YWx1ZSB0byB1c2UpXG4gICAgICAgIC8vIHJldHVybiB0aGUgaW5pdGlhbCB2YWx1ZSBpbnN0ZWFkIG9mIG5vdGhpbmcuXG4gICAgICAgIGlmICh2YWx1ZVJlZi5jdXJyZW50ID09PSBVbnNldClcbiAgICAgICAgICAgIHRyeUVuc3VyZVZhbHVlKCk7XG5cbiAgICAgICAgcmV0dXJuICh2YWx1ZVJlZi5jdXJyZW50ID09PSBVbnNldCA/IHVuZGVmaW5lZCEgOiB2YWx1ZVJlZi5jdXJyZW50ISkgYXMgVDtcbiAgICB9LCBbXSk7XG5cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UndmUgcnVuIG91ciBlZmZlY3QgYXQgbGVhc3Qgb25jZSBvbiBtb3VudC5cbiAgICAgICAgLy8gKElmIHdlIGhhdmUgYW4gaW5pdGlhbCB2YWx1ZSwgb2YgY291cnNlKVxuICAgICAgICB0cnlFbnN1cmVWYWx1ZSgpO1xuXG5cbiAgICB9LCBbXSk7XG5cbiAgICAvLyBUaGUgYWN0dWFsIGNvZGUgdGhlIHVzZXIgY2FsbHMgdG8gKHBvc3NpYmx5KSBydW4gYSBuZXcgZWZmZWN0LlxuICAgIGNvbnN0IHNldFZhbHVlID0gdXNlQ2FsbGJhY2s8UGFzc2l2ZVN0YXRlVXBkYXRlcjxUPj4oKGFyZykgPT4ge1xuICAgICAgICBjb25zdCBwcmV2RGVwID0gdmFsdWVSZWYuY3VycmVudCA9PT0gVW5zZXQgPyB1bmRlZmluZWQgOiBnZXRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBkZXAgPSBhcmcgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGFyZyhwcmV2RGVwISkgOiBhcmc7XG5cbiAgICAgICAgaWYgKGRlcCAhPT0gdmFsdWVSZWYuY3VycmVudCkge1xuXG4gICAgICAgICAgICAvLyBJbmRpY2F0ZSB0byB0aGUgdXNlciB0aGF0IHRoZXkgc2hvdWxkbid0IGNhbGwgZ2V0VmFsdWUgZHVyaW5nIG9uQ2hhbmdlXG4gICAgICAgICAgICB3YXJuaW5nUmVmLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBDYWxsIGFueSByZWdpc3RlcmQgY2xlYW51cCBmdW5jdGlvblxuICAgICAgICAgICAgb25TaG91bGRDbGVhblVwKCk7XG4gICAgICAgICAgICBjbGVhbnVwQ2FsbGJhY2tSZWYuY3VycmVudCA9IChvbkNoYW5nZT8uKGRlcCwgcHJldkRlcCkgPz8gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHZhbHVlUmVmLmN1cnJlbnQgPSBkZXA7XG5cbiAgICAgICAgICAgIC8vIEFsbG93IHRoZSB1c2VyIHRvIG5vcm1hbGx5IGNhbGwgZ2V0VmFsdWUgYWdhaW5cbiAgICAgICAgICAgIHdhcm5pbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIFtnZXRWYWx1ZSwgc2V0VmFsdWVdIGFzIGNvbnN0O1xufVxuXG5jb25zdCBVbnNldCA9IFN5bWJvbCgpO1xuXG4vLyBFYXN5IGNvbnN0YW50cyBmb3IgZ2V0SW5pdGlhbFZhbHVlXG5leHBvcnQgZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHsgcmV0dXJuIHRydWU7IH1cbmV4cG9ydCBmdW5jdGlvbiByZXR1cm5GYWxzZSgpIHsgcmV0dXJuIGZhbHNlOyB9XG5leHBvcnQgZnVuY3Rpb24gcmV0dXJuTnVsbCgpIHsgcmV0dXJuIG51bGw7IH1cbmV4cG9ydCBmdW5jdGlvbiByZXR1cm5VbmRlZmluZWQoKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbmV4cG9ydCBmdW5jdGlvbiByZXR1cm5aZXJvKCkgeyByZXR1cm4gMDsgfSIsImltcG9ydCB7IENvbXBvbmVudENoaWxkcmVuLCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCwgaCB9IGZyb20gXCJwcmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lcmdlZENoaWxkcmVuPExocyBleHRlbmRzIFBpY2s8aC5KU1guSFRNTEF0dHJpYnV0ZXM8RXZlbnRUYXJnZXQ+LCBcImNoaWxkcmVuXCI+IHwgbnVsbCB8IHVuZGVmaW5lZCwgUmhzIGV4dGVuZHMgUGljazxoLkpTWC5IVE1MQXR0cmlidXRlczxFdmVudFRhcmdldD4sIFwiY2hpbGRyZW5cIj4gfCBudWxsIHwgdW5kZWZpbmVkPihsaHNQcm9wczogTGhzLCByaHNQcm9wczogUmhzKTogQ29tcG9uZW50Q2hpbGRyZW4ge1xuXG4gICAgY29uc3QgbGhzID0gbGhzUHJvcHM/LmNoaWxkcmVuO1xuICAgIGNvbnN0IHJocyA9IHJoc1Byb3BzPy5jaGlsZHJlbjtcbiAgICBpZiAobGhzID09IG51bGwgJiYgcmhzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAobGhzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJocztcbiAgICB9XG4gICAgZWxzZSBpZiAocmhzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxocztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIHt9LCBsaHMsIHJocyk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBjbHN4IH0gZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBHaXZlbiB0d28gc2V0cyBvZiBwcm9wcywgbWVyZ2VzIHRoZWlyIGBjbGFzc2AgYW5kIGBjbGFzc05hbWVgIHByb3BlcnRpZXMuXHJcbiAqIER1cGxpY2F0ZSBjbGFzc2VzIGFyZSByZW1vdmVkIChvcmRlciBkb2Vzbid0IG1hdHRlciBhbnl3YXkpLlxyXG4gKiBcclxuICogQHBhcmFtIGxocyBDbGFzc2VzIG9mIHRoZSBmaXJzdCBjb21wb25lbnRcclxuICogQHBhcmFtIHJocyBDbGFzc2VzIG9mIHRoZSBzZWNvbmQgY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGluZyBhbGwgY29tYmluZWQgY2xhc3NlcyBmcm9tIGJvdGggYXJndW1lbnRzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lcmdlZENsYXNzZXM8TGhzIGV4dGVuZHMgTWVyZ2VDbGFzc2VzUHJvcHMgfCBudWxsIHwgdW5kZWZpbmVkLCBSaHMgZXh0ZW5kcyBNZXJnZUNsYXNzZXNQcm9wcyB8IG51bGwgfCB1bmRlZmluZWQ+KGxoczogTGhzLCByaHM6IFJocyk6IE1lcmdlZENsYXNzZXM8TGhzLCBSaHM+IHtcclxuXHJcbiAgICAvLyBOb3RlOiBGb3IgdGhlIHNha2Ugb2YgZm9yd2FyZCBjb21wYXRpYmlsaXR5LCB0aGlzIGZ1bmN0aW9uIGlzIGxhYmVsbGVkIGFzXHJcbiAgICAvLyBhIGhvb2ssIGJ1dCBhcyBpdCB1c2VzIG5vIG90aGVyIGhvb2tzIGl0IHRlY2huaWNhbGx5IGlzbid0IG9uZS5cclxuICAgIHJldHVybiBtZXJnZUNsYXNzZXMobGhzLCByaHMpO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBNZXJnZWRDbGFzc2VzPExocyBleHRlbmRzIFBpY2s8aC5KU1guSFRNTEF0dHJpYnV0ZXM8YW55PiwgXCJjbGFzc1wiIHwgXCJjbGFzc05hbWVcIj4gfCBudWxsIHwgdW5kZWZpbmVkLCBSaHMgZXh0ZW5kcyBQaWNrPGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT4sIFwiY2xhc3NcIiB8IFwiY2xhc3NOYW1lXCI+IHwgbnVsbCB8IHVuZGVmaW5lZD4gPVxyXG4gICAgTm9uTnVsbGFibGU8R2V0Qm90aENsYXNzZXM8TGhzPj4gZXh0ZW5kcyBuZXZlciA/XHJcbiAgICBOb25OdWxsYWJsZTxHZXRCb3RoQ2xhc3NlczxSaHM+PiBleHRlbmRzIG5ldmVyID9cclxuICAgIHVuZGVmaW5lZCB8IHN0cmluZyA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQm90aCBhcmUgb25seSBudWxsXHJcbiAgICBOb25OdWxsYWJsZTxHZXRCb3RoQ2xhc3NlczxSaHM+PiA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmhzIGNvbnRhaW5zIGEgdmFsdWUsIGxocyBpcyBvbmx5IG51bGxcclxuICAgIE5vbk51bGxhYmxlPEdldEJvdGhDbGFzc2VzPFJocz4+IGV4dGVuZHMgbmV2ZXIgPyBOb25OdWxsYWJsZTxHZXRCb3RoQ2xhc3NlczxMaHM+PiA6ICAgIC8vIExocyBjb250YWlucyBhIHZhbHVlLCByaHMgaXMgb25seSBudWxsXHJcbiAgICBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJvdGggdHlwZXMgYXJlIG5vbi1udWxsXHJcblxyXG5cclxuXHJcbnR5cGUgR2V0Q2xhc3NPclVuZGVmaW5lZDxUIGV4dGVuZHMgeyBjbGFzcz86IGFueSB9IHwgbnVsbCB8IHVuZGVmaW5lZD4gPSBUIGV4dGVuZHMgeyBjbGFzczogaW5mZXIgVSB9ID8gVSA6IHVuZGVmaW5lZDtcclxudHlwZSBHZXRDbGFzc05hbWVPclVuZGVmaW5lZDxUIGV4dGVuZHMgeyBjbGFzc05hbWU/OiBhbnkgfSB8IG51bGwgfCB1bmRlZmluZWQ+ID0gVCBleHRlbmRzIHsgY2xhc3NOYW1lOiBpbmZlciBVIH0gPyBVIDogdW5kZWZpbmVkO1xyXG50eXBlIEdldEJvdGhDbGFzc2VzPFQgZXh0ZW5kcyB7IGNsYXNzPzogYW55LCBjbGFzc05hbWU/OiBhbnkgfSB8IG51bGwgfCB1bmRlZmluZWQ+ID1cclxuTm9uTnVsbGFibGU8R2V0Q2xhc3NPclVuZGVmaW5lZDxUPiB8IEdldENsYXNzTmFtZU9yVW5kZWZpbmVkPFQ+PiBleHRlbmRzIG5ldmVyPyB1bmRlZmluZWQgOiBzdHJpbmc7XHJcblxyXG5leHBvcnQgdHlwZSBNZXJnZUNsYXNzZXNQcm9wcyA9IFBpY2s8aC5KU1guSFRNTEF0dHJpYnV0ZXM8YW55PiwgXCJjbGFzc1wiIHwgXCJjbGFzc05hbWVcIj47XHJcblxyXG5mdW5jdGlvbiBtZXJnZUNsYXNzZXM8TGhzIGV4dGVuZHMgTWVyZ2VDbGFzc2VzUHJvcHMgfCBudWxsIHwgdW5kZWZpbmVkLCBSaHMgZXh0ZW5kcyBNZXJnZUNsYXNzZXNQcm9wcyB8IG51bGwgfCB1bmRlZmluZWQ+KGxoczogTGhzLCByaHM6IFJocyk6IE1lcmdlZENsYXNzZXM8TGhzLCBSaHM+IHtcclxuICAgIGNvbnN0IGxoc0NsYXNzID0gbGhzPy5jbGFzcztcclxuICAgIGNvbnN0IGxoc0NsYXNzTmFtZSA9IGxocz8uY2xhc3NOYW1lO1xyXG4gICAgY29uc3QgcmhzQ2xhc3MgPSByaHM/LmNsYXNzO1xyXG4gICAgY29uc3QgcmhzQ2xhc3NOYW1lID0gcmhzPy5jbGFzc05hbWU7XHJcblxyXG4gICAgaWYgKGxoc0NsYXNzIHx8IHJoc0NsYXNzIHx8IGxoc0NsYXNzTmFtZSB8fCByaHNDbGFzc05hbWUpIHtcclxuICAgICAgICBjb25zdCBsaHNDbGFzc2VzID0gY2xzeChsaHNDbGFzcywgbGhzQ2xhc3NOYW1lKS5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgY29uc3QgcmhzQ2xhc3NlcyA9IGNsc3gocmhzQ2xhc3MsIHJoc0NsYXNzTmFtZSkuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgIGNvbnN0IGFsbENsYXNzZXMgPSBuZXcgU2V0KFsuLi5BcnJheS5mcm9tKGxoc0NsYXNzZXMpLCAuLi5BcnJheS5mcm9tKHJoc0NsYXNzZXMpXSlcclxuXHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYWxsQ2xhc3Nlcykuam9pbihcIiBcIikgYXMgTWVyZ2VkQ2xhc3NlczxMaHMsIFJocz47XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkIGFzIE1lcmdlZENsYXNzZXM8TGhzLCBSaHM+O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFJlZiwgUmVmQ2FsbGJhY2ssIFJlZk9iamVjdCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcblxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc1JlZjxUPihpbnN0YW5jZTogVCB8IG51bGwsIHJlZjogUmVmPFQ+IHwgbnVsbCB8IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKHR5cGVvZiByZWYgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHJlZihpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChyZWYgIT0gbnVsbCkge1xyXG4gICAgICAgIChyZWYgYXMgUmVmT2JqZWN0PFQgfCBudWxsPikuY3VycmVudCA9IGluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZGVidWdnZXIgKi9cclxuICAgICAgICBkZWJ1Z2dlcjtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChmYWxzZSwgXCJVbmtub3duIHJlZiB0eXBlIGZvdW5kIHRoYXQgd2FzIG5laXRoZXIgYSBSZWZDYWxsYmFjayBub3IgYSBSZWZPYmplY3RcIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmludGVyZmFjZSBSPEU+IHtcclxuICAgIHJlZj86IFJlZjxFPjtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb21iaW5lcyB0d28gcmVmcyBpbnRvIG9uZS4gVGhpcyBhbGxvd3MgYSBjb21wb25lbnQgdG8gYm90aCB1c2UgaXRzIG93biByZWYgKmFuZCogZm9yd2FyZCBhIHJlZiB0aGF0IHdhcyBnaXZlbiB0byBpdC5cclxuICogQHBhcmFtIGxocyBcclxuICogQHBhcmFtIHJocyBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVyZ2VkUmVmczxFIGV4dGVuZHMgRXZlbnRUYXJnZXQ+KCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIDxMaHMgZXh0ZW5kcyBSPEU+LCBSaHMgZXh0ZW5kcyBSPEU+PihsaHNQcm9wczogTGhzIHwgbnVsbCB8IHVuZGVmaW5lZCwgcmhzUHJvcHM6IFJocyB8IG51bGwgfCB1bmRlZmluZWQpOiBSZWY8RT4ge1xyXG5cclxuICAgICAgICBjb25zdCBsaHMgPSBsaHNQcm9wcz8ucmVmO1xyXG4gICAgICAgIGNvbnN0IHJocyA9IHJoc1Byb3BzPy5yZWY7XHJcbiAgICAgICAgY29uc3QgY29tYmluZWQ6IFJlZkNhbGxiYWNrPEU+ID0gdXNlQ2FsbGJhY2soKGN1cnJlbnQ6IEUgfCBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgIHByb2Nlc3NSZWYoY3VycmVudCwgbGhzKTtcclxuICAgICAgICAgICAgcHJvY2Vzc1JlZihjdXJyZW50LCByaHMpO1xyXG4gICAgICAgIH0sIFtsaHMsIHJoc10pO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGxocyA9PSBudWxsICYmIHJocyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaHMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmhzITtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocmhzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxocyE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY29tYmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcblxyXG5mdW5jdGlvbiBzdHlsZVN0cmluZ1RvT2JqZWN0KHN0eWxlOiBzdHJpbmcpOiBoLkpTWC5DU1NQcm9wZXJ0aWVzIHtcclxuICAgIC8vIFRPRE86IFRoaXMgc3Vja3MgRDpcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoc3R5bGUuc3BsaXQoXCI7XCIpLm1hcChzdGF0ZW1lbnQgPT4gc3RhdGVtZW50LnNwbGl0KFwiOlwiKSkpIGFzIHVua25vd24gYXMgaC5KU1guQ1NTUHJvcGVydGllcztcclxufVxyXG5cclxuLyoqXHJcbiAqIE1lcmdlcyB0d28gc3R5bGUgb2JqZWN0cywgcmV0dXJuaW5nIHRoZSByZXN1bHQuXHJcbiAqIFxyXG4gKiBAcGFyYW0gc3R5bGUgVGhlIHVzZXItZ2l2ZW4gc3R5bGUgcHJvcCBmb3IgdGhpcyBjb21wb25lbnRcclxuICogQHBhcmFtIG9iaiBUaGUgQ1NTIHByb3BlcnRpZXMgeW91IHdhbnQgYWRkZWQgdG8gdGhlIHVzZXItZ2l2ZW4gc3R5bGVcclxuICogQHJldHVybnMgQSBDU1Mgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgYm90aCBvYmplY3RzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lcmdlZFN0eWxlczxMaHMgZXh0ZW5kcyBQaWNrPGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT4sIFwic3R5bGVcIj4gfCBudWxsIHwgdW5kZWZpbmVkLCBSaHMgZXh0ZW5kcyBQaWNrPGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT4sIFwic3R5bGVcIj4gfCBudWxsIHwgdW5kZWZpbmVkPihsaHM6IExocywgcmhzOiBSaHMpOiB1bmRlZmluZWQgfCBzdHJpbmcgfCBoLkpTWC5DU1NQcm9wZXJ0aWVzIHtcclxuXHJcbiAgICAvLyBFYXN5IGNhc2UsIHdoZW4gdGhlcmUgYXJlIG5vIHN0eWxlcyB0byBtZXJnZSByZXR1cm4gbm90aGluZy5cclxuICAgIGlmICghbGhzPy5zdHlsZSAmJiAhcmhzPy5zdHlsZSlcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgIGlmICh0eXBlb2YgbGhzICE9IHR5cGVvZiByaHMpIHtcclxuICAgICAgICAvLyBFYXN5IGNhc2VzLCB3aGVuIG9uZSBpcyBudWxsIGFuZCB0aGUgb3RoZXIgaXNuJ3QuXHJcbiAgICAgICAgaWYgKGxocz8uc3R5bGUgJiYgIXJocz8uc3R5bGUpXHJcbiAgICAgICAgICAgIHJldHVybiBsaHMuc3R5bGU7XHJcbiAgICAgICAgaWYgKCFsaHM/LnN0eWxlICYmIHJocz8uc3R5bGUpXHJcbiAgICAgICAgICAgIHJldHVybiByaHMuc3R5bGU7XHJcblxyXG4gICAgICAgIC8vIFRoZXkncmUgYm90aCBub24tbnVsbCBidXQgZGlmZmVyZW50IHR5cGVzLlxyXG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHN0cmluZyB0eXBlIHRvIGFuIG9iamVjdCBiYWcgdHlwZSBhbmQgcnVuIGl0IGFnYWluLlxyXG4gICAgICAgIGlmIChsaHM/LnN0eWxlICYmIHJocz8uc3R5bGUpIHtcclxuICAgICAgICAgICAgLy8gKHVzZU1lcmdlZFN0eWxlcyBpc24ndCBhIHRydWUgaG9vayAtLSB0aGlzIGlzbid0IGEgdmlvbGF0aW9uKVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxocz8uc3R5bGUgPT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRTdHlsZXMoeyBzdHlsZTogc3R5bGVTdHJpbmdUb09iamVjdChsaHM/LnN0eWxlIGFzIHN0cmluZykgfSwgcmhzKSBhcyBoLkpTWC5DU1NQcm9wZXJ0aWVzO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJocz8uc3R5bGUgPT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRTdHlsZXMobGhzLCB7IHN0eWxlOiBzdHlsZVN0cmluZ1RvT2JqZWN0KHJocz8uc3R5bGUgYXMgc3RyaW5nKSB9KSBhcyBoLkpTWC5DU1NQcm9wZXJ0aWVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9naWM/Pz9cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoZXkncmUgYm90aCBzdHJpbmdzLCBqdXN0IGNvbmNhdGVuYXRlIHRoZW0uXHJcbiAgICBpZiAodHlwZW9mIGxocz8uc3R5bGUgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiBgJHtsaHMuc3R5bGV9OyR7cmhzPy5zdHlsZSA/PyBcIlwifWAgYXMgdW5rbm93biBhcyBzdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhleSdyZSBib3RoIG9iamVjdHMsIGp1c3QgbWVyZ2UgdGhlbS5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uKGxocz8uc3R5bGUgPz8ge30pIGFzIGguSlNYLkNTU1Byb3BlcnRpZXMsXHJcbiAgICAgICAgLi4uKHJocz8uc3R5bGUgPz8ge30pIGFzIGguSlNYLkNTU1Byb3BlcnRpZXNcclxuICAgIH0gYXMgdW5rbm93biBhcyBoLkpTWC5DU1NQcm9wZXJ0aWVzXHJcbn1cclxuXHJcbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZENoaWxkcmVuIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1jaGlsZHJlblwiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRDbGFzc2VzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1jbGFzc2VzXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFJlZnMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXJlZnNcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkU3R5bGVzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1zdHlsZXNcIjtcclxuXHJcbmxldCBsb2cgPSBjb25zb2xlLndhcm47XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlTG9nZ2luZ1Byb3BDb25mbGljdHMobG9nMjogdHlwZW9mIGNvbnNvbGVbXCJsb2dcIl0pIHtcclxuICAgIGxvZyA9IGxvZzJcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgdHlwZSB0aGF0IHJlcHJlc2VudHMgdGhlIG1lcmdpbmcgb2YgdHdvIHByb3Agb2JqZWN0c1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVyZ2VkUHJvcHM8RSBleHRlbmRzIEV2ZW50VGFyZ2V0LCBUIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4sIFUgZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxFPj4gPSBoLkpTWC5IVE1MQXR0cmlidXRlczxFPiAmIE9taXQ8VCwga2V5b2YgaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4+ICYgT21pdDxVLCBrZXlvZiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPj47XHJcblxyXG4vKipcclxuICogR2l2ZW4gdHdvIHNldHMgb2YgcHJvcHMsIG1lcmdlcyB0aGVtIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuXHJcbiAqIFxyXG4gKiBUaGUgaG9vayBpcyBhd2FyZSBvZiBhbmQgY2FuIGludGVsbGlnZW50bHkgbWVyZ2UgYGNsYXNzTmFtZWAsIGBjbGFzc2AsIGBzdHlsZWAsIGByZWZgLCBhbmQgYWxsIGV2ZW50IGhhbmRsZXJzLlxyXG4gKiBAcGFyYW0gbGhzMiBcclxuICogQHBhcmFtIHJoczIgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lcmdlZFByb3BzPEUgZXh0ZW5kcyBFdmVudFRhcmdldD4oKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gPFQgZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxFPiwgVSBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+PihsaHNBbGw6IFQsIHJoc0FsbDogVSk6IE1lcmdlZFByb3BzPEUsIFQsIFU+IHtcclxuXHJcblxyXG4gICAgICAgIC8vIEZpcnN0LCBzZXBhcmF0ZSB0aGUgcHJvcHMgd2Ugd2VyZSBnaXZlbiBpbnRvIHR3byBncm91cHM6XHJcbiAgICAgICAgLy8gbGhzQWxsIGFuZCByaHNBbGwgY29udGFpbiBhbGwgdGhlIHByb3BzIHdlIHdlcmUgZ2l2ZW4sIGFuZFxyXG4gICAgICAgIC8vIGxoc01pc2MgYW5kIHJoc01pc2MgY29udGFpbiBhbGwgcHJvcHMgKmV4Y2VwdCogZm9yIHRoZSBlYXN5IG9uZXNcclxuICAgICAgICAvLyBsaWtlIGNsYXNzTmFtZSBhbmQgc3R5bGUgdGhhdCB3ZSBhbHJlYWR5IGtub3cgaG93IHRvIG1lcmdlLlxyXG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW46IF9saHNDaGlsZHJlbiwgY2xhc3M6IF9saHNDbGFzcywgY2xhc3NOYW1lOiBfbGhzQ2xhc3NOYW1lLCBzdHlsZTogX2xoc1N0eWxlLCByZWY6IF9saHNSZWYsIC4uLmxoc01pc2MgfSA9IGxoc0FsbDtcclxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuOiBfcmhzQ2hpbGRyZW4sIGNsYXNzOiBfcmhzQ2xhc3MsIGNsYXNzTmFtZTogX3Joc0NsYXNzTmFtZSwgc3R5bGU6IF9yaHNTdHlsZSwgcmVmOiBfcmhzUmVmLCAuLi5yaHNNaXNjIH0gPSByaHNBbGw7XHJcblxyXG4gICAgICAgIGNvbnN0IHJldDogTWVyZ2VkUHJvcHM8RSwgVCwgVT4gPSB7XHJcbiAgICAgICAgICAgIC4uLmxoc01pc2MsXHJcbiAgICAgICAgICAgIHJlZjogdXNlTWVyZ2VkUmVmczxFPigpKGxoc0FsbCwgcmhzQWxsKSxcclxuICAgICAgICAgICAgc3R5bGU6IHVzZU1lcmdlZFN0eWxlcyhsaHNBbGwsIHJoc0FsbCksXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogdXNlTWVyZ2VkQ2xhc3NlcyhsaHNBbGwsIHJoc0FsbCksXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiB1c2VNZXJnZWRDaGlsZHJlbihsaHNBbGwsIHJoc0FsbCksXHJcbiAgICAgICAgfSBhcyBhbnk7XHJcblxyXG4gICAgICAgIGlmIChyZXQucmVmID09PSB1bmRlZmluZWQpIGRlbGV0ZSByZXQucmVmO1xyXG4gICAgICAgIGlmIChyZXQuc3R5bGUgPT09IHVuZGVmaW5lZCkgZGVsZXRlIHJldC5zdHlsZTtcclxuICAgICAgICBpZiAocmV0LmNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkKSBkZWxldGUgcmV0LmNsYXNzTmFtZTtcclxuICAgICAgICBpZiAocmV0LmNoaWxkcmVuID09PSB1bmRlZmluZWQpIGRlbGV0ZSByZXQuY2hpbGRyZW47XHJcblxyXG4gICAgICAgIC8vIE5vdywgZG8gKmV2ZXJ5dGhpbmcqIGVsc2VcclxuICAgICAgICAvLyBNZXJnZSBldmVyeSByZW1haW5pbmcgZXhpc3RpbmcgZW50cnkgaW4gbGhzIHdpdGggd2hhdCB3ZSd2ZSBhbHJlYWR5IHB1dCBpbiByZXQuXHJcbiAgICAgICAgLy9jb25zdCBsaHNFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMobGhzKSBhcyBba2V5b2YgVCwgVFtrZXlvZiBUXV1bXTtcclxuICAgICAgICBjb25zdCByaHNFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMocmhzTWlzYykgYXMgW2tleW9mIFUsIFVba2V5b2YgVV1dW107XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgW3Joc0tleSwgcmhzVmFsdWVdIG9mIHJoc0VudHJpZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxoc1ZhbHVlID0gbGhzTWlzY1tyaHNLZXkgYXMga2V5b2YgdHlwZW9mIGxoc01pc2NdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsaHNWYWx1ZSA9PT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiByaHNWYWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGhleSdyZSBib3RoIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBtZXJnZWQgKG9yIG9uZSdzIGEgZnVuY3Rpb24gYW5kIHRoZSBvdGhlcidzIG51bGwpLlxyXG4gICAgICAgICAgICAgICAgLy8gTm90IGFuICplYXN5KiBjYXNlLCBidXQgYSB3ZWxsLWRlZmluZWQgb25lLlxyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VGdW5jdGlvbnMobGhzVmFsdWUgYXMgbmV2ZXIsIHJoc1ZhbHVlIGFzIG5ldmVyKTtcclxuICAgICAgICAgICAgICAgIHJldFtyaHNLZXkgYXMga2V5b2YgTWVyZ2VkUHJvcHM8RSwgVCwgVT5dID0gbWVyZ2VkIGFzIG5ldmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gVWguLi53ZSdyZSBoZXJlIGJlY2F1c2Ugb25lIG9mIHRoZW0ncyBudWxsLCByaWdodD9cclxuICAgICAgICAgICAgICAgIGlmIChsaHNWYWx1ZSA9PSBudWxsICYmIHJoc1ZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmhzVmFsdWUgPT09IG51bGwgJiYgbGhzVmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0W3Joc0tleSBhcyBrZXlvZiBNZXJnZWRQcm9wczxFLCBULCBVPl0gPSByaHNWYWx1ZSBhcyBuZXZlcjtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldFtyaHNLZXkgYXMga2V5b2YgTWVyZ2VkUHJvcHM8RSwgVCwgVT5dID0gbGhzVmFsdWUgYXMgbmV2ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobGhzVmFsdWUgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICByZXRbcmhzS2V5IGFzIGtleW9mIE1lcmdlZFByb3BzPEUsIFQsIFU+XSA9IHJoc1ZhbHVlIGFzIG5ldmVyO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmhzVmFsdWUgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICByZXRbcmhzS2V5IGFzIGtleW9mIE1lcmdlZFByb3BzPEUsIFQsIFU+XSA9IGxoc1ZhbHVlIGFzIG5ldmVyO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHJoc1ZhbHVlIGFzIGFueSkgPT0gbGhzVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJIG1lYW4sIHRoZXkncmUgdGhlIHNhbWUgdmFsdWUgYXQgbGVhc3RcclxuICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCByZWFsbHkgaWRlYWwgdGhvdWdoLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVWdoLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIGdvb2Qgc3RyYXRlZ2llcyBoZXJlLCBqdXN0IGxvZyBpdCBpZiByZXF1ZXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICBsb2c/LihgVGhlIHByb3AgXCIke3R5cGVvZiByaHNLZXkgPT0gXCJzeW1ib2xcIiA/IFwiPHN5bWJvbD5cIiA6IHJoc0tleSBhcyBzdHJpbmd9XCIgY2Fubm90IHNpbXVsdGFuZW91c2x5IGJlIHRoZSB2YWx1ZXMgJHtsaHNWYWx1ZX0gYW5kICR7cmhzVmFsdWV9LiBPbmUgbXVzdCBiZSBjaG9zZW4gb3V0c2lkZSBvZiB1c2VNZXJnZWRQcm9wcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICByZXRbcmhzS2V5IGFzIGtleW9mIE1lcmdlZFByb3BzPEUsIFQsIFU+XSA9IHJoc1ZhbHVlIGFzIG5ldmVyXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lcmdlRnVuY3Rpb25zPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueSwgVSBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihsaHM6IFQgfCBudWxsIHwgdW5kZWZpbmVkLCByaHM6IFUgfCBudWxsIHwgdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgaWYgKCFsaHMpXHJcbiAgICAgICAgcmV0dXJuIHJocztcclxuICAgIGlmICghcmhzKVxyXG4gICAgICAgIHJldHVybiBsaHM7XHJcblxyXG4gICAgcmV0dXJuICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbHYgPSBsaHMoLi4uYXJncyk7XHJcbiAgICAgICAgY29uc3QgcnYgPSByaHMoLi4uYXJncyk7XHJcblxyXG4gICAgICAgIGlmIChsdiBpbnN0YW5jZW9mIFByb21pc2UgfHwgcnYgaW5zdGFuY2VvZiBQcm9taXNlKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2x2LCBydl0pO1xyXG4gICAgfTtcclxufVxyXG5cclxuLypcclxuZnVuY3Rpb24gdGVzdDxQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4+KHByb3BzOiBQKSB7XHJcblxyXG4gICAgY29uc3QgaWQwOiBHZW5lcmljR2V0PHt9LCBcImlkXCIsIHN0cmluZz4gPSBcIlwiO1xyXG4gICAgY29uc3QgaWQzOiBHZW5lcmljR2V0PHsgaWQ6IHVuZGVmaW5lZCB9LCBcImlkXCIsIHN0cmluZz4gPSB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCBpZDQ6IEdlbmVyaWNHZXQ8eyBpZDogdW5kZWZpbmVkIH0sIFwiaWRcIiwgc3RyaW5nPiA9IHVuZGVmaW5lZDtcclxuICAgIGNvbnN0IGlkNTogR2VuZXJpY0dldDx7IGlkOiB1bmRlZmluZWQgfSwgXCJpZFwiLCBzdHJpbmc+ID0gdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgaWQ2OiBHZW5lcmljR2V0PHsgaWQ6IHVuZGVmaW5lZCB9LCBcImlkXCIsIHN0cmluZz4gPSB1bmRlZmluZWQ7XHJcbiAgICAvL2NvbnN0IGlkMjogWmlwU2luZ2xlPHN0cmluZyB8IHVuZGVmaW5lZCwgc3RyaW5nIHwgdW5kZWZpbmVkPiA9IHVuZGVmaW5lZDtcclxuICAgIGNvbnN0IGlkMTogWmlwT2JqZWN0PHsgaWQ6IHVuZGVmaW5lZCB9LCB7IGlkOiBzdHJpbmcgfT4gPSB7IGlkOiB1bmRlZmluZWQgfTtcclxuXHJcbiAgICB0eXBlIE0xID0gR2VuZXJpY0dldDxQLCBcInN0eWxlXCIsIHN0cmluZz47XHJcbiAgICB0eXBlIE0yID0gR2VuZXJpY0dldDx7fSwgXCJzdHlsZVwiLCBzdHJpbmc+O1xyXG4gICAgY29uc3QgbTE6IE0xID0gXCJcIjtcclxuICAgIGNvbnN0IG0yOiBNMSA9IHVuZGVmaW5lZDtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIEJlY2F1c2UgbnVtYmVyIGlzbid0IGFzc2lnbmFibGUgdG8gc3RyaW5nXHJcbiAgICBjb25zdCBtMzogTTEgPSAwO1xyXG5cclxuICAgIGNvbnN0IG00OiBNMiA9IFwiXCI7XHJcbiAgICBjb25zdCBtNTogTTIgPSB1bmRlZmluZWQ7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBCZWNhdXNlIG51bWJlciBpc24ndCBhc3NpZ25hYmxlIHRvIHN0cmluZ1xyXG4gICAgY29uc3QgbTY6IE0yID0gMDtcclxuXHJcbiAgICBjb25zdCBwMTogTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudCwge30sIHsgaWQ6IHN0cmluZyB9PiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHsgaWQ6IFwic3RyaW5nXCIgfSk7XHJcbiAgICBjb25zdCBwMjogTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudCwgeyBpZDogdW5kZWZpbmVkIH0sIHsgaWQ6IHN0cmluZyB9PiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoeyBpZDogdW5kZWZpbmVkIH0sIHsgaWQ6IFwic3RyaW5nXCIgfSk7XHJcbiAgICBjb25zdCBwMzogTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudCwgeyBpZDogdW5kZWZpbmVkIH0sIHsgaWQ6IHVuZGVmaW5lZCB9PiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoeyBpZDogdW5kZWZpbmVkIH0sIHsgaWQ6IHVuZGVmaW5lZCB9KTtcclxuICAgIGNvbnN0IHA0OiBNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50LCB7fSwge30+ID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwge30pO1xyXG4gICAgY29uc3QgcDUgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCB7fSk7XHJcbiAgICBjb25zdCBwNiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHsgaWQ6IHVuZGVmaW5lZCB9KTtcclxuICAgIGNvbnN0IHA3ID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgeyBpZDogXCJzdHJpbmdcIiB9KTtcclxuXHJcblxyXG4gICAgcDEuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHAyLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBjYW4ndCBiZSBhbnl0aGluZyBidXQgdW5kZWZpbmVkXHJcbiAgICBwMy5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgY2FuJ3QgYmUgYW55dGhpbmcgYnV0IHVuZGVmaW5lZFxyXG4gICAgcDQuaWQ/LmNvbmNhdChcIlwiKTtcclxuXHJcblxyXG4gICAgcDUuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHA2LmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICBwNy5pZD8uY29uY2F0KFwiXCIpO1xyXG5cclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHA1LmlkLmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHA2LmlkLmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHA3LmlkLmNvbmNhdChcIlwiKTtcclxuXHJcblxyXG4gICAgaWYgKHA1LmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocDUuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHA1LmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihwNS5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAocDYuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChwNi5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocDYuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHA2LmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmIChwNy5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHA3LmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChwNy5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocDcuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gTWFrZSBzdXJlIGl0IHdvcmtzIHJlY3Vyc2l2ZWx5XHJcbiAgICBjb25zdCByMWEgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCBwMSk7XHJcbiAgICBjb25zdCByMWIgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCBwMSk7XHJcbiAgICBjb25zdCByMmEgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCBwMik7XHJcbiAgICBjb25zdCByMmIgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCBwMik7XHJcbiAgICBjb25zdCByM2EgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCBwMyk7XHJcbiAgICBjb25zdCByM2IgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCBwMyk7XHJcbiAgICBjb25zdCByNGEgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCBwNCk7XHJcbiAgICBjb25zdCByNGIgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCBwNCk7XHJcbiAgICBjb25zdCByNWEgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCBwNSk7XHJcbiAgICBjb25zdCByNWIgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCBwNSk7XHJcbiAgICBjb25zdCByNmEgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCBwNik7XHJcbiAgICBjb25zdCByNmIgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCBwNik7XHJcbiAgICBjb25zdCByN2EgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCBwNyk7XHJcbiAgICBjb25zdCByN2IgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCBwNyk7XHJcblxyXG5cclxuICAgIHIxYS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjFiLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByMmEuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHIyYi5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBjYW4ndCBiZSBhbnl0aGluZyBidXQgdW5kZWZpbmVkXHJcbiAgICByM2EuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHIzYi5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgY2FuJ3QgYmUgYW55dGhpbmcgYnV0IHVuZGVmaW5lZFxyXG4gICAgcjRhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByNGIuaWQ/LmNvbmNhdChcIlwiKTtcclxuXHJcblxyXG4gICAgcjVhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByNWIuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHI2YS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjZiLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByN2EuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHI3Yi5pZD8uY29uY2F0KFwiXCIpO1xyXG5cclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHI1YS5pZC5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICByNWIuaWQuY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcjZhLmlkLmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHI2Yi5pZC5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICByN2EuaWQuY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcjdiLmlkLmNvbmNhdChcIlwiKTtcclxuXHJcblxyXG4gICAgaWYgKHI1YS5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHI1YS5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocjVhLmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihyNWEuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHI1Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHI1Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocjViLmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihyNWIuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHI2YS5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHI2YS5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocjZhLmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihyNmEuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHI2Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHI2Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocjZiLmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihyNmIuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHI3YS5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHI3YS5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocjdhLmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihyN2EuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHI3Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHI3Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocjdiLmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihyN2IuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcbn1cclxuZnVuY3Rpb24gYWNjZXB0c05ldmVyKG46IG5ldmVyKSB7fVxyXG4qLyIsImltcG9ydCB7IGgsIFJlZkNhbGxiYWNrIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgTWVyZ2VkUHJvcHMsIHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyBPblBhc3NpdmVTdGF0ZUNoYW5nZSwgdXNlRW5zdXJlU3RhYmlsaXR5LCB1c2VQYXNzaXZlU3RhdGUgfSBmcm9tIFwiLi91c2UtcGFzc2l2ZS1zdGF0ZVwiO1xyXG5cclxuZXhwb3J0IHR5cGUgVXNlUmVmRWxlbWVudFByb3BzUmV0dXJuVHlwZTxUIGV4dGVuZHMgRXZlbnRUYXJnZXQsIFAgZXh0ZW5kcyB7fT4gPSBNZXJnZWRQcm9wczxULCBQLCB7fT47XHJcblxyXG5leHBvcnQgdHlwZSBVc2VSZWZFbGVtZW50UHJvcHM8VCBleHRlbmRzIEV2ZW50VGFyZ2V0PiA9IDxQIGV4dGVuZHMge30+KHByb3BzOiBQKSA9PiBVc2VSZWZFbGVtZW50UHJvcHNSZXR1cm5UeXBlPFQsIFA+O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VSZWZFbGVtZW50UmV0dXJuVHlwZTxUIGV4dGVuZHMgRXZlbnRUYXJnZXQ+IHtcclxuICAgIGdldEVsZW1lbnQ6ICgpID0+IFQgfCBudWxsO1xyXG4gICAgdXNlUmVmRWxlbWVudFByb3BzOiBVc2VSZWZFbGVtZW50UHJvcHM8VD47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlUmVmRWxlbWVudFBhcmFtZXRlcnM8VD4ge1xyXG4gICAgb25FbGVtZW50Q2hhbmdlPzogT25QYXNzaXZlU3RhdGVDaGFuZ2U8VCB8IG51bGw+O1xyXG4gICAgb25Nb3VudD86IChlbGVtZW50OiBUKSA9PiB2b2lkO1xyXG4gICAgb25Vbm1vdW50PzogKGVsZW1lbnQ6IFQpID0+IHZvaWQ7XHJcbn1cclxuZnVuY3Rpb24gcmV0dXJuTnVsbCgpIHsgcmV0dXJuIG51bGw7IH1cclxuLyoqXHJcbiAqIEFsbG93cyBhY2Nlc3NpbmcgdGhlIGVsZW1lbnQgYSByZWYgcmVmZXJlbmNlcyBhcyBzb29uIGFzIGl0IGRvZXMgc28uXHJcbiAqICpUaGlzIGhvb2sgaXRzZWxmIHJldHVybnMgYSBob29rKi0tdXNlUmVmRWxlbWVudFByb3BzIG1vZGlmaWVzIHRoZSBwcm9wcyB0aGF0IHlvdSB3ZXJlIGdvaW5nIHRvIHBhc3MgdG8gYW4gSFRNTEVsZW1lbnQsIFxyXG4gKiBhZGRpbmcgYSBSZWZDYWxsYmFjayBhbmQgbWVyZ2luZyBpdCB3aXRoIGFueSBleGlzdGluZyByZWYgdGhhdCBleGlzdGVkIG9uIHRoZSBwcm9wcy5cclxuICogXHJcbiAqIERvbid0IGZvcmdldCB0byBwcm92aWRlIHRoZSBFbGVtZW50IGFzIHRoZSB0eXBlIGFyZ3VtZW50IVxyXG4gKiBcclxuICogQHJldHVybnMgVGhlIGVsZW1lbnQsIGFuZCB0aGUgc3ViLWhvb2sgdGhhdCBtYWtlcyBpdCByZXRyaWV2YWJsZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWZFbGVtZW50PFQgZXh0ZW5kcyBFdmVudFRhcmdldD4oYXJncz86IFVzZVJlZkVsZW1lbnRQYXJhbWV0ZXJzPFQ+KTogVXNlUmVmRWxlbWVudFJldHVyblR5cGU8VD4ge1xyXG4gICAgY29uc3QgeyBvbkVsZW1lbnRDaGFuZ2UsIG9uTW91bnQsIG9uVW5tb3VudCB9ID0gKGFyZ3MgPz8ge30pO1xyXG5cclxuICAgIHVzZUVuc3VyZVN0YWJpbGl0eShcInVzZVJlZkVsZW1lbnRcIiwgb25FbGVtZW50Q2hhbmdlLCBvbk1vdW50LCBvblVubW91bnQpO1xyXG5cclxuICAgIC8vIENhbGxlZCAoaW5kaXJlY3RseSkgYnkgdGhlIHJlZiB0aGF0IHRoZSBlbGVtZW50IHJlY2VpdmVzLlxyXG4gICAgY29uc3QgaGFuZGxlciA9IHVzZUNhbGxiYWNrPE9uUGFzc2l2ZVN0YXRlQ2hhbmdlPFQgfCBudWxsPj4oKGUsIHByZXZWYWx1ZSkgPT4ge1xyXG4gICAgICAgIG9uRWxlbWVudENoYW5nZT8uKGUsIHByZXZWYWx1ZSk7XHJcbiAgICAgICAgaWYgKHByZXZWYWx1ZSlcclxuICAgICAgICAgICAgb25Vbm1vdW50Py4ocHJldlZhbHVlISk7XHJcblxyXG4gICAgICAgIGlmIChlKVxyXG4gICAgICAgICAgICBvbk1vdW50Py4oZSk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgLy8gTGV0IHVzIHN0b3JlIHRoZSBhY3R1YWwgKHJlZmVyZW5jZSB0bykgdGhlIGVsZW1lbnQgd2UgY2FwdHVyZVxyXG4gICAgY29uc3QgW2dldEVsZW1lbnQsIHNldEVsZW1lbnRdID0gdXNlUGFzc2l2ZVN0YXRlPFQgfCBudWxsPihoYW5kbGVyLCByZXR1cm5OdWxsKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBSZWZDYWxsYmFjayB0aGF0J3MgZmlyZWQgd2hlbiBtb3VudGVkIFxyXG4gICAgLy8gYW5kIHRoYXQgbm90aWZpZXMgdXMgb2Ygb3VyIGVsZW1lbnQgd2hlbiB3ZSBoYXZlIGl0XHJcbiAgICBjb25zdCBteVJlZjogUmVmQ2FsbGJhY2s8VD4gPSB1c2VDYWxsYmFjaygoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlKVxyXG4gICAgICAgICAgICBzZXRFbGVtZW50KCgpID0+IGUpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IHVzZVJlZkVsZW1lbnRQcm9wcyA9IHVzZUNhbGxiYWNrPFVzZVJlZkVsZW1lbnRQcm9wczxUPj4oPFAgZXh0ZW5kcyB7fT4ocHJvcHM6IFApOiBVc2VSZWZFbGVtZW50UHJvcHNSZXR1cm5UeXBlPFQsIFA+ID0+IHVzZU1lcmdlZFByb3BzPFQ+KCkoeyByZWY6IG15UmVmIH0sIHByb3BzKSwgW10pO1xyXG5cclxuICAgIC8vIFJldHVybiBib3RoIHRoZSBlbGVtZW50IGFuZCB0aGUgaG9vayB0aGF0IG1vZGlmaWVzIFxyXG4gICAgLy8gdGhlIHByb3BzIGFuZCBhbGxvd3MgdXMgdG8gYWN0dWFsbHkgZmluZCB0aGUgZWxlbWVudFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VSZWZFbGVtZW50UHJvcHMsXHJcbiAgICAgICAgZ2V0RWxlbWVudFxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gXCIuL3VzZS1kb2N1bWVudC1jbGFzc1wiO1xuaW1wb3J0IHsgT25QYXNzaXZlU3RhdGVDaGFuZ2UsIHJldHVybk51bGwsIHVzZUVuc3VyZVN0YWJpbGl0eSwgdXNlUGFzc2l2ZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcbmltcG9ydCB7IHVzZVJlZkVsZW1lbnQsIFVzZVJlZkVsZW1lbnRQcm9wcyB9IGZyb20gXCIuL3VzZS1yZWYtZWxlbWVudFwiO1xuXG5pbnRlcmZhY2UgVXNlRWxlbWVudFNpemVQYXJhbWV0ZXJzIHtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYW55IHRpbWUgdGhlIGJyb3dzZXIgZGV0ZWN0cyBhIHNpemUgY2hhbmdlXG4gICAgICogb24gdGhlIGVsZW1lbnQuIERvZXMgbm90IG5lZWQgdG8gYmUgc3RhYmxlLCBzbyB5b3VcbiAgICAgKiBjYW4gcGFzcyBhbiBhbm9ueW1vdXMgZnVuY3Rpb24gdGhhdCBvbmx5IHNldHMgdGhlXG4gICAgICogdmFsdWVzIHlvdSB1c2UgaWYgeW91J2QgbGlrZS5cbiAgICAgKiBAcGFyYW0gc2l6ZUluZm8gXG4gICAgICovXG4gICAgb25TaXplQ2hhbmdlKHNpemVJbmZvOiBFbGVtZW50U2l6ZSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBQYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIGNyZWF0ZWQgUmVzaXplT2JzZXJ2ZXIuXG4gICAgICogXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUmVzaXplT2JzZXJ2ZXIvb2JzZXJ2ZSNwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgZ2V0T2JzZXJ2ZUJveD8oKTogUmVzaXplT2JzZXJ2ZXJPcHRpb25zW1wiYm94XCJdO1xufVxuXG5leHBvcnQgdHlwZSBVc2VFbGVtZW50U2l6ZVByb3BzPEUgZXh0ZW5kcyBIVE1MRWxlbWVudD4gPSBVc2VSZWZFbGVtZW50UHJvcHM8RT47XG5leHBvcnQgaW50ZXJmYWNlIFVzZUVsZW1lbnRTaXplUHJvcHNQYXJhbWV0ZXJzPEUgZXh0ZW5kcyBIVE1MRWxlbWVudD4gZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxFPiB7IH1cblxuZXhwb3J0IGludGVyZmFjZSBFbGVtZW50U2l6ZSB7XG4gICAgY2xpZW50V2lkdGg6IG51bWJlcjtcbiAgICBzY3JvbGxXaWR0aDogbnVtYmVyO1xuICAgIG9mZnNldFdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgY2xpZW50SGVpZ2h0OiBudW1iZXI7XG4gICAgc2Nyb2xsSGVpZ2h0OiBudW1iZXI7XG4gICAgb2Zmc2V0SGVpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgY2xpZW50TGVmdDogbnVtYmVyO1xuICAgIHNjcm9sbExlZnQ6IG51bWJlcjtcbiAgICBvZmZzZXRMZWZ0OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgY2xpZW50VG9wOiBudW1iZXI7XG4gICAgc2Nyb2xsVG9wOiBudW1iZXI7XG4gICAgb2Zmc2V0VG9wOiBudW1iZXIgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlRWxlbWVudFNpemVSZXR1cm5UeXBlPEUgZXh0ZW5kcyBIVE1MRWxlbWVudD4ge1xuICAgIGdldEVsZW1lbnQoKTogRSB8IG51bGw7XG4gICAgZ2V0U2l6ZSgpOiBFbGVtZW50U2l6ZSB8IG51bGw7XG4gICAgdXNlRWxlbWVudFNpemVQcm9wczogVXNlRWxlbWVudFNpemVQcm9wczxFPjtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRWxlbWVudFNpemU8RSBleHRlbmRzIEhUTUxFbGVtZW50Pih7IGdldE9ic2VydmVCb3gsIG9uU2l6ZUNoYW5nZSB9OiBVc2VFbGVtZW50U2l6ZVBhcmFtZXRlcnMpOiBVc2VFbGVtZW50U2l6ZVJldHVyblR5cGU8RT4ge1xuXG4gICAgdXNlRW5zdXJlU3RhYmlsaXR5KFwidXNlRWxlbWVudFNpemVcIiwgZ2V0T2JzZXJ2ZUJveCwgb25TaXplQ2hhbmdlKTtcblxuICAgIGNvbnN0IFtnZXRTaXplLCBzZXRTaXplXSA9IHVzZVBhc3NpdmVTdGF0ZTxFbGVtZW50U2l6ZSB8IG51bGw+KG9uU2l6ZUNoYW5nZSBhcyBPblBhc3NpdmVTdGF0ZUNoYW5nZTxFbGVtZW50U2l6ZSB8IG51bGw+LCByZXR1cm5OdWxsKTtcblxuICAgIGNvbnN0IGN1cnJlbnRPYnNlcnZlQm94ID0gdXNlUmVmPFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuICAgIGNvbnN0IG5lZWRBTmV3T2JzZXJ2ZXIgPSB1c2VDYWxsYmFjaygoZWxlbWVudDogRSB8IG51bGwsIG9ic2VydmVCb3g6IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudChlbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVVcGRhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBjbGllbnRXaWR0aCwgc2Nyb2xsV2lkdGgsIG9mZnNldFdpZHRoLCBjbGllbnRIZWlnaHQsIHNjcm9sbEhlaWdodCwgb2Zmc2V0SGVpZ2h0LCBjbGllbnRMZWZ0LCBzY3JvbGxMZWZ0LCBvZmZzZXRMZWZ0LCBjbGllbnRUb3AsIHNjcm9sbFRvcCwgb2Zmc2V0VG9wIH0gPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBzZXRTaXplKHsgY2xpZW50V2lkdGgsIHNjcm9sbFdpZHRoLCBvZmZzZXRXaWR0aCwgY2xpZW50SGVpZ2h0LCBzY3JvbGxIZWlnaHQsIG9mZnNldEhlaWdodCwgY2xpZW50TGVmdCwgc2Nyb2xsTGVmdCwgb2Zmc2V0TGVmdCwgY2xpZW50VG9wLCBzY3JvbGxUb3AsIG9mZnNldFRvcCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKHdpbmRvdyAmJiAoXCJSZXNpemVPYnNlcnZlclwiIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoX2VudHJpZXMpID0+IHsgaGFuZGxlVXBkYXRlKCk7IH0pO1xuXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7IGJveDogb2JzZXJ2ZUJveCB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGhhbmRsZVVwZGF0ZSwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGhhbmRsZVVwZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbXSlcblxuICAgIGNvbnN0IHsgZ2V0RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50PEU+KHsgb25FbGVtZW50Q2hhbmdlOiB1c2VDYWxsYmFjaygoZTogRSB8IG51bGwpID0+IG5lZWRBTmV3T2JzZXJ2ZXIoZSwgZ2V0T2JzZXJ2ZUJveD8uKCkpLCBbXSkgfSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoZ2V0T2JzZXJ2ZUJveCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRPYnNlcnZlQm94LmN1cnJlbnQgIT09IGdldE9ic2VydmVCb3goKSlcbiAgICAgICAgICAgICAgICBuZWVkQU5ld09ic2VydmVyKGdldEVsZW1lbnQoKSwgZ2V0T2JzZXJ2ZUJveCgpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0RWxlbWVudCxcbiAgICAgICAgZ2V0U2l6ZSxcbiAgICAgICAgdXNlRWxlbWVudFNpemVQcm9wczogdXNlUmVmRWxlbWVudFByb3BzXG4gICAgfVxuXG5cbn1cbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IEVsZW1lbnRTaXplLCB1c2VFbGVtZW50U2l6ZSB9IGZyb20gXCIuL3VzZS1lbGVtZW50LXNpemVcIjtcbmltcG9ydCB7IHJldHVybk51bGwsIHVzZUVuc3VyZVN0YWJpbGl0eSwgdXNlUGFzc2l2ZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcbmltcG9ydCB7IHVzZVJlZkVsZW1lbnQgfSBmcm9tIFwiLi91c2UtcmVmLWVsZW1lbnRcIjtcblxuLy9leHBvcnQgdHlwZSBCbG9ja0Zsb3dEaXJlY3Rpb24gPSBcImRvd253YXJkc1wiIHwgXCJsZWZ0d2FyZHNcIiB8IFwicmlnaHR3YXJkc1wiO1xuZXhwb3J0IHR5cGUgUGh5c2ljYWxEaXJlY3Rpb24gPSBcImx0clwiIHwgXCJydGxcIiB8IFwidHRiXCIgfCBcImJ0dFwiO1xuZXhwb3J0IHR5cGUgUGh5c2ljYWxPcmllbnRhdGlvbiA9IFwiaG9yaXpvbnRhbFwiIHwgXCJ2ZXJ0aWNhbFwiO1xuZXhwb3J0IHR5cGUgUGh5c2ljYWxTaXplID0gXCJ3aWR0aFwiIHwgXCJoZWlnaHRcIjtcblxuZXhwb3J0IHR5cGUgTG9naWNhbE9yaWVudGF0aW9uID0gXCJpbmxpbmVcIiB8IFwiYmxvY2tcIjtcblxuLy9leHBvcnQgdHlwZSBMaW5lT3JpZW50YXRpb24gPSBcInVwcmlnaHRcIiB8IFwibGVmdHJpZ2h0XCIgfCBcImRvd25yaWdodFwiIHwgXCJyaWdodHJpZ2h0XCI7XG5cbnR5cGUgV3JpdGluZ01vZGUgPSBcImhvcml6b250YWwtdGJcIiB8IFwidmVydGljYWwtbHJcIiB8IFwic2lkZXdheXMtcmxcIiB8IFwidmVydGljYWwtcmxcIiB8IFwic2lkZXdheXMtbHJcIjtcbnR5cGUgRGlyZWN0aW9uID0gXCJsdHJcIiB8IFwicnRsXCI7XG50eXBlIFRleHRPcmllbnRhdGlvbiA9IFwibWl4ZWRcIiB8IFwidXByaWdodFwiIHwgXCJzaWRld2F5c1wiO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplPFQgZXh0ZW5kcyBzdHJpbmc+KHN0cjogVCk6IENhcGl0YWxpemU8VD4ge1xuICAgIHJldHVybiAoc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKDEpKSBhcyBDYXBpdGFsaXplPFQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxvZ2ljYWxEaXJlY3Rpb25QYXJhbWV0ZXJzIHtcbiAgICBvbkxvZ2ljYWxEaXJlY3Rpb25DaGFuZ2U/KGluZm86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naWNhbEVsZW1lbnRTaXplIHtcbiAgICBjbGllbnRJbmxpbmVTaXplOiBudW1iZXI7XG4gICAgc2Nyb2xsSW5saW5lU2l6ZTogbnVtYmVyO1xuICAgIG9mZnNldElubGluZVNpemU6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICBjbGllbnRCbG9ja1NpemU6IG51bWJlcjtcbiAgICBzY3JvbGxCbG9ja1NpemU6IG51bWJlcjtcbiAgICBvZmZzZXRCbG9ja1NpemU6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICBjbGllbnRJbmxpbmVJbnNldDogbnVtYmVyO1xuICAgIHNjcm9sbElubGluZUluc2V0OiBudW1iZXI7XG4gICAgb2Zmc2V0SW5saW5lSW5zZXQ6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICBjbGllbnRCbG9ja0luc2V0OiBudW1iZXI7XG4gICAgc2Nyb2xsQmxvY2tJbnNldDogbnVtYmVyO1xuICAgIG9mZnNldEJsb2NrSW5zZXQ6IG51bWJlciB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBJbnNwZWN0cyB0aGUgZWxlbWVudCdzIHN0eWxlIGFuZCBkZXRlcm1pbmVzIHRoZSBsb2dpY2FsIGRpcmVjdGlvbiB0aGF0IHRleHQgZmxvd3MuXG4gKiBcbiAqIENlcnRhaW4gQ1NTIHByb3BlcnRpZXMsIGxpa2UgYGJsb2NrLXNpemVgLCByZXNwZWN0IHRoZSBjdXJyZW50IHdyaXRpbmcgbW9kZSBhbmQgdGV4dCBkaXJlY3Rpb24uXG4gKiBCdXQgYHRyYW5zZm9ybWAsIGBjbGlwYCwgZXRjLiBkb24ndC5cbiAqIFxuICogVGhpcyBpcyBwcm92aWRlZCBzbyB0aGF0IENTUyBwcm9wZXJ0aWVzIGNhbiBjb25zaXN0ZW50bHkgdXNlIHRob3NlIGxvZ2ljYWwgcHJvcGVydGllcy5cbiAqIFxuICogU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtd3JpdGluZy1tb2Rlcy8jbG9naWNhbC10by1waHlzaWNhbFxuICogXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczpcbiAqICogYGdldExvZ2ljYWxEaXJlY3Rpb25gOiByZXRyaWV2ZXMgYSBgTG9naWNhbERpcmVjdGlvbkluZm9gIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZWxlbWVudC4gKEZ1bmN0aW9uIGlzIGNvbnN0YW50IGJldHdlZW4gcmVuZGVycylcbiAqICogYGNvbnZlcnRFbGVtZW50U2l6ZWA6IFdoZW4gdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB1c2VFbGVtZW50U2l6ZWAsIGFsbG93cyB5b3UgdG8gcmV0cmlldmUgdGhlIGxvZ2ljYWwgc2l6ZSBvZiBhbiBlbGVtZW50IGluc3RlYWQgb2YgdGhlIHBoeXNpY2FsIHNpemUuIFxuICogKiBgY29udmVydFRvTG9naWNhbE9yaWVudGF0aW9uYDogQmFzZWQgb24gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBjb252ZXJ0cyBcImhvcml6b250YWxcIiBvciBcInZlcnRpY2FsXCIgdG8gXCJpbmxpbmVcIiBvciBcImJsb2NrXCIuXG4gKiAqIGBjb252ZXJ0VG9QaHlzaWNhbE9yaWVudGF0aW9uYDogIEJhc2VkIG9uIHRoZSBjdXJyZW50IGRpcmVjdGlvbiwgY29udmVydHMgXCJpbmxpbmVcIiBvciBcImJsb2NrXCIgdG8gXCJob3Jpem9udGFsXCIgb3IgXCJ2ZXJ0aWNhbFwiLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9naWNhbERpcmVjdGlvbjxUIGV4dGVuZHMgRWxlbWVudD4oeyBvbkxvZ2ljYWxEaXJlY3Rpb25DaGFuZ2UgfTogVXNlTG9naWNhbERpcmVjdGlvblBhcmFtZXRlcnMpOiBVc2VMb2dpY2FsRGlyZWN0aW9uUmV0dXJuVHlwZTxUPiB7XG5cbiAgICB1c2VFbnN1cmVTdGFiaWxpdHkoXCJ1c2VMb2dpY2FsRGlyZWN0aW9uXCIsIG9uTG9naWNhbERpcmVjdGlvbkNoYW5nZSk7XG5cbiAgICBjb25zdCBbZ2V0Q29tcHV0ZWRTdHlsZXMsIHNldENvbXB1dGVkU3R5bGVzXSA9IHVzZVBhc3NpdmVTdGF0ZTxDU1NTdHlsZURlY2xhcmF0aW9uIHwgbnVsbD4obnVsbCwgcmV0dXJuTnVsbCk7XG5cblxuICAgIGNvbnN0IHsgZ2V0RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50PFQ+KHtcbiAgICAgICAgb25FbGVtZW50Q2hhbmdlOiB1c2VDYWxsYmFjaygoZWxlbWVudDogVCB8IG51bGwpID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc2V0Q29tcHV0ZWRTdHlsZXMod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXSlcbiAgICB9KTtcblxuICAgIC8vIFRPRE86IFRoZXJlJ3Mgbm8gd2F5IHRvIHJlZnJlc2ggd2hpY2ggd3JpdGluZyBtb2RlIHdlIGhhdmUgb25jZSBtb3VudGVkLlxuICAgIC8vICAgQS4gVGhlcmUncyBubyB3YXkgdG8gd2F0Y2ggZm9yIENTUyBzdHlsZSBjaGFuZ2VzXG4gICAgLy8gICBCLiBDYWxsaW5nIGdldENvbXB1dGVkU3R5bGUgYWZ0ZXIgZXZlcnkgcmVuZGVyIGZvciBldmVyeSBlbGVtZW50IGdldHMgZXhwZW5zaXZlIGZhc3QgYW5kXG4gICAgLy8gICBDLiBJcyBub3QgbmVjZXNzYXJ5IGZvciBtb3N0IHVzZSBjYXNlcyB0aGF0IHdpbGwgbmV2ZXIgc3dpdGNoIHdyaXRpbmctbW9kZSB3aXRoaW4gYSBzaW5nbGUgY29tcG9uZW50XG4gICAgLy8gICAgICAoVGhvc2UgdGhhdCBkbyB3aWxsIG5lZWQgdG8gbW91bnQgYW5kIHVubW91bnQgdGhlIGNvbXBvbmVudCB0aGF0IHVzZXMgaXQpXG4gICAgLy9cbiAgICAvLyBBcyBhIHNvbHV0aW9uLCBoZXJlJ3MgYSBjaGVhcCB3b3JrYXJvdW5kIHRoYXQgY2hlY2tzIHdoZW4gdGhlIGVsZW1lbnQncyBzaXplIGhhcyBjaGFuZ2VkLFxuICAgIC8vIGFuZCBpZiBzbywgdGVzdHMgaWYgdGhlIHdyaXRpbmcgbW9kZSBoYXMgY2hhbmdlZCB0b28uXG4gICAgLy9cbiAgICAvLyBUaGlzIHdpbGwgd29yayBmb3IgYXQgbGVhc3Qgc29tZSBudW1iZXIgb2YgY2FzZXMsIGJ1dCBhIGJldHRlciBzb2x1dGlvbiBpcyBzdGlsbCBuZWVkZWQuXG4gICAgY29uc3QgeyB1c2VFbGVtZW50U2l6ZVByb3BzIH0gPSB1c2VFbGVtZW50U2l6ZSh7IG9uU2l6ZUNoYW5nZTogdXNlQ2FsbGJhY2soXyA9PiBvbkxvZ2ljYWxEaXJlY3Rpb25DaGFuZ2U/LihnZXRMb2dpY2FsRGlyZWN0aW9uSW5mbygpKSwgW10pIH0pXG5cbiAgICBjb25zdCBnZXRMb2dpY2FsRGlyZWN0aW9uSW5mbyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlcygpO1xuICAgICAgICBpZiAoY29tcHV0ZWRTdHlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHcgPSBjb21wdXRlZFN0eWxlcy53cml0aW5nTW9kZSBhcyBXcml0aW5nTW9kZTtcbiAgICAgICAgICAgIGxldCBkID0gY29tcHV0ZWRTdHlsZXMuZGlyZWN0aW9uIGFzIERpcmVjdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBjb21wdXRlZFN0eWxlcy50ZXh0T3JpZW50YXRpb24gYXMgVGV4dE9yaWVudGF0aW9uO1xuXG4gICAgICAgICAgICBpZiAodCA9PSBcInVwcmlnaHRcIilcbiAgICAgICAgICAgICAgICBkID0gXCJsdHJcIjtcblxuICAgICAgICAgICAgcmV0dXJuICh7IC4uLldyaXRpbmdNb2Rlc1t3IHx8IFwiaG9yaXpvbnRhbC10YlwiXVtkIHx8IFwibHRyXCJdIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgW10pXG5cbiAgICAvL2NvbnN0IFtnZXRMb2dpY2FsRGlyZWN0aW9uSW5mbywgc2V0TG9naWNhbERpcmVjdGlvbkluZm9dID0gdXNlUGFzc2l2ZVN0YXRlPExvZ2ljYWxEaXJlY3Rpb25JbmZvPihvbkxvZ2ljYWxEaXJlY3Rpb25DaGFuZ2UpO1xuXG4gICAgY29uc3QgY29udmVydFRvTG9naWNhbE9yaWVudGF0aW9uID0gdXNlQ2FsbGJhY2soKGVsZW1lbnRPcmllbnRhdGlvbjogUGh5c2ljYWxPcmllbnRhdGlvbiwgZGlyZWN0aW9uPzogTG9naWNhbERpcmVjdGlvbkluZm8gfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgIGRpcmVjdGlvbiA/Pz0gZ2V0TG9naWNhbERpcmVjdGlvbkluZm8oKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbj8uaW5saW5lT3JpZW50YXRpb24gPT09IGVsZW1lbnRPcmllbnRhdGlvbilcbiAgICAgICAgICAgIHJldHVybiBcImlubGluZVwiO1xuICAgICAgICByZXR1cm4gXCJibG9ja1wiO1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGNvbnZlcnRUb1BoeXNpY2FsU2lkZSA9IHVzZUNhbGxiYWNrKChzaWRlOiBcImlubGluZS1zdGFydFwiIHwgXCJpbmxpbmUtZW5kXCIgfCBcImJsb2NrLXN0YXJ0XCIgfCBcImJsb2NrLWVuZFwiLCBkaXJlY3Rpb24/OiBMb2dpY2FsRGlyZWN0aW9uSW5mbyB8IG51bGwgfCB1bmRlZmluZWQpOiBcInRvcFwiIHwgXCJib3R0b21cIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiID0+IHtcbiAgICAgICAgZGlyZWN0aW9uID8/PSBnZXRMb2dpY2FsRGlyZWN0aW9uSW5mbygpO1xuXG4gICAgICAgIHN3aXRjaCAoc2lkZSkge1xuICAgICAgICAgICAgY2FzZSBcImJsb2NrLXN0YXJ0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1bKGRpcmVjdGlvbj8uYmxvY2tEaXJlY3Rpb24gPz8gXCJ0dGJcIilbMF0gYXMgXCJ0XCIgfCBcImJcIiB8IFwibFwiIHwgXCJyXCJdO1xuICAgICAgICAgICAgY2FzZSBcImJsb2NrLWVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBNWyhkaXJlY3Rpb24/LmJsb2NrRGlyZWN0aW9uID8/IFwidHRiXCIpWzJdIGFzIFwidFwiIHwgXCJiXCIgfCBcImxcIiB8IFwiclwiXTtcblxuICAgICAgICAgICAgY2FzZSBcImlubGluZS1zdGFydFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBNWyhkaXJlY3Rpb24/LmlubGluZURpcmVjdGlvbiA/PyBcImx0clwiKVswXSBhcyBcInRcIiB8IFwiYlwiIHwgXCJsXCIgfCBcInJcIl07XG4gICAgICAgICAgICBjYXNlIFwiaW5saW5lLWVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBNWyhkaXJlY3Rpb24/LmlubGluZURpcmVjdGlvbiA/PyBcImx0clwiKVsyXSBhcyBcInRcIiB8IFwiYlwiIHwgXCJsXCIgfCBcInJcIl07XG4gICAgICAgIH1cbiAgICB9LCBbXSlcblxuICAgIGNvbnN0IGNvbnZlcnRUb0xvZ2ljYWxTaWRlID0gdXNlQ2FsbGJhY2soKHNpZGU6IFwidG9wXCIgfCBcImJvdHRvbVwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCIsIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCk6IFwiaW5saW5lLXN0YXJ0XCIgfCBcImlubGluZS1lbmRcIiB8IFwiYmxvY2stc3RhcnRcIiB8IFwiYmxvY2stZW5kXCIgPT4ge1xuICAgICAgICBkaXJlY3Rpb24gPz89IGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvKCk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24/LmlubGluZU9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc2lkZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ0b3BcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbi5pbmxpbmVEaXJlY3Rpb24gPT09IFwidHRiXCIgPyBcImlubGluZS1zdGFydFwiIDogXCJpbmxpbmUtZW5kXCI7XG4gICAgICAgICAgICAgICAgY2FzZSBcImJvdHRvbVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uLmlubGluZURpcmVjdGlvbiA9PT0gXCJidHRcIiA/IFwiaW5saW5lLXN0YXJ0XCIgOiBcImlubGluZS1lbmRcIjtcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24uYmxvY2tEaXJlY3Rpb24gPT09IFwibHRyXCIgPyBcImJsb2NrLXN0YXJ0XCIgOiBcImJsb2NrLWVuZFwiO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uLmJsb2NrRGlyZWN0aW9uID09PSBcInJ0bFwiID8gXCJibG9jay1zdGFydFwiIDogXCJibG9jay1lbmRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaXJlY3Rpb24/LmlubGluZU9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgICAgICAgc3dpdGNoIChzaWRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uLmJsb2NrRGlyZWN0aW9uID09PSBcInR0YlwiID8gXCJibG9jay1zdGFydFwiIDogXCJibG9jay1lbmRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm90dG9tXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24uYmxvY2tEaXJlY3Rpb24gPT09IFwiYnR0XCIgPyBcImJsb2NrLXN0YXJ0XCIgOiBcImJsb2NrLWVuZFwiO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbi5pbmxpbmVEaXJlY3Rpb24gPT09IFwibHRyXCIgPyBcImlubGluZS1zdGFydFwiIDogXCJpbmxpbmUtZW5kXCI7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24uaW5saW5lRGlyZWN0aW9uID09PSBcInJ0bFwiID8gXCJpbmxpbmUtc3RhcnRcIiA6IFwiaW5saW5lLWVuZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZGVidWdnZXIgKi9cbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIFwiaW5saW5lLXN0YXJ0XCI7XG5cbiAgICB9LCBbXSlcblxuICAgIGNvbnN0IGNvbnZlcnRUb1BoeXNpY2FsT3JpZW50YXRpb24gPSB1c2VDYWxsYmFjaygoZWxlbWVudE9yaWVudGF0aW9uOiBMb2dpY2FsT3JpZW50YXRpb24sIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICBkaXJlY3Rpb24gPz89IGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvKCk7XG4gICAgICAgIGlmIChlbGVtZW50T3JpZW50YXRpb24gPT0gXCJpbmxpbmVcIikge1xuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbj8uaW5saW5lT3JpZW50YXRpb24gPT0gXCJob3Jpem9udGFsXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaG9yaXpvbnRhbFwiO1xuICAgICAgICAgICAgcmV0dXJuIFwidmVydGljYWxcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24/LmJsb2NrT3JpZW50YXRpb24gPT0gXCJ2ZXJ0aWNhbFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInZlcnRpY2FsXCI7XG5cbiAgICAgICAgICAgIHJldHVybiBcImhvcml6b250YWxcIjtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGNvbnZlcnRFbGVtZW50U2l6ZSA9IHVzZUNhbGxiYWNrKChlbGVtZW50U2l6ZTogRWxlbWVudFNpemUsIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCk6IExvZ2ljYWxFbGVtZW50U2l6ZSB8IG51bGwgPT4ge1xuICAgICAgICBkaXJlY3Rpb24gPz89IGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvKCk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5saW5lU2l6ZSwgYmxvY2tTaXplLCBpbmxpbmVEaXJlY3Rpb24sIGJsb2NrRGlyZWN0aW9uIH0gPSBkaXJlY3Rpb247XG5cbiAgICAgICAgICAgIC8vIFNpemUgaXMgcmVsYXRpdmVseSBzaW1wbGVcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudElubGluZVNpemUgPSBlbGVtZW50U2l6ZVtgY2xpZW50JHtjYXBpdGFsaXplKGlubGluZVNpemUpfWBdO1xuICAgICAgICAgICAgY29uc3QgY2xpZW50QmxvY2tTaXplID0gZWxlbWVudFNpemVbYGNsaWVudCR7Y2FwaXRhbGl6ZShibG9ja1NpemUpfWBdO1xuXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRJbmxpbmVTaXplID0gZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShpbmxpbmVTaXplKX1gXTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldEJsb2NrU2l6ZSA9IGVsZW1lbnRTaXplW2BvZmZzZXQke2NhcGl0YWxpemUoYmxvY2tTaXplKX1gXTtcblxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsSW5saW5lU2l6ZSA9IGVsZW1lbnRTaXplW2BzY3JvbGwke2NhcGl0YWxpemUoaW5saW5lU2l6ZSl9YF07XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxCbG9ja1NpemUgPSBlbGVtZW50U2l6ZVtgc2Nyb2xsJHtjYXBpdGFsaXplKGJsb2NrU2l6ZSl9YF07XG5cblxuXG5cbiAgICAgICAgICAgIGNvbnN0IGYxID0gZ2V0UGh5c2ljYWxMZWZ0VG9wKGlubGluZURpcmVjdGlvbik7XG4gICAgICAgICAgICBjb25zdCBmMiA9IGdldFBoeXNpY2FsUmlnaHRCb3R0b20oaW5saW5lRGlyZWN0aW9uKTtcblxuICAgICAgICAgICAgY29uc3QgZjMgPSBnZXRQaHlzaWNhbExlZnRUb3AoYmxvY2tEaXJlY3Rpb24pO1xuICAgICAgICAgICAgY29uc3QgZjQgPSBnZXRQaHlzaWNhbFJpZ2h0Qm90dG9tKGJsb2NrRGlyZWN0aW9uKTtcblxuXG4gICAgICAgICAgIGNvbnN0IGNsaWVudElubGluZUluc2V0ID0gZWxlbWVudFNpemVbYGNsaWVudCR7Y2FwaXRhbGl6ZShmMSl9YF0gKyAoIWYyID8gMCA6IGVsZW1lbnRTaXplW2BjbGllbnQke2NhcGl0YWxpemUoZjIpfWBdKTtcbiAgICAgICAgICAgY29uc3Qgc2Nyb2xsSW5saW5lSW5zZXQgPSBlbGVtZW50U2l6ZVtgc2Nyb2xsJHtjYXBpdGFsaXplKGYxKX1gXSArICghZjIgPyAwIDogZWxlbWVudFNpemVbYHNjcm9sbCR7Y2FwaXRhbGl6ZShmMil9YF0pO1xuICAgICAgICAgICBjb25zdCBvZmZzZXRJbmxpbmVJbnNldCA9IGVsZW1lbnRTaXplW2BvZmZzZXQke2NhcGl0YWxpemUoZjEpfWBdID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IChlbGVtZW50U2l6ZVtgb2Zmc2V0JHtjYXBpdGFsaXplKGYxKX1gXSEgKyAoIWYyID8gMCA6IGVsZW1lbnRTaXplW2BvZmZzZXQke2NhcGl0YWxpemUoZjIpfWBdISkpO1xuXG5cbiAgICAgICAgICAgIGNvbnN0IGNsaWVudEJsb2NrSW5zZXQgPSBlbGVtZW50U2l6ZVtgY2xpZW50JHtjYXBpdGFsaXplKGYzKX1gXSArICghZjQgPyAwIDogZWxlbWVudFNpemVbYGNsaWVudCR7Y2FwaXRhbGl6ZShmNCl9YF0pO1xuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsQmxvY2tJbnNldCA9IGVsZW1lbnRTaXplW2BzY3JvbGwke2NhcGl0YWxpemUoZjMpfWBdICsgKCFmNCA/IDAgOiBlbGVtZW50U2l6ZVtgc2Nyb2xsJHtjYXBpdGFsaXplKGY0KX1gXSk7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRCbG9ja0luc2V0ID0gZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShmMyl9YF0gPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogKGVsZW1lbnRTaXplW2BvZmZzZXQke2NhcGl0YWxpemUoZjMpfWBdISArICghZjQgPyAwIDogZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShmNCl9YF0hKSk7XG5cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjbGllbnRJbmxpbmVTaXplLFxuICAgICAgICAgICAgICAgIHNjcm9sbElubGluZVNpemUsXG4gICAgICAgICAgICAgICAgb2Zmc2V0SW5saW5lU2l6ZSxcbiAgICAgICAgICAgICAgICBjbGllbnRCbG9ja1NpemUsXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmxvY2tTaXplLFxuICAgICAgICAgICAgICAgIG9mZnNldEJsb2NrU2l6ZSxcbiAgICAgICAgICAgICAgICBjbGllbnRJbmxpbmVJbnNldCxcbiAgICAgICAgICAgICAgICBzY3JvbGxJbmxpbmVJbnNldCxcbiAgICAgICAgICAgICAgICBvZmZzZXRJbmxpbmVJbnNldCxcbiAgICAgICAgICAgICAgICBjbGllbnRCbG9ja0luc2V0LFxuICAgICAgICAgICAgICAgIHNjcm9sbEJsb2NrSW5zZXQsXG4gICAgICAgICAgICAgICAgb2Zmc2V0QmxvY2tJbnNldCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNlTG9naWNhbERpcmVjdGlvblByb3BzOiB1c2VDYWxsYmFjaygocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFQ+KSA9PiB1c2VSZWZFbGVtZW50UHJvcHModXNlRWxlbWVudFNpemVQcm9wcyhwcm9wcykpLCBbXSksXG4gICAgICAgIGdldEVsZW1lbnQsXG4gICAgICAgIGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvLFxuICAgICAgICBjb252ZXJ0VG9Mb2dpY2FsU2l6ZTogY29udmVydEVsZW1lbnRTaXplLFxuICAgICAgICBjb252ZXJ0VG9Mb2dpY2FsT3JpZW50YXRpb24sXG4gICAgICAgIGNvbnZlcnRUb1BoeXNpY2FsT3JpZW50YXRpb24sXG4gICAgICAgIGNvbnZlcnRUb0xvZ2ljYWxTaWRlLFxuICAgICAgICBjb252ZXJ0VG9QaHlzaWNhbFNpZGVcbiAgICB9O1xufVxuXG4vLyBQb3NpdGlvbiByZXF1aXJlcyB1cyB0byBzb21ldGltZXMgdXNlIG9uZSBwcm9wZXJ0eSAobGlrZSBgbGVmdGApXG4vLyBvciBzb21ldGltZXMgdHdvIChsaWtlIGBsZWZ0YCArIGB3aWR0aGApXG5mdW5jdGlvbiBnZXRQaHlzaWNhbExlZnRUb3AoZGlyOiBQaHlzaWNhbERpcmVjdGlvbikgeyBpZiAoZGlyID09PSBcImx0clwiIHx8IGRpciA9PSBcInJ0bFwiKSByZXR1cm4gXCJsZWZ0XCI7IHJldHVybiBcInRvcFwiOyB9XG5mdW5jdGlvbiBnZXRQaHlzaWNhbFJpZ2h0Qm90dG9tKGRpcjogUGh5c2ljYWxEaXJlY3Rpb24pIHsgaWYgKGRpciA9PT0gXCJydGxcIikgcmV0dXJuIFwid2lkdGhcIjsgaWYgKGRpciA9PT0gXCJidHRcIikgcmV0dXJuIFwiaGVpZ2h0XCI7IHJldHVybiBudWxsOyB9XG5cbi8vIEhlbHBlciBmb3IgZXh0cmFjdGluZyBpbmZvIGZyb20gXCJsdHJcIiwgXCJ0dGJcIiwgZXRjLlxuY29uc3QgTSA9IHtcbiAgICB0OiBcInRvcFwiLFxuICAgIGI6IFwiYm90dG9tXCIsXG4gICAgbDogXCJsZWZ0XCIsXG4gICAgcjogXCJyaWdodFwiXG59IGFzIGNvbnN0O1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTG9naWNhbERpcmVjdGlvblJldHVyblR5cGU8VCBleHRlbmRzIEV2ZW50VGFyZ2V0PiB7XG4gICAgdXNlTG9naWNhbERpcmVjdGlvblByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxUPjtcbiAgICBnZXRFbGVtZW50OiAoKSA9PiBUIHwgbnVsbDtcbiAgICBnZXRMb2dpY2FsRGlyZWN0aW9uSW5mbzogKCkgPT4gTG9naWNhbERpcmVjdGlvbkluZm8gfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gdGhlIEVsZW1lbnRTaXplIGluZm8gZnJvbSB1c2VFbGVtZW50U2l6ZSwgY29udmVydHMgYWxsIHRob3NlIHBoeXNpY2FsIHByb3BlcnRpZXMgdG8gdGhlaXIgbG9naWNhbCBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgY29udmVydFRvTG9naWNhbFNpemU6IChlbGVtZW50U2l6ZTogRWxlbWVudFNpemUsIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gTG9naWNhbEVsZW1lbnRTaXplIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFR1cm5zIGBcImhvcml6b250YWxcIiB8IFwidmVydGljYWxcImAgaW50byBgXCJpbmxpbmVcIiB8IFwiYmxvY2tcImBcbiAgICAgKi9cbiAgICBjb252ZXJ0VG9Mb2dpY2FsT3JpZW50YXRpb246IChlbGVtZW50T3JpZW50YXRpb246IFBoeXNpY2FsT3JpZW50YXRpb24sIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gXCJpbmxpbmVcIiB8IFwiYmxvY2tcIjtcblxuICAgIC8qKlxuICAgICAqIFR1cm5zIGBcImlubGluZVwiIHwgXCJibG9ja1wiYCBpbnRvIGBcImhvcml6b250YWxcIiB8IFwidmVydGljYWxcImBcbiAgICAgKi9cbiAgICBjb252ZXJ0VG9QaHlzaWNhbE9yaWVudGF0aW9uOiAoZWxlbWVudE9yaWVudGF0aW9uOiBMb2dpY2FsT3JpZW50YXRpb24sIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gXCJob3Jpem9udGFsXCIgfCBcInZlcnRpY2FsXCI7XG5cbiAgICAvKipcbiAgICAgKiBUdXJucyBgXCJ0b3BcIiB8IFwiYm90dG9tXCIgfCBcImxlZnRcIiB8IFwicmlnaHRcImAgaW50byBgXCJibG9jay1zdGFydFwiIHwgXCJibG9jay1lbmRcIiB8IFwiaW5saW5lLXN0YXJ0XCIgfCBcImlubGluZS1lbmRcImBcbiAgICAgKi9cbiAgICBjb252ZXJ0VG9Mb2dpY2FsU2lkZTogKHNpZGU6IFwidG9wXCIgfCBcImJvdHRvbVwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCIsIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gXCJpbmxpbmUtc3RhcnRcIiB8IFwiaW5saW5lLWVuZFwiIHwgXCJibG9jay1zdGFydFwiIHwgXCJibG9jay1lbmRcIjtcblxuICAgIC8qKlxuICAgICAqIFR1cm5zIGBcImJsb2NrLXN0YXJ0XCIgfCBcImJsb2NrLWVuZFwiIHwgXCJpbmxpbmUtc3RhcnRcIiB8IFwiaW5saW5lLWVuZFwiYCBpbnRvIGBcInRvcFwiIHwgXCJib3R0b21cIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiYFxuICAgICAqL1xuICAgIGNvbnZlcnRUb1BoeXNpY2FsU2lkZTogKHNpZGU6IFwiaW5saW5lLXN0YXJ0XCIgfCBcImlubGluZS1lbmRcIiB8IFwiYmxvY2stc3RhcnRcIiB8IFwiYmxvY2stZW5kXCIsIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gXCJ0b3BcIiB8IFwiYm90dG9tXCIgfCBcImxlZnRcIiB8IFwicmlnaHRcIjtcbn1cblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naWNhbERpcmVjdGlvbkluZm8ge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIGRpcmVjdGlvbiB0ZXh0IGZsb3dzLCBnbHlwaCBieSBnbHlwaC4gIEJ5IGZhciB0aGUgbW9zdCBjb21wbGV4IHByb3BlcnR5LlxuICAgICAqIFxuICAgICAqIHxgd3JpdGluZy1tb2RlYHxgZGlyZWN0aW9uYHxSZXN1bHR8XG4gICAgICogfC0tLS0tfC0tLS0tfC0tLS0tfFxuICAgICAqIHxgaG9yaXpvbnRhbC10YmB8YGx0cmB8YGx0cmB8XG4gICAgICogfGBob3Jpem9udGFsLXRiYHxgcnRsYHxgcnRsYHxcbiAgICAgKiB8YHZlcnRpY2FsLXJsYCAmIGBzaWRld2F5cy1ybGB8YGx0cmB8YHR0YmB8XG4gICAgICogfGB2ZXJ0aWNhbC1ybGAgJiBgc2lkZXdheXMtcmxgfGBydGxgfGBidHRgfFxuICAgICAqIHxgdmVydGljYWwtbHJgfGBsdHJgfGB0dGJgfFxuICAgICAqIHxgdmVydGljYWwtbHJgfGBydGxgfGBidHRgfFxuICAgICAqIHxgc2lkZXdheXMtbHJgfGBsdHJgfGBidHRgfFxuICAgICAqIHxgc2lkZXdheXMtbHJgfGBydGxgfGB0dGJgfFxuICAgICAqL1xuICAgIGlubGluZURpcmVjdGlvbjogUGh5c2ljYWxEaXJlY3Rpb247XG5cbiAgICAvKipcbiAgICAgKiBTaW1wbGlmaWVkIHZlcnNpb24gb2YgYGlubGluZURpcmVjdGlvbmA6XG4gICAgICogXG4gICAgICogKiBgaG9yaXpvbnRhbGAgZm9yIGBob3Jpem9udGFsLXRiYFxuICAgICAqICogYHZlcnRpY2FsYCBmb3IgYWxsIG90aGVyc1xuICAgICAqL1xuICAgIGlubGluZU9yaWVudGF0aW9uOiBQaHlzaWNhbE9yaWVudGF0aW9uO1xuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgZGlyZWN0aW9uIHRleHQgZmxvd3MsIGxpbmUgYnkgbGluZS5cbiAgICAgKiBcbiAgICAgKiAqIGB0dGJgIGZvciBgaG9yaXpvbnRhbC10YmAsIHJlZ2FyZGxlc3Mgb2YgZGlyZWN0aW9uXG4gICAgICogKiBgcnRsYCBmb3IgYHZlcnRpY2FsLXJsYCAmIGBzaWRld2F5cy1ybGAsIHJlZ2FyZGxlc3Mgb2YgZGlyZWN0aW9uXG4gICAgICogKiBgbHRyYCBmb3IgYHZlcnRpY2FsLWxyYCAmIGBzaWRld2F5cy1scmAsIHJlZ2FyZGxlc3Mgb2YgZGlyZWN0aW9uXG4gICAgICovXG4gICAgYmxvY2tEaXJlY3Rpb246IFBoeXNpY2FsRGlyZWN0aW9uO1xuXG4gICAgLyoqXG4gICAgICogU2ltcGxpZmllZCB2ZXJzaW9uIG9mIGBibG9ja0RpcmVjdGlvbmA6XG4gICAgICogXG4gICAgICogKiBgdmVydGljYWxgIGZvciBgaG9yaXpvbnRhbC10YmBcbiAgICAgKiAqIGBob3Jpem9udGFsYCBmb3IgYWxsIG90aGVyc1xuICAgICAqL1xuICAgIGJsb2NrT3JpZW50YXRpb246IFBoeXNpY2FsT3JpZW50YXRpb247XG5cbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGhvdyB5b3UgY2FuICpwaHlzaWNhbGx5KiByZWZlciB0byB0aGUgc2l6ZSBvZiB0aGUgZWxlbWVudCBpbiB0aGUgKmlubGluZSogc2l6ZS5cbiAgICAgKiBcbiAgICAgKiAqIGB3aWR0aGAgZm9yIGBob3Jpem9udGFsLXRiYCwgcmVnYXJkbGVzcyBvZiBkaXJlY3Rpb25cbiAgICAgKiAqIGBoZWlnaHRgIGZvciBhbGwgb3RoZXJzXG4gICAgICovXG4gICAgaW5saW5lU2l6ZTogUGh5c2ljYWxTaXplO1xuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBob3cgeW91IGNhbiAqcGh5c2ljYWxseSogcmVmZXIgdG8gdGhlIHNpemUgb2YgdGhlIGVsZW1lbnQgaW4gdGhlICpibG9jayogc2l6ZS5cbiAgICAgKiBcbiAgICAgKiAqIGBoZWlnaHRgIGZvciBgaG9yaXpvbnRhbC10YmAsIHJlZ2FyZGxlc3Mgb2YgZGlyZWN0aW9uXG4gICAgICogKiBgd2lkdGhgIGZvciBhbGwgb3RoZXJzXG4gICAgICovXG4gICAgYmxvY2tTaXplOiBQaHlzaWNhbFNpemU7XG5cbiAgICAvKipcbiAgICAgKiBGb3IgZWFjaCBnbHlwaCwgYXNjZW5kZXJzIHRvIGRlc2NlbmRlcnMgKnBoeXNpY2FsbHkqIGdvOlxuICAgICAqIFxuICAgICAqICogYHR0YmAgZm9yIGBob3Jpem9udGFsLXRiYFxuICAgICAqICogYHJ0bGAgZm9yIGB2ZXJ0aWNhbC1ybGAsIGB2ZXJ0aWNhbC1scmAsICYgYHNpZGV3YXlzLXJsYFxuICAgICAqICogYGx0cmAgZm9yIGBzaWRld2F5cy1scmBcbiAgICAgKi9cbiAgICBvdmVyVW5kZXJEaXJlY3Rpb246IFBoeXNpY2FsRGlyZWN0aW9uO1xuXG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggZ2x5cGgsIGl0cyBcImxlZnRcIiBzaWRlICh0aGluayBvZiB0aGlzIHJlbGF0aXZlIHRvIGB3cml0aW5nLW1vZGVgIGJ1dCAqbm90KiByZWxhdGl2ZSB0byBgZGlyZWN0aW9uYCwgb3IgYWx0ZXJuYXRpdmVseSB3aGF0IGB0ZXh0LWFsaWduOiBsZWZ0YCBtZWFucykgdG8gaXRzIFwicmlnaHRcIiBzaWRlICpwaHlzaWNhbGx5KiBnb2VzIGZyb206XG4gICAgICogXG4gICAgICogKiBgbHRyYCBmb3IgYGhvcml6b250YWwtdGJgXG4gICAgICogKiBgdHRiYCBmb3IgYHZlcnRpY2FsLXJsYCwgYHZlcnRpY2FsLWxyYCwgJiBgc2lkZXdheXMtcmxgXG4gICAgICogKiBgYnR0YCBmb3IgYHNpZGV3YXlzLWxyYFxuICAgICAqL1xuICAgIGxlZnRSaWdodERpcmVjdGlvbjogUGh5c2ljYWxEaXJlY3Rpb247XG59XG5cbmNvbnN0IEhvcml6b250YWxUYkx0cjogTG9naWNhbERpcmVjdGlvbkluZm8gPSB7XG4gICAgaW5saW5lRGlyZWN0aW9uOiBcImx0clwiLFxuICAgIGJsb2NrRGlyZWN0aW9uOiBcInR0YlwiLFxuXG4gICAgaW5saW5lT3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuICAgIGJsb2NrT3JpZW50YXRpb246IFwidmVydGljYWxcIixcblxuICAgIGlubGluZVNpemU6IFwid2lkdGhcIixcbiAgICBibG9ja1NpemU6IFwiaGVpZ2h0XCIsXG5cbiAgICBsZWZ0UmlnaHREaXJlY3Rpb246IFwibHRyXCIsXG4gICAgb3ZlclVuZGVyRGlyZWN0aW9uOiBcInR0YlwiXG59O1xuXG5jb25zdCBIb3Jpem9udGFsVGJSdGw6IExvZ2ljYWxEaXJlY3Rpb25JbmZvID0ge1xuICAgIC4uLkhvcml6b250YWxUYkx0cixcbiAgICBpbmxpbmVEaXJlY3Rpb246IFwicnRsXCIsXG59O1xuXG5jb25zdCBWZXJ0aWNhbFJsTHRyOiBMb2dpY2FsRGlyZWN0aW9uSW5mbyA9IHtcbiAgICBpbmxpbmVEaXJlY3Rpb246IFwidHRiXCIsXG4gICAgYmxvY2tEaXJlY3Rpb246IFwicnRsXCIsXG5cbiAgICBpbmxpbmVPcmllbnRhdGlvbjogXCJ2ZXJ0aWNhbFwiLFxuICAgIGJsb2NrT3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuXG4gICAgaW5saW5lU2l6ZTogXCJoZWlnaHRcIixcbiAgICBibG9ja1NpemU6IFwid2lkdGhcIixcblxuICAgIGxlZnRSaWdodERpcmVjdGlvbjogXCJ0dGJcIixcbiAgICBvdmVyVW5kZXJEaXJlY3Rpb246IFwicnRsXCJcbn07XG5cbmNvbnN0IFZlcnRpY2FsUmxSdGw6IExvZ2ljYWxEaXJlY3Rpb25JbmZvID0ge1xuICAgIC4uLlZlcnRpY2FsUmxMdHIsXG4gICAgaW5saW5lRGlyZWN0aW9uOiBcImJ0dFwiXG59O1xuXG5cbmNvbnN0IFNpZGV3YXlzUmxMdHI6IExvZ2ljYWxEaXJlY3Rpb25JbmZvID0geyAuLi5WZXJ0aWNhbFJsTHRyIH07XG5jb25zdCBTaWRld2F5c1JsUnRsOiBMb2dpY2FsRGlyZWN0aW9uSW5mbyA9IHsgLi4uVmVydGljYWxSbFJ0bCB9O1xuXG5jb25zdCBWZXJ0aWNhbExyTHRyOiBMb2dpY2FsRGlyZWN0aW9uSW5mbyA9IHtcbiAgICAuLi5WZXJ0aWNhbFJsTHRyLFxuICAgIGJsb2NrRGlyZWN0aW9uOiBcImx0clwiLFxufTtcblxuY29uc3QgVmVydGljYWxMclJ0bDogTG9naWNhbERpcmVjdGlvbkluZm8gPSB7XG4gICAgLi4uVmVydGljYWxSbFJ0bCxcbiAgICBibG9ja0RpcmVjdGlvbjogXCJsdHJcIixcbn07XG5cbmNvbnN0IFNpZGV3YXlzTHRMdHI6IExvZ2ljYWxEaXJlY3Rpb25JbmZvID0ge1xuICAgIC4uLlZlcnRpY2FsTHJMdHIsXG4gICAgaW5saW5lRGlyZWN0aW9uOiBcImJ0dFwiLFxuXG4gICAgbGVmdFJpZ2h0RGlyZWN0aW9uOiBcImJ0dFwiLFxuICAgIG92ZXJVbmRlckRpcmVjdGlvbjogXCJsdHJcIlxufTtcblxuY29uc3QgU2lkZXdheXNMdFJ0bDogTG9naWNhbERpcmVjdGlvbkluZm8gPSB7XG4gICAgLi4uU2lkZXdheXNMdEx0cixcbiAgICBpbmxpbmVEaXJlY3Rpb246IFwidHRiXCJcbn07XG5cblxuXG5jb25zdCBIb3Jpem9udGFsVGIgPSB7XG4gICAgbHRyOiBIb3Jpem9udGFsVGJMdHIsXG4gICAgcnRsOiBIb3Jpem9udGFsVGJSdGxcbn0gYXMgY29uc3Q7XG5cbmNvbnN0IFZlcnRpY2FsUmwgPSB7XG4gICAgbHRyOiBWZXJ0aWNhbFJsTHRyLFxuICAgIHJ0bDogVmVydGljYWxSbFJ0bFxufSBhcyBjb25zdDtcblxuY29uc3QgVmVydGljYWxMciA9IHtcbiAgICBsdHI6IFZlcnRpY2FsTHJMdHIsXG4gICAgcnRsOiBWZXJ0aWNhbExyUnRsXG59IGFzIGNvbnN0O1xuXG5jb25zdCBTaWRld2F5c1JsID0ge1xuICAgIGx0cjogU2lkZXdheXNSbEx0cixcbiAgICBydGw6IFNpZGV3YXlzUmxSdGxcbn0gYXMgY29uc3Q7XG5cbmNvbnN0IFNpZGV3YXlzTHIgPSB7XG4gICAgbHRyOiBTaWRld2F5c0x0THRyLFxuICAgIHJ0bDogU2lkZXdheXNMdFJ0bFxufSBhcyBjb25zdDtcblxuY29uc3QgV3JpdGluZ01vZGVzID0ge1xuICAgIFwiaG9yaXpvbnRhbC10YlwiOiBIb3Jpem9udGFsVGIsXG4gICAgXCJ2ZXJ0aWNhbC1sclwiOiBWZXJ0aWNhbExyLFxuICAgIFwidmVydGljYWwtcmxcIjogVmVydGljYWxSbCxcbiAgICBcInNpZGV3YXlzLWxyXCI6IFNpZGV3YXlzTHIsXG4gICAgXCJzaWRld2F5cy1ybFwiOiBTaWRld2F5c1JsXG59IGFzIGNvbnN0O1xuIiwiXG5pbXBvcnQgeyBTdGF0ZVVwZGF0ZXIsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIGFzIHVzZVN0YXRlUCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcblxuLyoqXG4gKiBTbGlnaHRseSBlbmhhbmNlZCB2ZXJzaW9uIG9mIGB1c2VTdGF0ZWAgdGhhdCBpbmNsdWRlcyBhIGdldHRlciB0aGF0IHJlbWFpbnMgY29uc3RhbnRcbiAqIChpLmUuIHlvdSBjYW4gdXNlIGl0IGluIGB1c2VFZmZlY3RgIGFuZCBmcmllbmRzIHdpdGhvdXQgaXQgYmVpbmcgYSBkZXBlbmRlbmN5KS5cbiAqIFxuICogQHBhcmFtIGluaXRpYWxTdGF0ZSBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhdGU8VD4oaW5pdGlhbFN0YXRlOiBUIHwgKCgpID0+IFQpKTogcmVhZG9ubHkgW3ZhbHVlOiBULCBzZXRWYWx1ZTogU3RhdGVVcGRhdGVyPFQ+LCBnZXRWYWx1ZTogKCkgPT4gVF0ge1xuXG4gICAgLy8gV2Uga2VlcCBib3RoLCBidXQgb3ZlcnJyaWRlIHRoZSBgc2V0U3RhdGVgIGZ1bmN0aW9uYWxpdHlcbiAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlUF0gPSB1c2VTdGF0ZVAoaW5pdGlhbFN0YXRlKTtcbiAgICBjb25zdCByZWYgPSB1c2VSZWYoc3RhdGUpO1xuXG4gICAgLy8gSGlqYWNrIHRoZSBub3JtYWwgc2V0dGVyIGZ1bmN0aW9uIFxuICAgIC8vIHRvIGFsc28gc2V0IG91ciByZWYgdG8gdGhlIG5ldyB2YWx1ZVxuICAgIGNvbnN0IHNldFN0YXRlID0gdXNlQ2FsbGJhY2s8U3RhdGVVcGRhdGVyPFQ+Pih2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB2YWx1ZSBhcyAoKF9wcmV2VmFsdWU6IFQpID0+IFQpO1xuICAgICAgICAgICAgc2V0U3RhdGVQKHByZXZWYWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gY2FsbGJhY2socHJldlZhbHVlKTtcbiAgICAgICAgICAgICAgICByZWYuY3VycmVudCA9IG5leHRWYWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICAgICAgICAgICAgc2V0U3RhdGVQKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGdldFN0YXRlID0gKCkgPT4geyByZXR1cm4gcmVmLmN1cnJlbnQ7IH07XG5cblxuICAgIGNvbnNvbGUuYXNzZXJ0KHJlZi5jdXJyZW50ID09PSBzdGF0ZSB8fCAodHlwZW9mIHN0YXRlID09PSBcIm51bWJlclwiICYmIGlzTmFOKHN0YXRlKSkpO1xuICAgIHJldHVybiBbc3RhdGUsIHNldFN0YXRlLCBnZXRTdGF0ZV0gYXMgY29uc3Q7XG59IiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcHJvcHNcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XG5cbmNvbnN0IFRhYmxlID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OV8tXCI7XG5cbmZ1bmN0aW9uIGJhc2U2NCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIFRhYmxlW3ZhbHVlXTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tNkJpdHMoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDBiMTAwMDAwMCk7XG59XG5cbmZ1bmN0aW9uIHJhbmRvbTY0Qml0cygpIHtcbiAgICByZXR1cm4gW3JhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCksIHJhbmRvbTZCaXRzKCldIGFzIGNvbnN0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb21seS1nZW5lcmF0ZWQgSUQgd2l0aCBhbiBvcHRpb25hbCBwcmVmaXguXG4gKiBOb3RlIHRoYXQgaWYgdGhlIHByZWZpeCBpcyAqZXhwbGljaXRseSogc2V0IHRvIFwiXCIsIHRoZW5cbiAqIElEcyB0aGF0IGFyZSBub3QgdmFsaWQgdW5kZXIgSFRNTDQgbWF5IGJlIGdlbmVyYXRlZC4gT2ggbm8uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUlkKHByZWZpeD86IHN0cmluZykge1xuICAgIHJldHVybiBgJHtwcmVmaXggPz8gXCJpZC1cIn0ke3JhbmRvbTY0Qml0cygpLm1hcChuID0+IGJhc2U2NChuKSkuam9pbihcIlwiKX1gO1xufVxuXG5leHBvcnQgdHlwZSBVc2VSYW5kb21JZFByb3BzID0gPFAgZXh0ZW5kcyBVc2VSYW5kb21JZFByb3BzUGFyYW1ldGVycz4ocDogUCkgPT4gVXNlUmFuZG9tSWRQcm9wc1JldHVyblR5cGU8UD47XG5leHBvcnQgdHlwZSBVc2VSYW5kb21JZFByb3BzUGFyYW1ldGVycyA9IFVzZVJlZmVyZW5jZWRJZFByb3BzUGFyYW1ldGVyczxcImlkXCI+O1xuZXhwb3J0IHR5cGUgVXNlUmFuZG9tSWRQcm9wc1JldHVyblR5cGU8UCBleHRlbmRzIFVzZVJhbmRvbUlkUHJvcHNQYXJhbWV0ZXJzPiA9IFVzZVJlZmVyZW5jZWRJZFByb3BzUmV0dXJuVHlwZTxQLCBcImlkXCI+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJhbmRvbUlkUGFyYW1ldGVycyB7IHByZWZpeD86IHN0cmluZzsgfVxuXG5leHBvcnQgdHlwZSBVc2VSZWZlcmVuY2VkSWRQcm9wczxLIGV4dGVuZHMga2V5b2YgaC5KU1guSFRNTEF0dHJpYnV0ZXM8YW55Pj4gPSA8UCBleHRlbmRzIFVzZVJlZmVyZW5jZWRJZFByb3BzUGFyYW1ldGVyczxhbnk+Pihwcm9wczogUCkgPT4gVXNlUmVmZXJlbmNlZElkUHJvcHNSZXR1cm5UeXBlPFAsIEs+O1xuZXhwb3J0IHR5cGUgVXNlUmVmZXJlbmNlZElkUHJvcHNQYXJhbWV0ZXJzPEsgZXh0ZW5kcyBrZXlvZiBoLkpTWC5IVE1MQXR0cmlidXRlczxhbnk+PiA9IFBhcnRpYWw8UmVjb3JkPEssIGFueT4+Oy8vPEUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+IHsgfTtcblxuXG5leHBvcnQgdHlwZSBVc2VSZWZlcmVuY2VkSWRQcm9wc1JldHVyblR5cGU8UCBleHRlbmRzIFVzZVJlZmVyZW5jZWRJZFByb3BzUGFyYW1ldGVyczxhbnk+LCBLIGV4dGVuZHMga2V5b2YgaC5KU1guSFRNTEF0dHJpYnV0ZXM8YW55Pj4gPSBPbWl0PFAsIEs+ICYgUmVjb3JkPEssIHN0cmluZz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUmFuZG9tSWRSZXR1cm5UeXBlIHtcbiAgICByYW5kb21JZDogc3RyaW5nO1xuXG4gICAgLy8gTm90ZTogRWZmZWN0aXZlbHkgbGFncyBiZWhpbmQgYnkgb25lIHJlbmRlciwgdGhlbiByZS1yZW5kZXJzIGFuZCBzeW5jcyBiYWNrIHVwLCB3aGVuIGFuIElEIGlzIHByb3ZpZGVkXG4gICAgaWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBnZXRJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgdXNlUmFuZG9tSWRQcm9wczogVXNlUmFuZG9tSWRQcm9wcztcbiAgICB1c2VSZWZlcmVuY2VkSWRQcm9wczogPEsgZXh0ZW5kcyBrZXlvZiBoLkpTWC5IVE1MQXR0cmlidXRlczxhbnk+PihpZFByb3BOYW1lOiBLKSA9PiBVc2VSZWZlcmVuY2VkSWRQcm9wczxLPjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgaG9vayB0aGF0IG1vZGlmaWVzIGEgc2V0IG9mIHByb3BzIHRvIHByb3ZpZGUgYSByYW5kb21seS1nZW5lcmF0ZWQgSUQgaWYgb25lIHdhcyBub3QgcHJvdmlkZWQuXG4gKiBcbiAqIElmIHlvdSdkIGxpa2UgdG8gdXNlIHRoZSBJRCBpbiBhIHByb3BlcnR5IHRoYXQncyAqbm90KiBuYW1lZCBgaWRgIChsaWtlIGBmb3JgIG9yIGBhcmlhLWxhYmVsbGVkYnlgIG9yIHdoYXRub3QpLCBgdXNlUmVmZXJlbmNlZElkUHJvcHNgIGlzIGFsc28gcHJvdmlkZWQuXG4gKiBcbiAqIEFuZCB0aGUgcmFuZG9tbHktZ2VuZXJhdGVkIGlkIGl0c2VsZiBpcyBhbHNvIHByb3ZpZGVkIGluIGNhc2UgeW91IHdhbnQgdG8gaGFuZGxlIHRoZSBsb2dpYyB5b3Vyc2VsZiB3aXRob3V0IGB1c2VNZXJnZWRQcm9wc2AuXG4gKiBcbiAqIFVubGlrZSBtb3N0IG90aGVyIGB1c2UqUHJvcHNgIGhvb2tzLCB0aGVzZSBhcmUgbW9zdGx5IHN0YWJsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJhbmRvbUlkKHsgcHJlZml4IH06IFVzZVJhbmRvbUlkUGFyYW1ldGVycyA9IHt9KTogVXNlUmFuZG9tSWRSZXR1cm5UeXBlIHtcbiAgICBjb25zdCBbcmFuZG9tSWQsIHNldFJhbmRvbUlkXSA9IHVzZVN0YXRlPHN0cmluZz4oKCkgPT4gZ2VuZXJhdGVSYW5kb21JZChwcmVmaXgpKTtcbiAgICBjb25zdCBbX3dhdGNoUHJlZml4VXBkYXRlcywgc2V0V2F0Y2hQcmVmaXhVcGRhdGVzLCBnZXRXYXRjaFByZWZpeFVwZGF0ZXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHdhdGNoUHJlZml4VXBkYXRlcyA9IGdldFdhdGNoUHJlZml4VXBkYXRlcygpO1xuICAgICAgICBpZiAod2F0Y2hQcmVmaXhVcGRhdGVzKVxuICAgICAgICAgICAgc2V0UmFuZG9tSWQoKCkgPT4gZ2VuZXJhdGVSYW5kb21JZChwcmVmaXgpKTtcbiAgICAgICAgc2V0V2F0Y2hQcmVmaXhVcGRhdGVzKHRydWUpO1xuICAgIH0sIFtwcmVmaXhdKVxuXG4gICAgLy8gV2hhdGV2ZXIgSUQgd2FzIG1vc3QgcmVjZW50bHkgdXNlZCBieSB0aGUgYWN0dWFsIFwiaWRcIiBwcm9wLlxuICAgIC8vIFVzZWQgc28gdGhhdCBhbnkgSUQtcmVmZXJlbmNpbmcgcHJvcHMgZG9uJ3QgbmVlZCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlLlxuICAgIC8vXG4gICAgLy8gVE9ETzogVGhpcyBkb2VzIG1lYW4gdGhhdCBvbiB0aGUgZmlyc3QgcmVuZGVyLCBpZiBqdXN0IHRoZSBJRCBpcyBwcm92aWRlZCxcbiAgICAvLyB0aGVyZSB3aWxsIGJlIGEgdGVtcG9yYXJ5IG1pc21hdGNoLCBidXQgaXQncyBjb3JyZWN0ZWQgYmVmb3JlIHJlbmRlcmluZyBmaW5pc2hlcy5cbiAgICAvLyBJcyB0aGlzIG9rYXk/XG4gICAgY29uc3QgW3VzZWRJZCwgc2V0VXNlZElkLCBnZXRVc2VkSWRdID0gdXNlU3RhdGU8c3RyaW5nIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4gICAgY29uc3QgdXNlUmVmZXJlbmNlZElkUHJvcHMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VSZWZlcmVuY2VkSWRQcm9wczxLIGV4dGVuZHMga2V5b2YgaC5KU1guSFRNTEF0dHJpYnV0ZXM8YW55Pj4oaWRQcm9wTmFtZTogSykge1xuXG4gICAgICAgIGNvbnN0IHJldDogVXNlUmVmZXJlbmNlZElkUHJvcHM8Sz4gPSBmdW5jdGlvbiA8UCBleHRlbmRzIFVzZVJlZmVyZW5jZWRJZFByb3BzUGFyYW1ldGVyczxhbnk+Pih7IFtpZFByb3BOYW1lXTogZ2l2ZW5JZCwgLi4ucHJvcHMgfTogUCk6IFVzZVJlZmVyZW5jZWRJZFByb3BzUmV0dXJuVHlwZTxQLCBLPiB7XG5cbiAgICAgICAgICAgIGNvbnN0IHVzZWRJZDIgPSAoZ2l2ZW5JZCA/PyB1c2VkSWQgPz8gcmFuZG9tSWQgPz8gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGlmIChpZFByb3BOYW1lID09PSBcImlkXCIpXG4gICAgICAgICAgICAgICAgc2V0VXNlZElkKHVzZWRJZDIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHM8SFRNTEVsZW1lbnQ+KCkoeyBbaWRQcm9wTmFtZV06IHVzZWRJZDIgfSwgcHJvcHMpIGFzIHVua25vd24gYXMgVXNlUmVmZXJlbmNlZElkUHJvcHNSZXR1cm5UeXBlPFAsIEs+O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LCBbdXNlZElkLCByYW5kb21JZF0pO1xuXG4gICAgY29uc3QgdXNlUmFuZG9tSWRQcm9wczogVXNlUmFuZG9tSWRQcm9wcyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHVzZVJhbmRvbUlkUHJvcHM8UCBleHRlbmRzIFVzZVJhbmRvbUlkUHJvcHNQYXJhbWV0ZXJzPihwOiBQKTogVXNlUmFuZG9tSWRQcm9wc1JldHVyblR5cGU8UD4ge1xuICAgICAgICByZXR1cm4gdXNlUmVmZXJlbmNlZElkUHJvcHMoXCJpZFwiKShwKTtcbiAgICB9LCBbdXNlUmVmZXJlbmNlZElkUHJvcHNdKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHJhbmRvbUlkLFxuICAgICAgICBpZDogdXNlZElkLFxuICAgICAgICBnZXRJZDogZ2V0VXNlZElkLFxuICAgICAgICB1c2VSYW5kb21JZFByb3BzLFxuICAgICAgICB1c2VSZWZlcmVuY2VkSWRQcm9wc1xuICAgIH07XG59XG4iLCJcbmltcG9ydCB7IENvbXBvbmVudCwgb3B0aW9ucywgVk5vZGUgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBFZmZlY3RDYWxsYmFjaywgSW5wdXRzLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgZ2VuZXJhdGVSYW5kb21JZCB9IGZyb20gXCIuL3VzZS1yYW5kb20taWRcIjtcblxuY29uc3QgcHJldmlvdXNJbnB1dHMgPSBuZXcgTWFwPHN0cmluZywgSW5wdXRzIHwgdW5kZWZpbmVkPigpO1xuY29uc3QgdG9SdW4gPSBuZXcgTWFwPHN0cmluZywgeyBlZmZlY3Q6IEVmZmVjdENhbGxiYWNrLCBpbnB1dHM/OiBJbnB1dHMsIGNsZWFudXA6IG51bGwgfCB1bmRlZmluZWQgfCB2b2lkIHwgKCgpID0+IHZvaWQpIH0+KCk7XG5cblxuLy8gVE9ETzogV2hldGhlciB0aGlzIGdvZXMgaW4gb3B0aW9ucy5kaWZmZWQgb3Igb3B0aW9ucy5fY29tbWl0XG4vLyBpcyBhIHBvc3Qtc3VzcGVuc2UgcXVlc3Rpb24uXG4vLyBSaWdodCBub3csIHVzaW5nIG9wdGlvbnMuX2NvbW1pdCBoYXMgdGhlIHByb2JsZW0gb2YgcnVubmluZ1xuLy8gKmFmdGVyKiByZWZzIGFyZSBhcHBsaWVkLCBidXQgd2UgbmVlZCB0byBjb21lIGJlZm9yZSBldmVuIHRoYXRcbi8vIHNvIGByZWY9e3NvbWVTdGFibGVGdW5jdGlvbn1gIHdvcmtzLlxuLy8gXG4vLyBBbHNvIGl0J3MgcHJpdmF0ZS5cbi8vXG4vLyAuLi5cbi8vIFdlbGwsIHVzZUV2ZW50IG9yIHdoYXRldmVyIGlzIGZpbmFsbHksIGZpbmFsbHkgNCB5ZWFycyBsYXRlciBmaW5hbGx5IGhlcmVcbi8vIHdoaWNoIGlzIGNvb2wgYW5kIG1lYW5zIHdlIHdvbid0IG5lZWQgdGhpcyBhdCBhbGwgc29vbi5cbi8vIFNvIGZvciBub3cgd2UnbGwgc3RpY2sgd2l0aCBkaWZmIHRvIHByZXZlbnQgYW55IHdlaXJkbmVzcyB3aXRoXG4vLyBjb21taXQgYmVpbmcgcHJpdmF0ZSBhbmQgYWxsLlxuY29uc3QgY29tbWl0TmFtZSA9IFwiZGlmZmVkXCI7XG5cbmNvbnN0IG9yaWdpbmFsQ29tbWl0ID0gb3B0aW9uc1tjb21taXROYW1lXSBhcyAodm5vZGU6IFZOb2RlLCBjb21taXRRdWV1ZTogQ29tcG9uZW50W10pID0+IHZvaWQ7XG5jb25zdCBuZXdDb21taXQ6IHR5cGVvZiBvcmlnaW5hbENvbW1pdCA9ICguLi5hcmdzKSA9PiB7XG4gICAgZm9yIChjb25zdCBbaWQsIGVmZmVjdEluZm9dIG9mIHRvUnVuKSB7XG4gICAgICAgIGNvbnN0IG9sZElucHV0cyA9IHByZXZpb3VzSW5wdXRzLmdldChpZCk7XG4gICAgICAgIGlmIChhcmdzQ2hhbmdlZChvbGRJbnB1dHMsIGVmZmVjdEluZm8uaW5wdXRzKSkge1xuICAgICAgICAgICAgZWZmZWN0SW5mby5jbGVhbnVwPy4oKTtcbiAgICAgICAgICAgIGVmZmVjdEluZm8uY2xlYW51cCA9IGVmZmVjdEluZm8uZWZmZWN0KCk7XG4gICAgICAgICAgICBwcmV2aW91c0lucHV0cy5zZXQoaWQsIGVmZmVjdEluZm8uaW5wdXRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1J1bi5jbGVhcigpO1xuICAgIG9yaWdpbmFsQ29tbWl0Py4oLi4uYXJncyk7XG59XG5vcHRpb25zW2NvbW1pdE5hbWVdID0gbmV3Q29tbWl0IGFzIG5ldmVyXG5cbi8qKlxuICogU2VtaS1wcml2YXRlIGZ1bmN0aW9uIHRvIGFsbG93IHN0YWJsZSBjYWxsYmFja3MgZXZlbiB3aXRoaW4gYHVzZUxheW91dEVmZmVjdGAgYW5kIHJlZiBhc3NpZ25tZW50LlxuICogXG4gKiBFdmVyeSByZW5kZXIsIHdlIHNlbmQgdGhlIGFyZ3VtZW50cyB0byBiZSBldmFsdWF0ZWQgYWZ0ZXIgZGlmZmluZyBoYXMgY29tcGxldGVkLFxuICogd2hpY2ggaGFwcGVucyBiZWZvcmUuXG4gKiBcbiAqIEBwYXJhbSBlZmZlY3QgXG4gKiBAcGFyYW0gaW5wdXRzIFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQmVmb3JlTGF5b3V0RWZmZWN0KGVmZmVjdDogRWZmZWN0Q2FsbGJhY2ssIGlucHV0cz86IElucHV0cykge1xuXG4gICAgLyooKCkgPT4ge1xuICAgICAgICBjb25zdCBjbGVhbnVwID0gdXNlUmVmPHZvaWQgfCAoKCkgPT4gdm9pZCkgfCBudWxsPihudWxsKTtcbiAgICAgICAgY29uc3QgcHJldkFyZ3NSZWYgPSB1c2VSZWY8SW5wdXRzPihudWxsISk7XG4gICAgICAgIGlmIChhcmdzQ2hhbmdlZChpbnB1dHMsIHByZXZBcmdzUmVmLmN1cnJlbnQpKSB7XG4gICAgICAgICAgICBwcmV2QXJnc1JlZi5jdXJyZW50ID0gaW5wdXRzITtcbiAgICAgICAgICAgIGlmIChjbGVhbnVwLmN1cnJlbnQpXG4gICAgICAgICAgICAgICAgY2xlYW51cC5jdXJyZW50KCk7XG4gICAgICAgICAgICBjbGVhbnVwLmN1cnJlbnQgPSBlZmZlY3QoKTtcbiAgICAgICAgfVxuICAgIH0pKCk7Ki9cblxuICAgIGNvbnN0IFtpZF0gPSB1c2VTdGF0ZSgoKSA9PiBnZW5lcmF0ZVJhbmRvbUlkKCkpO1xuICAgIHRvUnVuLnNldChpZCwgeyBlZmZlY3QsIGlucHV0cywgY2xlYW51cDogbnVsbCB9KTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB0b1J1bi5kZWxldGUoaWQpO1xuICAgICAgICAgICAgcHJldmlvdXNJbnB1dHMuZGVsZXRlKGlkKTtcbiAgICAgICAgfVxuICAgIH0sIFtpZF0pXG59XG5cbmZ1bmN0aW9uIGFyZ3NDaGFuZ2VkKG9sZEFyZ3M/OiBJbnB1dHMsIG5ld0FyZ3M/OiBJbnB1dHMpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEoXG4gICAgICAgICFvbGRBcmdzIHx8XG4gICAgICAgIG9sZEFyZ3MubGVuZ3RoICE9PSBuZXdBcmdzPy5sZW5ndGggfHxcbiAgICAgICAgbmV3QXJncz8uc29tZSgoYXJnLCBpbmRleCkgPT4gYXJnICE9PSBvbGRBcmdzW2luZGV4XSlcbiAgICApO1xufSIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyB1c2VCZWZvcmVMYXlvdXRFZmZlY3QgfSBmcm9tIFwiLi91c2UtYmVmb3JlLWxheW91dC1lZmZlY3RcIjtcblxuY29uc3QgVW5zZXQgPSBTeW1ib2woXCJ1bnNldFwiKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbnB1dCB2YWx1ZSwgcmV0dXJucyBhIGNvbnN0YW50IGdldHRlciBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIFxuICogaW5zaWRlIG9mIGB1c2VFZmZlY3RgIGFuZCBmcmllbmRzIHdpdGhvdXQgaW5jbHVkaW5nIGl0IGluIHRoZSBkZXBlbmRlbmN5IGFycmF5LlxuICogXG4gKiBUaGlzIHVzZXMgYG9wdGlvbnMuZGlmZmVkYCBpbiBvcmRlciB0byBydW4gYmVmb3JlIGV2ZXJ5dGhpbmcsIGV2ZW5cbiAqIHJlZiBhc3NpZ25tZW50LiBUaGlzIG1lYW5zIHRoaXMgZ2V0dGVyIGlzIHNhZmUgdG8gdXNlIGFueXdoZXJlICoqKmV4Y2VwdCB0aGUgcmVuZGVyIHBoYXNlKioqLlxuICogXG4gKiBAcGFyYW0gdmFsdWUgXG4gKiBAcmV0dXJucyBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0YWJsZUdldHRlcjxUPih2YWx1ZTogVCk6ICgpID0+IFQge1xuICAgIGNvbnN0IHJlZiA9IHVzZVJlZjxUPihVbnNldCBhcyB1bmtub3duIGFzIFQpO1xuICAgIHVzZUJlZm9yZUxheW91dEVmZmVjdCgoKSA9PiB7IHJlZi5jdXJyZW50ID0gdmFsdWU7IH0sIFt2YWx1ZV0pO1xuICAgIHJldHVybiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmIChyZWYuY3VycmVudCBhcyB1bmtub3duID09PSBVbnNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWYWx1ZSByZXRyaWV2ZWQgZnJvbSB1c2VTdGFibGVHZXR0ZXIoKSBjYW5ub3QgYmUgY2FsbGVkIGR1cmluZyByZW5kZXIuJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVmLmN1cnJlbnQ7XG4gICAgfSwgW10pXG59IiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyB1c2VTdGFibGVHZXR0ZXIgfSBmcm9tIFwiLi91c2Utc3RhYmxlLWdldHRlclwiO1xuXG5cbi8qKlxuICogQWx0ZXJuYXRlIHVzZUNhbGxiYWNrKCkgd2hpY2ggYWx3YXlzIHJldHVybnMgdGhlIHNhbWUgKHdyYXBwZWQpIGZ1bmN0aW9uIHJlZmVyZW5jZVxuICogc28gdGhhdCBpdCBjYW4gYmUgZXhjbHVkZWQgZnJvbSB0aGUgZGVwZW5kZW5jeSBhcnJheXMgb2YgYHVzZUVmZmVjdGAgYW5kIGZyaWVuZHMuXG4gKiBcbiAqIERvIG5vdCB1c2UgZHVyaW5nIHRoZSByZW5kZXIgcGhhc2UhICBgdXNlTGF5b3V0RWZmZWN0YCBpcyBmaW5lIHRob3VnaC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0YWJsZUNhbGxiYWNrPFQgZXh0ZW5kcyAoLi4uX2FyZ3M6IGFueVtdKSA9PiBhbnk+KGZuOiBUKTogVCB7XG4gICAgY29uc3QgY3VycmVudENhbGxiYWNrR2V0dGVyID0gdXNlU3RhYmxlR2V0dGVyPFQ+KGZuKTtcblxuICAgIHJldHVybiB1c2VDYWxsYmFjaygoLi4uYXJnczogUGFyYW1ldGVyczxUPik6IFJldHVyblR5cGU8VD4gPT4ge1xuICAgICAgICByZXR1cm4gY3VycmVudENhbGxiYWNrR2V0dGVyKCkoLi4uYXJncyk7XG4gICAgfSwgW10pIGFzIFQ7XG59IiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0O1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbm93O1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0cmltbWVkRW5kSW5kZXg7XG4iLCJpbXBvcnQgdHJpbW1lZEVuZEluZGV4IGZyb20gJy4vX3RyaW1tZWRFbmRJbmRleC5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW1TdGFydCA9IC9eXFxzKy87XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nXG4gICAgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJylcbiAgICA6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVRyaW07XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3ltYm9sO1xuIiwiaW1wb3J0IGJhc2VUcmltIGZyb20gJy4vX2Jhc2VUcmltLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvTnVtYmVyO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IG5vdyBmcm9tICcuL25vdy5qcyc7XG5pbXBvcnQgdG9OdW1iZXIgZnJvbSAnLi90b051bWJlci5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmdcbiAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgIDogdGltZVdhaXRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWJvdW5jZTtcbiIsImltcG9ydCBkZWJvdW5jZSBmcm9tICcuL2RlYm91bmNlLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gKlxuICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGhyb3R0bGU7XG4iLCJcbmltcG9ydCBkZWJvdW5jZSwgeyBEZWJvdW5jZWRGdW5jLCB0eXBlIERlYm91bmNlU2V0dGluZ3MgfSBmcm9tIFwibG9kYXNoLWVzL2RlYm91bmNlXCI7XG5pbXBvcnQgdGhyb3R0bGUsIHsgdHlwZSBUaHJvdHRsZVNldHRpbmdzIH0gZnJvbSBcImxvZGFzaC1lcy90aHJvdHRsZVwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgcmV0dXJuTnVsbCwgdXNlUGFzc2l2ZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwiLi91c2Utc3RhdGVcIjtcblxudHlwZSBGdW5jID0gKC4uLmFyZ3M6IGFueSkgPT4gUHJvbWlzZTx1bmtub3duPiB8IHVua25vd247XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQXN5bmNQYXJhbWV0ZXJzPEFQIGV4dGVuZHMgdW5rbm93bltdLCBTUCBleHRlbmRzIHVua25vd25bXSA9IEFQPiB7XG4gICAgLyoqXG4gICAgICogSWYgcHJvdmlkZWQsIGFkZHMgYSBkZWJvdW5jZSBiZWhhdmlvciAqaW4gYWRkaXRpb24qIHRvXG4gICAgICogdGhlIGRlZmF1bHQgXCJ3YWl0IHVudGlsIHJlc29sdmVkXCIgdGhyb3R0bGluZyBiZWhhdmlvci5cbiAgICAgKi9cbiAgICBkZWJvdW5jZT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIGB1c2VBc3luY2Agd2l0aCBhdXRvLXRocm90dGxlIGJhc2VkIG9uIGhvdyBsb25nIGl0IHRha2VzXG4gICAgICogZm9yIHRoZSBvcGVyYXRpb24gdG8gY29tcGxldGUuICBJZiB5b3Ugd291bGQgbGlrZSB0aGVyZSB0byBiZSBhXG4gICAgICogbWluaW11bSBhbW91bnQgb2YgdGltZSB0byB3YWl0IGJlZm9yZSBhbGxvd2luZyBhIHNlY29uZCBvcGVyYXRpb24sXG4gICAgICogdGhlIGB0aHJvdHRsZWAgcGFyYW1ldGVyIGNhbiBiZSB1c2VkIGluIGFkZGl0aW9uIHRvIHRoYXQgYmVoYXZpb3IuXG4gICAgICovXG4gICAgdGhyb3R0bGU/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGFuIGFzeW5jIGZ1bmN0aW9uIGlzIGRlYm91bmNlZCBkdWUgdG8gb25lIGFscmVhZHkgcnVubmluZyxcbiAgICAgKiBpdCB3aWxsIHJ1biBvbiBhIGRlbGF5IGFuZCwgYXMgYSByZXN1bHQsIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcbiAgICAgKiB0aGF0IHdlcmUgcGFzc2VkIHRvIGl0IG1heSBuZWVkIHRvIGJlIGFkanVzdGVkIHRvIGFjY291bnQgZm9yIHRoYXQuXG4gICAgICogXG4gICAgICogRm9yIGV4YW1wbGUsIGR1cmluZyBgb25JbnB1dGAsIHRoZSBgdmFsdWVgIG9mIHRoYXQgZXZlbnQgaXNuJ3Qgc3RvcmVkXG4gICAgICogaW4gdGhlIGV2ZW50IGl0c2VsZiwgaXQncyBzdG9yZWQgaW4gdGhlIGBIVE1MSW5wdXRFbGVtZW50YCB0aGF0IHJhaXNlZCBpdC5cbiAgICAgKiBTbyB3aGVuIG91ciBoYW5kbGVyIGFjdHVhbGx5IHJ1bnMgYSBmZXcgc2Vjb25kcyBsYXRlciwgaXQnbGwgcmVhZCB0aGUgKipuZXh0KipcbiAgICAgKiBgZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZWAsIGluc3RlYWQgb2YgdGhlIG9uZSBmcm9tIGEgZmV3IHNlY29uZHMgYWdvIFxuICAgICAqIHRoYXQgYWN0dWFsbHkgcmFpc2VkIHRoZSBldmVudCFcbiAgICAgKiBcbiAgICAgKiBJZiB0aGUgYXJndW1lbnRzIHRvIHlvdXIgaGFuZGxlciByZXF1aXJlIHJlZmVyZW5jaW5nIGRhdGEgaW4gdGhlIGFyZ3VtZW50c1xuICAgICAqIHRoYXQgbWF5IGJlY29tZSBcInN0YWxlXCIgYnkgdGhlIHRpbWUgdGhlIGZ1bmN0aW9uIGFjdHVhbGx5IHJ1bnMgKGdlbmVyYWxseSBldmVudFxuICAgICAqIGhhbmRsZXJzIGFuZCBvdGhlciB0aGluZ3MgdGhhdCByZWZlcmVuY2UgdGhlIHByb3BlcnRpZXMgb2YgZXhpc3Rpbmcgb2JqZWN0cyksXG4gICAgICogdGhlIGBjYXB0dXJlYCBwYXJhbWV0ZXIgYWxsb3dzIHlvdSB0byB0cmFuc2Zvcm0gdGhlIHBhcmFtZXRlcnMgeW91IHdlcmUgZ2l2ZW5cbiAgICAgKiB3aGVuIHRoZSByZXF1ZXN0IHRvIHJ1biB3YXMgaW5pdGlhbGx5IG1hZGUgaW50byBwYXJhbWV0ZXJzIHRoYXQgeW91IGhhdmVcbiAgICAgKiBndWFyYW50ZWVkIHdpbGwgc3RpbGwgYmUgZ29vZCBieSB0aGUgdGltZSB0aGUgaGFuZGxlciBhY3R1YWxseSBydW5zLlxuICAgICAqL1xuICAgIGNhcHR1cmU/OiBDYXB0dXJlRnVuY3Rpb25UeXBlPEFQLCBTUD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQXN5bmNSZXR1cm5UeXBlPFNQIGV4dGVuZHMgdW5rbm93bltdLCBSPiB7XG5cbiAgICAvL3Byb21pc2U6IFByb21pc2U8QXdhaXRlZDxSZXR1cm5UeXBlPEY+Pj4gfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogV2hlbiBhIGhhbmRsZXIgaXMgY3VycmVudGx5IGV4ZWN1dGluZywgdGhpcyBpcyB0cnVlLlxuICAgICAqIFxuICAgICAqIEl0IGlzIGZhbHNlIGJlZm9yZSB0aGUgZmlyc3QgZXhlY3V0aW9uLCB0cnVlIGR1cmluZyB0aGVcbiAgICAgKiBmaXJzdCBleGVjdXRpb24sIHJlbWFpbnMgdHJ1ZSBpZiBjb250aW51aW5nIGltbWVkaWF0ZWx5XG4gICAgICogaW50byBhIHNlY29uZCwgYW5kIG9ubHkgcmV0dXJucyB0byBmYWxzZSB3aGVuIGEgaGFuZGxlclxuICAgICAqIGNvbXBsZXRlcyB3aXRoIG5vIGhhbmRsZXIgaW4gd2FpdGluZy5cbiAgICAgKi9cbiAgICBwZW5kaW5nOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiB0aW1lcyB0aGUgaGFuZGxlciBoYXMgcnVuLlxuICAgICAqIERvZXMgbm90IGluY2x1ZGUgdGltZXMgd2hlcmUgaXQgd2FzIHRocm90dGxlZCBvciBkZWJvdW5jZWQgYXdheS5cbiAgICAgKiBcbiAgICAgKiBVc2VmdWwgZm9yIGtub3dpbmcgaWYgdGhlIGhhbmRsZXIgaGFzIGJlZW4gY2FsbGVkIHlldCwgb3IgZm9yXG4gICAgICogc2V0dGluZyBhIG5ldyB0aW1lb3V0IHRvIHNob3cgYSBzcGlubmVyLlxuICAgICAqL1xuICAgIGNhbGxDb3VudDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiB0aW1lcyB0aGUgaGFuZGxlciBoYXMgc2V0dGxlZFxuICAgICAqIChyZXNvbHZlZCBvciByZWplY3RlZCksIHNpbWlsYXJseSB0byBgY2FsbENvdW50YC5cbiAgICAgKiBcbiAgICAgKiBVc2VmdWwgZm9yIGtub3dpbmcgaWYgdGhlIGhhbmRsZXIgaGFzIGNvbXBsZXRlZCBldmVuIG9uY2UgeWV0LFxuICAgICAqIG9yIGp1c3QgZm9yIHdoZW4gdGhlIGhhbmRsZXIgaGFzIGZpbmlzaGVkXG4gICAgICovXG4gICAgc2V0dGxlQ291bnQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGhhbmRsZXIgaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHksIFxuICAgICAqIHNpbWlsYXJseSB0byBgc2V0dGxlQ291bnRgLlxuICAgICAqL1xuICAgIHJlc29sdmVDb3VudDogbnVtYmVyO1xuXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBoYW5kbGVyIGhhcyBmYWlsZWQgdG8gY29tcGxldGUsIFxuICAgICAqIHNpbWlsYXJseSB0byBgcmVzb2x2ZUNvdW50YC5cbiAgICAgKi9cbiAgICByZWplY3RDb3VudDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgdmFsdWUgbW9zdCByZWNlbnRseSByZXR1cm5lZCBmcm9tIGEgc3VjY2Vzc2Z1bCBoYW5kbGVyIGludm9jYXRpb24sXG4gICAgICogb3IgdW5kZWZpbmVkIGlmIG5vIGhhbmRsZXIgaGFzIHN1Y2Nlc3NmdWxseSByZXR1cm5lZCB5ZXQuXG4gICAgICogXG4gICAgICogSWYgdGhlIGhhbmRsZXIgcmVqZWN0cyBhZnRlciBoYXZpbmcgc3VjY2VlZGVkIHByZXZpb3VzbHksIHRoZW5cbiAgICAgKiBgcmVzdWx0YCB3aWxsIHN0aWxsIGtlZXAgaXRzIHZhbHVlOyBpdCB3b24ndCBiZSBcImVyYXNlZFwiIGR1ZSB0byB0aGUgZXJyb3IuXG4gICAgICogVGhpcyBtZWFucyB0aGF0IGByZXN1bHRgIGFuZCBgZXJyb3JgIGNhbiBib3RoIGJlIHBvcHVsYXRlZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAqIFxuICAgICAqIEBzZWUgaGFzUmVzdWx0IGZvciBpZiBgcmVzdWx0YCBiZWluZyBgdW5kZWZpbmVkYCBtZWFucyBpdCdzIHVuZmluaXNoZWQgb3IgdGhlIGZ1bmN0aW9uIGl0c2VsZiByZXR1cm5lZCBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICByZXN1bHQ6IFIgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIHdoZW4gdGhlIG1vc3QgcmVjZW50bHktcnVuIGhhbmRsZXIgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSxcbiAgICAgKiBhbHNvIG1lYW5pbmcgdGhhdCB0aGF0IGl0J3MgcmV0dXJuZWQgYSB2YWx1ZSB0aGF0IHdlIGN1cnJlbnRseSBoYXZlLlxuICAgICAqIFxuICAgICAqIFdoaWxlIGBwZW5kaW5nYCBpcyB0cnVlLCAqKmBoYXNSZXN1bHRgIGFuZCBgaGFzRXJyb3JgIG1heSBiZSBzaW11bHRhbmVvdXNseSB0cnVlKiosXG4gICAgICogYnV0IGluIGFsbCBvdGhlciBjYXNlcyB0aGV5J3JlIG11dHVhbGx5IGV4Y2x1c2l2ZS5cbiAgICAgKi9cbiAgICBoYXNSZXN1bHQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZXJyb3IgdGhlIGhhbmRsZXIgdGhyZXcuIGB1bmRlZmluZWRgIG90aGVyd2lzZSwgdGhvdWdoIG5vdGVcbiAgICAgKiB0aGF0IGB1bmRlZmluZWRgIGlzIGEgdmFsaWQgdGhpbmcgdG8gdGhyb3csIHNvIGNoZWNrIGBoYXNFcnJvcmAgdG9vLlxuICAgICAqIFxuICAgICAqIEBzZWUgaGFzRXJyb3JcbiAgICAgKi9cbiAgICBlcnJvcjogdW5rbm93bjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSBtb3N0IHJlY2VudCBoYW5kbGVyIGZpbmlzaGVkIHdpdGggYW4gZXJyb3IuXG4gICAgICogXG4gICAgICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSwgdGVjaG5pY2FsbHksIGBlcnJvcmAgY2FuIGJlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGhhc0Vycm9yOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogSWYgeW91IHdvdWxkIGxpa2UgYW55IGN1cnJlbnRseSBkZWJvdW5jZWQtYnV0LWV2ZW50dWFsbHktcGVuZGluZyBwcm9taXNlcyB0byBpbW1lZGlhdGVseSBiZSBjb25zaWRlcmVkIGJ5IGNhbmNlbGxpbmcgdGhlaXIgZGVib3VuY2UgdGltZW91dCxcbiAgICAgKiB5b3UgY2FuIGNhbGwgdGhpcyBmdW5jdGlvbi4gIE5vcm1hbCBwcm9jZWR1cmUgYXBwbGllcyBhcyBpZiB0aGUgZGVib3VuY2VkIGVuZGVkIG5vcm1hbGx5IC0tIGlmIHRoZXJlJ3Mgbm8gcHJvbWlzZSB3YWl0aW5nIGluIHRoZSBxdWV1ZSxcbiAgICAgKiB0aGUgZGVib3VuY2VkIHByb21pc2UgcnVucyBub3JtYWxseSwgb3RoZXJ3aXNlLCBpdCB3YWl0cyBpdHMgdHVybiB1bnRpbCB0aGUgY3VycmVudCBvbmUgZW5kcywgcG90ZW50aWFsbHkgYmVpbmcgb3ZlcndyaXR0ZW4gbGF0ZXIgb25cbiAgICAgKiBpZiBhIG5ldyBwcm9taXNlIHJ1bnMgb3V0ICppdHMqIGRlYm91bmNlIHRpbWVyIGJlZm9yZSB0aGlzIG9uZSBnb3QgYSBjaGFuY2UgdG8gcnVuLlxuICAgICAqL1xuICAgIGZsdXNoRGVib3VuY2VkUHJvbWlzZTogKCkgPT4gdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEJhc2VkIG9uIHRoZSB0eXBlIG9mIGhhbmRsZXIgcGFzc2VkIGluLCB0aGlzIHJldHVybmVkIHZhbHVlIHdpbGxcbiAgICAgKiByZXByZXNlbnQgd2hhdCB0eXBlIG9mIGhhbmRsZXIgaXQgd2FzLCBqdXN0IGluIGNhc2UgeW91XG4gICAgICogeW91cnNlbGYgbmVlZCB0byBrbm93IHRoYXQgYW5kIGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoZSBvcmlnaW5hbFxuICAgICAqIHRvIGZpbmQgb3V0IHdpdGhvdXQgaXQgYWN0dWFsbHkgYmVpbmcgcnVuLlxuICAgICAqIFxuICAgICAqIFVudGlsIGEgaGFuZGxlciBpcyBjYWxsZWQsIHRoaXMgd2lsbCBiZSBudWxsLiAgTmF0dXJhbGx5LCBpZiBcbiAgICAgKiBkaWZmZXJlbnQgaGFuZGxlcnMgYXJlIHBhc3NlZCBpbiwgaXQgY2FuIGZsaXAgYmFjayBhbmRcbiAgICAgKiBmb3J0aCBiZXR3ZWVuIFwiYXN5bmNcIiBhbmQgXCJzeW5jXCIgYXMgd2VsbC5cbiAgICAgKi9cbiAgICBjdXJyZW50VHlwZTogbnVsbCB8IFwic3luY1wiIHwgXCJhc3luY1wiO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zZm9ybWVkIHZlcnNpb24gb2YgdGhlIGFzeW5jIGhhbmRsZXIgcHJvdmlkZWQsXG4gICAgICogbm93IHN5bmNocm9ub3VzIGFuZC9vciB0aHJvdHRsZWQgYW5kL29yIGRlYm91bmNlZFxuICAgICAqL1xuICAgIHN5bmNIYW5kbGVyOiBTeW5jRnVuY3Rpb25UeXBlPFNQLCBSPjtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHk8QVAgZXh0ZW5kcyB1bmtub3duW10sIFNQIGV4dGVuZHMgdW5rbm93bltdPiguLi50OiBTUCkgeyByZXR1cm4gdCBhcyB1bmtub3duW10gYXMgQVA7IH1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdGhyb3R0bGVkIHZlcnNpb24gb2YgdGhlIGdpdmVuIChzdGFibGUpIGNhbGxiYWNrIHVzaW5nIExvZGFzaCdzIGB0aHJvdHRsZWAgZnVuY3Rpb24uXG4gKiBcbiAqIElmIHRoZSBjYWxsYmFjayBpcyBgbnVsbGAsIHRoZW4gYG51bGxgIHdpbGwgYmUgcmV0dXJuZWQsIG90aGVyd2lzZSBgY2FsbGJhY2tgIG11c3QgYmUgc3RhYmxlIGZvciB0aGlzIHRvIHdvcmsgYXMgaW50ZW50ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VUaHJvdHRsZWQ8RiBleHRlbmRzIEZ1bmM+KGNhbGxiYWNrOiBGIHwgbnVsbCwgd2FpdDogbnVtYmVyLCBvcHRpb25zPzogVGhyb3R0bGVTZXR0aW5ncyk6IERlYm91bmNlZEZ1bmM8Rj47XG5leHBvcnQgZnVuY3Rpb24gdXNlVGhyb3R0bGVkPEYgZXh0ZW5kcyBGdW5jPihjYWxsYmFjazogRiB8IG51bGwsIHdhaXQ6IG51bWJlciwgb3B0aW9ucz86IFRocm90dGxlU2V0dGluZ3MpOiBEZWJvdW5jZWRGdW5jPEY+IHwgbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiB1c2VUaHJvdHRsZWQ8RiBleHRlbmRzIEZ1bmM+KGNhbGxiYWNrOiBGIHwgbnVsbCwgd2FpdDogbnVtYmVyLCBvcHRpb25zPzogVGhyb3R0bGVTZXR0aW5ncyk6IERlYm91bmNlZEZ1bmM8Rj4gfCBudWxsIHtcbiAgICBjb25zdCB0aHJvdHRsZWQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrID8gdGhyb3R0bGUoY2FsbGJhY2ssIHdhaXQsIG9wdGlvbnMpIDogbnVsbDtcbiAgICB9LCBbY2FsbGJhY2ssIHdhaXQsIG9wdGlvbnM/LmxlYWRpbmcsIG9wdGlvbnM/LnRyYWlsaW5nXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICByZXR1cm4gKCkgPT4gdGhyb3R0bGVkPy5jYW5jZWwoKTtcbiAgICB9LCBbdGhyb3R0bGVkXSlcblxuICAgIHJldHVybiB0aHJvdHRsZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIHRoZSBnaXZlbiAoc3RhYmxlKSBjYWxsYmFjayB1c2luZyBMb2Rhc2gncyBgZGVib3VuY2VkYCBmdW5jdGlvbi5cbiAqIFxuICogSWYgdGhlIGNhbGxiYWNrIGlzIGBudWxsYCwgdGhlbiBgbnVsbGAgd2lsbCBiZSByZXR1cm5lZCwgb3RoZXJ3aXNlIGBjYWxsYmFja2AgbXVzdCBiZSBzdGFibGUgZm9yIHRoaXMgdG8gd29yayBhcyBpbnRlbnRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlYm91bmNlZDxGIGV4dGVuZHMgRnVuYz4oY2FsbGJhY2s6IEYsIHdhaXQ6IG51bWJlciwgb3B0aW9ucz86IERlYm91bmNlU2V0dGluZ3MpOiBEZWJvdW5jZWRGdW5jPEY+O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlYm91bmNlZDxGIGV4dGVuZHMgRnVuYz4oY2FsbGJhY2s6IEYgfCBudWxsLCB3YWl0OiBudW1iZXIsIG9wdGlvbnM/OiBEZWJvdW5jZVNldHRpbmdzKTogRGVib3VuY2VkRnVuYzxGPiB8IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gdXNlRGVib3VuY2VkPEYgZXh0ZW5kcyBGdW5jPihjYWxsYmFjazogRiB8IG51bGwsIHdhaXQ6IG51bWJlciwgb3B0aW9ucz86IERlYm91bmNlU2V0dGluZ3MpOiBEZWJvdW5jZWRGdW5jPEY+IHwgbnVsbCB7XG4gICAgY29uc3QgZGVib3VuY2VkID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayA/IGRlYm91bmNlKGNhbGxiYWNrLCB3YWl0LCBvcHRpb25zKSA6IG51bGw7XG4gICAgfSwgW2NhbGxiYWNrLCB3YWl0LCBvcHRpb25zPy5sZWFkaW5nLCBvcHRpb25zPy5tYXhXYWl0LCBvcHRpb25zPy50cmFpbGluZ10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgcmV0dXJuICgpID0+IGRlYm91bmNlZD8uY2FuY2VsKCk7XG4gICAgfSwgW2RlYm91bmNlZF0pXG5cbiAgICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG50eXBlIFN5bmNGdW5jdGlvblR5cGU8U1AgZXh0ZW5kcyB1bmtub3duW10sIFI+ID0gKC4uLmFyZ3M6IFNQKSA9PiAoUiB8IHVuZGVmaW5lZCk7XG50eXBlIEFzeW5jRnVuY3Rpb25UeXBlPEFQIGV4dGVuZHMgdW5rbm93bltdLCBSPiA9ICgoLi4uYXJnczogQVApID0+IChSIHwgUHJvbWlzZTxSPikpO1xudHlwZSBHbHVlRnVuY3Rpb25UeXBlPEFQIGV4dGVuZHMgdW5rbm93bltdLCBSPiA9IChlbnF1ZXVlOiBib29sZWFuLCAuLi5hcmdzOiBBUCkgPT4gUiB8IHVuZGVmaW5lZDtcbnR5cGUgQ2FwdHVyZUZ1bmN0aW9uVHlwZTxBUCBleHRlbmRzIHVua25vd25bXSwgU1AgZXh0ZW5kcyB1bmtub3duW10gPSBBUD4gPSAoLi4uYXJnczogU1ApID0+IEFQO1xuXG4vKipcbiAqIEdpdmVuIGFuIGFzeW5jIGZ1bmN0aW9uLCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCdzIHN1aXRhYmxlIGZvciBub24tYXN5bmMgQVBJcywgXG4gKiBhbG9uZyB3aXRoIG90aGVyIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IHJ1bidzIHN0YXR1cy5cbiAqIFxuICogU2VlIGFsc28gYHVzZUFzeW5jSGFuZGxlcmAgZm9yIGEgdmVyc2lvbiB0aGF0J3Mgc3BlY2lhbGl6ZWQgZm9yIERPTSBldmVudCBoYW5kbGVycy5cbiAqIFxuICogV2hlbiBjYWxsZWQgbXVsdGlwbGUgdGltZXMgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgKGkuZS4gYmVmb3JlIHRoZSBoYW5kbGVyIGhhcyBmaW5pc2hlZCksIFxuICogdGhpcyB3b3JrcyBsaWtlIExvZGFzaCdzIGB0aHJvdHRsZWAgZnVuY3Rpb24gd2l0aCB0aGUgYHdhaXRgIG9wdGlvbiBhbHdheXNcbiAqIHNldCB0byBob3dldmVyIGxvbmcgdGhlIGhhbmRsZXIgdGFrZXMgdG8gY29tcGxldGUuIEEgc2Vjb25kIGNhbGwgdG8gdGhlIHN5bmMgZnVuY3Rpb24gd2lsbCBiZSBcbiAqIHRocm90dGxlZCB1bnRpbCB0aGUgZmlyc3QgY2FsbCBoYXMgZmluaXNoZWQuIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIGlzIHRoZSByZXN1bHQgXG4gKiBvZiB0aGUgcHJldmlvdXMgaW52b2NhdGlvbiwgb3IgYHVuZGVmaW5lZGAgb24gdGhlIGZpcnN0IGNhbGwuXG4gKiBcbiAqIFRoZSBoYW5kbGVyIGlzIG9ubHkgZXZlciBkZWxheWVkIGlmIG9uZSBpcyBjdXJyZW50bHkgcnVubmluZywgc28sIGUuZy4gZm9yIGlPUyB0b3VjaCBldmVudHMgdGhlXG4gKiBmaXJzdCBjYWxsIGhhcHBlbnMgaW4gdGhlIHNhbWUgZXZlbnQgaGFuZGxlciAod2hpY2ggbWVhbnMgdGhpbmdzIGxpa2UgY2FsbHMgdG8gYGVsZW1lbnQuZm9jdXMoKWBcbiAqIHdpbGwgd29yayBhcyBpbnRlbmRlZCwgc2luY2UgdGhhdCBmYWlscyB3aGVuIHRoZSBldmVudCBpcyBcInNwbGl0IHVwXCIpXG4gKiBcbiAqIEZpbmFsbHksIGJlY2F1c2UgdGhlIHN5bmMgaGFuZGxlciBtYXkgYmUgaW52b2tlZCBvbiBhIGRlbGF5LCBhbnkgcHJvcGVydHkgcmVmZXJlbmNlcyBvbiB0aGUgYXJndW1lbnRzXG4gKiBwcm92aWRlZCBtaWdodCBiZSBzdGFsZSBieSB0aGUgdGltZSBpdCdzIGFjdHVhbGx5IGludm9rZWQgKGUuZy4gYWNjZXNzaW5nIGBldmVudC5jdXJyZW50VGFyZ2V0LmNoZWNrZWRgXG4gKiBpcyBub3Qgc3RhYmxlIGFjcm9zcyB0aW1lIGJlY2F1c2UgaXQncyBhIFwibGl2ZVwiIHZhbHVlIC0tIHlvdSBhbG1vc3QgYWx3YXlzIHdhbnQgdGhlIHZhbHVlIHRoYXQgaXRcbiAqIGhhZCBhdCB0aGUgb3JpZ2luYWwgdGltZSB0aGUgaGFuZGxlciB3YXMgY2FsbGVkKS4gVGhlIGBjYXB0dXJlYCBvcHRpb24gYWxsb3dzIHlvdSB0byBzYXZlIHRoYXQga2luZCBvZlxuICogZHluYW1pYyBkYXRhIGF0IHRoZSB0aW1lIGl0IHJ1bnM7IHRoZSBgQVBgIGFuZCBgU1BgIHR5cGUgcGFyYW1ldGVycyBsaWtld2lzZSBjb250cm9sXG4gKiB0aGUgcGFyYW1ldGVycyB0aGUgYXN5bmMgaGFuZGxlciBhbmQgc3luYyBoYW5kbGVyIGV4cGVjdCByZXNwZWN0aXZlbHkuXG4gKiBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFzeW5jPEFQIGV4dGVuZHMgdW5rbm93bltdLCBSLCBTUCBleHRlbmRzIHVua25vd25bXSA9IEFQPihhc3luY0hhbmRsZXI6IEFzeW5jRnVuY3Rpb25UeXBlPEFQLCBSPiB8IG51bGwsIG9wdGlvbnM/OiBVc2VBc3luY1BhcmFtZXRlcnM8QVAsIFNQPik6IFVzZUFzeW5jUmV0dXJuVHlwZTxTUCwgUj4ge1xuXG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItY29uc3QgKi9cbiAgICBsZXQgeyB0aHJvdHRsZSwgZGVib3VuY2UsIGNhcHR1cmUgfSA9IChvcHRpb25zID8/IHt9KTtcbiAgICBjYXB0dXJlID8/PSBpZGVudGl0eTtcblxuICAgIC8vIFdlIGtlZXAsIGxpa2UsIGEgbG90IG9mIHJlbmRlci1zdGF0ZSwgYnV0IGl0IG9ubHkgZXZlciB0cmlnZ2VycyBhIHJlLXJlbmRlclxuICAgIC8vIHdoZW4gd2Ugc3RhcnQvc3RvcCBhbiBhc3luYyBhY3Rpb24uXG5cbiAgICAvLyBLZWVwIHRyYWNrIG9mIHRoaXMgZm9yIHRoZSBjYWxsZXIncyBzYWtlIC0tIHdlIGRvbid0IHJlYWxseSBjYXJlLlxuICAgIGNvbnN0IFtjdXJyZW50VHlwZSwgc2V0Q3VycmVudFR5cGVdID0gdXNlU3RhdGU8bnVsbCB8IFwic3luY1wiIHwgXCJhc3luY1wiPihudWxsKTtcbiAgICBjb25zdCBbcnVuQ291bnQsIHNldFJ1bkNvdW50XSA9IHVzZVN0YXRlKDApO1xuICAgIGNvbnN0IFtzZXR0bGVDb3VudCwgc2V0U2V0dGxlQ291bnRdID0gdXNlU3RhdGUoMCk7XG4gICAgY29uc3QgW3Jlc29sdmVDb3VudCwgc2V0UmVzb2x2ZUNvdW50XSA9IHVzZVN0YXRlKDApO1xuICAgIGNvbnN0IFtyZWplY3RDb3VudCwgc2V0UmVqZWN0Q291bnRdID0gdXNlU3RhdGUoMCk7XG5cbiAgICAvLyBUaGluZ3MgcmVsYXRlZCB0byBjdXJyZW50IGV4ZWN1dGlvblxuICAgIC8vIEJlY2F1c2Ugd2UgY2FuIGJvdGggcmV0dXJuIGFuZCB0aHJvdyB1bmRlZmluZWQsIFxuICAgIC8vIHdlIG5lZWQgc2VwYXJhdGUgc3RhdGUgdG8gdHJhY2sgdGhlaXIgZXhpc3RhbmNlIHRvby5cbiAgICBjb25zdCBbcGVuZGluZywgc2V0UGVuZGluZywgZ2V0UGVuZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW3Jlc3VsdCwgc2V0UmVzdWx0LCBnZXRSZXN1bHRdID0gdXNlU3RhdGU8Uj4odW5kZWZpbmVkISk7XG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvciwgX2dldEVycm9yXSA9IHVzZVN0YXRlPHVua25vd24+KHVuZGVmaW5lZCEpO1xuICAgIGNvbnN0IFtoYXNFcnJvciwgc2V0SGFzRXJyb3IsIF9nZXRIYXNFcnJvcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2hhc1Jlc3VsdCwgc2V0SGFzUmVzdWx0LCBfZ2V0SGFzUmVzdWx0XSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIC8vIFdlIGltcGxlbWVudCBvdXIgb3duIHRocm90dGxpbmcgYmVoYXZpb3IgaW4gcmVnYXJkcyB0byB3YWl0aW5nIHVudGlsIHRoZSBhc3luYyBoYW5kbGVyIGZpbmlzaGVzLlxuICAgIC8vIFRoZXNlIHR3byBwYXNzaXZlIHN0YXRlIHZhcmlhYmxlcyBrZWVwIHRyYWNrIG9mIHRoYXQsIGF1dG9tYXRpY2FsbHkgcXVldWVpbmcvZGVxdWV1aW5nIHRoZSBuZXh0IGhhbmRsZXIuXG4gICAgY29uc3QgW2dldFF1ZXVlZCwgc2V0UXVldWVkXSA9IHVzZVBhc3NpdmVTdGF0ZTxBUCB8IG51bGw+KG51bGwsIHJldHVybk51bGwpO1xuXG5cbiAgICAvLyBUaGUgYWN0dWFsIHN5bmMgaGFuZGxlci5cbiAgICAvLyBDYXB0dXJlL3RyYW5zZm9ybSB0aGUgZ2l2ZW4gcGFyYW1ldGVycyBpZiBhcHBsaWNhYmxlLFxuICAgIC8vIHRoZW4gcnVuIGZ1cnRoZXIgbG9naWMgdGhhdCdzIGRlYm91bmNlZC90aHJvdHRsZWRcbiAgICBjb25zdCBjYXB0dXJlQXJnc0FuZEV4ZWN1dGVEZWJvdW5jZWRIYW5kbGVyID0gdXNlU3RhYmxlQ2FsbGJhY2s8U3luY0Z1bmN0aW9uVHlwZTxTUCwgUj4+KGZ1bmN0aW9uIG9uTmV3RXhlY3V0ZVJlcXVlc3QoLi4ubmV3QXJnczI6IFNQKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2FwdHVyZUFyZ3NBbmRFeGVjdXRlRGVib3VuY2VkSGFuZGxlclwiKTtcblxuICAgICAgICAvLyBDYXB0dXJlIHRoZSBhcmd1bWVudHMgd2Ugd2VyZSBnaXZlbi5cbiAgICAgICAgLy8gV2UgbWlnaHQgdXNlIHRoZW0gaW1tZWRpYXRlbHksIG9yIHdlIG1pZ2h0IHN0b3JlIHRoZW0gdG8gYHF1ZXVlZGAsXG4gICAgICAgIC8vIGJ1dCBpbiBlaXRoZXIgY2FzZSB3ZSBkbyBuZWVkIHRoZSBjYXB0dXJlZCB2YWx1ZS5cbiAgICAgICAgY29uc3QgY2FwdHVyZWQgPSBjYXB0dXJlISguLi5uZXdBcmdzMik7XG5cbiAgICAgICAgLy8gVGhpcyBpcyBhbGwgbG9naWMgdGhhdCBkZWFscyB3aXRoIHRoZSBjYXB0dXJlZCB2YWx1ZSBpbnN0ZWFkIG9mIHRoZSByYXcgYXJndW1lbnRzLlxuICAgICAgICAvLyBJdCdzIGNhbGxlZCBpbiB0d28gc2VwYXJhdGUgY2lyY3Vtc3RhbmNlcyxcbiAgICAgICAgLy8gYW5kIGhhcyB0aGUgZGVib3VuY2UvdGhyb3R0bGUgbG9naWMgYWxyZWFkeSBhcHBsaWVkXG4gICAgICAgIHJldHVybiBleGVjdXRlSGFuZGxlcldpdGhEZWJvdW5jZShnZXRQZW5kaW5nKCksIC4uLmNhcHR1cmVkKTtcblxuICAgIH0pO1xuXG4gICAgLy8gVGhpcyBpcyB0aGUgbG9naWMgdGhhdCBydW5zIHdoZW4gdGhlIGhhbmRsZXIgaXMgKmp1c3QqIGFib3V0IHRvIHN0YXJ0LlxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXRzZWxmIGlzIGZ1cnRoZXIgdHJhbnNmb3JtZWQgdG8gYmUgdGhyb3R0bGVkL2RlYm91bmNlZCBpZiByZXF1ZXN0ZWQsXG4gICAgLy8gc28gdGhpcyBtaWdodCBub3QgYmUgY2FsbGVkIGltbWVkaWF0ZWx5IGFmdGVyIFxuICAgIGNvbnN0IGV4ZWN1dGVIYW5kbGVyV2l0aG91dERlYm91bmNlID0gdXNlU3RhYmxlQ2FsbGJhY2s8R2x1ZUZ1bmN0aW9uVHlwZTxBUCwgUj4+KGZ1bmN0aW9uIG9uTmV3RXhlY3V0ZVJlcXVlc3QyKGVucXVldWU6IGJvb2xlYW4sIC4uLm5ld0FyZ3M6IEFQKSB7XG5cbiAgICAgICAgY29uc3Qgb25UaGVuID0gKHZhbHVlOiBSKSA9PiB7IGNvbnNvbGUubG9nKFwiZXhlY3V0ZUhhbmRsZXJXaXRob3V0RGVib3VuY2Uub25UaGVuXCIpOyBzZXRSZXN1bHQodmFsdWUpOyBzZXRIYXNSZXN1bHQodHJ1ZSk7IHNldEhhc0Vycm9yKGZhbHNlKTsgc2V0UmVzb2x2ZUNvdW50KHIgPT4gKytyKTsgfTtcbiAgICAgICAgY29uc3Qgb25DYXRjaCA9IChleDogYW55KSA9PiB7IGNvbnNvbGUubG9nKFwiZXhlY3V0ZUhhbmRsZXJXaXRob3V0RGVib3VuY2Uub25DYXRjaFwiKTsgc2V0RXJyb3IoZXgpOyBzZXRIYXNFcnJvcih0cnVlKTsgc2V0SGFzUmVzdWx0KGZhbHNlKTsgc2V0UmVqZWN0Q291bnQociA9PiArK3IpOyB9O1xuICAgICAgICBjb25zdCBvbkZpbmFsbHkgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBxdWV1ZWQgPSBnZXRRdWV1ZWQoKTtcbiAgICAgICAgICAgIHNldFNldHRsZUNvdW50KHMgPT4gKytzKTtcbiAgICAgICAgICAgIGlmIChxdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImV4ZWN1dGVIYW5kbGVyV2l0aG91dERlYm91bmNlLm9uRmluYWxseSAocXVldWVkKVwiKTtcbiAgICAgICAgICAgICAgICBzZXRRdWV1ZWQobnVsbCk7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZUhhbmRsZXJXaXRoRGVib3VuY2UoZmFsc2UsIC4uLnF1ZXVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImV4ZWN1dGVIYW5kbGVyV2l0aG91dERlYm91bmNlLm9uRmluYWxseSAoZW1wdHkpXCIpO1xuICAgICAgICAgICAgICAgIHNldFBlbmRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFlbnF1ZXVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImV4ZWN1dGVIYW5kbGVyV2l0aG91dERlYm91bmNlIChpbW1lZGlhdGUpXCIpO1xuICAgICAgICAgICAgLy8gTm90aGluZyBpcyBwZW5kaW5nIGF0IHRoZSBtb21lbnQsIHNvIHdlIGNhbiBydW4gb3VyIGZ1bmN0aW9uIGltbWVkaWF0ZWx5LlxuICAgICAgICAgICAgc2V0UnVuQ291bnQociA9PiArK3IpO1xuICAgICAgICAgICAgc2V0UGVuZGluZyh0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGFzeW5jSGFuZGxlcj8uKC4uLm5ld0FyZ3MpIGFzIFI7XG4gICAgICAgICAgICBjb25zdCBpc1Byb21pc2UgPSAocmVzdWx0ICE9IG51bGwgJiYgdHlwZW9mIHJlc3VsdCA9PSBcIm9iamVjdFwiICYmIFwidGhlblwiIGluIChyZXN1bHQgYXMgdW5rbm93biBhcyBQcm9taXNlPGFueT4pKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCB8fCAhaXNQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBzeW5jaHJvbm91cyBhbmQgcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5LlxuICAgICAgICAgICAgICAgIC8vIEJhaWwgb3V0IGVhcmx5LlxuICAgICAgICAgICAgICAgIG9uVGhlbihyZXN1bHQgYXMgUik7XG4gICAgICAgICAgICAgICAgb25GaW5hbGx5KCk7XG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudFR5cGUoXCJzeW5jXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKHJlc3VsdCBhcyB1bmtub3duIGFzIFByb21pc2U8Uj4pLnRoZW4ob25UaGVuKS5jYXRjaChvbkNhdGNoKS5maW5hbGx5KG9uRmluYWxseSk7XG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudFR5cGUoXCJhc3luY1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXhlY3V0ZUhhbmRsZXJXaXRob3V0RGVib3VuY2UgKHBlbmRpbmcpXCIpO1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSdyZSBzdGlsbCBydW5uaW5nIGEgcHJldmlvdXMgaGFuZGxlcixcbiAgICAgICAgICAgIC8vIGp1c3Qgc2V0IG91cnNlbHZlcyBhcyB0aGUgbmV4dCBvbmUgdG8gcnVuIGFuZCBxdWl0IGVhcmx5LlxuICAgICAgICAgICAgLy8gTm90aGluZyBtb3JlIHRvIGRvLlxuICAgICAgICAgICAgc2V0UXVldWVkKG5ld0FyZ3MpO1xuICAgICAgICB9XG5cblxuXG5cbiAgICAgICAgcmV0dXJuIGdldFJlc3VsdCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgZXhlY3V0ZUhhbmRsZXJXaXRoVCA9IHVzZVRocm90dGxlZDxOb25OdWxsYWJsZTx0eXBlb2YgZXhlY3V0ZUhhbmRsZXJXaXRob3V0RGVib3VuY2U+PighdGhyb3R0bGUgPyBudWxsIDogZXhlY3V0ZUhhbmRsZXJXaXRob3V0RGVib3VuY2UsIHRocm90dGxlID8/IDApO1xuICAgIGNvbnN0IGV4ZWN1dGVIYW5kbGVyV2l0aEQgPSB1c2VEZWJvdW5jZWQoIWRlYm91bmNlID8gbnVsbCA6IChleGVjdXRlSGFuZGxlcldpdGhUID8/IGV4ZWN1dGVIYW5kbGVyV2l0aG91dERlYm91bmNlKSwgZGVib3VuY2UgPz8gMCk7XG4gICAgY29uc3QgZXhlY3V0ZUhhbmRsZXJXaXRoRGVib3VuY2UgPSAoZXhlY3V0ZUhhbmRsZXJXaXRoRCA/PyBleGVjdXRlSGFuZGxlcldpdGhUID8/IGV4ZWN1dGVIYW5kbGVyV2l0aG91dERlYm91bmNlKTtcblxuICAgIGNvbnN0IGZsdXNoRGVib3VuY2VkUHJvbWlzZSA9IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKGV4ZWN1dGVIYW5kbGVyV2l0aERlYm91bmNlICYmIFwiZmx1c2hcIiBpbiBleGVjdXRlSGFuZGxlcldpdGhEZWJvdW5jZSlcbiAgICAgICAgICAgIGV4ZWN1dGVIYW5kbGVyV2l0aERlYm91bmNlLmZsdXNoKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzeW5jSGFuZGxlcjogY2FwdHVyZUFyZ3NBbmRFeGVjdXRlRGVib3VuY2VkSGFuZGxlcixcbiAgICAgICAgY3VycmVudFR5cGUsXG4gICAgICAgIHBlbmRpbmcsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIGhhc0Vycm9yLFxuICAgICAgICBoYXNSZXN1bHQsXG4gICAgICAgIHJlc29sdmVDb3VudCxcbiAgICAgICAgcmVqZWN0Q291bnQsXG4gICAgICAgIHNldHRsZUNvdW50LFxuICAgICAgICBjYWxsQ291bnQ6IHJ1bkNvdW50LFxuICAgICAgICBmbHVzaERlYm91bmNlZFByb21pc2VcbiAgICB9XG5cblxufVxuIiwiXG5pbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgdXNlQXN5bmMsIFVzZUFzeW5jUGFyYW1ldGVycywgVXNlQXN5bmNSZXR1cm5UeXBlIH0gZnJvbSBcIi4vdXNlLWFzeW5jXCI7XG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCIuL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XG5cblxuZXhwb3J0IGludGVyZmFjZSBBc3luY0hhbmRsZXI8Q2FwdHVyZVR5cGUsIEUgZXh0ZW5kcyBoLkpTWC5UYXJnZXRlZEV2ZW50PiB7XG4gICAgLyoqXG4gICAgICogVGhlIGB0aGlzYCBrZXl3b3JkIGFsd2F5cyBwb2ludHMgdG8gdGhlIERPTSBlbGVtZW50IHRoZSBldmVudCBoYW5kbGVyXG4gICAgICogd2FzIGludm9rZWQgb24uIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvRXZlbnRzL0V2ZW50X2hhbmRsZXJzI0V2ZW50X2hhbmRsZXJzX3BhcmFtZXRlcnNfdGhpc19iaW5kaW5nX2FuZF90aGVfcmV0dXJuX3ZhbHVlXG4gICAgICovXG4gICAgKHRoaXM6IG5ldmVyLCBjYXB0dXJlZFZhbHVlOiBDYXB0dXJlVHlwZSwgZXZlbnQ6IEUpOiB2b2lkO1xufVxuZXhwb3J0IHR5cGUgR2VuZXJpY0FzeW5jSGFuZGxlcjxDYXB0dXJlVHlwZSwgVGFyZ2V0IGV4dGVuZHMgRXZlbnRUYXJnZXQ+ID0gQXN5bmNIYW5kbGVyPENhcHR1cmVUeXBlLCBoLkpTWC5UYXJnZXRlZEV2ZW50PFRhcmdldD4+O1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQXN5bmNIYW5kbGVyUGFyYW1ldGVyczxFdmVudFR5cGUgZXh0ZW5kcyBFdmVudCwgQ2FwdHVyZVR5cGU+IGV4dGVuZHMgT21pdDxVc2VBc3luY1BhcmFtZXRlcnM8W0NhcHR1cmVUeXBlLCBFdmVudFR5cGVdLCBbRXZlbnRUeXBlXT4sIFwiY2FwdHVyZVwiPiB7XG4gICAgLyoqXG4gICAgICogV2hhdCB0cmFuc2llbnQgaW5mb3JtYXRpb24gaXMgY2FwdHVyZWQgYnkgdGhpcyBldmVudCBcbiAgICAgKiBhbmQgcHJlc2VudGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgZXZlbnQgaGFuZGxlcj9cbiAgICAgKiBcbiAgICAgKiBUaGUgXCJjYXB0dXJlXCIgcGFyYW1ldGVyIGFuc3dlcnMgdGhpcyBxdWVzdGlvbi4gVG8gaW1wbGVtZW50IGEgY2hlY2tib3gsIGZvciBleGFtcGxlLCByZXR1cm4gYHRhcmdldC5jaGVja2VkYC5cbiAgICAgKi9cbiAgICBjYXB0dXJlOiAoZXZlbnQ6IEV2ZW50VHlwZSkgPT4gQ2FwdHVyZVR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQXN5bmNIYW5kbGVyUmV0dXJuVHlwZTxFdmVudFR5cGUgZXh0ZW5kcyBFdmVudCwgQ2FwdHVyZVR5cGU+IGV4dGVuZHMgVXNlQXN5bmNSZXR1cm5UeXBlPFtFdmVudFR5cGVdLCB2b2lkPiB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbW9zdCByZWNlbnRseSBjYXB0dXJlZCB2YWx1ZS4gSW4gb3RoZXIgd29yZHMsIHJlcHJlc2VudHMgd2hhdFxuICAgICAqIHRoZSBjdXJyZW50IHZhbHVlIHdvdWxkIGJlIGlmIHRoaXMgb3BlcmF0aW9uIHdlcmUgc3luY2hyb25vdXMgYW5kIFxuICAgICAqIGFuZCBjb3VsZG4ndCBmYWlsLiBJdCdzIHVzZWZ1bCB0byBwcmV0ZW5kIHRoaXMgaXMgdGhlIGFjdHVhbCB2YWx1ZVxuICAgICAqIGZvciBhbiBpbnB1dCBmaWVsZCwgZm9yIGV4YW1wbGUsIHNvIHRoYXQgdGhlIHZhbHVlIGRvZXNuJ3QgXCJzbmFwXG4gICAgICogYmFja1wiIHdoaWxlIHlvdSdyZSB3YWl0aW5nIGZvciB0aGUgaGFuZGxlciB0byBmaW5pc2guXG4gICAgICogXG4gICAgICogU29tZXRoaW5nIGxpa2UgYHZhbHVlPXtwZW5kaW5nPyBjdXJyZW50Q2FwdHVyZSA6IHZhbHVlfWAgaXMgZ29vZCBmb3IgY2hlY2tib3hlcyxcbiAgICAgKiBzb21ldGhpbmcgbGlrZSBgdmFsdWU9eyhwZW5kaW5nIHx8IGhhc0ZvY3VzKT8gY3VycmVudENhcHR1cmUgOiB2YWx1ZX0gZm9yIHRleHQgZmllbGRzLlxuICAgICAqIFxuICAgICAqIEBzZWUgaGFzQ2FwdHVyZVxuICAgICAqL1xuICAgIGN1cnJlbnRDYXB0dXJlOiBDYXB0dXJlVHlwZSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKiBUaGUgYWJvdmUsIGJ1dCBzdGFibGUsIGlmIHlvdSBuZWVkIHRoZSBjdXJyZW50IGNhcHR1cmUgd2l0aG91dCBpdCBiZWluZyBhbiBleHBsaWNpdCBkZXBlbmRlbmN5LiAqL1xuICAgIGdldEN1cnJlbnRDYXB0dXJlKCk6IChDYXB0dXJlVHlwZSB8IHVuZGVmaW5lZCk7XG5cbiAgICAvKipcbiAgICAgKiBCZWNhdXNlIHlvdSdyZSBhbGxvd2VkIHRvIGhhdmUgYENhcHR1cmVUeXBlYCBleHRlbmQgYHVuZGVmaW5lZGAsXG4gICAgICogeW91IG1pZ2h0IG5lZWQgdGhpcy5cbiAgICAgKi9cbiAgICBoYXNDYXB0dXJlOiBib29sZWFuO1xuXG4gICAgLy8gU2FtZSBhcyBpbiB1c2VBc3luYywgYnV0IHdpdGggYSBkaWZmZXJlbnQgdHlwZVxuICAgIC8vcHJvbWlzZTogUHJvbWlzZTx2b2lkPiB8IG51bGw7XG5cbn1cblxuLyoqXG4gKiBHaXZlbiBhbiBhc3luY3Jvbm91cyBldmVudCBoYW5kbGVyLCByZXR1cm5zIGEgc3luY3Jvbm91cyBvbmUgdGhhdCB3b3JrcyBvbiB0aGUgRE9NLFxuICogYWxvbmcgd2l0aCBzb21lIG90aGVyIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBEb2VzIG5vdCBtb2RpZnkgYW55IHByb3BzLlxuICogXG4gKiBOb3RlIHRoYXQgYmVjYXVzZSB0aGUgaGFuZGxlciB5b3UgcHJvdmlkZSBtYXkgYmUgY2FsbGVkIHdpdGggYSBkZWxheSwgYW5kIFxuICogYmVjYXVzZSB0aGUgdmFsdWUgb2YsIGUuZy4sIGFuIGA8aW5wdXQ+YCBlbGVtZW50IHdpbGwgbGlrZWx5IGJlIHN0YWxlIGJ5IHRoZSBcbiAqIHRpbWUgdGhlIGRlbGF5IGlzIG92ZXIsIGEgYGNhcHR1cmVgIGZ1bmN0aW9uIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byBcbiAqIGNhcHR1cmUgdGhlIHJlbGV2YW50IGluZm9ybWF0aW9uIGZyb20gdGhlIERPTS4gQW55IG90aGVyIHNpbXBsZSBldmVudCBkYXRhLCBcbiAqIGxpa2UgYG1vdXNlWGAgb3IgYHNoaWZ0S2V5YCBjYW4gc3RheSBvbiB0aGUgZXZlbnQgaXRzZWxmIGFuZCBkb24ndCBcbiAqIG5lZWQgdG8gYmUgY2FwdHVyZWQgJm5kYXNoOyBpdCdzIG5ldmVyIHN0YWxlLlxuICogXG4gKiBgYGB0c3hcbiAqIGNvbnN0IGFzeW5jT25JbnB1dCA9IGFzeW5jICh2YWx1ZTogbnVtYmVyLCBlOiBFdmVudCkgPT4geyBcbiAqICAgICBbLi4uXSAvLyBFeC4gc2VuZCB0byBhIHNlcnZlciBhbmQgc2V0U3RhdGUgd2hlbiBkb25lXG4gKiB9O1xuICogY29uc3Qge1xuICogICAgIC8vIEEgc3luYyB2ZXJzaW9uIG9mIGFzeW5jT25JbnB1dFxuICogICAgIHN5bmNIYW5kbGVyLFxuICogICAgIC8vIFRydWUgd2hpbGUgdGhlIGhhbmRsZXIgaXMgcnVubmluZ1xuICogICAgIHBlbmRpbmcsXG4gKiAgICAgLy8gVGhlIGVycm9yIHRocm93biwgaWYgYW55XG4gKiAgICAgZXJyb3IsXG4gKiAgICAgLy8gU2hvdyB0aGlzIHZhbHVlIHdoaWxlIHRoZSBvcGVyYXRpb24ncyBwZW5kaW5nXG4gKiAgICAgY3VycmVudENhcHR1cmUsXG4gKiAgICAgLy8gQW5kIG90aGVycywgc2VlIGBVc2VBc3luY0hhbmRsZXJSZXR1cm5UeXBlYFxuICogICAgIC4uLnJlc3RcbiAqIH0gPSB1c2VBc3luY0hhbmRsZXI8SFRNTElucHV0RWxlbWVudD4oKShhc3luY09uSW5wdXQsIHsgXG4gKiAgICAgLy8gUGFzcyBpbiB0aGUgY2FwdHVyZSBmdW5jdGlvbiB0aGF0IHNhdmVzIGV2ZW50IGRhdGFcbiAqICAgICAvLyBmcm9tIGJlaW5nIHN0YWxlLlxuICogICAgIGNhcHR1cmU6IGUgPT4geyBcbiAqICAgICAgICAgLy8gYGNhcHR1cmVgIGNhbiBoYXZlIHNpZGUtZWZmZWN0cyBiZWNhdXNlXG4gKiAgICAgICAgIC8vIGl0J3MgY2FsbGVkIGV4YWN0bHkgb25jZSBwZXIgaW52b2NhdGlvblxuICogICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IFxuICogXG4gKiAgICAgICAgIC8vIFNhdmUgdGhpcyB2YWx1ZSBzbyB0aGF0IGl0J3MgbmV2ZXIgc3RhbGVcbiAqICAgICAgICAgcmV0dXJuIGUuY3VycmVudFRhcmdldC52YWx1ZUFzTnVtYmVyO1xuICogICAgIH1cbiAqIH0pO1xuICogXG4gKiBjb25zdCBvbklucHV0ID0gcGVuZGluZz8gbnVsbCA6IHN5bmNIYW5kbGVyO1xuICogYGBgXG4gKiBcbiAqIFRoZSBoYW5kbGVyIGlzIGF1dG9tYXRpY2FsbHkgdGhyb3R0bGVkIHRvIG9ubHkgcnVuIG9uZSBhdCBhIHRpbWUuIFxuICogSWYgdGhlIGhhbmRsZXIgaXMgY2FsbGVkLCBhbmQgdGhlbiBiZWZvcmUgaXQgZmluaXNoZXMsIGlzIGNhbGxlZCBhZ2FpbixcbiAqIGl0IHdpbGwgYmUgcHV0IG9uIGhvbGQgdW50aWwgdGhlIGN1cnJlbnQgb25lIGZpbmlzaGVzLCBhdCB3aGljaCBwb2ludFxuICogdGhlIHNlY29uZCBvbmUgd2lsbCBydW4uICBJZiB0aGUgaGFuZGxlciBpcyBjYWxsZWQgYSB0aGlyZCB0aW1lIGJlZm9yZVxuICogdGhlIGZpcnN0IGhhcyBmaW5pc2hlZCwgaXQgd2lsbCAqcmVwbGFjZSogdGhlIHNlY29uZCwgc28gb25seSB0aGUgbW9zdFxuICogcmVjZW50bHkgY2FsbGVkIGl0ZXJhdGlvbiBvZiB0aGUgaGFuZGxlciB3aWxsIHJ1bi5cbiAqIFxuICogXG4gKiBZb3UgbWF5IG9wdGlvbmFsbHkgKmFsc28qIHNwZWNpZnkgZGVib3VuY2UgYW5kIHRocm90dGxlIHBhcmFtZXRlcnMgdGhhdCB3YWl0IHVudGlsIHRoZVxuICogc3luY3Jvbm91cyBoYW5kbGVyIGhhcyBub3QgYmVlbiBjYWxsZWQgZm9yIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mXG4gKiBtaWxsaXNlY29uZHMsIGF0IHdoaWNoIHBvaW50IHdlICphY3R1YWxseSogcnVuIHRoZSBhc3luY3Jvbm91cyBoYW5kbGVyXG4gKiBhY2NvcmRpbmcgdG8gdGhlIGxvZ2ljIGluIHRoZSBwcmV2aW91cyBwYXJhZ3JhcGguIFRoaXMgaXMgaW5cbiAqICphZGRpdGlvbiogdG8gdGhyb3R0bGluZyB0aGUgaGFuZGxlciwgYW5kIGRvZXMgbm90IHJlcGxhY2UgdGhhdCBiZWhhdmlvci5cbiAqIFxuICogQHNlZSB1c2VBc3luYyBBIG1vcmUgZ2VuZXJhbCB2ZXJzaW9uIG9mIHRoaXMgaG9vayB0aGF0IGNhbiB3b3JrIHdpdGggYW55IHR5cGUgb2YgaGFuZGxlciwgbm90IGp1c3QgRE9NIGV2ZW50IGhhbmRsZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmNIYW5kbGVyPEV2ZW50VHlwZSBleHRlbmRzIEV2ZW50LCBDYXB0dXJlVHlwZT4oYXN5bmNIYW5kbGVyOiAoKGM6IENhcHR1cmVUeXBlLCBlOiBFdmVudFR5cGUpID0+IChQcm9taXNlPHZvaWQ+IHwgdm9pZCkpIHwgbnVsbCwgeyBjYXB0dXJlOiBvcmlnaW5hbENhcHR1cmUsIC4uLnJlc3RBc3luY09wdGlvbnMgfTogVXNlQXN5bmNIYW5kbGVyUGFyYW1ldGVyczxFdmVudFR5cGUsIENhcHR1cmVUeXBlPik6IFVzZUFzeW5jSGFuZGxlclJldHVyblR5cGU8RXZlbnRUeXBlLCBDYXB0dXJlVHlwZT4ge1xuICAgIFxuICAgIC8vIFdlIG5lZWQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIFwibm90aGluZyBjYXB0dXJlZCB5ZXRcIiBhbmQgXCJgdW5kZWZpbmVkYCB3YXMgY2FwdHVyZWRcIlxuICAgIGNvbnN0IFtjdXJyZW50Q2FwdHVyZSwgc2V0Q3VycmVudENhcHR1cmUsIGdldEN1cnJlbnRDYXB0dXJlXSA9IHVzZVN0YXRlPENhcHR1cmVUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuICAgIGNvbnN0IFtoYXNDYXB0dXJlLCBzZXRIYXNDYXB0dXJlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBcbiAgICAvLyBXcmFwIGFyb3VuZCB0aGUgbm9ybWFsIGB1c2VBc3luY2AgYGNhcHR1cmVgIGZ1bmN0aW9uIHRvIGFsc29cbiAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBsYXN0IHZhbHVlIHRoZSB1c2VyIGFjdHVhbGx5IGlucHV0LlxuICAgIC8vIFxuICAgIC8vIFdpdGhvdXQgdGhpcyB0aGVyZSdzIG5vIHdheSB0byByZS1yZW5kZXIgdGhlIGNvbnRyb2wgd2l0aFxuICAgIC8vIGl0IGJlaW5nIGJvdGggY29udHJvbGxlZCBhbmQgYWxzbyBoYXZpbmcgdGhlIFwiY29ycmVjdFwiIHZhbHVlLFxuICAgIC8vIGFuZCBhdCBhbnkgcmF0ZSBhbHNvIHByb3RlY3RzIGFnYWluc3Qgc3VkZGVuIGV4Y2VwdGlvbnMgcmV2ZXJ0aW5nXG4gICAgLy8geW91ciBjaGFuZ2Ugb3V0IGZyb20gdW5kZXIgeW91LlxuICAgIGNvbnN0IGNhcHR1cmUgPSB1c2VTdGFibGVDYWxsYmFjaygoZTogRXZlbnRUeXBlKTogW0NhcHR1cmVUeXBlLCBFdmVudFR5cGVdID0+IHsgXG4gICAgICAgIGNvbnN0IGNhcHR1cmVkID0gb3JpZ2luYWxDYXB0dXJlKGUpOyBcbiAgICAgICAgc2V0Q3VycmVudENhcHR1cmUoY2FwdHVyZWQpO1xuICAgICAgICBzZXRIYXNDYXB0dXJlKHRydWUpO1xuICAgICAgICByZXR1cm4gW2NhcHR1cmVkLCBlXTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldEN1cnJlbnRDYXB0dXJlLFxuICAgICAgICBjdXJyZW50Q2FwdHVyZSxcbiAgICAgICAgaGFzQ2FwdHVyZSxcbiAgICAgICAgLi4udXNlQXN5bmMoYXN5bmNIYW5kbGVyLCB7IGNhcHR1cmUsIC4uLnJlc3RBc3luY09wdGlvbnMgfSlcbiAgICB9O1xufVxuXG5cblxuXG5cblxuXG4iLCJpbXBvcnQgeyBJbnB1dHMsIHVzZUVmZmVjdCBhcyB1c2VFZmZlY3ROYXRpdmUsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuXHJcbi8qKlxyXG4gKiBXcmFwIHRoZSBuYXRpdmUgYHVzZUVmZmVjdGAgdG8gYWRkIGFyZ3VtZW50cyBcclxuICogdGhhdCBhbGxvdyBhY2Nlc3NpbmcgdGhlIHByZXZpb3VzIHZhbHVlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcclxuICogYXMgd2VsbCBhcyB0aGUgY2hhbmdlcyB0aGF0IGNhdXNlZCB0aGUgaG9vayB0byBiZSBjYWxsZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cclxuICogXHJcbiAqIEBwYXJhbSBlZmZlY3QgXHJcbiAqIEBwYXJhbSBpbnB1dHMgXHJcbiAqIEBwYXJhbSBpbXBsIFlvdSBjYW4gY2hvb3NlIHdoZXRoZXIgdG8gdXNlIGB1c2VFZmZlY3RgIG9yIGB1c2VMYXlvdXRFZmZlY3RgIGJ5XHJcbiAqIHBhc3Npbmcgb25lIG9mIHRoZW0gYXMgdGhpcyBhcmd1bWVudC4gQnkgZGVmYXVsdCwgaXQncyBgdXNlRWZmZWN0YC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VFZmZlY3Q8SSBleHRlbmRzIElucHV0cz4oZWZmZWN0OiAocHJldjogSSB8IHVuZGVmaW5lZCwgY2hhbmdlczogRWZmZWN0Q2hhbmdlPEksIG51bWJlcj5bXSkgPT4gKHZvaWQgfCAoKCkgPT4gdm9pZCkpLCBpbnB1dHM/OiBJLCBpbXBsID0gdXNlRWZmZWN0TmF0aXZlKSB7XHJcblxyXG4gICAgY29uc3QgcHJldklucHV0cyA9IHVzZVJlZjx1bmRlZmluZWQgfCBJPih1bmRlZmluZWQpO1xyXG4gICAgY29uc3QgZWZmZWN0MiA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBjaGFuZ2VzOiB7IGZyb206IGFueSwgdG86IGFueSB9W10gPSBbXTtcclxuICAgICAgICBpZiAoaW5wdXRzICYmIHByZXZJbnB1dHMuY3VycmVudCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWF4KHByZXZJbnB1dHMuY3VycmVudC5sZW5ndGgsIGlucHV0cy5sZW5ndGgpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2SW5wdXRzLmN1cnJlbnRbaV0gIT0gaW5wdXRzW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXNbaV0gPSB7IGZyb206IHByZXZJbnB1dHMuY3VycmVudFtpXSwgdG86IGlucHV0c1tpXSB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmV0ID0gZWZmZWN0KHByZXZJbnB1dHMuY3VycmVudCwgY2hhbmdlcyk7XHJcbiAgICAgICAgcHJldklucHV0cy5jdXJyZW50ID0gaW5wdXRzO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGltcGwoZWZmZWN0MiwgaW5wdXRzKTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFZmZlY3RDaGFuZ2U8SSBleHRlbmRzIElucHV0cywgTiBleHRlbmRzIG51bWJlcj4geyBmcm9tOiBJW05dLCB0bzogSVtOXSB9XHJcbiIsImltcG9ydCB7IElucHV0cywgdXNlTGF5b3V0RWZmZWN0IGFzIHVzZUxheW91dEVmZmVjdE5hdGl2ZSB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IEVmZmVjdENoYW5nZSwgdXNlRWZmZWN0IH0gZnJvbSBcIi4vdXNlLWVmZmVjdFwiO1xuXG4vKipcbiAqIFdyYXAgdGhlIG5hdGl2ZSBgdXNlTGF5b3V0RWZmZWN0YCB0byBhZGQgYXJndW1lbnRzIFxuICogdGhhdCBhbGxvdyBhY2Nlc3NpbmcgdGhlIHByZXZpb3VzIHZhbHVlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFzIHdlbGwgYXMgdGhlIGNoYW5nZXMgdGhhdCBjYXVzZWQgdGhlIGhvb2sgdG8gYmUgY2FsbGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gKiBcbiAqIEBwYXJhbSBlZmZlY3QgXG4gKiBAcGFyYW0gaW5wdXRzIFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTGF5b3V0RWZmZWN0PEkgZXh0ZW5kcyBJbnB1dHM+KGVmZmVjdDogKHByZXY6IEkgfCB1bmRlZmluZWQsIGNoYW5nZXM6IEVmZmVjdENoYW5nZTxJLCBudW1iZXI+W10pID0+ICh2b2lkIHwgKCgpID0+IHZvaWQpKSwgaW5wdXRzPzogSSkge1xuICAgIHJldHVybiB1c2VFZmZlY3QoZWZmZWN0LCBpbnB1dHMsIHVzZUxheW91dEVmZmVjdE5hdGl2ZSk7XG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCIuL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGltZW91dCB7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBtcyB0byB3YWl0IGJlZm9yZSBpbnZva2luZyBgY2FsbGJhY2tgLiAgXG4gICAgICogSWYgYG51bGxgLCBjYW5jZWxzIHRoZSB0aW1lb3V0IGltbWVkaWF0ZWx5LlxuICAgICAqL1xuICAgIHRpbWVvdXQ6IG51bWJlciB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRvIHRoaXMgcHJvcCBiZXR3ZWVuIHJlbmRlcnMgY2FuIGJlIHVzZWQgdG8gY2xlYXIgdGhlIGN1cnJlbnQgdGltZW91dCBhbmQgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgKi9cbiAgICB0cmlnZ2VySW5kZXg/OiB1bmtub3duO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGB0aW1lb3V0YCBtcyBhZnRlciBtb3VudCwgb3IgdGhlIGxhc3QgY2hhbmdlIHRvIGB0cmlnZ2VySW5kZXhgLlxuICAgICAqIFxuICAgICAqIERvZXMgKm5vdCogbmVlZCB0byBiZSBzdGFibGUuIEdvIGFoZWFkIGFuZCBwYXNzIGFuIGFub255bW91cyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBjYWxsYmFjazogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRpbWVvdXQoeyB0aW1lb3V0LCBjYWxsYmFjaywgdHJpZ2dlckluZGV4IH06IFVzZVRpbWVvdXQpIHtcbiAgICBjb25zdCBzdGFibGVDYWxsYmFjayA9IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+IHsgc3RhcnRUaW1lUmVmLmN1cnJlbnQgPSBudWxsOyBjYWxsYmFjaygpOyB9KTtcbiAgICBjb25zdCBnZXRUaW1lb3V0ID0gdXNlU3RhYmxlR2V0dGVyKHRpbWVvdXQpO1xuXG4gICAgLy8gU2V0IGFueSB0aW1lIHdlIHN0YXJ0IHRpbWVvdXQuXG4gICAgLy8gVW5zZXQgYW55IHRpbWUgdGhlIHRpbWVvdXQgY29tcGxldGVzXG4gICAgY29uc3Qgc3RhcnRUaW1lUmVmID0gdXNlUmVmPG51bWJlciB8IG51bGw+KG51bGwpO1xuXG4gICAgY29uc3QgdGltZW91dElzTnVsbCA9ICh0aW1lb3V0ID09IG51bGwpO1xuXG4gICAgLy8gQW55IHRpbWUgdGhlIHRyaWdnZXJJbmRleCBjaGFuZ2VzIChpbmNsdWRpbmcgb24gbW91bnQpXG4gICAgLy8gcmVzdGFydCB0aGUgdGltZW91dC4gIFRoZSB0aW1lb3V0IGRvZXMgTk9UIHJlc2V0XG4gICAgLy8gd2hlbiB0aGUgZHVyYXRpb24gb3IgY2FsbGJhY2sgY2hhbmdlcywgb25seSB0cmlnZ2VySW5kZXguXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCF0aW1lb3V0SXNOdWxsKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gZ2V0VGltZW91dCgpO1xuICAgICAgICAgICAgY29uc29sZS5hc3NlcnQodGltZW91dElzTnVsbCA9PSAodGltZW91dCA9PSBudWxsKSk7XG4gICAgXG4gICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lUmVmLmN1cnJlbnQgPSArKG5ldyBEYXRlKCkpO1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHNldFRpbWVvdXQoc3RhYmxlQ2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9LCBbdHJpZ2dlckluZGV4LCB0aW1lb3V0SXNOdWxsXSlcblxuICAgIGNvbnN0IGdldEVsYXBzZWRUaW1lID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICByZXR1cm4gKCsobmV3IERhdGUoKSkpIC0gKCsoc3RhcnRUaW1lUmVmLmN1cnJlbnQgPz8gbmV3IERhdGUoKSkpO1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGdldFJlbWFpbmluZ1RpbWUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBnZXRUaW1lb3V0KCk7XG4gICAgICAgIHJldHVybiB0aW1lb3V0ID09IG51bGwgPyBudWxsIDogTWF0aC5tYXgoMCwgdGltZW91dCAtIGdldEVsYXBzZWRUaW1lKCkpXG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIHsgZ2V0RWxhcHNlZFRpbWUsIGdldFJlbWFpbmluZ1RpbWUgfTtcbn1cbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyBNYW5hZ2VkQ2hpbGRJbmZvIH0gZnJvbSBcIi4vdXNlLWNoaWxkLW1hbmFnZXJcIjtcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCB9IGZyb20gXCIuL3VzZS1sYXlvdXQtZWZmZWN0XCI7XG5pbXBvcnQgeyB1c2VMb2dpY2FsRGlyZWN0aW9uIH0gZnJvbSBcIi4vdXNlLWxvZ2ljYWwtZGlyZWN0aW9uXCI7XG5pbXBvcnQgeyBNZXJnZWRQcm9wcywgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XG5pbXBvcnQgeyBVc2VSZWZFbGVtZW50UHJvcHNSZXR1cm5UeXBlIH0gZnJvbSBcIi4vdXNlLXJlZi1lbGVtZW50XCI7XG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCIuL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XG5pbXBvcnQgeyB1c2VUaW1lb3V0IH0gZnJvbSBcIi4vdXNlLXRpbWVvdXRcIjtcblxuXG5cblxuXG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpbmVhck5hdmlnYXRpb25SZXR1cm5UeXBlPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IHtcbiAgICAvLyBUaGVzZSBwcm9wcyBjYW4gYmUgYXR0YXRjaGVkIGVpdGhlciB0byB0aGUgcGFyZW50IG9yIHRvIGVhY2ggaW5kaXZpZHVhbCBjaGlsZC5cbiAgICAvLyBXaGljaGV2ZXIgd29ya3MgYmV0dGVyIGZvciB5b3VyIHNjZW5hcmlvLlxuICAgIHVzZUxpbmVhck5hdmlnYXRpb25Qcm9wczogVXNlTGluZWFyTmF2aWdhdGlvblByb3BzPENoaWxkRWxlbWVudD47XG59XG5cbmV4cG9ydCB0eXBlIFVzZUxpbmVhck5hdmlnYXRpb25Qcm9wczxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IDxQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2hpbGRFbGVtZW50Pj4ocHJvcHM6IFApID0+IFVzZVJlZkVsZW1lbnRQcm9wc1JldHVyblR5cGU8Q2hpbGRFbGVtZW50LCBoLkpTWC5IVE1MQXR0cmlidXRlczxDaGlsZEVsZW1lbnQ+PlxuXG5cblxuLyoqIEFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIHBhcmVudCBgdXNlTGluZWFyTmF2aWdhdGlvbmAgKi9cbmludGVyZmFjZSBVc2VMaW5lYXJOYXZpZ2F0aW9uUGFyYW1ldGVyc0Jhc2Uge1xuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHdoaWNoIGFycm93IGtleXMgYXJlIHVzZWQgdG8gbmF2aWdhdGUgdGhyb3VnaCB0aGUgY29tcG9uZW50LlxuICAgICAqIFJlbGF0aXZlIHRvIHRoZSB3cml0aW5nIG1vZGUsIHNvIGluIEVuZ2xpc2gsIFwiaW5saW5lXCIgY29ycmVzcG9uZHNcbiAgICAgKiB0byB0aGUgbGVmdCAmIHJpZ2h0IGFycm93IGtleXMsIGFuZCBcImJsb2NrXCIgdG8gdGhlIHVwICYgZG93biBhcnJvdyBrZXlzLlxuICAgICAqIFxuICAgICAqIFVzZSBcImVpdGhlclwiIHRvIGFsbG93IG5hdmlnYXRpb24gaW4gZWl0aGVyIGRpcmVjdGlvbi5cbiAgICAgKiBcbiAgICAgKiBVc2UgXCJub25lXCIgdG8gZGlzYWxsb3cgbmF2aWdhdGlvbiB3aXRoIHRoZSBhcnJvdyBrZXlzIGluIGFueSBkaXJlY3Rpb24uXG4gICAgICovXG4gICAgbmF2aWdhdGlvbkRpcmVjdGlvbj86IFwiaW5saW5lXCIgfCBcImJsb2NrXCIgfCBcImVpdGhlclwiIHwgXCJub25lXCI7XG5cbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgbmF2aWdhdGlvbiB3aXRoIHRoZSBhcnJvdyBrZXlzIHdpbGwgYmUgXG4gICAgICogZGlzYWJsZWQsIGJ1dCBuYXZpZ2F0aW9uIHdpdGggdGhlIGhvbWUgJiBlbmQga2V5cyB3aWxsXG4gICAgICogYmUgdW5hZmZlY3RlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlQXJyb3dLZXlzPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIElmIHNldCB0byB0cnVlLCBuYXZpZ2F0aW9uIHdpdGggdGhlIGhvbWUgJiBlbmQga2V5cyB3aWxsXG4gICAgICogYmUgZGlzYWJsZWQsIGJ1dCBuYXZpZ2F0aW9uIHdpdGggdGhlIGFycm93IGtleXMgd2lsbCBiZVxuICAgICAqIHVuYWZmZWN0ZWQuXG4gICAgICovXG4gICAgZGlzYWJsZUhvbWVFbmRLZXlzPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYW5hZ2VkQ2hpbGRyZW4geW91IGhhdmUgZnJvbSB1c2VSb3ZpbmdUYWJJbmRleCBcbiAgICAgKiAocHJlc3VtYWJseSwgYnV0IGl0IGNvdWxkIGFsc28ganVzdCBiZSBmcm9tIHVzZUNoaWxkTWFuYWdlcilcbiAgICAgKi9cbiAgICBtYW5hZ2VkQ2hpbGRyZW46IFVzZUxpbmVhck5hdmlnYXRpb25DaGlsZEluZm9bXTtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpbmVhck5hdmlnYXRpb25QYXJhbWV0ZXJzIGV4dGVuZHMgVXNlTGluZWFyTmF2aWdhdGlvblBhcmFtZXRlcnNCYXNlIHtcbiAgICBuYXZpZ2F0ZVRvTmV4dCgpOiB2b2lkO1xuICAgIG5hdmlnYXRlVG9QcmV2KCk6IHZvaWQ7XG4gICAgbmF2aWdhdGVUb0ZpcnN0KCk6IHZvaWQ7XG4gICAgbmF2aWdhdGVUb0xhc3QoKTogdm9pZDtcbiAgICBpbmRleDogbnVtYmVyO1xufVxuXG5cbi8qKiBBcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBjaGlsZCAndXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkYCAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VMaW5lYXJOYXZpZ2F0aW9uQ2hpbGRJbmZvIGV4dGVuZHMgTWFuYWdlZENoaWxkSW5mbzxudW1iZXI+IHsgfVxuXG4vKiogUmV0dXJuIHR5cGUgb2YgdGhlIGNoaWxkIGB1c2VMaW5lYXJOYXZpZ2F0aW9uQ2hpbGRQcm9wc2AgKi9cbmV4cG9ydCB0eXBlIFVzZUxpbmVhck5hdmlnYXRpb25DaGlsZFByb3BzUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBQIGV4dGVuZHMge30+ID0gTWVyZ2VkUHJvcHM8Q2hpbGRFbGVtZW50LCBVc2VSZWZFbGVtZW50UHJvcHNSZXR1cm5UeXBlPENoaWxkRWxlbWVudCwgeyB0YWJJbmRleDogbnVtYmVyOyB9PiwgT21pdDxQLCBcInRhYkluZGV4XCI+PjtcblxuXG4vKipcbiAqIFdoZW4gdXNlZCBpbiB0YW5kZW0gd2l0aCBgdXNlUm92aW5nVGFiSW5kZXhgLCBhbGxvd3MgY29udHJvbCBvZlxuICogdGhlIHRhYmJhYmxlIGluZGV4IHdpdGggdGhlIGFycm93IGtleXMuXG4gKiBcbiAqIEBzZWUgdXNlTGlzdE5hdmlnYXRpb24sIHdoaWNoIHBhY2thZ2VzIGV2ZXJ5dGhpbmcgdXAgdG9nZXRoZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMaW5lYXJOYXZpZ2F0aW9uPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgaW5kZXgsIG5hdmlnYXRlVG9GaXJzdCwgbmF2aWdhdGVUb0xhc3QsIG5hdmlnYXRlVG9OZXh0LCBuYXZpZ2F0ZVRvUHJldiwgbWFuYWdlZENoaWxkcmVuLCBuYXZpZ2F0aW9uRGlyZWN0aW9uLCBkaXNhYmxlQXJyb3dLZXlzLCBkaXNhYmxlSG9tZUVuZEtleXMgfTogVXNlTGluZWFyTmF2aWdhdGlvblBhcmFtZXRlcnMpOiBVc2VMaW5lYXJOYXZpZ2F0aW9uUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQ+IHtcblxuICAgIG5hdmlnYXRpb25EaXJlY3Rpb24gPz89IFwiZWl0aGVyXCI7XG5cbiAgICBjb25zdCBjaGlsZENvdW50ID0gbWFuYWdlZENoaWxkcmVuLmxlbmd0aDtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGUgdGFiYmFibGUgaW5kZXggbmV2ZXIgZXNjYXBlcyB0aGUgYm91bmRzIG9mIGFsbCBhdmFpbGFibGUgY2hpbGRyZW5cbiAgICAvLyBUT0RPOiBLZWVwIHRyYWNrIG9mIHRoZSBvcmlnaW5hbCBpbmRleCBhbmQga2VlcCBpdCwgYXQgbGVhc3QgdW50aWwga2V5Ym9hcmQgbmF2aWdhdGlvbi5cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvRmlyc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkQ291bnQgPiAwICYmIGluZGV4ID49IGNoaWxkQ291bnQpIHtcbiAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvTGFzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2luZGV4LCBjaGlsZENvdW50LCBuYXZpZ2F0ZVRvRmlyc3QsIG5hdmlnYXRlVG9MYXN0XSk7XG5cbiAgICBjb25zdCB7IGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvLCB1c2VMb2dpY2FsRGlyZWN0aW9uUHJvcHMgfSA9IHVzZUxvZ2ljYWxEaXJlY3Rpb248Q2hpbGRFbGVtZW50Pih7fSk7XG5cbiAgICBjb25zdCBvbktleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAvLyBOb3QgaGFuZGxlZCBieSB0eXBlYWhlYWQgKGkuZS4gYXNzdW1lIHRoaXMgaXMgYSBrZXlib2FyZCBzaG9ydGN1dClcbiAgICAgICAgaWYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3QgaW5mbyA9IGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvKCk7XG5cbiAgICAgICAgY29uc3QgYWxsb3dzQmxvY2tOYXZpZ2F0aW9uID0gKG5hdmlnYXRpb25EaXJlY3Rpb24gPT0gXCJibG9ja1wiIHx8IG5hdmlnYXRpb25EaXJlY3Rpb24gPT0gXCJlaXRoZXJcIik7XG4gICAgICAgIGNvbnN0IGFsbG93c0lubGluZU5hdmlnYXRpb24gPSAobmF2aWdhdGlvbkRpcmVjdGlvbiA9PSBcImlubGluZVwiIHx8IG5hdmlnYXRpb25EaXJlY3Rpb24gPT0gXCJlaXRoZXJcIik7XG5cbiAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgY2FzZSBcIkFycm93VXBcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gKGluZm8/LmJsb2NrT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiA/IFwiYmxvY2tEaXJlY3Rpb25cIiA6IFwiaW5saW5lRGlyZWN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbkFsbG93ZWQgPSAoIWRpc2FibGVBcnJvd0tleXMgJiYgKGluZm8/LmJsb2NrT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiA/IGFsbG93c0Jsb2NrTmF2aWdhdGlvbiA6IGFsbG93c0lubGluZU5hdmlnYXRpb24pKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5mbz8uW3Byb3BOYW1lXSA9PT0gXCJidHRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb05leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9QcmV2KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gKGluZm8/LmJsb2NrT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiA/IFwiYmxvY2tEaXJlY3Rpb25cIiA6IFwiaW5saW5lRGlyZWN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbkFsbG93ZWQgPSAoIWRpc2FibGVBcnJvd0tleXMgJiYgKGluZm8/LmJsb2NrT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiA/IGFsbG93c0Jsb2NrTmF2aWdhdGlvbiA6IGFsbG93c0lubGluZU5hdmlnYXRpb24pKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5mbz8uW3Byb3BOYW1lXSA9PT0gXCJidHRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb1ByZXYoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9OZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSBcIkFycm93TGVmdFwiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcE5hbWUgPSAoaW5mbz8uaW5saW5lT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gXCJpbmxpbmVEaXJlY3Rpb25cIiA6IFwiYmxvY2tEaXJlY3Rpb25cIik7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uQWxsb3dlZCA9ICghZGlzYWJsZUFycm93S2V5cyAmJiAoaW5mbz8uaW5saW5lT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gYWxsb3dzSW5saW5lTmF2aWdhdGlvbiA6IGFsbG93c0Jsb2NrTmF2aWdhdGlvbikpO1xuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb25BbGxvd2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvPy5bcHJvcE5hbWVdID09PSBcInJ0bFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvTmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb1ByZXYoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gKGluZm8/LmlubGluZU9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIiA/IFwiaW5saW5lRGlyZWN0aW9uXCIgOiBcImJsb2NrRGlyZWN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbkFsbG93ZWQgPSAoIWRpc2FibGVBcnJvd0tleXMgJiYgKGluZm8/LmlubGluZU9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIiA/IGFsbG93c0lubGluZU5hdmlnYXRpb24gOiBhbGxvd3NCbG9ja05hdmlnYXRpb24pKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5mbz8uW3Byb3BOYW1lXSA9PT0gXCJydGxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb1ByZXYoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9OZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJIb21lXCI6XG4gICAgICAgICAgICAgICAgaWYgKCFkaXNhYmxlSG9tZUVuZEtleXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb0ZpcnN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJFbmRcIjpcbiAgICAgICAgICAgICAgICBpZiAoIWRpc2FibGVIb21lRW5kS2V5cykge1xuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvTGFzdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNlTGluZWFyTmF2aWdhdGlvblByb3BzOiB1c2VDYWxsYmFjayg8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4+KHByb3BzOiBQKSA9PiB7IHJldHVybiB1c2VMb2dpY2FsRGlyZWN0aW9uUHJvcHModXNlTWVyZ2VkUHJvcHM8Q2hpbGRFbGVtZW50PigpKHsgb25LZXlEb3duIH0sIHByb3BzKSkgfSwgW10pLFxuICAgIH1cblxuXG59XG5cblxuXG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25SZXR1cm5UeXBlPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEkgZXh0ZW5kcyBVc2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGRJbmZvPiB7XG4gICAgLy8gQ2FuIGJlIHVzZWQgb24gZWl0aGVyIHRoZSBwYXJlbnQgb3IgZWFjaCBjaGlsZCBlbGVtZW50LlxuICAgIHVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wczogVXNlVHlwZWFoZWFkTmF2aWdhdGlvblByb3BzPENoaWxkRWxlbWVudD47XG5cbiAgICAvLyBNdXN0IGJlIHVzZWQgb24gZWFjaCBjaGlsZCBlbGVtZW50LlxuICAgIHVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZDogVXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkPENoaWxkRWxlbWVudCwgST47XG5cblxuICAgIGN1cnJlbnRUeXBlYWhlYWQ6IHN0cmluZyB8IG51bGw7XG4gICAgaW52YWxpZFR5cGVhaGVhZDogYm9vbGVhbiB8IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wczxFIGV4dGVuZHMgRWxlbWVudD4gPSA8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+Pihwcm9wczogUCkgPT4gTWVyZ2VkUHJvcHM8RSwgUCwgUD5cbmV4cG9ydCB0eXBlIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGU8X0UgZXh0ZW5kcyBFbGVtZW50PiA9IHZvaWQ7XG5cblxuZXhwb3J0IGludGVyZmFjZSBVc2VUeXBlYWhlYWROYXZpZ2F0aW9uUGFyYW1ldGVycyB7XG5cbiAgICAvKipcbiAgICAgKiBBIGNvbGxhdG9yIHRvIHVzZSB3aGVuIGNvbXBhcmluZy4gSWYgbm90IHByb3ZpZGVkLCBzaW1wbHkgdXNlcyBgbG9jYWxlQ29tcGFyZWAgYWZ0ZXIgdHJhbnNmb3JtaW5nIGVhY2ggdG8gbG93ZXJjYXNlLCB3aGljaCB3aWxsLCBhdCBiZXN0LCB3b3JrIG9rYXkgaW4gRW5nbGlzaC5cbiAgICAgKi9cbiAgICBjb2xsYXRvcj86IEludGwuQ29sbGF0b3I7XG5cbiAgICB0eXBlYWhlYWRUaW1lb3V0PzogbnVtYmVyO1xuICAgIGdldEluZGV4KCk6IG51bWJlciB8IG51bGw7XG4gICAgc2V0SW5kZXgodmFsdWU6IG51bWJlciB8IG51bGwgfCAoKHByZXZpb3VzVmFsdWU6IG51bWJlciB8IG51bGwpID0+IChudW1iZXIgfCBudWxsKSkpOiB2b2lkO1xufVxuXG4vKiogQXJndW1lbnRzIHBhc3NlZCB0byB0aGUgY2hpbGQgJ3VzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZGAgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkSW5mbyBleHRlbmRzIE1hbmFnZWRDaGlsZEluZm88bnVtYmVyPiB7XG4gICAgLyoqXG4gICAgICogSWYgcHJvdmlkZWQsIGFsbG93cyB0aGlzIGNvbXBvbmVudCB0byBiZSBuYXZpZ2F0ZWQgdG8gYnkgdHlwaW5nIHRoaXMgc3RyaW5nLiBcbiAgICAgKiBJdCBzaG91bGQgYmUgdGhlIHNhbWUgdGV4dCBjb250ZW50IGFzIHdoYXRldmVyJ3MgZGlzcGxheWVkLCBpZGVhbGx5LlxuICAgICAqL1xuICAgIHRleHQ6IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVycyBleHRlbmRzIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZEluZm8geyB9XG5cbi8qKiBUeXBlIG9mIHRoZSBjaGlsZCdzIHN1Yi1ob29rICovXG5leHBvcnQgdHlwZSBVc2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGQ8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgSSBleHRlbmRzIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZEluZm8+ID0gKHsgdGV4dCwgaW5kZXgsIC4uLmkgfTogSSkgPT4gVXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQ+O1xuXG4vKiogUmV0dXJuIHR5cGUgb2YgdGhlIGNoaWxkIGB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGRQcm9wc2AgKi9cbmV4cG9ydCB0eXBlIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wc1JldHVyblR5cGU8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgUCBleHRlbmRzIHt9PiA9IE1lcmdlZFByb3BzPENoaWxkRWxlbWVudCwgVXNlUmVmRWxlbWVudFByb3BzUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQsIHtcbiAgICBvbktleURvd246IChlOiBLZXlib2FyZEV2ZW50KSA9PiB2b2lkO1xuICAgIG9uQ29tcG9zaXRpb25TdGFydDogKGU6IENvbXBvc2l0aW9uRXZlbnQpID0+IHZvaWQ7XG4gICAgb25Db21wb3NpdGlvbkVuZDogKGU6IENvbXBvc2l0aW9uRXZlbnQpID0+IHZvaWQ7XG59PiwgUD47XG5cblxuLyoqXG4gKiBBbGxvd3MgZm9yIHRoZSBzZWxlY3Rpb24gb2YgYSBtYW5hZ2VkIGNoaWxkIGJ5IHR5cGluZyB0aGUgZ2l2ZW4gdGV4dCBhc3NvY2lhdGVkIHdpdGggaXQuXG4gKiBcbiAqIEBzZWUgdXNlTGlzdE5hdmlnYXRpb24sIHdoaWNoIHBhY2thZ2VzIGV2ZXJ5dGhpbmcgdXAgdG9nZXRoZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEkgZXh0ZW5kcyBVc2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGRJbmZvPih7IGNvbGxhdG9yLCBnZXRJbmRleCwgdHlwZWFoZWFkVGltZW91dCwgc2V0SW5kZXggfTogVXNlVHlwZWFoZWFkTmF2aWdhdGlvblBhcmFtZXRlcnMpOiBVc2VUeXBlYWhlYWROYXZpZ2F0aW9uUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQsIEk+IHtcblxuXG4gICAgLy8gRm9yIHR5cGVhaGVhZCwga2VlcCB0cmFjayBvZiB3aGF0IG91ciBjdXJyZW50IFwic2VhcmNoXCIgc3RyaW5nIGlzIChpZiB3ZSBoYXZlIG9uZSlcbiAgICAvLyBhbmQgYWxzbyBjbGVhciBpdCBldmVyeSAxMDAwIG1zIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgY2hhbmdlZC5cbiAgICAvLyBOZXh0LCBrZWVwIGEgbWFwcGluZyBvZiB0eXBlYWhlYWQgdmFsdWVzIHRvIGluZGljZXMgZm9yIGZhc3RlciBzZWFyY2hpbmcuXG4gICAgLy8gQW5kLCBmb3IgdGhlIHVzZXIncyBzYWtlLCBsZXQgdGhlbSBrbm93IHdoZW4gdGhlaXIgdHlwZWFoZWFkIGNhbid0IG1hdGNoIGFueXRoaW5nIGFueW1vcmVcbiAgICBjb25zdCBbY3VycmVudFR5cGVhaGVhZCwgc2V0Q3VycmVudFR5cGVhaGVhZCwgZ2V0Q3VycmVudFR5cGVhaGVhZF0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgICB1c2VUaW1lb3V0KHsgdGltZW91dDogdHlwZWFoZWFkVGltZW91dCA/PyAxMDAwLCBjYWxsYmFjazogKCkgPT4geyBzZXRDdXJyZW50VHlwZWFoZWFkKG51bGwpOyBzZXRJbnZhbGlkVHlwZWFoZWFkKG51bGwpOyB9LCB0cmlnZ2VySW5kZXg6IGN1cnJlbnRUeXBlYWhlYWQgfSk7XG4gICAgY29uc3Qgc29ydGVkVHlwZWFoZWFkSW5mbyA9IHVzZVJlZjx7IHRleHQ6IHN0cmluZywgdW5zb3J0ZWRJbmRleDogbnVtYmVyIH1bXT4oW10pO1xuICAgIGNvbnN0IFtpbnZhbGlkVHlwZWFoZWFkLCBzZXRJbnZhbGlkVHlwZWFoZWFkXSA9IHVzZVN0YXRlPGJvb2xlYW4gfCBudWxsPihmYWxzZSk7XG5cbiAgICAvLyBIYW5kbGUgdHlwZWFoZWFkIGZvciBpbnB1dCBtZXRob2QgZWRpdG9ycyBhcyB3ZWxsXG4gICAgLy8gRXNzZW50aWFsbHksIHdoZW4gYWN0aXZlLCBpZ25vcmUgZnVydGhlciBrZXlzIFxuICAgIC8vIGJlY2F1c2Ugd2UncmUgd2FpdGluZyBmb3IgYSBDb21wb3NpdGlvbkVuZCBldmVudFxuICAgIGNvbnN0IFssIHNldEltZUFjdGl2ZSwgZ2V0SW1lQWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIC8vIEJlY2F1c2UgY29tcG9zaXRpb24gZXZlbnRzIGZpcmUgKmFmdGVyKiBrZXlkb3duIGV2ZW50cyBcbiAgICAvLyAoYnV0IHdpdGhpbiB0aGUgc2FtZSB0YXNrLCB3aGljaCwgVE9ETywgY291bGQgYmUgYnJvd3Nlci1kZXBlbmRlbnQpLFxuICAgIC8vIHdlIGNhbiB1c2UgdGhpcyB0byBrZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50IHdlJ3JlIGxpc3RlbmluZyBmb3Igb24gdGhlIGZpcnN0IGtleWRvd24uXG4gICAgY29uc3QgW25leHRUeXBlYWhlYWRDaGFyLCBzZXROZXh0VHlwZWFoZWFkQ2hhcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAobmV4dFR5cGVhaGVhZENoYXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRUeXBlYWhlYWQodHlwZWFoZWFkID0+ICgodHlwZWFoZWFkID8/IFwiXCIpICsgbmV4dFR5cGVhaGVhZENoYXIpKTtcbiAgICAgICAgICAgIHNldE5leHRUeXBlYWhlYWRDaGFyKG51bGwpO1xuICAgICAgICB9XG4gICAgfSwgW25leHRUeXBlYWhlYWRDaGFyXSk7XG5cblxuICAgIGNvbnN0IGNvbXBhcmF0b3JTaGFyZWQgPSB1c2VTdGFibGVDYWxsYmFjaygoc2FmZUxoczogc3RyaW5nLCBzYWZlUmhzOiBzdHJpbmcpID0+IHtcbiAgICAgICAgbGV0IGNvbXBhcmU6IG51bWJlcjtcbiAgICAgICAgLy8gRm9yIHRoZSBwdXJwb3NlcyBvZiB0eXBlYWhlYWQsIG9ubHkgY29tcGFyZSBhIHN0cmluZyBvZiB0aGUgc2FtZSBzaXplIGFzIG91ciBjdXJyZW50bHkgdHlwZWQgc3RyaW5nLlxuICAgICAgICAvLyBCeSBub3JtYWxpemluZyB0aGVtIGZpcnN0LCB3ZSBlbnN1cmUgdGhpcyBieXRlLWJ5LWJ5dGUgaGFuZGxpbmcgb2YgcmF3IGNoYXJhY3RlciBkYXRhIHdvcmtzIG91dCBva2F5LlxuICAgICAgICBzYWZlTGhzID0gc2FmZUxocy5ub3JtYWxpemUoXCJORkRcIik7XG4gICAgICAgIHNhZmVSaHMgPSBzYWZlUmhzLm5vcm1hbGl6ZShcIk5GRFwiKVxuXG4gICAgICAgIGlmIChjb2xsYXRvcilcbiAgICAgICAgICAgIGNvbXBhcmUgPSBjb2xsYXRvci5jb21wYXJlKHNhZmVMaHMsIHNhZmVSaHMpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbXBhcmUgPSBzYWZlTGhzLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShzYWZlUmhzLnRvTG93ZXJDYXNlKCkgPz8gXCJcIik7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBhcmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnNlcnRpbmdDb21wYXJhdG9yID0gdXNlU3RhYmxlQ2FsbGJhY2soKGxoczogSVtcInRleHRcIl0sIHJoczogeyB0ZXh0OiBJW1widGV4dFwiXTsgdW5zb3J0ZWRJbmRleDogbnVtYmVyOyB9KSA9PiB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBsaHMgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHJocy50ZXh0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyYXRvclNoYXJlZChsaHMsIHJocy50ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobGhzIGFzIHVua25vd24gYXMgbnVtYmVyKSAtIChyaHMgYXMgdW5rbm93biBhcyBudW1iZXIpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdHlwZWFoZWFkQ29tcGFyYXRvciA9IHVzZVN0YWJsZUNhbGxiYWNrKChsaHM6IElbXCJ0ZXh0XCJdLCByaHM6IHsgdGV4dDogSVtcInRleHRcIl07IHVuc29ydGVkSW5kZXg6IG51bWJlcjsgfSkgPT4ge1xuXG4gICAgICAgIGlmICh0eXBlb2YgbGhzID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiByaHMudGV4dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gRHVyaW5nIHR5cGVhaGVhZCwgYWxsIHN0cmluZ3MgbG9uZ2VyIHRoYW4gb3VycyBzaG91bGQgYmUgdHJ1bmNhdGVkXG4gICAgICAgICAgICAvLyBzbyB0aGF0IHRoZXkncmUgYWxsIGNvbnNpZGVyZWQgZXF1YWxseSBieSB0aGF0IHBvaW50LlxuICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3JTaGFyZWQobGhzLCByaHMudGV4dC5zdWJzdHJpbmcoMCwgbGhzLmxlbmd0aCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChsaHMgYXMgdW5rbm93biBhcyBudW1iZXIpIC0gKHJocyBhcyB1bmtub3duIGFzIG51bWJlcik7XG4gICAgfSk7XG5cblxuICAgIGNvbnN0IHVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wczogVXNlVHlwZWFoZWFkTmF2aWdhdGlvblByb3BzPENoaWxkRWxlbWVudD4gPSB1c2VDYWxsYmFjayhmdW5jdGlvbiA8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4+KHsgLi4ucHJvcHMgfTogUCk6IFVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wc1JldHVyblR5cGU8Q2hpbGRFbGVtZW50LCBQPiB7XG5cbiAgICAgICAgY29uc3Qgb25Db21wb3NpdGlvblN0YXJ0ID0gKF9lOiBDb21wb3NpdGlvbkV2ZW50KSA9PiB7IHNldEltZUFjdGl2ZSh0cnVlKSB9O1xuICAgICAgICBjb25zdCBvbkNvbXBvc2l0aW9uRW5kID0gKGU6IENvbXBvc2l0aW9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHNldE5leHRUeXBlYWhlYWRDaGFyKGUuZGF0YSk7XG4gICAgICAgICAgICBzZXRJbWVBY3RpdmUoZmFsc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9uS2V5RG93biA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IGltZUFjdGl2ZSA9IGdldEltZUFjdGl2ZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBlLmtleTtcblxuICAgICAgICAgICAgLy8gTm90IGhhbmRsZWQgYnkgdHlwZWFoZWFkIChpLmUuIGFzc3VtZSB0aGlzIGlzIGEga2V5Ym9hcmQgc2hvcnRjdXQpXG4gICAgICAgICAgICBpZiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGlmICghaW1lQWN0aXZlICYmIGUua2V5ID09PSBcIkJhY2tzcGFjZVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBsYXN0IGNoYXJhY3RlciBpbiBhIHdheSB0aGF0IGRvZXNuJ3Qgc3BsaXQgVVRGLTE2IHN1cnJvZ2F0ZXMuXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudFR5cGVhaGVhZCh0ID0+IHQgPT09IG51bGwgPyBudWxsIDogWy4uLnRdLnJldmVyc2UoKS5zbGljZSgxKS5yZXZlcnNlKCkuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUga2V5IHByb3BlcnR5IHJlcHJlc2VudHMgdGhlIHR5cGVkIGNoYXJhY3RlciBPUiB0aGUgXCJuYW1lZCBrZXkgYXR0cmlidXRlXCIgb2YgdGhlIGtleSBwcmVzc2VkLlxuICAgICAgICAgICAgLy8gVGhlcmUncyBubyBkZWZpbml0ZSB3YXkgdG8gdGVsbCB0aGUgZGlmZmVyZW5jZSwgYnV0IGZvciBhbGwgaW50ZW50cyBhbmQgcHVycG9zZXNcbiAgICAgICAgICAgIC8vIHRoZXJlIGFyZSBubyBvbmUtY2hhcmFjdGVyIG5hbWVzLCBhbmQgdGhlcmUgYXJlIG5vIG5vbi1BU0NJSS1hbHBoYSBuYW1lcy5cbiAgICAgICAgICAgIC8vIFRodXMsIGFueSBvbmUtY2hhcmFjdGVyIG9yIG5vbi1BU0NJSSB2YWx1ZSBmb3IgYGtleWAgaXMgKmFsbW9zdCBjZXJ0YWlubHkqIGEgdHlwZWQgY2hhcmFjdGVyLlxuICAgICAgICAgICAgY29uc3QgaXNDaGFyYWN0ZXJLZXkgPSAoa2V5Lmxlbmd0aCA9PT0gMSB8fCAhL15bQS1aYS16XS8udGVzdChrZXkpKTtcbiAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlcktleSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PSBcIiBcIiAmJiAoZ2V0Q3VycmVudFR5cGVhaGVhZCgpID8/IFwiXCIpLnRyaW0oKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBkbyBhbnl0aGluZyBiZWNhdXNlIGEgc3BhY2ViYXIgY2FuJ3QgZXZlciBcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhdGUgYSB0eXBlYWhlYWQsIG9ubHkgY29udGludWUgb25lLlxuXG4gICAgICAgICAgICAgICAgICAgIC8vIChTcGVjaWZpY2FsbHksIGxldCB0aGUgZXZlbnQgY29udGludWUgcHJvcGFnYXRpb24gaW4gdGhpcyBjYXNlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogV29uJ3QgYmUgdHJ1ZSBmb3IgdGhlIGZpcnN0IGtleWRvd25cbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYmVmb3JlIHVzZUxheW91dEVmZmVjdCBpcyBjYWxsZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gYWN0dWFsbHkgYXBwbHkgdGhlIGNoYW5nZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWltZUFjdGl2ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE5leHRUeXBlYWhlYWRDaGFyKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzPENoaWxkRWxlbWVudD4oKSh7IG9uS2V5RG93biwgb25Db21wb3NpdGlvblN0YXJ0LCBvbkNvbXBvc2l0aW9uRW5kLCB9LCBwcm9wcyk7XG4gICAgfSwgW10pO1xuXG4gICAgLy8gSGFuZGxlIGNoYW5nZXMgaW4gdHlwZWFoZWFkIHRoYXQgY2F1c2UgY2hhbmdlcyB0byB0aGUgdGFiYmFibGUgaW5kZXhcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoY3VycmVudFR5cGVhaGVhZCAmJiBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQubGVuZ3RoKSB7XG5cblxuXG4gICAgICAgICAgICBjb25zdCBzb3J0ZWRUeXBlYWhlYWRJbmRleCA9IGJpbmFyeVNlYXJjaChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQsIGN1cnJlbnRUeXBlYWhlYWQsIHR5cGVhaGVhZENvbXBhcmF0b3IpO1xuXG4gICAgICAgICAgICBpZiAoc29ydGVkVHlwZWFoZWFkSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHVzZXIgaGFzIHR5cGVkIGFuIGVudHJ5IHRoYXQgZG9lc24ndCBleGlzdCBpbiB0aGUgbGlzdFxuICAgICAgICAgICAgICAgIC8vIChvciBtb3JlIHNwZWNpZmljYWxseSBcImZvciB3aGljaCB0aGVyZSBpcyBubyBlbnRyeSB0aGF0IHN0YXJ0cyB3aXRoIHRoYXQgaW5wdXRcIilcbiAgICAgICAgICAgICAgICBzZXRJbnZhbGlkVHlwZWFoZWFkKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0SW52YWxpZFR5cGVhaGVhZChmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgV2Uga25vdyByb3VnaGx5IHdoZXJlLCBpbiB0aGUgc29ydGVkIGFycmF5IG9mIHN0cmluZ3MsIG91ciBuZXh0IHR5cGVhaGVhZCBsb2NhdGlvbiBpcy5cbiAgICAgICAgICAgICAgICAgIEJ1dCByb3VnaGx5IGlzbid0IGdvb2QgZW5vdWdoIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBtYXRjaGVzLlxuICAgICAgICAgICAgICAgICAgVG8gY29udmVydCBvdXIgc29ydGVkIGluZGV4IHRvIHRoZSB1bnNvcnRlZCBpbmRleCB3ZSBuZWVkLCB3ZSBoYXZlIHRvIGZpbmQgdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgICBlbGVtZW50IHRoYXQgbWF0Y2hlcyB1cyAqYW5kKiAoaWYgYW55IHN1Y2ggZXhpc3QpIGlzICphZnRlciogb3VyIGN1cnJlbnQgc2VsZWN0aW9uLlxuXG4gICAgICAgICAgICAgICAgICBJbiBvdGhlciB3b3JkcywgdGhlIG9ubHkgd2F5IHR5cGVhaGVhZCBtb3ZlcyBiYWNrd2FyZHMgcmVsYXRpdmUgdG8gb3VyIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uIGlzIGlmIHRoZSBvbmx5IG90aGVyIG9wdGlvbiBpcyBiZWhpbmQgdXMuXG5cbiAgICAgICAgICAgICAgICAgIEl0J3Mgbm90IHNwZWNpZmllZCBpbiBXQUktQVJJQSB3aGF0IHRvIGRvIGluIHRoYXQgY2FzZS4gIEkgc3VwcG9zZSB3cmFwIGJhY2sgdG8gdGhlIHN0YXJ0P1xuICAgICAgICAgICAgICAgICAgVGhvdWdoIHRoZXJlJ3MgYWxzbyBhIGNhc2UgZm9yIGp1c3QgZ29pbmcgdXB3YXJkcyB0byB0aGUgbmVhcmVzdCB0byBwcmV2ZW50IGp1bXBpbmVzcy5cbiAgICAgICAgICAgICAgICAgIEJ1dCBpZiB5b3UncmUgYWxyZWFkeSBkb2luZyB0eXBlYWhlYWQgb24gYW4gdW5zb3J0ZWQgbGlzdCwgbGlrZSwganVtcGluZXNzIGNhbid0IGJlIGF2b2lkZWQuXG4gICAgICAgICAgICAgICAgICBJIGR1bm5vLiBHb2luZyBiYWNrIHRvIHRoZSBzdGFydCBpcyB0aGUgc2ltcGxpc3QgdGhvdWdoLlxuXG4gICAgICAgICAgICAgICAgICBCYXNpY2FsbHkgd2hhdCB0aGlzIGRvZXM6IFN0YXJ0aW5nIGZyb20gd2hlcmUgd2UgZm91bmQgb3Vyc2VsdmVzIGFmdGVyIG91ciBiaW5hcnkgc2VhcmNoLFxuICAgICAgICAgICAgICAgICAgc2NhbiBiYWNrd2FyZHMgYW5kIGZvcndhcmRzIHRocm91Z2ggYWxsIGFkamFjZW50IGVudHJpZXMgdGhhdCBhbHNvIGNvbXBhcmUgZXF1YWxseSBzbyB0aGF0XG4gICAgICAgICAgICAgICAgICB3ZSBjYW4gZmluZCB0aGUgb25lIHdob3NlIGB1bnNvcnRlZEluZGV4YCBpcyB0aGUgbG93ZXN0IGFtb25nc3QgYWxsIG90aGVyIGVxdWFsIHN0cmluZ3NcbiAgICAgICAgICAgICAgICAgIChhbmQgYWxzbyB0aGUgbG93ZXN0IGB1bnNvcnRlZEluZGV4YCB5YWRkYSB5YWRkYSBleGNlcHQgdGhhdCBpdCBjb21lcyBhZnRlciB1cykuXG5cbiAgICAgICAgICAgICAgICAgIFRPRE86IFRoZSBiaW5hcnkgc2VhcmNoIHN0YXJ0cyB0aGlzIG9mZiB3aXRoIGEgc29saWQgTyhsb2cgbiksIGJ1dCBvbmUtY2hhcmFjdGVyIFxuICAgICAgICAgICAgICAgICAgc2VhcmNoZXMgYXJlLCB0aGFua3MgdG8gcGlnZW9uaG9sZSBwcmluY2lwYWwsIGV2ZW50dWFsbHkgZ3VhcmFudGVlZCB0byBiZWNvbWUgXG4gICAgICAgICAgICAgICAgICBPKG4qbG9nIG4pLiBUaGlzIGlzIGFubm95aW5nIGJ1dCBwcm9iYWJseSBub3QgZWFzaWx5IHNvbHZhYmxlPyBUaGVyZSBjb3VsZCBiZSBhbiBcbiAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbiBmb3Igb25lLWNoYXJhY3RlciBzdHJpbmdzLCBidXQgdGhhdCdzIGp1c3Qga2lja2luZyB0aGUgY2FuIGRvd24gXG4gICAgICAgICAgICAgICAgICB0aGUgcm9hZC4gTWF5YmUgb25lIG9yIHR3byBjaGFyYWN0ZXJzIHdvdWxkIGJlIGdvb2QgZW5vdWdoIHRob3VnaC5cbiAgICAgICAgICAgICAgICAqL1xuXG5cbiAgICAgICAgICAgICAgICAvLyBUaGVzZSBhcmUgdXNlZCB0byBrZWVwIHRyYWNrIG9mIHRoZSBjYW5kaWRhdGVzJyBwb3NpdGlvbnMgaW4gYm90aCBvdXIgc29ydGVkIGFycmF5IGFuZCB0aGUgdW5zb3J0ZWQgRE9NLlxuICAgICAgICAgICAgICAgIGxldCBsb3dlc3RVbnNvcnRlZEluZGV4QWxsOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsZXQgbG93ZXN0U29ydGVkSW5kZXhBbGwgPSBzb3J0ZWRUeXBlYWhlYWRJbmRleDtcblxuICAgICAgICAgICAgICAgIC8vIFRoZXNlIHR3byBhcmUgb25seSBzZXQgZm9yIGVsZW1lbnRzIHRoYXQgYXJlIGFoZWFkIG9mIHVzLCBidXQgdGhlIHByaW5jaXBsZSdzIHRoZSBzYW1lIG90aGVyd2lzZVxuICAgICAgICAgICAgICAgIGxldCBsb3dlc3RVbnNvcnRlZEluZGV4TmV4dDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgbGV0IGxvd2VzdFNvcnRlZEluZGV4TmV4dCA9IHNvcnRlZFR5cGVhaGVhZEluZGV4O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlQmVzdEZpdCA9ICh1OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvd2VzdFVuc29ydGVkSW5kZXhBbGwgPT0gbnVsbCB8fCB1IDwgbG93ZXN0VW5zb3J0ZWRJbmRleEFsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXN0VW5zb3J0ZWRJbmRleEFsbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlc3RTb3J0ZWRJbmRleEFsbCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKChsb3dlc3RVbnNvcnRlZEluZGV4TmV4dCA9PSBudWxsIHx8IHUgPCBsb3dlc3RVbnNvcnRlZEluZGV4TmV4dCkgJiYgdSA+IChnZXRJbmRleCgpID8/IC1JbmZpbml0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VzdFVuc29ydGVkSW5kZXhOZXh0ID0gdTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VzdFNvcnRlZEluZGV4TmV4dCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgaSA9IHNvcnRlZFR5cGVhaGVhZEluZGV4O1xuICAgICAgICAgICAgICAgIHdoaWxlIChpID49IDAgJiYgdHlwZWFoZWFkQ29tcGFyYXRvcihjdXJyZW50VHlwZWFoZWFkLCBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbaV0pID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQmVzdEZpdChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbaV0udW5zb3J0ZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC0taTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpID0gc29ydGVkVHlwZWFoZWFkSW5kZXg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQubGVuZ3RoICYmIHR5cGVhaGVhZENvbXBhcmF0b3IoY3VycmVudFR5cGVhaGVhZCwgc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50W2ldKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUJlc3RGaXQoc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50W2ldLnVuc29ydGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxvd2VzdFVuc29ydGVkSW5kZXhOZXh0ICE9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBzZXRJbmRleChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbbG93ZXN0U29ydGVkSW5kZXhOZXh0XS51bnNvcnRlZEluZGV4KTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsb3dlc3RVbnNvcnRlZEluZGV4QWxsICE9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBzZXRJbmRleChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbbG93ZXN0U29ydGVkSW5kZXhBbGxdLnVuc29ydGVkSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2N1cnJlbnRUeXBlYWhlYWRdKTtcblxuICAgIGNvbnN0IHVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZCA9IHVzZUNhbGxiYWNrPFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZDxDaGlsZEVsZW1lbnQsIEk+PigoeyB0ZXh0LCAuLi5pIH06IEkpID0+IHtcblxuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRleHQpIHtcblxuICAgICAgICAgICAgICAgIC8vIEZpbmQgd2hlcmUgdG8gaW5zZXJ0IHRoaXMgaXRlbS5cbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIGFsbCBpbmRleCB2YWx1ZXMgc2hvdWxkIGJlIHVuaXF1ZSwgdGhlIHJldHVybmVkIHNvcnRlZEluZGV4XG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIGFsd2F5cyByZWZlciB0byBhIG5ldyBsb2NhdGlvbiAoaS5lLiBiZSBuZWdhdGl2ZSkgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkSW5kZXggPSBiaW5hcnlTZWFyY2goc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50LCB0ZXh0LCBpbnNlcnRpbmdDb21wYXJhdG9yKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmFzc2VydChzb3J0ZWRJbmRleCA8IDAgfHwgaW5zZXJ0aW5nQ29tcGFyYXRvcihzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbc29ydGVkSW5kZXhdLnRleHQsIHsgdW5zb3J0ZWRJbmRleDogaS5pbmRleCwgdGV4dH0pID09IDApO1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50LnNwbGljZSgtc29ydGVkSW5kZXggLSAxLCAwLCB7IHRleHQsIHVuc29ydGVkSW5kZXg6IGkuaW5kZXggfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQuc3BsaWNlKHNvcnRlZEluZGV4LCAwLCB7IHRleHQsIHVuc29ydGVkSW5kZXg6IGkuaW5kZXggfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB1bm1vdW50aW5nLCBmaW5kIHdoZXJlIHdlIHdlcmUgYW5kIHJlbW92ZSBvdXJzZWx2ZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFnYWluLCB3ZSBzaG91bGQgYWx3YXlzIGZpbmQgb3Vyc2VsdmVzIGJlY2F1c2UgdGhlcmUgc2hvdWxkIGJlIG5vIGR1cGxpY2F0ZSB2YWx1ZXMgaWYgZWFjaCBpbmRleCBpcyB1bmlxdWUuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvcnRlZEluZGV4ID0gYmluYXJ5U2VhcmNoKHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudCwgdGV4dCwgaW5zZXJ0aW5nQ29tcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KHNvcnRlZEluZGV4IDwgMCB8fCBpbnNlcnRpbmdDb21wYXJhdG9yKHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudFtzb3J0ZWRJbmRleF0udGV4dCwgeyB1bnNvcnRlZEluZGV4OiBpLmluZGV4LCB0ZXh0fSkgPT0gMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRlZEluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudC5zcGxpY2Uoc29ydGVkSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbdGV4dF0pO1xuXG4gICAgICAgIHJldHVybiB7fVxuXG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkLFxuICAgICAgICB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uUHJvcHMsXG5cbiAgICAgICAgY3VycmVudFR5cGVhaGVhZCxcbiAgICAgICAgaW52YWxpZFR5cGVhaGVhZCxcbiAgICB9XG59XG5cblxuLyoqXG4gKiBZb3VyIHVzdWFsIGJpbmFyeSBzZWFyY2ggaW1wbGVtZW50YXRpb24uXG4gKiBcbiAqIEl0J3MgdXNlZCBoZXJlIHRvIHF1aWNrbHkgZmluZCBhIGdvb2Qgc3BvdCB0byBzdGFydCBzZWFyY2hpbmcgZm9yIG91ciBuZXh0IHR5cGVhaGVhZCBjYW5kaWRhdGUuXG4gKiBAcGFyYW0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaCB0aHJvdWdoXG4gKiBAcGFyYW0gd2FudGVkIFRoZSB2YWx1ZSB5b3UnZCBsaWtlIHRvIGZpbmRcbiAqIEBwYXJhbSBjb21wYXJhdG9yIENvbXBhcmVzIGB3YW50ZWRgIHdpdGggdGhlIGN1cnJlbnQgdmFsdWUgaW4gYGFycmF5YFxuICogQHJldHVybnMgQSBub24tbmVnYXRpdmUgdmFsdWUgaWYgYHdhbnRlZGAgd2FzIGZvdW5kLCBhbmQgYSBuZWdhdGl2ZSBudW1iZXIgaWYgbm90LiBcbiAqIFRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIG51bWJlciwgbWludXMgb25lLCBpcyB3aGVyZSBgd2FudGVkYCAqd291bGQqIGJlIGZvdW5kIGlmIGl0ICp3YXMqIGluIGBhcnJheWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmFyeVNlYXJjaDxULCBVLCBGIGV4dGVuZHMgKGxoczogVSwgcmhzOiBUKSA9PiBudW1iZXI+KGFycmF5OiBUW10sIHdhbnRlZDogVSwgY29tcGFyYXRvcjogRik6IG51bWJlciB7XG4gICAgbGV0IGZpcnN0SW5kZXggPSAwO1xuICAgIGxldCBsYXN0SW5kZXggPSBhcnJheS5sZW5ndGggLSAxO1xuICAgIHdoaWxlIChmaXJzdEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICBjb25zdCB0ZXN0SW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgPj4gMTtcbiAgICAgICAgY29uc3QgY29tcGFyaXNvblJlc3VsdCA9IGNvbXBhcmF0b3Iod2FudGVkLCBhcnJheVt0ZXN0SW5kZXhdKTtcblxuICAgICAgICBpZiAoY29tcGFyaXNvblJlc3VsdCA+IDApIHtcbiAgICAgICAgICAgIGZpcnN0SW5kZXggPSB0ZXN0SW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbXBhcmlzb25SZXN1bHQgPCAwKSB7XG4gICAgICAgICAgICBsYXN0SW5kZXggPSB0ZXN0SW5kZXggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRlc3RJbmRleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtZmlyc3RJbmRleCAtIDE7XG59XG4iLCJpbXBvcnQgeyBJbnB1dHMsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyBFZmZlY3RDaGFuZ2UgfSBmcm9tIFwiLi91c2UtZWZmZWN0XCI7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwiLi91c2UtbGF5b3V0LWVmZmVjdFwiO1xuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCwgVXNlUmVmRWxlbWVudFByb3BzIH0gZnJvbSBcIi4vdXNlLXJlZi1lbGVtZW50XCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xuXG5cbi8vZXhwb3J0IGNvbnN0IEluZGV4UGVuZGluZyA9IFN5bWJvbChcImluZGV4LXBlbmRpbmdcIik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFuYWdlZENoaWxkSW5mbzxUIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nPiB7XG5cbiAgICAvKipcbiAgICAgKiBBIGtleSB1c2VkIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBjaGlsZCBhbW9uZ3N0IGl0cyBzaWJsaW5ncy5cbiAgICAgKiBUaGUgaW5kaWNlcyBkbyBub3QgKm5lY2Vzc2FyaWx5KiBuZWVkIHRvIGJlIHNlcXVlbnRpYWwgKGVzcGVjaWFsbHlcbiAgICAgKiBpbiB0aGUgY2FzZSBvZiBzdHJpbmcgaW5kaWNlcyksIGJ1dCBvdGhlciBob29rcyB0aGF0IGRlcGVuZFxuICAgICAqIG9uIGB1c2VNYW5hZ2VkQ2hpbGRgIG1heSBzcGVjaWZpY2FsbHkgd2FudCBzZXF1ZW50aWFsbHktb3JkZXJlZFxuICAgICAqIGluZGljZXMgKGUuZy4gYHVzZUxpbmVhck5hdmlnYXRpb25gKVxuICAgICAqL1xuICAgIGluZGV4OiBUO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZU1hbmFnZWRDaGlsZFJldHVyblR5cGU8RSBleHRlbmRzIEV2ZW50VGFyZ2V0PiB7XG4gICAgZ2V0RWxlbWVudCgpOiBFIHwgbnVsbDtcbiAgICB1c2VNYW5hZ2VkQ2hpbGRQcm9wczogVXNlUmVmRWxlbWVudFByb3BzPEU+O1xufVxuXG5leHBvcnQgdHlwZSBVc2VkTWFuYWdlZENoaWxkPEkgZXh0ZW5kcyBNYW5hZ2VkQ2hpbGRJbmZvPGFueT4+ID0gPEUgZXh0ZW5kcyBFdmVudFRhcmdldD4oaW5mbzogSSkgPT4gVXNlTWFuYWdlZENoaWxkUmV0dXJuVHlwZTxFPjtcbi8vZXhwb3J0IHR5cGUgVXNlTWFuYWdlZENoaWxkUHJvcHM8RSBleHRlbmRzIEV2ZW50VGFyZ2V0PiA9IDxQIGV4dGVuZHMgVXNlTWFuYWdlZENoaWxkUHJvcHNQYXJhbWV0ZXJzPEU+Pihwcm9wczogUCkgPT4gVXNlTWFuYWdlZENoaWxkUHJvcHNSZXR1cm5UeXBlPEUsIFA+O1xuLy9leHBvcnQgdHlwZSBVc2VNYW5hZ2VkQ2hpbGRQcm9wc1BhcmFtZXRlcnM8RSBleHRlbmRzIEV2ZW50VGFyZ2V0PiA9IFVzZVJlZkVsZW1lbnRQcm9wc1BhcmFtZXRlcnM8RT47XG4vL2V4cG9ydCB0eXBlIFVzZU1hbmFnZWRDaGlsZFByb3BzUmV0dXJuVHlwZTxFIGV4dGVuZHMgRXZlbnRUYXJnZXQsIFAgZXh0ZW5kcyBVc2VNYW5hZ2VkQ2hpbGRQcm9wc1BhcmFtZXRlcnM8RT4+ID0gdm9pZDtcblxudHlwZSBJbmZvVG9LZXk8SSBleHRlbmRzIE1hbmFnZWRDaGlsZEluZm88YW55Pj4gPSBJW1wiaW5kZXhcIl07XG50eXBlIE1hbmFnZWRDaGlsZHJlbjxUIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nLCBJIGV4dGVuZHMgTWFuYWdlZENoaWxkSW5mbzxUPj4gPSBUIGV4dGVuZHMgc3RyaW5nID8gUmVjb3JkPHN0cmluZywgST4gOiBJW107XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hpbGRNYW5hZ2VyUmV0dXJuVHlwZTxJIGV4dGVuZHMgTWFuYWdlZENoaWxkSW5mbzxhbnk+PiB7XG4gICAgLyoqXG4gICAgICogQSBob29rIHRoYXQgbXVzdCBiZSBjYWxsZWQgYnkgZXZlcnkgY2hpbGQgY29tcG9uZW50IHRoYXRcbiAgICAgKiBpcyB0byBiZSBtYW5hZ2VkIGJ5IHRoaXMgb25lLiBUaGUgYXJndW1lbnQgdG8gdGhlIGhvb2tcbiAgICAgKiBpcyBqdXN0IHRoZSBiYWcgb2YgcHJvcGVydGllcyB0byBwYXNzIHRvIHRoZSBwYXJlbnQsXG4gICAgICogaW5jbHVkaW5nIHRoZSBjaGlsZCdzIGluZGV4LlxuICAgICAqL1xuICAgIHVzZU1hbmFnZWRDaGlsZDogVXNlZE1hbmFnZWRDaGlsZDxJPjtcblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGFsbCBjdXJyZW50bHkgbWFuYWdlZCBjaGlsZHJlbixcbiAgICAgKiBvciByYXRoZXIgdGhlIGluZm9ybWF0aW9uIHRoZXkgcHJvdmlkZWRcbiAgICAgKiB0aGUgcGFyZW50LlxuICAgICAqIFxuICAgICAqIFRoZSBpbmRleCB0aGF0IHRoZSBjaGlsZCBwcm92aWRlZCBpcyB3aGVyZSBpdCBpcyBsb2NhdGVkIGluIHRoaXMgc3RydWN0dXJlLiBGb3IgbnVtZXJpYyBJRHMsIHRoaXMgaXMganVzdCBhbiBhcnJheSwgd2l0aCBlYWNoIG9iamVjdCBhdCB0aGF0IGxvY2F0aW9uIGluIHRoZSBhcnJheS5cbiAgICAgKiBcbiAgICAgKiBUaGlzIGlzIGdlbmVyYWxseSBqdXN0IGFuIGFycmF5LCB0aG91Z2ggaXQgY2FuIGJlIGEgUmVjb3JkIGluc3RlYWQgaWYgc3RyaW5nIElEcyBhcmUgdXNlZCBpbnN0ZWFkIG9mIG51bWVyaWMgSURzLlxuICAgICAqL1xuICAgIG1hbmFnZWRDaGlsZHJlbjogTWFuYWdlZENoaWxkcmVuPEluZm9Ub0tleTxJPiwgST47XG5cbiAgICAvKipcbiAgICAgKiBTZXBhcmF0ZSBmcm9tIGBtYW5hZ2VkQ2hpbGRyZW5gLCB0aGlzIGtlZXBzIHRyYWNrIG9mIGFsbCBtb3VudGVkIGNoaWxkcmVuIGluIHRoZSBvcmRlciB0aGF0IHRoZXkgbW91bnRlZC5cbiAgICAgKiBgZ2V0TW91bnRJbmRleGAgd2lsbCByZXR1cm4gdGhlIGluZGV4IGludG8gdGhpcyBhcnJheSBnaXZlbiB0aGUgY2hpbGQncyBpbmRleC5cbiAgICAgKiAgXG4gICAgICogV2hlbiB1bm1vdW50ZWQsIGl0cyBlbnRyeSBiZWNvbWVzIG51bGwuXG4gICAgICogXG4gICAgICogVGhpcyBhbmQgYG1hbmFnZWRDaGlsZHJlbmAgd2lsbCBhbHdheXMgaGF2ZSB0aGUgc2FtZSBjb250ZW50cywgYnV0IGxpa2VseSBpbiBhIGRpZmZlcmVudCBvcmRlciBhbmQgaW4gZGlmZmVyZW50IGxvY2F0aW9ucy5cbiAgICAgKi9cbiAgICBtb3VudGVkQ2hpbGRyZW46IChudWxsIHwgSSlbXTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgbnVtYmVyIG9mIGNoaWxkcmVuIGJlaW5nIG1hbmFnZWQgXG4gICAgICogKHNwZWNpZmljYWxseSB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgaGF2ZSBtb3VudGVkICphbmQqIGFyZSBzdGlsbCBtb3VudGVkLikuXG4gICAgICogXG4gICAgICogRm9yIG1vc3QgYXJyYXktbGlrZSBjaGlsZCBzdHJ1Y3R1cmVzIHdpdGggbnVtZXJpYyBJRHMsIHRoaXMgd2lsbCBtYXRjaCB1cCB3aXRoIGBtYW5hZ2VkQ2hpbGRyZW4ubGVuZ3RoYC5cbiAgICAgKi9cbiAgICBjaGlsZENvdW50OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgaGF2ZSBiZWVuIG1vdW50ZWQsIHJlZ2FyZGxlc3Mgb2YgaWYgdGhleSd2ZSBzaW5jZSB1bm1vdW50ZWQgdGhlbXNlbHZlcy5cbiAgICAgKi9cbiAgICB0b3RhbENoaWxkcmVuTW91bnRlZDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IGhhdmUgdW5tb3VudGVkIC0tIHRoaXMgaXMgMCB1bnRpbCBhdCBsZWFzdCBzb21lIHRpbWUgYWZ0ZXIgYHRvdGFsQ2hpbGRyZW5Nb3VudGVkYCBpcyA+MC5cbiAgICAgKi9cbiAgICB0b3RhbENoaWxkcmVuVW5vdW50ZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW4gd2hhdCBwb3NpdGlvbiB0aGlzIGNoaWxkIG1vdW50ZWQuIElmIHRoaXMgaXMgdGhlIG1vc3QgcmVjZW50bHkgbW91bnRlZCBjaGlsZCwgaXQgd2lsbCByZXR1cm4gYSB2YWx1ZSBlcXVhbCB0byBgdG90YWxDaGlsZHJlbk1vdW50ZWRgIC0gMS5cbiAgICAgKiBcbiAgICAgKiAqKk9uIHRoZSBjaGlsZCBzaWRlLCBjYW5ub3QgYmUgdXNlZCBpbnNpZGUgdXNlTGF5b3V0RWZmZWN0KiogKE9uIHRoZSBwYXJlbnQgc2lkZSBpdCdzIGZpbmUgYXQgYW55IHBvaW50KS4gIElmIG11bHRpcGxlIGNoaWxkcmVuIGFyZSBtb3VudGVkIG9uIHRoZSBzYW1lIGZyYW1lLCB0aGVpciBtb3VudCBpbmRpY2VzIHJlbGF0aXZlIHRvIGVhY2ggb3RoZXIgd2lsbCBiZSBhcmJpdHJhcnkgYnV0IGNvbnNpc3RlbnQgKGFzc3VtaW5nIFByZWFjdCdzIGlzKS5cbiAgICAgKi9cbiAgICBnZXRNb3VudEluZGV4KGluZGV4OiBJbmZvVG9LZXk8ST4pOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aGUgRWxlbWVudCB0aGF0IHRoZSBjaGlsZCBtb3VudHMgYXMsIHJldHVybnMgaXRzIGBpbmRleGAgcHJvcC5cbiAgICAgKi9cbiAgICBpbmRpY2VzQnlFbGVtZW50OiBNYXA8RXZlbnRUYXJnZXQsIEluZm9Ub0tleTxJPj5cblxuICAgIC8qKlxuICAgICAqIEEgc2V0IGNvbnRhaW5pbmcgZXZlcnkgaW5kZXggdGhhdCBoYXMgdW5tb3VudGVkIGJ1dCBub3QgZXZlciByZS1tb3VudGVkIGl0c2VsZi5cbiAgICAgKiBcbiAgICAgKiBJbiBhIG51bWVyaWMsIGxpbmVhciBsaXN0LCB0aGlzIHdvdWxkIHJlcHJlc2VudCBlaXRoZXIgaG9sZXMgaW4gdGhlIGxpc3QsIG9yIHNwYWNlcyBhZnRlciB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGRlbGV0ZWRJbmRpY2VzOiBTZXQ8SW5mb1RvS2V5PEk+Pjtcbn1cblxuLyoqXG4gKiBBbGxvd3MgYSBwYXJlbnQgY29tcG9uZW50IHRvIGFjY2VzcyBpbmZvcm1hdGlvbiBhYm91dCBjZXJ0YWluXG4gKiBjaGlsZCBjb21wb25lbnRzIG9uY2UgdGhleSBoYXZlIHJlbmRlcmVkLlxuICogXG4gKiBUaGlzIGhvb2sgaXMgc2xpZ2h0bHkgbW9yZSBjb21wbGljYXRlZCBpbiB0aGF0IGl0IHJldHVybnMgYm90aCBhXG4gKiBwcm9wLW1vZGlmeWluZyBob29rLCBidXQgYWxzbyBhIGhvb2sgdGhhdCBlYWNoIGNoaWxkIHdpbGwgbmVlZFxuICogdG8gdXNlOiBgdXNlTWFuYWdlZENoaWxkYC4gIEl0J3Mgc3RhYmxlIGFjcm9zcyByZW5kZXJzLCBzbyBqdXN0IFxuICogdG9zcyBpdCBpbnRvIGEgYENvbnRleHRgIHNvIHRoZSBjaGlsZHJlbiBjYW4gaGF2ZSBhY2Nlc3MgdG8gaXQuXG4gKiBUaGlzIGZ1bmN0aW9uIHJlZ2lzdGVycyB0aGUgY2hpbGQgd2l0aCB0aGUgcGFyZW50IGFuZCBwcm92aWRlc1xuICogaXQgd2l0aCBhbnkgcmVxdWVzdGVkIGluZm9ybWF0aW9uLCBidXQgZG9lc24ndCBkbyBhbnl0aGluZyBlbHNlXG4gKiB1bnRpbCBpdCB1bm1vdW50cyBhbmQgcmV0cmFjdHMgdGhhdCBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNoaWxkTWFuYWdlcjxJIGV4dGVuZHMgTWFuYWdlZENoaWxkSW5mbzxhbnk+PigpOiBVc2VDaGlsZE1hbmFnZXJSZXR1cm5UeXBlPEk+IHtcbiAgICB0eXBlIEsgPSBJbmZvVG9LZXk8ST5cblxuICAgIC8vIFRoaXMgaXMgYmxpbmRseSB1cGRhdGVkIGFueSB0aW1lIGEgY2hpbGQgbW91bnRzIG9yIHVubW91bnRzIGl0c2VsZi5cbiAgICAvLyBVc2VkIHRvIG1ha2Ugc3VyZSB0aGF0IGFueSB0aW1lIHRoZSBhcnJheSBvZiBtYW5hZ2VkIGNoaWxkcmVuIHVwZGF0ZXMsXG4gICAgLy8gd2UgYWxzbyByZS1yZW5kZXIuXG4gICAgY29uc3QgW19jaGlsZFVwZGF0ZUluZGV4LCBzZXRDaGlsZFVwZGF0ZUluZGV4XSA9IHVzZVN0YXRlKDApO1xuICAgIGNvbnN0IFt0b3RhbENoaWxkcmVuTW91bnRlZCwgc2V0VG90YWxDaGlsZHJlbk1vdW50ZWQsIGdldFRvdGFsQ2hpbGRyZW5Nb3VudGVkXSA9IHVzZVN0YXRlKDApO1xuICAgIGNvbnN0IFt0b3RhbENoaWxkcmVuVW5vdW50ZWQsIHNldFRvdGFsQ2hpbGRyZW5Vbm91bnRlZCwgX2dldFRvdGFsQ2hpbGRyZW5Vbm91bnRlZF0gPSB1c2VTdGF0ZSgwKTtcbiAgICBjb25zdCBjaGlsZHJlbkN1cnJlbnRseU1vdW50ZWQgPSB0b3RhbENoaWxkcmVuTW91bnRlZCAtIHRvdGFsQ2hpbGRyZW5Vbm91bnRlZDtcbiAgICBjb25zdCBtYW5hZ2VkQ2hpbGRyZW4gPSB1c2VSZWY8TWFuYWdlZENoaWxkcmVuPEluZm9Ub0tleTxJPiwgST4+KFtdIGFzIGFueSBhcyBNYW5hZ2VkQ2hpbGRyZW48SW5mb1RvS2V5PEk+LCBJPiAvKiogVE9ETzogQW55IHByb2JsZW1zIGNhdXNlZCBieSB1c2luZyBhbiBhcnJheSB3aGVuIGl0IHNob3VsZCBiZSBhbiBvYmplY3Q/ICovKTtcbiAgICBjb25zdCBtb3VudGVkQ2hpbGRyZW4gPSB1c2VSZWY8KG51bGwgfCBJKVtdPihbXSk7XG4gICAgY29uc3QgbW91bnRPcmRlciA9IHVzZVJlZjxNYXA8SywgbnVtYmVyPj4obmV3IE1hcCgpKTtcbiAgICBjb25zdCBpbmRpY2VzQnlFbGVtZW50ID0gdXNlUmVmPE1hcDxFdmVudFRhcmdldCwgSz4+KG5ldyBNYXAoKSk7XG4gICAgY29uc3QgZGVsZXRlZEluZGljZXMgPSB1c2VSZWY8U2V0PEs+PihuZXcgU2V0PEs+KCkpO1xuXG4gICAgLy8gVXNlZCB0byBrZWVwIHRyYWNrIG9mIGluZGljZXMgdGhhdCBoYXZlIFwib3Zlci1tb3VudGVkXCIgYW5kIGJ5IGhvdyBtdWNoLlxuICAgIC8vIFdlIG5lZWQgdGhpcyBzbyB0aGF0IHdlIGRvbid0IGVyYXNlIHNhdmVkIGluZm9ybWF0aW9uIHdoZW4gYSBjb21wb25lbnRcbiAgICAvLyBcIm92ZXJtb3VudHNcIiBvdmVyIGFub3RoZXIgd2hpY2ggdGhlbiwgY29ycmVjdGx5LCBzd2l0Y2hlcyAqaXRzZWxmKiB0byBzb21ldGhpbmcgZWxzZS5cbiAgICAvLyBJbiBnZW5lcmFsLCB0aGlzIHNob3VsZCBvbmx5IGhhcHBlbiB3aGVuIGNvbXBvbmVudHMgYXJlIHN3YXBwaW5nIGJldHdlZW4gaW5kaWNlcy5cbiAgICAvLyBCeSB0aGUgdGltZSB0aGV5J3JlIGRvbmUsIHRoaXMgbWFwIHNob3VsZCBiZSBhbGwgMHMgYWdhaW4sIGF0IHdoaWNoIHBvaW50XG4gICAgLy8gaXQncyBva2F5IHRvIGFjdHVhbGx5IHJ1biB0aGUgdW5tb3VudCBjb2RlLlxuICAgIC8vIFxuICAgIC8vIFRPRE86IHRocm93IGEgY29uc29sZS5hc3NlcnQgc29tZXdoZXJlIHRvIG1ha2UgdXAgZm9yIHRoZSBsb3N0IFxuICAgIC8vIFwiYXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIG92ZXJ3cml0ZSB0aGlzIGNoaWxkJ3MgaW5kZXghXCIgYXNzZXJ0aW9uLlxuICAgIC8vIE5hbWVseSwgaXMgdGhpcyBtYXAgYWxsIDBzIHdoZW4gdGhlIHBhcmVudCBlbGVtZW50IHJlLXJlbmRlcnM/IFxuICAgIC8vIFByb2JhYmx5IG5vdCBiZWNhdXNlIG9mIHNldENoaWxkVXBkYXRlSW5kZXhcbiAgICBjb25zdCBvdmVybW91bnRDb3VudCA9IHVzZVJlZihuZXcgTWFwPEssIG51bWJlcj4oKSk7XG5cbiAgICBjb25zdCBnZXRNb3VudEluZGV4ID0gdXNlQ2FsbGJhY2soKGluZGV4OiBLKSA9PiB7IHJldHVybiBtb3VudE9yZGVyLmN1cnJlbnQuZ2V0KGluZGV4KSE7IH0sIFtdKTtcblxuICAgIGNvbnN0IHVzZU1hbmFnZWRDaGlsZDogVXNlZE1hbmFnZWRDaGlsZDxJPiA9IHVzZUNhbGxiYWNrKDxDaGlsZFR5cGUgZXh0ZW5kcyBFdmVudFRhcmdldD4oaW5mbzogSSkgPT4ge1xuICAgICAgICBjb25zdCB7IGdldEVsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wcyB9ID0gdXNlUmVmRWxlbWVudDxDaGlsZFR5cGU+KHsgb25FbGVtZW50Q2hhbmdlOiB1c2VDYWxsYmFjaygoZWxlbWVudDogQ2hpbGRUeXBlIHwgbnVsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpbmRpY2VzQnlFbGVtZW50LmN1cnJlbnQuc2V0KGVsZW1lbnQsIGluZm8uaW5kZXgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZWRJbmRpY2VzLmN1cnJlbnQuZGVsZXRlKGluZm8uaW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmIChtYW5hZ2VkQ2hpbGRyZW4uY3VycmVudFtpbmZvLmluZGV4IGFzIGtleW9mIE1hbmFnZWRDaGlsZHJlbjxJbmZvVG9LZXk8ST4sIEk+XSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3Zlcm1vdW50Q291bnQuY3VycmVudC5zZXQoaW5mby5pbmRleCwgKG92ZXJtb3VudENvdW50LmN1cnJlbnQuZ2V0KGluZm8uaW5kZXgpID8/IDApICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2V0Q2hpbGRVcGRhdGVJbmRleChjID0+ICsrYyk7XG4gICAgICAgICAgICAgICAgbWFuYWdlZENoaWxkcmVuLmN1cnJlbnRbaW5mby5pbmRleCBhcyBrZXlvZiBNYW5hZ2VkQ2hpbGRyZW48SW5mb1RvS2V5PEk+LCBJPl0gPSB7IC4uLmluZm8gfSBhcyBhbnk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXRDaGlsZFVwZGF0ZUluZGV4KGMgPT4gKytjKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChvdmVybW91bnRDb3VudC5jdXJyZW50LmdldChpbmZvLmluZGV4KSA/PyAwKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJtb3VudENvdW50LmN1cnJlbnQuc2V0KGluZm8uaW5kZXgsIChvdmVybW91bnRDb3VudC5jdXJyZW50LmdldChpbmZvLmluZGV4KSA/PyAwKSAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1hbmFnZWRDaGlsZHJlbi5jdXJyZW50W2luZm8uaW5kZXggYXMga2V5b2YgTWFuYWdlZENoaWxkcmVuPEluZm9Ub0tleTxJPiwgST5dO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlZEluZGljZXMuY3VycmVudC5hZGQoaW5mby5pbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5mby5pbmRleCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChtYW5hZ2VkQ2hpbGRyZW4uY3VycmVudC5sZW5ndGggJiYgKG1hbmFnZWRDaGlsZHJlbi5jdXJyZW50IGFzIElbXSlbKG1hbmFnZWRDaGlsZHJlbi5jdXJyZW50IGFzIElbXSkubGVuZ3RoIC0gMV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hbmFnZWRDaGlsZHJlbi5jdXJyZW50IGFzIElbXSkubGVuZ3RoIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzQnlFbGVtZW50LmN1cnJlbnQuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXSkgfSk7XG5cbiAgICAgICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZ2V0VG90YWxDaGlsZHJlbk1vdW50ZWQoKTtcbiAgICAgICAgICAgIG1vdW50T3JkZXIuY3VycmVudC5zZXQoaW5mby5pbmRleCwgaW5kZXgpO1xuICAgICAgICAgICAgbW91bnRlZENoaWxkcmVuLmN1cnJlbnRbaW5kZXhdID0gaW5mbztcbiAgICAgICAgICAgIHNldFRvdGFsQ2hpbGRyZW5Nb3VudGVkKHQgPT4gKyt0KTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW91bnRPcmRlci5jdXJyZW50LmRlbGV0ZShpbmZvLmluZGV4KTtcbiAgICAgICAgICAgICAgICBtb3VudGVkQ2hpbGRyZW4uY3VycmVudFtpbmRleF0gPSBudWxsO1xuICAgICAgICAgICAgICAgIHNldFRvdGFsQ2hpbGRyZW5Vbm91bnRlZCh0ID0+ICsrdCk7XG5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sIFtpbmZvLmluZGV4XSk7XG5cbiAgICAgICAgLy8gQW55IHRpbWUgb3VyIGNoaWxkIHByb3BzIGNoYW5nZSwgbWFrZSB0aGF0IGluZm9ybWF0aW9uIGF2YWlsYWJsZSBnZW5lcmFsbHkuXG4gICAgICAgIC8vICpEb24ndCByZS1yZW5kZXIqLCBvdGhlcndpc2Ugd2UnZCBiZSBzdHVjayBpbiBhblxuICAgICAgICAvLyBpbmZpbml0ZSBsb29wIGV2ZXJ5IHRpbWUgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIGlzIHBhc3NlZC5cbiAgICAgICAgLy8gSXQgY29tZXMgaW4gZnJvbSB0aGUgcHJvcHMgc28gdGhlIGNoaWxkIHdhcyBhbHJlYWR5IHVwZGF0ZWQgYnkgaXQgLS1cbiAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgcGFyZW50IHRvIHJlLXJlbmRlciBldmVyeSBzaW5nbGUgY2hpbGQgYW55IHRpbWVcbiAgICAgICAgLy8gXCJvbkNsaWNrXCIgdXBkYXRlcyBvciB3aGF0ZXZlci4gIFRoZSByZWxldmFudCBjaGlsZCBhbHJlYWR5IGtub3dzLFxuICAgICAgICAvLyBhbmQgdGhhdCdzIHdoYXQgbWF0dGVycy5cbiAgICAgICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChtYW5hZ2VkQ2hpbGRyZW4uY3VycmVudFtpbmZvLmluZGV4IGFzIGtleW9mIE1hbmFnZWRDaGlsZHJlbjxJbmZvVG9LZXk8ST4sIEk+XSAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgbWFuYWdlZENoaWxkcmVuLmN1cnJlbnRbaW5mby5pbmRleCBhcyBrZXlvZiBNYW5hZ2VkQ2hpbGRyZW48SW5mb1RvS2V5PEk+LCBJPl0gPSB7IC4uLmluZm8gfSBhcyBhbnk7XG4gICAgICAgIH0sIFsuLi5PYmplY3QuZW50cmllcyhpbmZvKS5mbGF0KCldKTtcblxuICAgICAgICByZXR1cm4geyBnZXRFbGVtZW50LCB1c2VNYW5hZ2VkQ2hpbGRQcm9wczogdXNlUmVmRWxlbWVudFByb3BzIH1cbiAgICB9LCBbXSk7XG5cblxuICAgIHJldHVybiB7XG4gICAgICAgIHVzZU1hbmFnZWRDaGlsZCxcbiAgICAgICAgY2hpbGRDb3VudDogY2hpbGRyZW5DdXJyZW50bHlNb3VudGVkLFxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IG1hbmFnZWRDaGlsZHJlbi5jdXJyZW50LFxuICAgICAgICBtb3VudGVkQ2hpbGRyZW46IG1vdW50ZWRDaGlsZHJlbi5jdXJyZW50LFxuICAgICAgICBpbmRpY2VzQnlFbGVtZW50OiBpbmRpY2VzQnlFbGVtZW50LmN1cnJlbnQsXG4gICAgICAgIHRvdGFsQ2hpbGRyZW5Nb3VudGVkLFxuICAgICAgICB0b3RhbENoaWxkcmVuVW5vdW50ZWQsXG4gICAgICAgIGdldE1vdW50SW5kZXgsXG4gICAgICAgIGRlbGV0ZWRJbmRpY2VzOiBkZWxldGVkSW5kaWNlcy5jdXJyZW50XG4gICAgfVxufVxuXG50eXBlIFVFID0gPEkgZXh0ZW5kcyBJbnB1dHM+KGVmZmVjdDogKHByZXY6IEksIGNoYW5nZXM6IEVmZmVjdENoYW5nZTxJLCBudW1iZXI+W10pID0+ICh2b2lkIHwgKCgpID0+IHZvaWQpKSwgaW5wdXRzOiBJKSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUNoaWxkRmxhZ1BhcmFtZXRlcnM8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgSSBleHRlbmRzIE1hbmFnZWRDaGlsZEluZm88VD4+IHtcblxuICAgIC8qKlxuICAgICAqIFdoaWNoIGNoaWxkIGluZGV4IHJlZmVycyB0byB0aGUgY3VycmVudGx5IFwiYWN0aXZlXCIgY2hpbGQuXG4gICAgICovXG4gICAgYWN0aXZhdGVkSW5kZXg6IFQgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gICAgbWFuYWdlZENoaWxkcmVuOiAobnVsbCB8IHVuZGVmaW5lZCB8IEkpW10gfCBSZWNvcmQ8c3RyaW5nLCBudWxsIHwgdW5kZWZpbmVkIHwgST47XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHByb3ZpZGVkLCBpZiB0aGUgZ2l2ZW4gYWN0aXZhdGVkSW5kZXggZG9lc24ndCBtYXAgb250byBhbnlcbiAgICAgKiBwcm92aWRlZCBjaGlsZCAoZWl0aGVyIGJlY2F1c2UgaXQncyB0b28gbGFyZ2Ugb3IgdGhhdCBjaGlsZFxuICAgICAqIGRvZXNuJ3QgZXhpc3QpLCB0aGUgY2xvc2VzdCBjaGlsZCB0byB0aGUgZ2l2ZW4gYWN0aXZhdGVkSW5kZXhcbiAgICAgKiB3aWxsIGhhdmUgaXRzIGZsYWcgc2V0IGluc3RlYWQuXG4gICAgICogXG4gICAgICogVXNlIHdpdGggY2F1dGlvbiwgYW5kIGNvbnNpZGVyIGhvdyBhIGNoaWxkIGhhdmluZyBpdHMgZmxhZyBzZXRcbiAgICAgKiB3aGlsZSB0aGUgcGFyZW50IHRoaW5rcyBpdCBzaG91bGRuJ3QgYmUgY291bGQgY2F1c2UgaXNzdWVzLlxuICAgICAqL1xuICAgIGNsb3Nlc3RGaXQ/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogV2lsbCBiZSBjYWxsZWQgb25jZSB3aGVuIGEgZ2l2ZW4gY2hpbGQgaGFzIGJlY29tZSB0aGUgXCJhY3RpdmVcIiBjaGlsZC5cbiAgICAgKiBHZW5lcmFsbHksIHRoaXMgd2lsbCBsb29rIGxpa2UgXG4gICAgICogYChpLCBzZXQpID0+IG1hbmFnZWRDaGlsZHJlbltpXS5zZXRBY3RpdmUoc2V0KWAgXG4gICAgICogb3Igc2ltaWxhci5cbiAgICAgKi9cbiAgICBzZXRDaGlsZEZsYWc6IChpbmRleDogVCwgc2V0OiBib29sZWFuKSA9PiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgb3Igbm90IGEgY2hpbGQgbmVlZHMgaXRzIGZsYWcgc2V0XG4gICAgICogYm90aCBpbiBnZW5lcmFsIGNhc2VzIGJ1dCBhbHNvIHdoZW4gYSBjaGlsZCB1bm1vdW50cyBhbmQgYSBuZXcgY2hpbGRcbiAgICAgKiBtb3VudHMgaW4gaXRzIHBsYWNlIHdpdGggdGhlIHNhbWUgaW5kZXguXG4gICAgICovXG4gICAgZ2V0Q2hpbGRGbGFnOiAoaW5kZXg6IFQpID0+IGJvb2xlYW4gfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIGNoaWxkIGZsYWcgc2V0dGluZyBoYXBwZW5zIGR1cmluZyBgdXNlTGF5b3V0RWZmZWN0YC4gIElmIHlvdVxuICAgICAqIHdvdWxkIHByZWZlciBpdCB0byBoYXBwZW4gZHVyaW5nIGB1c2VFZmZlY3RgLCBwYXNzIHRoYXQgaW1wbGVtZW50YXRpb24gaW5cbiAgICAgKiBoZXJlLlxuICAgICAqL1xuICAgIHVzZUVmZmVjdD86ICg8SSBleHRlbmRzIElucHV0cz4oZWZmZWN0OiAocHJldjogSSB8IHVuZGVmaW5lZCwgY2hhbmdlczogRWZmZWN0Q2hhbmdlPEksIG51bWJlcj5bXSkgPT4gKHZvaWQgfCAoKCkgPT4gdm9pZCkpLCBpbnB1dHM/OiBJKSA9PiB2b2lkIHwgVUUpO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgbGV0dGluZyBjaGlsZHJlbiBrbm93IHdoZW4gdGhleSBhcmUgb3IgYXJlIG5vdCB0aGVcbiAqIGN1cnJlbnQgc2VsZWN0ZWQvZXhwYW5kZWQvZm9jdXNlZC93aGF0ZXZlciBjaGlsZC5cbiAqIFxuICogQXV0b21hdGljYWxseSBoYW5kbGVzIHdoZW4gY2hpbGRyZW4gYXJlIG1vdW50ZWQgJiB1bm1vdW50ZWQgYW5kIHN1Y2guXG4gKiBcbiAqIFdoaWxlIGl0IHdpbGwgYmUgY2FsbGVkIG9uY2UgZm9yIGV2ZXJ5IGNoaWxkIG9uIG1vdW50LCBhZnRlciB0aGF0IHNldEZsYWcgXG4gKiBpcyBndWFyYW50ZWVkIHRvIG9ubHkgYmUgY2FsbGVkIG9uY2Ugb24gYWN0aXZhdGlvbiBhbmQgb25jZSBvbiBkZWFjdGl2YXRpb24sXG4gKiBzbyBpdCdzIGdlbmVyYWxseSBzYWZlIHRvIHB1dCBzaWRlIGVmZmVjdHMgaW5zaWRlIGlmIG5lY2Vzc2FyeS4gIFxuICogSXQncyBhbHNvIHNhZmUgdG8gbWFrZSBpdCBub24tc3RhYmxlLlxuICogXG4gKiBAcGFyYW0gYWN0aXZhdGVkSW5kZXggV2hhdCBpbmRleCB0aGUgY3VycmVudCBzZWxlY3RlZCAoZXRjLikgY2hpbGQgaXNcbiAqIEBwYXJhbSBsZW5ndGggSG93IG1hbnkgY2hpbGRyZW4gZXhpc3QgKGFzIG1hbmFnZWRDaGlsZHJlbi5sZW5ndGgpXG4gKiBAcGFyYW0gc2V0RmxhZyBBIGZ1bmN0aW9uIHRoYXQgcHJvYmFibHkgbG9va3MgbGlrZSAoaSwgZmxhZykgPT4gbWFuYWdlZENoaWxkcmVuW2ldLnNldEFjdGl2ZShmbGFnKVxuICogQHBhcmFtIHVzZUVmZmVjdCBXaGljaCB2ZXJzaW9uIG9mIHVzZUVmZmVjdCB0byB1c2UuIERlZmF1bHQgaXMgYHVzZUxheW91dEVmZmVjdGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDaGlsZEZsYWc8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgSSBleHRlbmRzIE1hbmFnZWRDaGlsZEluZm88VD4+KHsgYWN0aXZhdGVkSW5kZXgsIGNsb3Nlc3RGaXQsIG1hbmFnZWRDaGlsZHJlbiwgc2V0Q2hpbGRGbGFnLCBnZXRDaGlsZEZsYWcsIHVzZUVmZmVjdCB9OiBVc2VDaGlsZEZsYWdQYXJhbWV0ZXJzPFQsIEk+KSB7XG5cbiAgICB1c2VFZmZlY3QgPz89IHVzZUxheW91dEVmZmVjdDtcblxuICAgIGlmIChjbG9zZXN0Rml0KVxuICAgICAgICBjb25zb2xlLmFzc2VydCh0eXBlb2YgYWN0aXZhdGVkSW5kZXggPT0gXCJudW1iZXJcIiB8fCBhY3RpdmF0ZWRJbmRleCA9PSBudWxsKTtcblxuICAgIC8vIFdoZW5ldmVyIHdlIHJlLXJlbmRlciwgbWFrZSBzdXJlIHRoYXQgYW55IGNoaWxkcmVuIHRoYXQgaGF2ZSBtb3VudGVkXG4gICAgLy8gaGF2ZSB0aGVpciBmbGFncyBwcm9wZXJseSBzZXQuICBXZSBrbm93IGl0J3MgdW5zZXQgaWYgaXQgd2FzIG51bGwsXG4gICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSBqdXN0IHNldCBpdCB0byB0cnVlIG9yIGZhbHNlLlxuICAgIC8vXG4gICAgLy8gQW5kLCBJIG1lYW4sIGFzIGxvbmcgYXMgd2UncmUgYWxyZWFkeSBpdGVyYXRpbmcgdGhyb3VnaCBldmVyeSBjaGlsZFxuICAgIC8vIG9uIGV2ZXJ5IHJlbmRlciB0byBjaGVjayBmb3IgbmV3bHkgbW91bnRlZCBjaGlsZHJlbiwgbWlnaHQgYXMgd2VsbFxuICAgIC8vIGp1c3QgaGFuZGxlIGNoYW5nZWQgaW4gdGhlIGFjdGl2YXRlZEluZGV4IGhlcmUgdG9vLlxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG5cblxuICAgICAgICAvLyBUT0RPOiBXZSBoYXZlIGxpbWl0ZWQgaW5mb3JtYXRpb24gYWJvdXQgd2hlbiBhIGNoaWxkIG1vdW50cyBvciB1bm1vdW50c1xuICAgICAgICAvLyBhbmQgc28gd2UgZG9uJ3Qga25vdyB3aGVyZSB0byBsb29rIGZvciBhbnkgbnVsbCBlbnRyaWVzIHRoYXQgbmVlZCBjaGFuZ2luZy5cbiAgICAgICAgLy8gV2Uga25vdyB3aGVuIGFjdGl2YXRlZEluZGV4IGNoYW5nZXMgYW5kIHdoYXQgaXQgd2FzLCBidXQgbm90IG11Y2ggZWxzZS5cbiAgICAgICAgLy8gTG9vcGluZyBvdmVyIGV2ZXJ5IGNoaWxkICp3b3JrcyosIGFuZCBpdCdzIG5vdCBhbiBleHBlbnNpdmUgbG9vcCBieSBhbnkgbWVhbnMsXG4gICAgICAgIC8vIGJ1dCwgbGlrZSwgZXVnaC5cblxuXG4gICAgICAgIC8vIEFsc28sIGJlZm9yZSB3ZSBkbyBhbnl0aGluZywgc2VlIGlmIHdlIG5lZWQgdG8gXCJjb3JyZWN0XCIgYWN0aXZhdGVkSW5kZXguXG4gICAgICAgIC8vIEl0IGNvdWxkIGJlIHBvaW50aW5nIHRvIGEgY2hpbGQgdGhhdCBkb2Vzbid0IGV4aXN0LCBhbmQgaWYgY2xvc2VzdEZpdCBpcyBnaXZlbixcbiAgICAgICAgLy8gd2UgbmVlZCB0byBhZGp1c3QgYWN0aXZhdGVkSW5kZXggdG8gcG9pbnQgdG8gYSB2YWxpZCBjaGlsZC5cbiAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmF0ZWRJbmRleCA9PSBcIm51bWJlclwiICYmIEFycmF5LmlzQXJyYXkobWFuYWdlZENoaWxkcmVuKSAmJiBtYW5hZ2VkQ2hpbGRyZW5bYWN0aXZhdGVkSW5kZXhdID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIE9oIGRlYXIuIEFyZSB3ZSBhY3RpdmVseSBjb3JyZWN0aW5nIHRoaXM/XG4gICAgICAgICAgICBpZiAoY2xvc2VzdEZpdCkge1xuICAgICAgICAgICAgICAgIC8vIE9oIGRlYXIuXG4gICAgICAgICAgICAgICAgLy8gU2VhcmNoIHVwIGFuZCBkb3duIHRoZSBsaXN0IG9mIGNoaWxkcmVuIGZvciBhbnkgdGhhdCBhY3R1YWxseSBleGlzdC5cblxuICAgICAgICAgICAgICAgIGxldCBzZWFyY2hIaWdoID0gYWN0aXZhdGVkSW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIGxldCBzZWFyY2hMb3cgPSBhY3RpdmF0ZWRJbmRleCAtIDE7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoKHNlYXJjaExvdyA+PSAwICYmIG1hbmFnZWRDaGlsZHJlbltzZWFyY2hMb3ddID09IG51bGwpIHx8IChzZWFyY2hIaWdoIDwgbWFuYWdlZENoaWxkcmVuLmxlbmd0aCAmJiBtYW5hZ2VkQ2hpbGRyZW5bc2VhcmNoSGlnaF0gPT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgKytzZWFyY2hIaWdoO1xuICAgICAgICAgICAgICAgICAgICAtLXNlYXJjaExvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoTG93ID49IDAgJiYgbWFuYWdlZENoaWxkcmVuW3NlYXJjaExvd10gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAoYWN0aXZhdGVkSW5kZXggYXMgbnVtYmVyKSA9IHNlYXJjaExvdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VhcmNoSGlnaCA8IG1hbmFnZWRDaGlsZHJlbi5sZW5ndGggJiYgbWFuYWdlZENoaWxkcmVuW3NlYXJjaEhpZ2hdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgKGFjdGl2YXRlZEluZGV4IGFzIG51bWJlcikgPSBzZWFyY2hIaWdoO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE5vdyB0aGF0IHdlJ3ZlIGRvbmUgdGhhdCwgaWYgYW55IHZhbGlkIGNoaWxkcmVuIGV4aXN0LCB3ZSd2ZSByZXNldCBhY3RpdmF0ZWRJbmRleCB0byBwb2ludCB0byBpdCBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgIC8vIE5vdyB3ZSdsbCBmYWxsIHRocm91Z2ggdG8gdGhlIGZvciBsb29wIHNldCBhbmQgdW5zZXQgb3VyIGZsYWdzIGJhc2VkIG9uIHRoaXMgXCJjb3JyZWN0ZWRcIiB2YWx1ZS5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGNvcnJlY3QgaXQgb3Igc2F2ZSBpdCBhbnl3aGVyZSBiZWNhdXNlIHdlJ2QgdmVyeSBtdWNoIGxpa2UgdG8gcmV0dXJuIHRvIGl0XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGNoaWxkIHJlbW91bnRzIGl0c2VsZi5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hbmFnZWRDaGlsZHJlbikpe1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hbmFnZWRDaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkQmVTZXQgPSAoaSA9PSBhY3RpdmF0ZWRJbmRleCk7XG4gICAgICAgICAgICBpZiAoZ2V0Q2hpbGRGbGFnKGkgYXMgVCkgIT0gc2hvdWxkQmVTZXQpIHtcbiAgICAgICAgICAgICAgICBzZXRDaGlsZEZsYWcoaSBhcyBULCBzaG91bGRCZVNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMobWFuYWdlZENoaWxkcmVuKS5mb3JFYWNoKChbaSwgX2luZm9dKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkQmVTZXQgPSAoaSA9PSBhY3RpdmF0ZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKGdldENoaWxkRmxhZyhpIGFzIFQpICE9IHNob3VsZEJlU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldENoaWxkRmxhZyhpIGFzIFQsIHNob3VsZEJlU2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSk7XG5cbn1cblxuIiwiaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsLCB3aGVuIGNhbGxlZCwgZm9yY2UgdGhlIGNvbXBvbmVudFxuICogdGhhdCB1c2VzIHRoaXMgaG9vayB0byByZS1yZW5kZXIgaXRzZWxmLlxuICogXG4gKiBJdCdzIGEgYml0IHNtZWxseSwgc28gYmVzdCB0byB1c2Ugc3BhcmluZ2x5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9yY2VVcGRhdGUoKSB7XG4gICAgY29uc3QgWywgc2V0XSA9IHVzZVN0YXRlKDApO1xuICAgIHJldHVybiB1c2VSZWYoKCkgPT4gc2V0KGkgPT4gKytpKSkuY3VycmVudDtcbn0iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IE1hbmFnZWRDaGlsZEluZm8sIHVzZUNoaWxkRmxhZywgdXNlQ2hpbGRNYW5hZ2VyLCBVc2VDaGlsZE1hbmFnZXJSZXR1cm5UeXBlIH0gZnJvbSBcIi4vdXNlLWNoaWxkLW1hbmFnZXJcIjtcbmltcG9ydCB7IE1lcmdlZFByb3BzLCB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcHJvcHNcIjtcbmltcG9ydCB7IFVzZVJlZkVsZW1lbnRQcm9wc1JldHVyblR5cGUgfSBmcm9tIFwiLi91c2UtcmVmLWVsZW1lbnRcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xuXG5leHBvcnQgdHlwZSBPbWl0U3Ryb25nPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IFBpY2s8VCwgRXhjbHVkZTxrZXlvZiBULCBLPj47XG5cblxuXG4vKiogUmV0dXJuIHR5cGUgb2YgYHVzZVJvdmluZ1RhYkluZGV4YCAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VSb3ZpbmdUYWJJbmRleFJldHVyblR5cGU8SSBleHRlbmRzIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRJbmZvPiBleHRlbmRzIE9taXRTdHJvbmc8VXNlQ2hpbGRNYW5hZ2VyUmV0dXJuVHlwZTxJPiwgXCJ1c2VNYW5hZ2VkQ2hpbGRcIj4ge1xuICAgIHVzZVJvdmluZ1RhYkluZGV4Q2hpbGQ6IFVzZVJvdmluZ1RhYkluZGV4Q2hpbGQ8ST47XG4gICAgY2hpbGRDb3VudDogbnVtYmVyO1xuXG4gICAgLy8gRm9jdXNlcyB3aGF0ZXZlciBpcyB0aGUgY3VycmVudGx5IHRhYmJhYmxlIGVsZW1lbnRcbiAgICBmb2N1c0N1cnJlbnQ6IG51bGwgfCAoKCkgPT4gdm9pZCk7XG59XG5cbi8qKiBSZXR1cm4gdHlwZSBvZiBgdXNlUm92aW5nVGFiSW5kZXhDaGlsZGAgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUm92aW5nVGFiSW5kZXhDaGlsZFJldHVyblR5cGU8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4ge1xuICAgIHVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wczogVXNlUm92aW5nVGFiSW5kZXhDaGlsZFByb3BzPENoaWxkRWxlbWVudD47XG4gICAgdXNlUm92aW5nVGFiSW5kZXhTaWJsaW5nUHJvcHM6IFVzZVJvdmluZ1RhYkluZGV4U2libGluZ1Byb3BzPENoaWxkRWxlbWVudD47XG4gICAgdGFiYmFibGU6IGJvb2xlYW4gfCBudWxsO1xufVxuXG5cblxuLyoqIEFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIHBhcmVudCBgdXNlUm92aW5nVGFiSW5kZXhgICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJvdmluZ1RhYkluZGV4UGFyYW1ldGVycyB7XG5cbiAgICAvKipcbiAgICAgKiBgbnVsbGAgaXMgc3BlY2lhbC11c2Ugb25seSB0byBpbmRpY2F0ZSB0aGF0IHRoZSBlbnRpcmUgY29tcG9uZW50IGlzIGRpc2FibGVkIGFuZCBub3QgdGFiYmFibGUuXG4gICAgICovXG4gICAgdGFiYmFibGVJbmRleDogbnVtYmVyIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZW5ldmVyIHRoZSBjdXJyZW50bHkgdGFiYmFibGUgY2hpbGQgY2hhbmdlcywgYSBkZWNpc2lvbiBuZWVkcyB0byBiZSBtYWRlXG4gICAgICogYWJvdXQgd2hldGhlciB0aGUga2V5Ym9hcmQgZm9jdXMgc2hvdWxkIGZvbGxvdyB0aGF0IGNoYW5nZSBiZWNhdXNlIHRoZVxuICAgICAqIHVzZXIgcHJlc3NlZCBEb3duIGluIGEgdmVydGljYWwgbGlzdCwgb3IgYWx0ZXJuYXRpdmVseSBpZiBpdCB3YXMganVzdFxuICAgICAqIHNvbWV0aGluZyBjb21wbGV0ZWx5IHVucmVsYXRlZCBvbiB0aGUgb3RoZXIgc2lkZSBvZiB0aGUgcGFnZSB3aGVyZSB3ZSBXT1VMRE4nVFxuICAgICAqIHdhbnQgdG8geWFuayBrZXlib2FyZCBmb2N1cyBhbGwgdGhlIHdheSBiYWNrIHRoZXJlLlxuICAgICAqIFxuICAgICAqIEluIGdlbmVyYWwsIHRoaXMgc2hvdWxkIGp1c3QgYmUgaG9va2VkIHVwIHRvIGEgcGFyZW50J3MgXCJnZXRGb2N1c2VkSW5uZXJcIlxuICAgICAqIGZ1bmN0aW9uLCBzbyB0aGF0IHdlIG9ubHkgZm9jdXMgb24gY2hhbmdlIHdoZW4gdGhlIGNvbXBvbmVudCBhcyBhIHdob2xlXG4gICAgICogaGFzIGZvY3VzIHNvbWV3aGVyZSBpbnNpZGUsIGJ1dCB5b3UgY2FuIHdpZGVuL25hcnJvdyB0aGF0IGlmIG5lZWRlZC5cbiAgICAgKi9cbiAgICBzaG91bGRGb2N1c09uQ2hhbmdlKCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQYXJhbWV0ZXJzPEkgZXh0ZW5kcyBVc2VSb3ZpbmdUYWJJbmRleENoaWxkSW5mbz4gPSBPbWl0U3Ryb25nPEksIFwic2V0VGFiYmFibGVcIiB8IFwiZ2V0VGFiYmFibGVcIiB8IFwicmVyZW5kZXJBbmRGb2N1c1wiPjtcblxuLyoqIEFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIGNoaWxkICd1c2VSb3ZpbmdUYWJJbmRleENoaWxkYCAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VSb3ZpbmdUYWJJbmRleENoaWxkSW5mbyBleHRlbmRzIE1hbmFnZWRDaGlsZEluZm88bnVtYmVyPiB7XG4gICAgc2V0VGFiYmFibGUodGFiYmFibGU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGdldFRhYmJhYmxlKCk6IGJvb2xlYW4gfCBudWxsO1xuICAgIHJlcmVuZGVyQW5kRm9jdXMoKTogdm9pZDtcbn1cblxuXG5cbi8vZXhwb3J0IHR5cGUgVXNlUm92aW5nVGFiSW5kZXhDaGlsZFBhcmFtZXRlcnM8SSBleHRlbmRzIFJvdmluZ1RhYkluZGV4Q2hpbGRJbmZvPiA9IE9taXRTdHJvbmc8SSwgXCJzZXRUYWJiYWJsZVwiIHwgXCJnZXRUYWJiYWJsZVwiIHwgXCJyZXJlbmRlckFuZEZvY3VzXCI+O1xuXG4vKiogVHlwZSBvZiB0aGUgY2hpbGQncyBzdWItaG9vayAqL1xuZXhwb3J0IHR5cGUgVXNlUm92aW5nVGFiSW5kZXhDaGlsZDxJIGV4dGVuZHMgVXNlUm92aW5nVGFiSW5kZXhDaGlsZEluZm8+ID0gPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHByb3BzOiBJKSA9PiBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQ+O1xuXG5leHBvcnQgdHlwZSBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUHJvcHNQYXJhbWV0ZXJzPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2hpbGRFbGVtZW50PjtcbmV4cG9ydCB0eXBlIFVzZVJvdmluZ1RhYkluZGV4U2libGluZ1Byb3BzUGFyYW1ldGVyczxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD47XG5cbi8qKiBSZXR1cm4gdHlwZSBvZiB0aGUgY2hpbGQgYHVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wc2AgKi9cbmV4cG9ydCB0eXBlIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wc1JldHVyblR5cGU8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgUCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4+ID0gTWVyZ2VkUHJvcHM8Q2hpbGRFbGVtZW50LCBVc2VSZWZFbGVtZW50UHJvcHNSZXR1cm5UeXBlPENoaWxkRWxlbWVudCwgeyB0YWJJbmRleDogbnVtYmVyOyB9PiwgT21pdFN0cm9uZzxQLCBcInRhYkluZGV4XCI+PjtcbmV4cG9ydCB0eXBlIFVzZVJvdmluZ1RhYkluZGV4U2libGluZ1Byb3BzUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2hpbGRFbGVtZW50Pj4gPSBQOyAvL01lcmdlZFByb3BzPENoaWxkRWxlbWVudCwgeyB0YWJJbmRleDogbnVtYmVyOyB9LCBPbWl0U3Ryb25nPFAsIFwidGFiSW5kZXhcIj4+O1xuXG5leHBvcnQgdHlwZSBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUHJvcHM8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gPSA8UCBleHRlbmRzIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wc1BhcmFtZXRlcnM8Q2hpbGRFbGVtZW50Pj4ocHJvcHM6IFApID0+IFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wc1JldHVyblR5cGU8Q2hpbGRFbGVtZW50LCBQPlxuZXhwb3J0IHR5cGUgVXNlUm92aW5nVGFiSW5kZXhTaWJsaW5nUHJvcHM8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gPSA8UCBleHRlbmRzIFVzZVJvdmluZ1RhYkluZGV4U2libGluZ1Byb3BzUGFyYW1ldGVyczxDaGlsZEVsZW1lbnQ+Pihwcm9wczogUCkgPT4gVXNlUm92aW5nVGFiSW5kZXhTaWJsaW5nUHJvcHNSZXR1cm5UeXBlPENoaWxkRWxlbWVudCwgUD5cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgcm92aW5nIHRhYmluZGV4IHN5c3RlbSB3aGVyZSBvbmx5IG9uZSBcImZvY3VzYWJsZVwiXG4gKiBjb21wb25lbnQgaW4gYSBzZXQgaXMgYWJsZSB0byByZWNlaXZlIGEgdGFiIGZvY3VzLiAqV2hpY2gqXG4gKiBvZiB0aG9zZSBlbGVtZW50cyByZWNlaXZlcyBmb2N1cyBpcyBkZXRlcm1pbmVkIGJ5IHlvdSwgYnV0IGl0J3NcbiAqIHJlY29tbWVuZGVkIHRvIG9mZmxvYWQgdGhhdCBsb2dpYyB0aGVuIHRvIGFub3RoZXIgaG9vaywgbGlrZVxuICogYHVzZUxpbmVhck5hdmlnYXRpb25gLCB3aGljaCBsZXRzIHlvdSBjaGFuZ2UgdGhlIHRhYmJhYmxlXG4gKiBlbGVtZW50IHdpdGggdGhlIGFycm93IGtleXMsIGB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uYCwgd2hpY2hcbiAqIGxldHMgeW91IGNoYW5nZSB0aGUgdGFiYmFibGUgaW5kZXggd2l0aCB0eXBlYWhlYWQsIG9yXG4gKiBgdXNlTGlzdE5hdmlnYXRpb25gIGlmIHlvdSBqdXN0IHdhbnQgZXZlcnl0aGluZyBidW5kbGVkIHRvZ2V0aGVyLlxuICogXG4gKiBOb3RlIHRoYXQgdGhlIGNoaWxkIGhvb2sgcmV0dXJuZWQgYnkgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIHVzZWRcbiAqIGJ5IGV2ZXJ5IGNoaWxkIHRoYXQgdXNlcyB0aGlzIHJvdmluZyB0YWJpbmRleCBsb2dpYy4gIFRoZVxuICogcHJvcC1tb2RpZnlpbmcgaG9vayAqdGhhdCogaG9vayByZXR1cm5zIHNob3VsZCB0aGVuIGJlIHVzZWRcbiAqIG9uIHRoZSBjaGlsZCdzIGVsZW1lbnQsIGFzIHdlbGwgYXMgYW55IG90aGVyIGVsZW1lbnRzIHlvdSdkIGxpa2VcbiAqIHRvIGJlIGV4cGxpY2l0bHkgbWFkZSB1bnRhYmJhYmxlIHRvby5cbiAqIFxuICogYHNob3VsZEZvY3VzT25DaGFuZ2VgIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiBmb2N1cyBpcyBcbiAqIGNvbnRhaW5lZCB3aXRoaW4gd2hhdGV2ZXIgZWxlbWVudCBjb250YWlucyB0aGUgcm92aW5nIHRhYiBpbmRleC5cbiAqIEdlbmVyYWxseSBhcyBzaW1wbGUgYXMgdGhlIGZvbGxvd2luZzpcbiAqIGBgYFxuICogY29uc3QgW2ZvY3VzZWRJbm5lciwgc2V0Rm9jdXNlZElubmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqIGNvbnN0IHsgdXNlSGFzRm9jdXNQcm9wcyB9ID0gdXNlSGFzRm9jdXM8UGFyZW50RWxlbWVudD4oeyBzZXRGb2N1c2VkSW5uZXIgfSk7XG4gKiBjb25zdCBmb2N1c09uQ2hhbmdlID0gKGZvY3VzZWRJbm5lciAhPSBmYWxzZSk7XG4gKiBgYGBcbiAqIEl0J3Mgbm90IGluY2x1ZGVkIGhlcmUgYmVjYXVzZSBgdXNlUm92aW5nVGFiSW5kZXhgIGRvZXNuJ3Qga25vdyBcbiAqIGFueXRoaW5nIGFib3V0IHRoZSBjb250YWluZXIgZWxlbWVudCwgb25seSBjaGlsZHJlbiBlbGVtZW50cy5cbiAqIEFuZCBqdXN0IGFzIHdlbGwhIENoaWxkcmVuIHNob3VsZCBiZSBhbGxvd2VkIGF0IHRoZSByb290LCBcbiAqIHJlZ2FyZGxlc3Mgb2YgaWYgaXQncyB0aGUgd2hvbGUgYXBwIG9yIGp1c3QgYSBnaXZlbiBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3ZpbmdUYWJJbmRleDxJIGV4dGVuZHMgVXNlUm92aW5nVGFiSW5kZXhDaGlsZEluZm8+KHsgc2hvdWxkRm9jdXNPbkNoYW5nZTogZm9jLCB0YWJiYWJsZUluZGV4IH06IFVzZVJvdmluZ1RhYkluZGV4UGFyYW1ldGVycyk6IFVzZVJvdmluZ1RhYkluZGV4UmV0dXJuVHlwZTxJPiB7XG5cbiAgICBjb25zdCBnZXRTaG91bGRGb2N1c09uQ2hhbmdlID0gdXNlU3RhYmxlR2V0dGVyKGZvYyk7XG5cbiAgICBjb25zdCBnZXRUYWJiYWJsZUluZGV4ID0gdXNlU3RhYmxlR2V0dGVyKHRhYmJhYmxlSW5kZXgpO1xuXG4gICAgLy8gQ2FsbCB0aGUgaG9vayB0aGF0IGFsbG93cyB1cyB0byBjb2xsZWN0IGluZm9ybWF0aW9uIGZyb20gY2hpbGRyZW4gd2hvIHByb3ZpZGUgaXRcbiAgICBjb25zdCB7IG1hbmFnZWRDaGlsZHJlbiwgY2hpbGRDb3VudCwgdXNlTWFuYWdlZENoaWxkLCBpbmRpY2VzQnlFbGVtZW50LCAuLi5yZXN0IH0gPSB1c2VDaGlsZE1hbmFnZXI8ST4oKTtcblxuICAgIC8vIEFueSB0aW1lIHRoZSB0YWJiYWJsZSBpbmRleCBjaGFuZ2VzLFxuICAgIC8vIG5vdGlmeSB0aGUgcHJldmlvdXMgY2hpbGQgdGhhdCBpdCdzIG5vIGxvbmdlciB0YWJiYWJsZSxcbiAgICAvLyBhbmQgbm90aWZ5IHRoZSBuZXh0IGNoaWxkIHRoYXQgaXMgYWxsb3dlZCB0byBiZSB0YWJiZWQgdG8uXG4gICAgdXNlQ2hpbGRGbGFnKHtcbiAgICAgICAgYWN0aXZhdGVkSW5kZXg6IHRhYmJhYmxlSW5kZXgsXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbixcbiAgICAgICAgY2xvc2VzdEZpdDogdHJ1ZSxcbiAgICAgICAgc2V0Q2hpbGRGbGFnOiAoaW5kZXgsIHRhYmJhYmxlKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT0gbnVsbClcbiAgICAgICAgICAgICAgICAobWFuYWdlZENoaWxkcmVuW2luZGV4IGFzIGtleW9mIHR5cGVvZiBtYW5hZ2VkQ2hpbGRyZW5dIGFzIEkpPy5zZXRUYWJiYWJsZSh0YWJiYWJsZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldENoaWxkRmxhZzogKGluZGV4KSA9PiAobWFuYWdlZENoaWxkcmVuW2luZGV4XT8uZ2V0VGFiYmFibGUoKSA/PyBudWxsKVxuICAgIH0pO1xuXG4gICAgY29uc3QgdXNlUm92aW5nVGFiSW5kZXhDaGlsZCA9IHVzZUNhbGxiYWNrPFVzZVJvdmluZ1RhYkluZGV4Q2hpbGQ8ST4+KDxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PihpbmZvOiBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUGFyYW1ldGVyczxJPik6IFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRSZXR1cm5UeXBlPENoaWxkRWxlbWVudD4gPT4ge1xuXG4gICAgICAgIGNvbnN0IFtycmFmSW5kZXgsIHNldFJyYWZJbmRleF0gPSB1c2VTdGF0ZSgxKTtcbiAgICAgICAgY29uc3QgcmVyZW5kZXJBbmRGb2N1cyA9IHVzZUNhbGxiYWNrKCgpID0+IHsgc2V0UnJhZkluZGV4KGkgPT4gKytpKSB9LCBbXSk7XG4gICAgICAgIGNvbnN0IFt0YWJiYWJsZSwgc2V0VGFiYmFibGUsIGdldFRhYmJhYmxlXSA9IHVzZVN0YXRlPGJvb2xlYW4gfCBudWxsPihudWxsKTtcblxuXG4gICAgICAgIGNvbnN0IG5ld0luZm8gPSB7XG4gICAgICAgICAgICAuLi5pbmZvLFxuICAgICAgICAgICAgcmVyZW5kZXJBbmRGb2N1cyxcbiAgICAgICAgICAgIHNldFRhYmJhYmxlOiB1c2VDYWxsYmFjaygodGFiYmFibGU6IGJvb2xlYW4pID0+IHsgc2V0VGFiYmFibGUodGFiYmFibGUpOyB9LCBbXSksXG4gICAgICAgICAgICBnZXRUYWJiYWJsZVxuICAgICAgICB9IGFzIGFueSBhcyBJO1xuXG4gICAgICAgIGNvbnN0IHsgZ2V0RWxlbWVudCwgdXNlTWFuYWdlZENoaWxkUHJvcHMgfSA9IHVzZU1hbmFnZWRDaGlsZDxDaGlsZEVsZW1lbnQ+KG5ld0luZm8pO1xuXG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZ2V0RWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKHRhYmJhYmxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkRm9jdXNPbkNoYW5nZSA9IGdldFNob3VsZEZvY3VzT25DaGFuZ2UoKSgpO1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRGb2N1c09uQ2hhbmdlICYmIFwiZm9jdXNcIiBpbiAoZWxlbWVudCBhcyBFbGVtZW50IGFzIChFbGVtZW50ICYgSFRNTE9yU1ZHRWxlbWVudCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVsZW1lbnQgYXMgRWxlbWVudCBhcyAoRWxlbWVudCAmIEhUTUxPclNWR0VsZW1lbnQpKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgW3RhYmJhYmxlLCBycmFmSW5kZXhdKTtcblxuICAgICAgICBmdW5jdGlvbiB1c2VSb3ZpbmdUYWJJbmRleFNpYmxpbmdQcm9wczxQIGV4dGVuZHMgVXNlUm92aW5nVGFiSW5kZXhTaWJsaW5nUHJvcHNQYXJhbWV0ZXJzPGFueT4+KHsgdGFiSW5kZXgsIC4uLnByb3BzIH06IFApOiBVc2VSb3ZpbmdUYWJJbmRleFNpYmxpbmdQcm9wc1JldHVyblR5cGU8YW55LCBQPiB7XG5cbiAgICAgICAgICAgIGlmICh0YWJJbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhYmJhYmxlKVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleCA9IC0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHM8RWxlbWVudD4oKSh7IHRhYkluZGV4IH0sIHByb3BzKSBhcyBQO1xuICAgICAgICB9XG5cblxuICAgICAgICBmdW5jdGlvbiB1c2VSb3ZpbmdUYWJJbmRleENoaWxkUHJvcHM8UCBleHRlbmRzIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wc1BhcmFtZXRlcnM8Q2hpbGRFbGVtZW50Pj4oeyB0YWJJbmRleCwgLi4ucHJvcHMgfTogUCk6IFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wc1JldHVyblR5cGU8Q2hpbGRFbGVtZW50LCBQPiB7XG5cblxuICAgICAgICAgICAgaWYgKHRhYkluZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFiYmFibGUpXG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wczxDaGlsZEVsZW1lbnQ+KCkodXNlTWFuYWdlZENoaWxkUHJvcHMoeyB0YWJJbmRleCB9KSwgcHJvcHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wcyxcbiAgICAgICAgICAgIHVzZVJvdmluZ1RhYkluZGV4U2libGluZ1Byb3BzLFxuICAgICAgICAgICAgdGFiYmFibGVcbiAgICAgICAgfVxuICAgIH0sIFt1c2VNYW5hZ2VkQ2hpbGRdKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHVzZVJvdmluZ1RhYkluZGV4Q2hpbGQsXG4gICAgICAgIGNoaWxkQ291bnQsXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbixcbiAgICAgICAgaW5kaWNlc0J5RWxlbWVudCxcbiAgICAgICAgZm9jdXNDdXJyZW50OiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBpZiAobWFuYWdlZENoaWxkcmVuW2dldFRhYmJhYmxlSW5kZXgoKSA/PyAwXS5nZXRUYWJiYWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgbWFuYWdlZENoaWxkcmVuW2dldFRhYmJhYmxlSW5kZXgoKSA/PyAwXT8ucmVyZW5kZXJBbmRGb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIHdoYXRldmVyIHJlYXNvbiwgdGhlIHByZXZpb3VzbHkgdGFiYmFibGUgY2hpbGRcbiAgICAgICAgICAgICAgICAvLyBpcyBubyBsb25nZXIgdGFiYmFibGUgd2l0aG91dCB1cyBrbm93aW5nIGFib3V0IGl0LlxuICAgICAgICAgICAgICAgIC8vIE1heWJlIGl0IHVubW91bnRlZD9cbiAgICAgICAgICAgICAgICAvLyBFaXRoZXIgd2F5LCB0cnkgdG8gZmluZCB0aGUgbmV3bHktc2VsZWN0ZWQgY2hpbGQuXG5cbiAgICAgICAgICAgICAgICAvLyAoSSBkb24ndCB0aGluayB0aGlzIGNvZGUgcGF0aCBoYXMgZXZlciBiZWVuIHJ1bilcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1kZWJ1Z2dlciAqL1xuICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgIGxldCBpID0gZ2V0VGFiYmFibGVJbmRleCgpID8/IDA7XG4gICAgICAgICAgICAgICAgbGV0IGogPSBpICsgMTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC0taTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hbmFnZWRDaGlsZHJlbltnZXRUYWJiYWJsZUluZGV4KCkgPz8gMF0uZ2V0VGFiYmFibGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlZENoaWxkcmVuW2dldFRhYmJhYmxlSW5kZXgoKSA/PyAwXT8ucmVyZW5kZXJBbmRGb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbWFuYWdlZENoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICArK2o7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYW5hZ2VkQ2hpbGRyZW5bZ2V0VGFiYmFibGVJbmRleCgpID8/IDBdLmdldFRhYmJhYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZWRDaGlsZHJlbltnZXRUYWJiYWJsZUluZGV4KCkgPz8gMF0/LnJlcmVuZGVyQW5kRm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgW10pLFxuXG4gICAgICAgIC4uLnJlc3RcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyBVc2VDaGlsZE1hbmFnZXJSZXR1cm5UeXBlIH0gZnJvbSBcIi4vdXNlLWNoaWxkLW1hbmFnZXJcIjtcbmltcG9ydCB7IHVzZUxpbmVhck5hdmlnYXRpb24sIFVzZUxpbmVhck5hdmlnYXRpb25DaGlsZEluZm8sIHVzZVR5cGVhaGVhZE5hdmlnYXRpb24sIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZEluZm8sIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25QYXJhbWV0ZXJzIH0gZnJvbSBcIi4vdXNlLWtleWJvYXJkLW5hdmlnYXRpb25cIjtcbmltcG9ydCB7IE1lcmdlZFByb3BzLCB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcHJvcHNcIjtcbmltcG9ydCB7IHVzZUVuc3VyZVN0YWJpbGl0eSB9IGZyb20gXCIuL3VzZS1wYXNzaXZlLXN0YXRlXCI7XG5pbXBvcnQgeyB1c2VSb3ZpbmdUYWJJbmRleCwgVXNlUm92aW5nVGFiSW5kZXhDaGlsZEluZm8sIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wc1JldHVyblR5cGUsIFVzZVJvdmluZ1RhYkluZGV4UGFyYW1ldGVycywgVXNlUm92aW5nVGFiSW5kZXhTaWJsaW5nUHJvcHMgfSBmcm9tIFwiLi91c2Utcm92aW5nLXRhYmluZGV4XCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xuXG5cbmV4cG9ydCB0eXBlIE9taXRTdHJvbmc8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gUGljazxULCBFeGNsdWRlPGtleW9mIFQsIEs+PjtcblxuXG4vKipcbiAqIFxuICogVE9ETzogVGhpcyB0YWJsZSB3YXMgc2NyYXBwZWQgd2hlbiB0aGlzIHdhcyBjaGFuZ2VkIHRvIGp1c3QgYWNjZXB0IGEgY29sbGF0b3IgZGlyZWN0bHksXG4gKiBidXQgaXQncyBub3QgYmFkIGZvciBhIGNvbGxhdGlvbiBjcmFzaCBjb3Vyc2UgYW5kIEkgbWlnaHQgdXNlIGl0IGFnYWluLlxuICogRXZlbiBqdXN0IGFzIGEgXCJ0aGlzIGlzIHdoeSBpdCdzIGltcG9ydGFudCBhbmQgZ29vZCB0byB1c2UgdGhlc2UgdGhpbmdzXCIgdGhpbmcuXG4gKiBcbiAqIHxMYW5nLnxUYXJnZXR8VXNlciBpbnB1dHxgYmFzZWB8YGFjY2VudGB8YGNhc2VgfGB2YXJpYW50YHxcbiAqIHwtLS0tfC0tLS18LS0tLXwtLS0tfC0tLS18LS0tLXwtLS0tfFxuICogfEVOfEhpfEhpfOKchXzinIV84pyFfOKchXxcbiAqIHxFTnxIaXzvvKjvvYl84pyFfOKchXzinIV84p2MfFxuICogfEVOfEhpfGhpfOKchXzinIV84p2MfOKdjHxcbiAqIHxFTnxIaXxIw6984pyFfOKdjHzinYx84p2MfFxuICogfEVOfEhpfEJ5ZXzinYx84p2MfOKdjHzinYx8XG4gKiB8REF8w6V8YWF84pyFfOKchXzinIV84p2MfFxuICogfERBfMOlfEFBfOKchXzinIV84p2MfOKdjHxcbiAqIHxEQXzDpXxBYXzinIV84pyFfOKdjHzinYx8XG4gKiB8RU58w6V8YWF84p2MfOKdjHzinYx84p2MfFxuICogfERBfMOlfGFBfOKdjHzinYx84p2MfOKdjHxcbiAqIHxFTnzDpXxhfOKchXzinIV84p2MfOKdjHxcbiAqIHxEQXzDpXxhfOKchXzinIV84p2MfOKdjHxcbiAqIHxKUHzvqqp8552AfOKchXzinIV84pyFfOKchXxcbiAqIHxKUHzjgqt87722fOKchXzinIV84pyFfOKchXxcbiAqIHxKUHzjgqt844GLfOKchXzinIV84pyFfOKdjHxcbiAqIHxKUHzjgqt844O1fOKchXzinIV84pyFfOKdjHxcbiAqIHxKUHzjgqt844uVfOKchXzinIV84p2MfOKdjHxcbiAqIHxKUHzjgqt844KsfOKchXzinYx84p2MfOKdjHxcbiAqIHxKUHzjgqt85YqbfOKdjHzinYx84p2MfOKdjHxcbiAqIHxaSHzntIV857qifOKdjHzinYx84p2MfOKdjHxcbiAqIFxuICogXG4gKiAoTm90ZSB0byBzZWxmOiBBdCBzb21lIHBvaW50LCB0aGlzIGZpbGUgd2lsbCBwcm9iYWJseSBiZSBub3JtYWxpemVkXG4gKiBieSBzb21lYm9keSBhbmQg76qqIHdpbGwgdHVybiBiYWNrIGludG8g552ALilcbiAqIFxuICovXG5jb25zdCBfZHVtbXk6IGFueSA9IG51bGw7XG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBJIGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25DaGlsZEluZm8+IGV4dGVuZHMgT21pdFN0cm9uZzxVc2VDaGlsZE1hbmFnZXJSZXR1cm5UeXBlPEk+LCBcInVzZU1hbmFnZWRDaGlsZFwiPiB7XG5cbiAgICB1c2VMaXN0TmF2aWdhdGlvblByb3BzOiA8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT4+KHByb3BzOiBQKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxhbnk+O1xuXG4gICAgdXNlTGlzdE5hdmlnYXRpb25DaGlsZDogVXNlTGlzdE5hdmlnYXRpb25DaGlsZDxDaGlsZEVsZW1lbnQsIEk+O1xuXG4gICAgY3VycmVudFR5cGVhaGVhZDogc3RyaW5nIHwgbnVsbDtcblxuICAgIGludmFsaWRUeXBlYWhlYWQ6IGJvb2xlYW4gfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50bHkgdGFiYmFibGUgaW5kZXguXG4gICAgICovXG4gICAgdGFiYmFibGVJbmRleDogbnVtYmVyIHwgbnVsbDtcblxuICAgIC8vbWFuYWdlZENoaWxkcmVuOiBJW107XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgcHJvZ3JhbW1hdGljIGNvbnRyb2wgb2YgdGhlIGN1cnJlbnRseSB0YWJiYWJsZSBpbmRleC5cbiAgICAgKi9cbiAgICAvL3NldFRhYmJhYmxlSW5kZXg6IFN0YXRlVXBkYXRlcjxudW1iZXIgfCBudWxsPjtcblxuICAgIG5hdmlnYXRlVG9JbmRleDogKGluZGV4OiBudW1iZXIgfCBudWxsKSA9PiB2b2lkO1xuICAgIG5hdmlnYXRlVG9OZXh0OiAoKSA9PiB2b2lkO1xuICAgIG5hdmlnYXRlVG9QcmV2OiAoKSA9PiB2b2lkO1xuICAgIG5hdmlnYXRlVG9GaXJzdDogKCkgPT4gdm9pZDtcbiAgICBuYXZpZ2F0ZVRvTGFzdDogKCkgPT4gdm9pZDtcblxuICAgIGZvY3VzQ3VycmVudDogbnVsbCB8ICgoKSA9PiB2b2lkKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiB7XG4gICAgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzOiA8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4+KHsgdGFiSW5kZXgsIC4uLnByb3BzIH06IFApID0+IFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wc1JldHVyblR5cGU8Q2hpbGRFbGVtZW50LCBQPjtcbiAgICB1c2VMaXN0TmF2aWdhdGlvblNpYmxpbmdQcm9wczogVXNlUm92aW5nVGFiSW5kZXhTaWJsaW5nUHJvcHM8Q2hpbGRFbGVtZW50PjtcbiAgICB0YWJiYWJsZTogYm9vbGVhbiB8IG51bGw7XG59XG5cblxuLyoqIEFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIHBhcmVudCBgdXNlTGlzdE5hdmlnYXRpb25gICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3ROYXZpZ2F0aW9uUGFyYW1ldGVycyBleHRlbmRzIE9taXRTdHJvbmc8VXNlVHlwZWFoZWFkTmF2aWdhdGlvblBhcmFtZXRlcnMsIFwiZ2V0SW5kZXhcIiB8IFwic2V0SW5kZXhcIj4sIE9taXRTdHJvbmc8VXNlUm92aW5nVGFiSW5kZXhQYXJhbWV0ZXJzLCBcInRhYmJhYmxlSW5kZXhcIj4ge1xuXG4gICAgLyoqXG4gICAgICogTWFwcyB0byBJbnRsLkNvbGxhdG9yJ3MgaWdub3JlUHVuY3R1YXRpb24gcGFyYW1ldGVyLiAgV2hldGhlciBwdW5jdHVhdGlvbiAod2hpY2ggaXMgY29udGV4dCBhbmQgbG9jYWxlIGRlcGVuZGVudCkgc2hvdWxkIGJlIGlnbm9yZWQgd2hlbiBzZWFyY2hpbmcuXG4gICAgICogXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICAvL2lnbm9yZVB1bmN0dWF0aW9uPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEEgY29sbGF0b3IgdG8gdXNlIHdoZW4gY29tcGFyaW5nLiBJZiBub3QgcHJvdmlkZWQsIHNpbXBseSB1c2VzIGBsb2NhbGVDb21wYXJlYCBhZnRlciB0cmFuc2Zvcm1pbmcgZWFjaCB0byBsb3dlcmNhc2UsIHdoaWNoIHdpbGwsIGF0IGJlc3QsIHdvcmsgb2theSBpbiBFbmdsaXNoLlxuICAgICAqL1xuICAgIGNvbGxhdG9yPzogSW50bC5Db2xsYXRvcjtcblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHByZXNzaW5nIGRvd24gYXQgdGhlIGVuZCBmb2N1c2VzIHRoZSBmaXJzdCBlbGVtZW50LCBhbmQgdmljZS12ZXJzYS5cbiAgICAgKiBcbiAgICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWQgdG8gZGlzYWJsZSB0aGF0IGJlaGF2aW9yLlxuICAgICAqL1xuICAgIG5vV3JhcD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCBhbnkgdHlwZWQgY2hhcmFjdGVycyB3aWxsIGZvY3VzIHRoZSBuZXh0IGl0ZW0gdGhhdCBzdGFydHMgd2l0aCB0aGUgdHlwZWQgc3RyaW5nLlxuICAgICAqIFxuICAgICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZCB0byBkaXNhYmxlIHRoYXQgYmVoYXZpb3IuXG4gICAgICovXG4gICAgbm9UeXBlYWhlYWQ/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBhbmQgaW5kZXhEZW1hbmdsZXIgYXJlIHVzZWQgdG8gYWxsb3cgY2hpbGRyZW4gdG8gYmUgbmF2aWdhdGVkIGluIGFuIG9yZGVyXG4gICAgICogdGhhdCBkb2Vzbid0IG5lY2Vzc2FyaWx5IG1hdGNoIHRoZWlyIGNoaWxkIG9yZGVyLCBsaWtlIGlmIGEgbGlzdCBpcyBzb3J0ZWQuXG4gICAgICogXG4gICAgICogVXNlZCB0byB0dXJuIGFuIFwiYWJzb2x1dGVcIiBpbmRleCBpbnRvIGEgXCJzb3J0ZWQvZmlsdGVyZWQvbWFuZ2xlZFwiIG9uZS5cbiAgICAgKiBcbiAgICAgKiBGb3IgZXhhbXBsZSwgbmF2aWdhdGVUb0ZpcnN0IG1hbmdsZXMgMCBhbmQgbmF2aWdhdGVzIHRvIHRoYXQgcmVzdWx0aW5nIHJvdy5cbiAgICAgKiBAcGFyYW0gcmF3SW5kZXggXG4gICAgICovXG4gICAgaW5kZXhNYW5nbGVyPyhyYXdJbmRleDogbnVtYmVyKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB0dXJuIGEgXCJtYW5nbGVkXCIgaW5kZXggaW50byBpdCdzIFwidW5zb3J0ZWRcIiBvciBcInVubWFuZ2xlZFwiIGluZGV4LlxuICAgICAqIFxuICAgICAqIEZvciBleGFtcGxlLCB3aGVuIGluY3JlbWVudGluZyBvciBkZWNyZW1lbnRpbmcgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpbmRleCxcbiAgICAgKiBpdCBuZWVkcyB0byBiZSBkZW1hbmdsZWQgdG8gZG8gXCJub3JtYWxcIiBtYXRoIG9uIGl0LCBhbmQgdGhlbiByZS1tYW5nbGVkXG4gICAgICogdG8gdHVybiB0aGF0IGFic29sdXRlIHJvdyBpbmRleCBiYWNrIGludG8gYSBtYW5nbGVkIG9uZS5cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtZWRJbmRleCBcbiAgICAgKi9cbiAgICBpbmRleERlbWFuZ2xlcj8odHJhbnNmb3JtZWRJbmRleDogbnVtYmVyKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgd2hpY2ggYXJyb3cga2V5cyBhcmUgdXNlZCB0byBuYXZpZ2F0ZSB0aHJvdWdoIHRoZSBjb21wb25lbnQuXG4gICAgICogUmVsYXRpdmUgdG8gdGhlIHdyaXRpbmcgbW9kZSwgc28gaW4gRW5nbGlzaCwgXCJpbmxpbmVcIiBjb3JyZXNwb25kc1xuICAgICAqIHRvIHRoZSBsZWZ0ICYgcmlnaHQgYXJyb3cga2V5cywgYW5kIFwiYmxvY2tcIiB0byB0aGUgdXAgJiBkb3duIGFycm93IGtleXMuXG4gICAgICogXG4gICAgICogVXNlIFwiZWl0aGVyXCIgdG8gYWxsb3cgbmF2aWdhdGlvbiBpbiBlaXRoZXIgZGlyZWN0aW9uLlxuICAgICAqIFxuICAgICAqIFVzZSBcIm5vbmVcIiB0byBkaXNhbGxvdyBuYXZpZ2F0aW9uIHZpYSB0aGUgYXJyb3cga2V5cyAodHlwZWFoZWFkIGlzIHN0aWxsIGFsbG93ZWQpLlxuICAgICAqL1xuICAgIGtleU5hdmlnYXRpb24/OiBcImlubGluZVwiIHwgXCJibG9ja1wiIHwgXCJlaXRoZXJcIiB8IFwibm9uZVwiO1xuXG4gICAgaW5pdGlhbEluZGV4PzogbnVtYmVyIHwgbnVsbDtcbn1cbnR5cGUgT21pdDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+O1xuXG4vKiogQXJndW1lbnRzIHBhc3NlZCB0byB0aGUgY2hpbGQgJ3VzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRgICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRJbmZvIGV4dGVuZHMgVXNlUm92aW5nVGFiSW5kZXhDaGlsZEluZm8sIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZEluZm8sIFVzZUxpbmVhck5hdmlnYXRpb25DaGlsZEluZm8ge1xuICAgIC8qKlxuICAgICAqIElmIGEgY2hpbGQgaXMgaGlkZGVuLCB0aGVuIGl0IHdpbGwgYmUgc2tpcHBlZCBvdmVyXG4gICAgICogZHVyaW5nIGtleWJvYXJkIG5hdmlnYXRpb24sIGFuZCB0aGUgSFRNTCBgaGlkZGVuYFxuICAgICAqIGF0dHJpYnV0ZSB3aWxsIGJlIGFwcGxpZWQuXG4gICAgICovXG4gICAgaGlkZGVuPzogYm9vbGVhbjtcbn1cbmV4cG9ydCB0eXBlIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzPEkgZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkSW5mbz4gPSBPbWl0PEksIFwicmVyZW5kZXJBbmRGb2N1c1wiIHwgXCJzZXRUYWJiYWJsZVwiIHwgXCJnZXRUYWJiYWJsZVwiPjtcblxuLyoqIFR5cGUgb2YgdGhlIGNoaWxkJ3Mgc3ViLWhvb2sgKi9cbmV4cG9ydCB0eXBlIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQ8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgSSBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRJbmZvPiA9ICh7IHRleHQsIGluZGV4LCAuLi5pIH06IFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzPEk+KSA9PiBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQ+O1xuXG5cbi8qKiBSZXR1cm4gdHlwZSBvZiB0aGUgY2hpbGQgYHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wc2AgKi9cbmV4cG9ydCB0eXBlIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wc1JldHVyblR5cGU8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgUCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4+ID0gTWVyZ2VkUHJvcHM8Q2hpbGRFbGVtZW50LCBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUHJvcHNSZXR1cm5UeXBlPENoaWxkRWxlbWVudCwgeyBvbkNsaWNrOiAoKSA9PiB2b2lkOyB9PiwgUD47XG5cbmV4cG9ydCB0eXBlIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wczxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IDxQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2hpbGRFbGVtZW50Pj4ocDogUCkgPT4gVXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQsIFA+XG5cbmZ1bmN0aW9uIGlkZW50aXR5PFQ+KHQ6IFQpIHsgcmV0dXJuIHQ7IH1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHByb3BlciBrZXlib2FyZCBuYXZpZ2F0aW9uIGZvciBjb21wb25lbnRzIGxpa2UgbGlzdGJveGVzLCBidXR0b24gZ3JvdXBzLCBtZW51cywgZXRjLlxuICogXG4gKiBJbiB0aGUgZG9jdW1lbnQgb3JkZXIsIHRoZXJlIHdpbGwgYmUgb25seSBvbmUgXCJmb2N1c2VkXCIgb3IgXCJ0YWJiYWJsZVwiIGVsZW1lbnQsIG1ha2luZyBpdCBhY3QgbW9yZSBsaWtlIG9uZSBjb21wbGV0ZSB1bml0IGluIGNvbXBhcmlzb24gdG8gZXZlcnl0aGluZyBhcm91bmQgaXQuXG4gKiBOYXZpZ2F0aW5nIGZvcndhcmRzL2JhY2t3YXJkcyBjYW4gYmUgZG9uZSB3aXRoIHRoZSBhcnJvdyBrZXlzLCBIb21lL0VuZCBrZXlzLCBvciBhbnkgYW55IHRleHQgZm9yIHR5cGVhaGVhZCB0byBmb2N1cyB0aGUgbmV4dCBpdGVtIHRoYXQgbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxpc3ROYXZpZ2F0aW9uPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEkgZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkSW5mbz4oeyBpbml0aWFsSW5kZXgsIHNob3VsZEZvY3VzT25DaGFuZ2UsIGNvbGxhdG9yLCBrZXlOYXZpZ2F0aW9uLCBpbmRleE1hbmdsZXIsIGluZGV4RGVtYW5nbGVyIH06IFVzZUxpc3ROYXZpZ2F0aW9uUGFyYW1ldGVycyk6IFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQsIEk+IHtcblxuICAgIGluZGV4TWFuZ2xlciA/Pz0gaWRlbnRpdHk7XG4gICAgaW5kZXhEZW1hbmdsZXIgPz89IGlkZW50aXR5O1xuICAgIGtleU5hdmlnYXRpb24gPz89IFwiZWl0aGVyXCI7XG5cbiAgICB1c2VFbnN1cmVTdGFiaWxpdHkoXCJ1c2VMaXN0TmF2aWdhdGlvblwiLCBpbmRleE1hbmdsZXIsIGluZGV4RGVtYW5nbGVyKTtcblxuICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhyZWUgdGhpbmdzIHJlbGF0ZWQgdG8gdGhlIGN1cnJlbnRseSB0YWJiYWJsZSBlbGVtZW50J3MgaW5kZXg6XG4gICAgLy8gV2hhdCBpdCBpcywgYW5kIHdoZXRoZXIsIHdoZW4gd2UgcmVuZGVyIHRoaXMgY29tcG9uZW50IGFuZCBpdCdzIGNoYW5nZWQsIHRvIGFsc28gZm9jdXMgdGhlIGVsZW1lbnQgdGhhdCB3YXMgbWFkZSB0YWJiYWJsZS5cbiAgICBjb25zdCBbdGFiYmFibGVJbmRleCwgc2V0VGFiYmFibGVJbmRleCwgZ2V0VGFiYmFibGVJbmRleF0gPSB1c2VTdGF0ZTxudW1iZXIgfCBudWxsPihpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBpbml0aWFsSW5kZXgpO1xuICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkcmVuLCBpbmRpY2VzQnlFbGVtZW50LCB1c2VSb3ZpbmdUYWJJbmRleENoaWxkLCBmb2N1c0N1cnJlbnQsIC4uLnJlc3QgfSA9IHVzZVJvdmluZ1RhYkluZGV4PEk+KHsgc2hvdWxkRm9jdXNPbkNoYW5nZSwgdGFiYmFibGVJbmRleCB9KVxuXG4gICAgLypjb25zdCBuYXZpZ2F0ZVRvSW5kZXggPSB1c2VDYWxsYmFjaygoaTogbnVtYmVyIHwgbnVsbCkgPT4geyBzZXRUYWJiYWJsZUluZGV4KGkpOyB9LCBbXSk7XG4gICAgY29uc3QgbmF2aWdhdGVUb0ZpcnN0ID0gdXNlQ2FsbGJhY2soKCkgPT4geyB0cnlOYXZpZ2F0ZVRvSW5kZXgobWFuYWdlZENoaWxkcmVuLCkgc2V0VGFiYmFibGVJbmRleChpbmRleE1hbmdsZXIhKDApKTsgfSwgW10pO1xuICAgIGNvbnN0IG5hdmlnYXRlVG9MYXN0ID0gdXNlQ2FsbGJhY2soKCkgPT4geyBzZXRUYWJiYWJsZUluZGV4KGluZGV4TWFuZ2xlciEobWFuYWdlZENoaWxkcmVuLmxlbmd0aCAtIDEpKTsgfSwgW10pO1xuICAgIGNvbnN0IG5hdmlnYXRlVG9QcmV2ID0gdXNlQ2FsbGJhY2soKCkgPT4geyBzZXRUYWJiYWJsZUluZGV4KGkgPT4gaW5kZXhNYW5nbGVyIShpbmRleERlbWFuZ2xlciEoaSA/PyAwKSAtIDEpKSB9LCBbaW5kZXhEZW1hbmdsZXIsIGluZGV4TWFuZ2xlcl0pO1xuICAgIGNvbnN0IG5hdmlnYXRlVG9OZXh0ID0gdXNlQ2FsbGJhY2soKCkgPT4geyBzZXRUYWJiYWJsZUluZGV4KGkgPT4gaW5kZXhNYW5nbGVyIShpbmRleERlbWFuZ2xlciEoaSA/PyAwKSArIDEpKSB9LCBbaW5kZXhEZW1hbmdsZXIsIGluZGV4TWFuZ2xlcl0pO1xuKi9cbiAgICBjb25zdCBuYXZpZ2F0ZVRvSW5kZXggPSB1c2VDYWxsYmFjaygoaTogbnVtYmVyIHwgbnVsbCkgPT4ge1xuICAgICAgICBzZXRUYWJiYWJsZUluZGV4KGkgPT0gbnVsbCA/IG51bGwgOiB0cnlOYXZpZ2F0ZVRvSW5kZXgobWFuYWdlZENoaWxkcmVuLCAwLCBpLCAxLCBpbmRleE1hbmdsZXIgPz8gaWRlbnRpdHksIGluZGV4RGVtYW5nbGVyID8/IGlkZW50aXR5KSk7XG4gICAgfSwgW10pXG4gICAgY29uc3QgbmF2aWdhdGVUb0ZpcnN0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBzZXRUYWJiYWJsZUluZGV4KHRyeU5hdmlnYXRlVG9JbmRleChtYW5hZ2VkQ2hpbGRyZW4sIDAsIDAsIDEsIGluZGV4TWFuZ2xlciA/PyBpZGVudGl0eSwgaW5kZXhEZW1hbmdsZXIgPz8gaWRlbnRpdHkpKTtcbiAgICB9LCBbXSlcbiAgICBjb25zdCBuYXZpZ2F0ZVRvTGFzdCA9IHVzZUNhbGxiYWNrKCgpID0+IHsgc2V0VGFiYmFibGVJbmRleCh0cnlOYXZpZ2F0ZVRvSW5kZXgobWFuYWdlZENoaWxkcmVuLCBtYW5hZ2VkQ2hpbGRyZW4ubGVuZ3RoLCBtYW5hZ2VkQ2hpbGRyZW4ubGVuZ3RoLCAtMSwgaW5kZXhNYW5nbGVyID8/IGlkZW50aXR5LCBpbmRleERlbWFuZ2xlciA/PyBpZGVudGl0eSkpOyB9LCBbXSlcbiAgICBjb25zdCBuYXZpZ2F0ZVRvUHJldiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgc2V0VGFiYmFibGVJbmRleChjID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0cnlOYXZpZ2F0ZVRvSW5kZXgobWFuYWdlZENoaWxkcmVuLCBjID8/IDAsIChjID8/IDApIC0gMSwgLTEsIGluZGV4TWFuZ2xlciA/PyBpZGVudGl0eSwgaW5kZXhEZW1hbmdsZXIgPz8gaWRlbnRpdHkpXG4gICAgICAgIH0pXG4gICAgfSwgW10pXG4gICAgY29uc3QgbmF2aWdhdGVUb05leHQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHNldFRhYmJhYmxlSW5kZXgoYyA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdHJ5TmF2aWdhdGVUb0luZGV4KG1hbmFnZWRDaGlsZHJlbiwgYyA/PyAwLCAoYyA/PyAwKSArIDEsIDEsIGluZGV4TWFuZ2xlciA/PyBpZGVudGl0eSwgaW5kZXhEZW1hbmdsZXIgPz8gaWRlbnRpdHkpO1xuICAgICAgICB9KVxuICAgIH0sIFtdKVxuXG4gICAgY29uc3Qgc2V0SW5kZXggPSB1c2VDYWxsYmFjaygoaW5kZXg6IChudW1iZXIgfCBudWxsKSB8ICgocHJldjogbnVtYmVyIHwgbnVsbCkgPT4gKG51bWJlciB8IG51bGwpKSkgPT4ge1xuICAgICAgICBzZXRUYWJiYWJsZUluZGV4KGluZGV4KTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgeyBjdXJyZW50VHlwZWFoZWFkLCBpbnZhbGlkVHlwZWFoZWFkLCB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGQsIHVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wcyB9ID0gdXNlVHlwZWFoZWFkTmF2aWdhdGlvbjxhbnksIEk+KHsgY29sbGF0b3IsIGdldEluZGV4OiBnZXRUYWJiYWJsZUluZGV4LCBzZXRJbmRleCwgdHlwZWFoZWFkVGltZW91dDogMTAwMCB9KTtcbiAgICBjb25zdCB7IHVzZUxpbmVhck5hdmlnYXRpb25Qcm9wcyB9ID0gdXNlTGluZWFyTmF2aWdhdGlvbjxhbnk+KHsgbmF2aWdhdGlvbkRpcmVjdGlvbjoga2V5TmF2aWdhdGlvbiwgaW5kZXg6IGdldFRhYmJhYmxlSW5kZXgoKSA/PyAwLCBtYW5hZ2VkQ2hpbGRyZW4sIG5hdmlnYXRlVG9QcmV2LCBuYXZpZ2F0ZVRvTmV4dCwgbmF2aWdhdGVUb0ZpcnN0LCBuYXZpZ2F0ZVRvTGFzdCB9KTtcblxuICAgIGNvbnN0IHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHMgPSB1c2VDYWxsYmFjayg8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4+KHByb3BzOiBQKSA9PiB7XG4gICAgICAgIHJldHVybiB1c2VMaW5lYXJOYXZpZ2F0aW9uUHJvcHModXNlVHlwZWFoZWFkTmF2aWdhdGlvblByb3BzKHByb3BzKSk7XG4gICAgfSwgW3VzZUxpbmVhck5hdmlnYXRpb25Qcm9wcywgdXNlVHlwZWFoZWFkTmF2aWdhdGlvblByb3BzXSk7XG5cbiAgICBjb25zdCB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkOiBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkPENoaWxkRWxlbWVudCwgST4gPSB1c2VDYWxsYmFjaygoaW5mbzogVXNlTGlzdE5hdmlnYXRpb25DaGlsZFBhcmFtZXRlcnM8ST4pOiBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUmV0dXJuVHlwZTxDaGlsZEVsZW1lbnQ+ID0+IHtcblxuICAgICAgICBjb25zdCBfdjogdm9pZCA9IHVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZChpbmZvIGFzIEkpO1xuICAgICAgICAvL2NvbnN0IHsgdXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkUHJvcHMgfSA9IHVzZUxpbmVhck5hdmlnYXRpb25DaGlsZChpbmZvIGFzIEkpO1xuXG4gICAgICAgIGNvbnN0IHsgdXNlUm92aW5nVGFiSW5kZXhDaGlsZFByb3BzLCB1c2VSb3ZpbmdUYWJJbmRleFNpYmxpbmdQcm9wcywgdGFiYmFibGUgfSA9IHVzZVJvdmluZ1RhYkluZGV4Q2hpbGQ8Q2hpbGRFbGVtZW50PihpbmZvIGFzIEkpO1xuXG4gICAgICAgIGNvbnN0IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wczogVXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzPENoaWxkRWxlbWVudD4gPSBmdW5jdGlvbiA8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4+KHsgLi4ucHJvcHMgfTogUCkge1xuXG4gICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHM8Q2hpbGRFbGVtZW50PigpKHVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wcygoKHsgb25DbGljazogcm92ZVRvU2VsZiwgaGlkZGVuOiBpbmZvLmhpZGRlbiB9KSkpLCBwcm9wcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb3ZlVG9TZWxmID0gdXNlQ2FsbGJhY2soKCkgPT4geyBuYXZpZ2F0ZVRvSW5kZXgoaW5mby5pbmRleCk7IH0sIFtdKVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHMsXG4gICAgICAgICAgICB1c2VMaXN0TmF2aWdhdGlvblNpYmxpbmdQcm9wczogdXNlUm92aW5nVGFiSW5kZXhTaWJsaW5nUHJvcHMsXG4gICAgICAgICAgICB0YWJiYWJsZVxuICAgICAgICB9XG4gICAgfSwgW3VzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZCwgdXNlUm92aW5nVGFiSW5kZXhDaGlsZCwgbmF2aWdhdGVUb0luZGV4XSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkLFxuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvblByb3BzLFxuXG4gICAgICAgIGN1cnJlbnRUeXBlYWhlYWQsXG4gICAgICAgIGludmFsaWRUeXBlYWhlYWQsXG5cbiAgICAgICAgdGFiYmFibGVJbmRleCxcblxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW4sXG4gICAgICAgIGluZGljZXNCeUVsZW1lbnQsXG5cbiAgICAgICAgbmF2aWdhdGVUb0luZGV4LFxuICAgICAgICBuYXZpZ2F0ZVRvTmV4dCxcbiAgICAgICAgbmF2aWdhdGVUb1ByZXYsXG4gICAgICAgIG5hdmlnYXRlVG9GaXJzdCxcbiAgICAgICAgbmF2aWdhdGVUb0xhc3QsXG5cbiAgICAgICAgZm9jdXNDdXJyZW50LFxuXG4gICAgICAgIC4uLnJlc3RcbiAgICB9XG59XG5cblxuXG5cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiB0cnlOYXZpZ2F0ZVRvSW5kZXg8SSBleHRlbmRzIHsgaGlkZGVuPzogYm9vbGVhbiB9PihtYW5hZ2VkQ2VsbHM6IChJIHwgbnVsbCB8IHVuZGVmaW5lZClbXSwgaW5pdGlhbDogbnVtYmVyLCB0YXJnZXQ6IG51bWJlciwgc2VhcmNoRGlyZWN0aW9uOiAxIHwgLTEsIGluZGV4TWFuZ2xlcjogKG46IG51bWJlcikgPT4gbnVtYmVyLCBpbmRleERlbWFuZ2xlcjogKG46IG51bWJlcikgPT4gbnVtYmVyKSB7XG4gICAgZnVuY3Rpb24gaGVscGVyKCkge1xuICAgICAgICBpZiAoc2VhcmNoRGlyZWN0aW9uID09PSAtMSkge1xuICAgICAgICAgICAgd2hpbGUgKHRhcmdldCA+PSAwICYmIChtYW5hZ2VkQ2VsbHNbdGFyZ2V0XSA9PSBudWxsIHx8ICEhbWFuYWdlZENlbGxzW3RhcmdldF0/LmhpZGRlbikpXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gaW5kZXhNYW5nbGVyKGluZGV4RGVtYW5nbGVyKHRhcmdldCkgLSAxKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldCA8IDAgPyBpbml0aWFsIDogdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlYXJjaERpcmVjdGlvbiA9PT0gMSkge1xuICAgICAgICAgICAgd2hpbGUgKHRhcmdldCA8IG1hbmFnZWRDZWxscy5sZW5ndGggJiYgbWFuYWdlZENlbGxzW3RhcmdldF0gPT0gbnVsbCB8fCAhIW1hbmFnZWRDZWxsc1t0YXJnZXRdPy5oaWRkZW4pXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gaW5kZXhNYW5nbGVyKGluZGV4RGVtYW5nbGVyKHRhcmdldCkgKyAxKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldCA+PSBtYW5hZ2VkQ2VsbHMubGVuZ3RoID8gaW5pdGlhbCA6IHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbml0aWFsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoaGVscGVyKCkpXG59XG5cbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IHVzZUNoaWxkRmxhZywgdXNlQ2hpbGRNYW5hZ2VyIH0gZnJvbSBcIi4vdXNlLWNoaWxkLW1hbmFnZXJcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCIuL3VzZS1lZmZlY3RcIjtcbmltcG9ydCB7IHVzZUZvcmNlVXBkYXRlIH0gZnJvbSBcIi4vdXNlLWZvcmNlLXVwZGF0ZVwiO1xuaW1wb3J0IHsgdXNlTGluZWFyTmF2aWdhdGlvbiwgdXNlVHlwZWFoZWFkTmF2aWdhdGlvbiB9IGZyb20gXCIuL3VzZS1rZXlib2FyZC1uYXZpZ2F0aW9uXCI7XG5pbXBvcnQgeyB0cnlOYXZpZ2F0ZVRvSW5kZXggfSBmcm9tIFwiLi91c2UtbGlzdC1uYXZpZ2F0aW9uXCI7XG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcHJvcHNcIjtcbmltcG9ydCB7IFVzZVJlZkVsZW1lbnRQcm9wc1JldHVyblR5cGUgfSBmcm9tIFwiLi91c2UtcmVmLWVsZW1lbnRcIjtcbmltcG9ydCB7IHVzZVJvdmluZ1RhYkluZGV4LCBVc2VSb3ZpbmdUYWJJbmRleENoaWxkSW5mbywgVXNlUm92aW5nVGFiSW5kZXhDaGlsZFBhcmFtZXRlcnMgfSBmcm9tIFwiLi91c2Utcm92aW5nLXRhYmluZGV4XCI7XG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCIuL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xuXG5leHBvcnQgdHlwZSBPbWl0U3Ryb25nPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IFBpY2s8VCwgRXhjbHVkZTxrZXlvZiBULCBLPj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlR3JpZE5hdmlnYXRpb25Sb3dJbmZvIGV4dGVuZHMgVXNlUm92aW5nVGFiSW5kZXhDaGlsZEluZm8ge1xuICAgIHNldElzVGFiYmFibGVSb3codGFiYmFibGU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGdldElzVGFiYmFibGVSb3coKTogYm9vbGVhbiB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBJZiBhIGdyaWQgcm93IGlzIGhpZGRlbiwgaXQgd2lsbCBiZSBza2lwcGVkIG92ZXJcbiAgICAgKiBkdXJpbmcga2V5Ym9hcmQgbmF2aWdhdGlvbiwgYW5kIHRoZSBIVE1MIGBoaWRkZW5gXG4gICAgICogYXR0cmlidXRlIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKi9cbiAgICBoaWRkZW4/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBVc2VHcmlkTmF2aWdhdGlvblJvd1BhcmFtZXRlcnM8SSBleHRlbmRzIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRJbmZvPiA9IE9taXQ8VXNlUm92aW5nVGFiSW5kZXhDaGlsZFBhcmFtZXRlcnM8SSAmIHsgaGlkZGVuPzogYm9vbGVhbiB9PiwgXCJzZXRJc1RhYmJhYmxlUm93XCIgfCBcImdldElzVGFiYmFibGVSb3dcIj47IC8vSTtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VHcmlkTmF2aWdhdGlvbkNlbGxJbmZvIGV4dGVuZHMgVXNlUm92aW5nVGFiSW5kZXhDaGlsZEluZm8geyBoaWRkZW4/OiBib29sZWFuOyB9XG5leHBvcnQgdHlwZSBVc2VHcmlkTmF2aWdhdGlvbkNlbGxQYXJhbWV0ZXJzPElDIGV4dGVuZHMgVXNlR3JpZE5hdmlnYXRpb25DZWxsSW5mbz4gPSBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUGFyYW1ldGVyczxJQz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlR3JpZE5hdmlnYXRpb25Sb3dSZXR1cm5UeXBlPFIgZXh0ZW5kcyBFbGVtZW50LCBDIGV4dGVuZHMgRWxlbWVudCwgX0lSIGV4dGVuZHMgVXNlR3JpZE5hdmlnYXRpb25Sb3dJbmZvLCBJQyBleHRlbmRzIFVzZUdyaWROYXZpZ2F0aW9uQ2VsbEluZm8+IHtcbiAgICB1c2VHcmlkTmF2aWdhdGlvblJvd1Byb3BzOiA8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPFI+Pihwcm9wczogUCkgPT4gVXNlUmVmRWxlbWVudFByb3BzUmV0dXJuVHlwZTxSLCBVc2VSZWZFbGVtZW50UHJvcHNSZXR1cm5UeXBlPFIsIGguSlNYLkhUTUxBdHRyaWJ1dGVzPFI+Pj47XG4gICAgdXNlR3JpZE5hdmlnYXRpb25DZWxsOiBVc2VHcmlkTmF2aWdhdGlvbkNlbGw8QywgSUM+O1xuICAgIGNlbGxDb3VudDogbnVtYmVyO1xuICAgIGlzVGFiYmFibGVSb3c6IGJvb2xlYW4gfCBudWxsO1xuICAgIGN1cnJlbnRDb2x1bW46IG51bWJlciB8IG51bGw7XG4gICAgbWFuYWdlZENlbGxzOiBJQ1tdO1xufVxuXG5leHBvcnQgdHlwZSBVc2VHcmlkTmF2aWdhdGlvblJvdzxSIGV4dGVuZHMgRWxlbWVudCwgQyBleHRlbmRzIEVsZW1lbnQsIElSIGV4dGVuZHMgVXNlR3JpZE5hdmlnYXRpb25Sb3dJbmZvLCBJQyBleHRlbmRzIFVzZUdyaWROYXZpZ2F0aW9uQ2VsbEluZm8+ID0gKHsgaW5kZXgsIC4uLmluZm8gfTogVXNlR3JpZE5hdmlnYXRpb25Sb3dQYXJhbWV0ZXJzPElSPikgPT4gVXNlR3JpZE5hdmlnYXRpb25Sb3dSZXR1cm5UeXBlPFIsIEMsIElSLCBJQz5cblxuZXhwb3J0IHR5cGUgVXNlR3JpZE5hdmlnYXRpb25DZWxsPEMgZXh0ZW5kcyBFbGVtZW50LCBJQyBleHRlbmRzIFVzZUdyaWROYXZpZ2F0aW9uQ2VsbEluZm8+ID0gKHBhcmFtczogVXNlR3JpZE5hdmlnYXRpb25DZWxsUGFyYW1ldGVyczxJQz4pID0+IHtcbiAgICB1c2VHcmlkTmF2aWdhdGlvbkNlbGxQcm9wczogPFAgZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxDPj4ocHJvcHM6IFApID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEM+O1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eTxUPih0OiBUKSB7IHJldHVybiB0OyB9XG5cblxuZXhwb3J0IGludGVyZmFjZSBVc2VHcmlkTmF2aWdhdGlvblBhcmFtZXRlcnMge1xuICAgIHNob3VsZEZvY3VzT25DaGFuZ2UoKTogYm9vbGVhbixcbiAgICBpbmRleE1hbmdsZXI/KHVubWFuZ2xlZDogbnVtYmVyKTogbnVtYmVyLFxuICAgIGluZGV4RGVtYW5nbGVyPyhtYW5nbGVkOiBudW1iZXIpOiBudW1iZXJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUdyaWROYXZpZ2F0aW9uPFIgZXh0ZW5kcyBFbGVtZW50LCBDIGV4dGVuZHMgRWxlbWVudCwgSVIgZXh0ZW5kcyBVc2VHcmlkTmF2aWdhdGlvblJvd0luZm8sIElDIGV4dGVuZHMgVXNlR3JpZE5hdmlnYXRpb25DZWxsSW5mbz4oeyBzaG91bGRGb2N1c09uQ2hhbmdlLCBpbmRleE1hbmdsZXIsIGluZGV4RGVtYW5nbGVyIH06IFVzZUdyaWROYXZpZ2F0aW9uUGFyYW1ldGVycykge1xuXG4gICAgaW5kZXhNYW5nbGVyID8/PSBpZGVudGl0eTtcbiAgICBpbmRleERlbWFuZ2xlciA/Pz0gaWRlbnRpdHk7XG5cbiAgICBjb25zdCBnZXRGb2N1c0NlbGxPblJvd0NoYW5nZSA9IHVzZVN0YWJsZUNhbGxiYWNrKHNob3VsZEZvY3VzT25DaGFuZ2UpO1xuXG4gICAgLy8gS2VlcCB0cmFjayBvZiBvdXIgY3VycmVudGx5IHRhYmJhYmxlIHJvdyBhbmQgY29sdW1uLlxuICAgIC8vIFRoZXNlIGFyZSBtYW5nbGVkLCBhbmQgc28gcmVsYXRpdmUgdG8gdGhlIERPTSBvcmRlciwgbm90IGNvbXBvbmVudCBvcmRlci5cbiAgICAvLyBBbnkgb3BlcmF0aW9ucyBkb25lIG9uIHRoZXNlIG51bWJlcnMgbmVlZCB0byBiZSBkZW1hbmdsZWQgZmlyc3QsXG4gICAgLy8gb3RoZXJ3aXNlIHRoZXknbGwgYmUgaW5jb3JyZWN0LlxuICAgIGNvbnN0IFtjdXJyZW50Um93LCBzZXRDdXJyZW50Um93MiwgZ2V0Q3VycmVudFJvd10gPSB1c2VTdGF0ZTxudW1iZXIgfCBudWxsPigwKTtcbiAgICBjb25zdCBbY3VycmVudENvbHVtbiwgc2V0Q3VycmVudENvbHVtbjIsIGdldEN1cnJlbnRDb2x1bW5dID0gdXNlU3RhdGUoMCk7XG5cbiAgICAvLyBGdW5jdGlvbnMgdXNlZCBmb3IgbmF2aWdhdGluZyB0byBkaWZmZXJlbnQgcm93cy5cbiAgICAvLyBFYWNoIHJvdyBoYXMgaXRzIG93biB1c2VSb3ZpbmdUYWJJbmRleCAtLSBpZiBpdCdzIG5vdCB0aGUgXG4gICAgLy8gY3VycmVudCByb3csIHRoZW4gYWxsIG9mIGl0cyBjaGlsZHJlbiBhcmUgbm9uLXRhYmJhYmxlLlxuICAgIC8vIE90aGVyd2lzZSwgaXQgaXMgdGFiYmFibGUsIHdpdGggdGhlIHRhYmJhYmxlIGNlbGwgYmVpbmcgY3VycmVudENvbHVtbi5cbiAgICAvLyBUaGlzIGhhcHBlbnMgYXV0b21hdGljYWxseSB3aGVuIHRoZXNlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkLlxuICAgIGNvbnN0IG5hdmlnYXRlVG9GaXJzdFJvdyA9IHVzZUNhbGxiYWNrKCgpID0+IHsgc2V0Q3VycmVudFJvdzIoYyA9PiB0cnlOYXZpZ2F0ZVRvSW5kZXgobWFuYWdlZFJvd3MsIGMgPz8gMCwgMCwgMSwgaW5kZXhNYW5nbGVyISwgaW5kZXhEZW1hbmdsZXIhKSk7IH0sIFtpbmRleE1hbmdsZXIsIGluZGV4RGVtYW5nbGVyXSlcbiAgICBjb25zdCBuYXZpZ2F0ZVRvTGFzdFJvdyA9IHVzZUNhbGxiYWNrKCgpID0+IHsgc2V0Q3VycmVudFJvdzIoYyA9PiB0cnlOYXZpZ2F0ZVRvSW5kZXgobWFuYWdlZFJvd3MsIGMgPz8gMCwgbWFuYWdlZFJvd3MubGVuZ3RoIC0gMSwgLTEsIGluZGV4TWFuZ2xlciEsIGluZGV4RGVtYW5nbGVyISkpOyB9LCBbaW5kZXhNYW5nbGVyLCBpbmRleERlbWFuZ2xlcl0pXG4gICAgY29uc3QgbmF2aWdhdGVUb1ByZXZSb3cgPSB1c2VDYWxsYmFjaygoKSA9PiB7IHNldEN1cnJlbnRSb3cyKGMgPT4geyByZXR1cm4gdHJ5TmF2aWdhdGVUb0luZGV4KG1hbmFnZWRSb3dzLCBjID8/IDAsIGluZGV4TWFuZ2xlciEoTWF0aC5tYXgoMCwgaW5kZXhEZW1hbmdsZXIhKGMgPz8gMCkgLSAxKSksIC0xLCBpbmRleE1hbmdsZXIhLCBpbmRleERlbWFuZ2xlciEpOyB9KTsgfSwgW2luZGV4TWFuZ2xlciwgaW5kZXhEZW1hbmdsZXJdKVxuICAgIGNvbnN0IG5hdmlnYXRlVG9OZXh0Um93ID0gdXNlQ2FsbGJhY2soKCkgPT4geyBzZXRDdXJyZW50Um93MihjID0+IHsgcmV0dXJuIHRyeU5hdmlnYXRlVG9JbmRleChtYW5hZ2VkUm93cywgYyA/PyAwLCBpbmRleE1hbmdsZXIhKE1hdGgubWluKChtYW5hZ2VkUm93cy5sZW5ndGggLSAxKSwgaW5kZXhEZW1hbmdsZXIhKGMgPz8gMCkgKyAxKSksIDEsIGluZGV4TWFuZ2xlciEsIGluZGV4RGVtYW5nbGVyISk7IH0pOyB9LCBbaW5kZXhNYW5nbGVyLCBpbmRleERlbWFuZ2xlcl0pO1xuXG4gICAgLy8gVHJhY2sgY2hpbGQgcm93cyBhbmQgbWFuYWdlIGtleWJvYXJkIG5hdmlnYXRpb24gYW1vbmcgdGhlbS5cbiAgICBjb25zdCB7IGNoaWxkQ291bnQsIG1hbmFnZWRDaGlsZHJlbjogbWFuYWdlZFJvd3MsIHVzZU1hbmFnZWRDaGlsZDogdXNlTWFuYWdlZFJvdyB9ID0gdXNlQ2hpbGRNYW5hZ2VyPElSPigpO1xuICAgIGNvbnN0IHsgdXNlTGluZWFyTmF2aWdhdGlvblByb3BzOiB1c2VMaW5lYXJOYXZpZ2F0aW9uUm93UHJvcHMgfSA9IHVzZUxpbmVhck5hdmlnYXRpb248YW55Pih7XG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogbWFuYWdlZFJvd3MsXG4gICAgICAgIGluZGV4OiBpbmRleE1hbmdsZXIoZ2V0Q3VycmVudFJvdygpID8/IDApLFxuICAgICAgICBuYXZpZ2F0ZVRvRmlyc3Q6IG5hdmlnYXRlVG9GaXJzdFJvdyxcbiAgICAgICAgbmF2aWdhdGVUb0xhc3Q6IG5hdmlnYXRlVG9MYXN0Um93LFxuICAgICAgICBuYXZpZ2F0ZVRvTmV4dDogbmF2aWdhdGVUb05leHRSb3csXG4gICAgICAgIG5hdmlnYXRlVG9QcmV2OiBuYXZpZ2F0ZVRvUHJldlJvdyxcbiAgICAgICAgbmF2aWdhdGlvbkRpcmVjdGlvbjogXCJibG9ja1wiXG4gICAgfSlcblxuICAgIC8vIEFjdHVhbGx5IGhhbmRsZSBub3RpZnlpbmcgdGhlIHJlbGV2YW50IHJvd3Mgd2hlbiB0aGV5XG4gICAgLy8gY2hhbmdlIGZyb20gdW50YWJiYWJsZSB0byB0YWJiYWJsZSBvciB2aWNlLXZlcnNhLlxuICAgIHVzZUNoaWxkRmxhZyh7XG4gICAgICAgIGFjdGl2YXRlZEluZGV4OiBjdXJyZW50Um93LFxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IG1hbmFnZWRSb3dzLFxuICAgICAgICBzZXRDaGlsZEZsYWc6IChpbmRleCwgdGFiYmFibGUpID0+IHsgbWFuYWdlZFJvd3NbaW5kZXhdPy5zZXRJc1RhYmJhYmxlUm93KHRhYmJhYmxlKSB9LFxuICAgICAgICBnZXRDaGlsZEZsYWc6IChpbmRleCkgPT4gKG1hbmFnZWRSb3dzW2luZGV4XT8uZ2V0SXNUYWJiYWJsZVJvdygpID8/IG51bGwpLFxuICAgICAgICB1c2VFZmZlY3Q6IHVzZUVmZmVjdFxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9uYWwsIGJ1dCBwcm92aWRlcyB0eXBlYWhlYWQgZm9yIGVhY2ggY29sdW1uIGluIHRoZSB0YWJsZS5cbiAgICAgKi9cbiAgICBjb25zdCB1c2VHcmlkTmF2aWdhdGlvbkNvbHVtbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW50VHlwZWFoZWFkLCBpbnZhbGlkVHlwZWFoZWFkLCB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGQgfSA9IHVzZVR5cGVhaGVhZE5hdmlnYXRpb24oeyBnZXRJbmRleDogZ2V0Q3VycmVudFJvdywgc2V0SW5kZXg6IHNldEN1cnJlbnRSb3cyIH0pO1xuXG4gICAgICAgIGNvbnN0IHVzZUdyaWROYXZpZ2F0aW9uQ29sdW1uQ2hpbGQgPSB1c2VDYWxsYmFjaygoeyBpbmRleDogcm93SW5kZXgsIHRleHQsIGhpZGRlbiB9OiB7IGluZGV4OiBudW1iZXIsIHRleHQ6IHN0cmluZywgaGlkZGVuPzogYm9vbGVhbiB9KSA9PiB7XG4gICAgICAgICAgICB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGQoeyBpbmRleDogcm93SW5kZXgsIHRleHQ6IGhpZGRlbiA/IG51bGwgOiB0ZXh0IH0pO1xuICAgICAgICB9LCBbdXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkXSk7XG5cbiAgICAgICAgcmV0dXJuIHsgdXNlR3JpZE5hdmlnYXRpb25Db2x1bW5DaGlsZCwgY3VycmVudFR5cGVhaGVhZCwgaW52YWxpZFR5cGVhaGVhZCB9O1xuICAgIH0sIFtdKVxuXG4gICAgLy8gTGFzdCB0aGluZyBiZWZvcmUgd2UgcmV0dXJuIC0tIGhlcmUncyB0aGUgaG9vayBmb3IgaW5kaXZpZHVhbCByb3dzIGFuZCB0aGVpciBjZWxscy5cbiAgICBjb25zdCB1c2VHcmlkTmF2aWdhdGlvblJvdzogVXNlR3JpZE5hdmlnYXRpb25Sb3c8UiwgQywgSVIsIElDPiA9IHVzZUNhbGxiYWNrKCh7IGluZGV4OiByb3dJbmRleCwgaGlkZGVuLCAuLi5pbmZvIH06IFVzZUdyaWROYXZpZ2F0aW9uUm93UGFyYW1ldGVyczxJUj4pOiBVc2VHcmlkTmF2aWdhdGlvblJvd1JldHVyblR5cGU8UiwgQywgSVIsIElDPiA9PiB7XG5cbiAgICAgICAgLy8gV2hlbiB3ZSBjaGFuZ2UgdGhlIGN1cnJlbnQgY29sdW1uLCB3ZSBzZW5kIHRoYXQgaW5mb3JtYXRpb25cbiAgICAgICAgLy8gdG8gdGhlIHBhcmVudCB2aWEgc2V0U3RhdGUsIGJ1dCB0aGF0IGRvZXNuJ3QgZG8gYW55dGhpbmdcbiAgICAgICAgLy8gZm9yIHVzLiAgVGhlIHBhcmVudCBkb2Vzbid0IGV2ZXIgbWFuYWdlIHJvd3MnIGNlbGxzIGZvciB0aGVtLlxuICAgICAgICAvLyBcbiAgICAgICAgLy8gU28gdG8gZ2V0IHVzIHRvIGFsc28gdXBkYXRlIGFsb25nc2lkZSB0aGUgcGFyZW50LFxuICAgICAgICAvLyB3ZSBqdXN0IHVzZSBmb3JjZVVwZGF0ZS5cbiAgICAgICAgLy8gV2UgY291bGQgYWxzbyBrZWVwIGEgY29weSBvZiwgbGlrZSwgXCJ3aGF0IHRoaXMgcm93IHRoaW5rc1xuICAgICAgICAvLyB0aGUgY3VycmVudCBjb2x1bW4gaXNcIiB0aGF0ICpzaG91bGQqIGFsd2F5cyBiZSBrZXB0IGluLVxuICAgICAgICAvLyBzeW5jIHdpdGggXCJnZXRDdXJyZW50Q29sdW1uKClcIiBhcyBhIHN0YXRlIHZhcmlhYmxlLFxuICAgICAgICAvLyBidXQgaXQgKmp1c3QqIGJlaW5nIHVzZWQgZm9yIHRoYXQgaXMgYXJndWFibHkgKm1vcmUqIGNvbmZ1c2luZy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQmFzaWNhbGx5LCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBjb2x1bW5cbiAgICAgICAgLy8gXCJiZWxvbmdzXCIgdG8gKmJvdGgqIHRoaXMgcm93IGFuZCB0aGUgcGFyZW50LCBjb25jZXB0dWFsbHksXG4gICAgICAgIC8vIGJ1dCBmb3IgY2xlYW5saW5lc3MnIHNha2UsIGp1c3Qgb25lIG9mIHRoZW0gZ2V0cyBpdCxcbiAgICAgICAgLy8gYW5kIHRoZSBvdGhlciBpcyBtYW51YWxseSB1cGRhdGVkIHdoZW5ldmVyIGl0IGNoYW5nZXMuXG4gICAgICAgIGNvbnN0IGZvcmNlVXBkYXRlID0gdXNlRm9yY2VVcGRhdGUoKTtcblxuXG4gICAgICAgIC8vIFwiU2hvcnRjdXRcIiBmb3IgYW55IGdpdmVuIHJvdyB0byBrbm93IHRoYXQgaXQgc2hvdWxkIG9yIHNob3VsZCBub3RcbiAgICAgICAgLy8gY29uc2lkZXIgb25lIG9mIGl0cyBjZWxscyB0YWJiYWJsZS4gIEFsc28gdXNlZCB0byBkZXRlcm1pbmVcbiAgICAgICAgLy8gaWYgYSBjaGFuZ2UgdG8gdGhlIGN1cnJlbnQgc2VsZWN0ZWQgY2VsbCBzaG91bGQgYWxzb1xuICAgICAgICAvLyB0cmlnZ2VyIGZvY3VzaW5nIHRoYXQgY2VsbC5cbiAgICAgICAgY29uc3QgW2lzVGFiYmFibGVSb3csIHNldElzVGFiYmFibGVSb3csIGdldElzVGFiYmFibGVSb3ddID0gdXNlU3RhdGU8Ym9vbGVhbiB8IG51bGw+KG51bGwpO1xuXG4gICAgICAgIC8vIElmIHdlJ3JlIG5vdCB0aGUgdGFiYmFibGUgcm93LCB0aGVuIGZvciB0aGUgcHVycG9zZXMgb2YgdGFiSW5kZXhcbiAgICAgICAgLy8gY2FsY3VsYXRpb25zLCB3ZSBkb24ndCBoYXZlIGEgdGFiYmFibGUgY2hpbGQgY2VsbC5cbiAgICAgICAgY29uc3QgY3VycmVudENvbHVtbiA9IGlzVGFiYmFibGVSb3cgPyBnZXRDdXJyZW50Q29sdW1uKCkgOiBudWxsO1xuXG4gICAgICAgIC8vIFRyYWNrIGNoaWxkIGNlbGxzIGFuZCBtYW5hZ2Uga2V5Ym9hcmQgbmF2aWdhdGlvbiBhbW9uZyB0aGVtLlxuICAgICAgICBjb25zdCB7IG1hbmFnZWRDaGlsZHJlbjogbWFuYWdlZENlbGxzLCB1c2VSb3ZpbmdUYWJJbmRleENoaWxkOiB1c2VSb3ZpbmdUYWJJbmRleENlbGwsIGNoaWxkQ291bnQ6IGNlbGxDb3VudCB9ID0gdXNlUm92aW5nVGFiSW5kZXg8SUM+KHtcbiAgICAgICAgICAgIHNob3VsZEZvY3VzT25DaGFuZ2U6IHVzZUNhbGxiYWNrKCgpID0+IHsgcmV0dXJuICEhZ2V0Rm9jdXNDZWxsT25Sb3dDaGFuZ2UoKSAmJiAhIWdldElzVGFiYmFibGVSb3coKSB9LCBbXSksXG4gICAgICAgICAgICB0YWJiYWJsZUluZGV4OiBjdXJyZW50Q29sdW1uXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE1vcmUgbmF2aWdhdGlvbiBzdHVmZlxuICAgICAgICBjb25zdCBuYXZpZ2F0ZVRvRmlyc3RDb2x1bW4gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBzZXRDdXJyZW50Q29sdW1uMih0cnlOYXZpZ2F0ZVRvSW5kZXgobWFuYWdlZENlbGxzLCAwLCAwLCAxLCBpZGVudGl0eSwgaWRlbnRpdHkpKTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0sIFtdKVxuICAgICAgICBjb25zdCBuYXZpZ2F0ZVRvTGFzdENvbHVtbiA9IHVzZUNhbGxiYWNrKCgpID0+IHsgc2V0Q3VycmVudENvbHVtbjIodHJ5TmF2aWdhdGVUb0luZGV4KG1hbmFnZWRDZWxscywgbWFuYWdlZENlbGxzLmxlbmd0aCwgbWFuYWdlZENlbGxzLmxlbmd0aCwgLTEsIGlkZW50aXR5LCBpZGVudGl0eSkpOyBmb3JjZVVwZGF0ZSgpOyB9LCBbXSlcbiAgICAgICAgY29uc3QgbmF2aWdhdGVUb1ByZXZDb2x1bW4gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBzZXRDdXJyZW50Q29sdW1uMihjID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ5TmF2aWdhdGVUb0luZGV4KG1hbmFnZWRDZWxscywgYywgYyAtIDEsIC0xLCBpZGVudGl0eSwgaWRlbnRpdHkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSwgW10pXG4gICAgICAgIGNvbnN0IG5hdmlnYXRlVG9OZXh0Q29sdW1uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgc2V0Q3VycmVudENvbHVtbjIoYyA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyeU5hdmlnYXRlVG9JbmRleChtYW5hZ2VkQ2VsbHMsIGMsIGMgKyAxLCAxLCBpZGVudGl0eSwgaWRlbnRpdHkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0sIFtdKVxuXG4gICAgICAgIGNvbnN0IHsgdXNlTGluZWFyTmF2aWdhdGlvblByb3BzOiB1c2VMaW5lYXJOYXZpZ2F0aW9uQ2VsbFByb3BzIH0gPSB1c2VMaW5lYXJOYXZpZ2F0aW9uPFI+KHtcbiAgICAgICAgICAgIG1hbmFnZWRDaGlsZHJlbjogbWFuYWdlZENlbGxzLFxuICAgICAgICAgICAgbmF2aWdhdGlvbkRpcmVjdGlvbjogXCJpbmxpbmVcIixcbiAgICAgICAgICAgIGluZGV4OiBjdXJyZW50Q29sdW1uID8/IDAsXG4gICAgICAgICAgICBkaXNhYmxlSG9tZUVuZEtleXM6IHRydWUsXG4gICAgICAgICAgICBuYXZpZ2F0ZVRvRmlyc3Q6IG5hdmlnYXRlVG9GaXJzdENvbHVtbixcbiAgICAgICAgICAgIG5hdmlnYXRlVG9MYXN0OiBuYXZpZ2F0ZVRvTGFzdENvbHVtbixcbiAgICAgICAgICAgIG5hdmlnYXRlVG9QcmV2OiBuYXZpZ2F0ZVRvUHJldkNvbHVtbixcbiAgICAgICAgICAgIG5hdmlnYXRlVG9OZXh0OiBuYXZpZ2F0ZVRvTmV4dENvbHVtblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBOb3RpZnkgdGhlIHJlbGV2YW50IGNoaWxkIGNlbGxzIHdoZW4gdGhleSBzaG91bGQvc2hvdWxkIG5vdCBiZSB0YWJiYWJsZVxuICAgICAgICB1c2VDaGlsZEZsYWcoe1xuICAgICAgICAgICAgYWN0aXZhdGVkSW5kZXg6IGN1cnJlbnRDb2x1bW4sXG4gICAgICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IG1hbmFnZWRDZWxscyxcbiAgICAgICAgICAgIHNldENoaWxkRmxhZzogKGNlbGxJbmRleCwgY2VsbElzVGFiYmFibGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2VsbEluZGV4ICE9IG51bGwgJiYgbWFuYWdlZENlbGxzW2NlbGxJbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlZENlbGxzW2NlbGxJbmRleF0uc2V0VGFiYmFibGUoY2VsbElzVGFiYmFibGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsSXNUYWJiYWJsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZWRDZWxsc1tjZWxsSW5kZXhdLnJlcmVuZGVyQW5kRm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2hpbGRGbGFnOiAoY2VsbEluZGV4KSA9PiAobWFuYWdlZENlbGxzW2NlbGxJbmRleF0/LmdldFRhYmJhYmxlKCkgPz8gbnVsbCksXG4gICAgICAgICAgICB1c2VFZmZlY3RcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQW55IHRpbWUgd2UgYmVjb21lIHRoZSBjdXJyZW50bHkgdGFiYmFibGUgcm93LFxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCB3ZSdyZSBpbiBhIHZhbGlkIGNlbGwsIGFuZCBzaGlmdCBsZWZ0L3JpZ2h0IGlmIG5vdCB0byBmaW5kIG9uZS5cbiAgICAgICAgLy8gVE9ETzogU2VlbXMga2luZGEgamFua3k/IElzIHRoZXJlIG5vIGNsZWFuZXIgd2F5IHRvIGFjY29tcGxpc2ggdGhpcyxcbiAgICAgICAgLy8gZXNwZWNpYWxseSBzaW5jZSBpdCdzIHNpbWlsYXIgdG8gb3RoZXIgY29kZT9cbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1RhYmJhYmxlUm93KSB7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGxJbmRleCA9IGdldEN1cnJlbnRDb2x1bW4oKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2VsbEluZGV4ID49IDAgJiYgbWFuYWdlZENlbGxzW2NlbGxJbmRleF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAtLWNlbGxJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNlbGxJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbEluZGV4ID0gZ2V0Q3VycmVudENvbHVtbigpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2VsbEluZGV4IDwgbWFuYWdlZENlbGxzLmxlbmd0aCAmJiBtYW5hZ2VkQ2VsbHNbY2VsbEluZGV4XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2NlbGxJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbEluZGV4ID09IG1hbmFnZWRDZWxscy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsSW5kZXggPSBnZXRDdXJyZW50Q29sdW1uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjZWxsSW5kZXggIT0gZ2V0Q3VycmVudENvbHVtbigpKVxuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50Q29sdW1uMihjZWxsSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbaXNUYWJiYWJsZVJvd10pO1xuXG4gICAgICAgIGNvbnN0IHsgdXNlTWFuYWdlZENoaWxkUHJvcHM6IHVzZU1hbmFnZWRSb3dQcm9wcyB9ID0gdXNlTWFuYWdlZFJvdzxSPih7XG4gICAgICAgICAgICBpbmRleDogcm93SW5kZXgsXG4gICAgICAgICAgICBzZXRJc1RhYmJhYmxlUm93LFxuICAgICAgICAgICAgZ2V0SXNUYWJiYWJsZVJvdzogZ2V0SXNUYWJiYWJsZVJvdyxcbiAgICAgICAgICAgIGhpZGRlbixcbiAgICAgICAgICAgIC4uLmluZm9cbiAgICAgICAgfSBhcyBhbnkgYXMgSVIpO1xuICAgICAgICAvL2NvbnN0IHsgdXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkUHJvcHM6IHVzZUxpbmVhck5hdmlnYXRpb25DaGlsZFJvd1Byb3BzIH0gPSB1c2VMaW5lYXJOYXZpZ2F0aW9uQ2hpbGRSb3coaW5mbyBhcyBJUilcblxuICAgICAgICBjb25zdCB1c2VHcmlkTmF2aWdhdGlvblJvd1Byb3BzID0gdXNlQ2FsbGJhY2soPFAgZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxSPj4ocHJvcHM6IFApID0+IHVzZU1hbmFnZWRSb3dQcm9wcyh1c2VMaW5lYXJOYXZpZ2F0aW9uQ2VsbFByb3BzKHVzZU1lcmdlZFByb3BzPFI+KCkoeyBoaWRkZW46ICEhaGlkZGVuLCBcImRhdGEtaW5kZXhcIjogcm93SW5kZXggfSwgcHJvcHMpKSksIFt1c2VNYW5hZ2VkUm93UHJvcHMsICEhaGlkZGVuXSk7XG5cblxuXG4gICAgICAgIGNvbnN0IGdldFJvd0luZGV4ID0gdXNlU3RhYmxlR2V0dGVyKHJvd0luZGV4KTtcbiAgICAgICAgY29uc3QgdXNlR3JpZE5hdmlnYXRpb25DZWxsOiBVc2VHcmlkTmF2aWdhdGlvbkNlbGw8QywgSUM+ID0gdXNlQ2FsbGJhY2soKGluZm86IFVzZUdyaWROYXZpZ2F0aW9uQ2VsbFBhcmFtZXRlcnM8SUM+KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBnZXRUYWJiYWJsZTogKCgpID0+IGJvb2xlYW4gfCBudWxsKSA9IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+IHRhYmJhYmxlKTtcbiAgICAgICAgICAgIGNvbnN0IHsgdGFiYmFibGUsIHVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wcyB9ID0gdXNlUm92aW5nVGFiSW5kZXhDZWxsPEM+KHsgLi4uaW5mbywgZ2V0VGFiYmFibGUgfSBhcyBJQyk7XG4gICAgICAgICAgICAvL2NvbnN0IHsgdXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkUHJvcHM6IHVzZUxpbmVhck5hdmlnYXRpb25DaGlsZENlbGxQcm9wcyB9ID0gdXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkQ2VsbChpbmZvIGFzIElDKTtcblxuICAgICAgICAgICAgLy8gQW55IHRpbWUgd2UgaW50ZXJhY3Qgd2l0aCB0aGlzIGNlbGwsIHNldCBpdCB0byBiZVxuICAgICAgICAgICAgLy8gb3VyIFwiY3VycmVudGx5IHRhYmJhYmxlXCIgY2VsbCwgcmVnYXJkbGVzcyBvZlxuICAgICAgICAgICAgLy8gYW55IHByZXZpb3VzbHkgc2VsZWN0ZWQgcm93L2NvbHVtbi5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBUT0RPOiBNb3VzZXVwL2Rvd24gbWlnaHQgYmUgcHJlZmVyYWJsZSxcbiAgICAgICAgICAgIC8vIGJ1dCBpdCBkb2Vzbid0IGZpcmUgb24gbGFiZWwgZWxlbWVudHMgaGVyZT8/Pz8/XG4gICAgICAgICAgICBjb25zdCBvbkNsaWNrID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRSb3cyKGdldFJvd0luZGV4KCkpO1xuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRDb2x1bW4yKGluZm8uaW5kZXgpO1xuICAgICAgICAgICAgfSwgW2luZm8uaW5kZXhdKVxuXG4gICAgICAgICAgICBjb25zdCB1c2VHcmlkTmF2aWdhdGlvbkNlbGxQcm9wcyA9IHVzZUNhbGxiYWNrKDxQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8Qz4+KHByb3BzOiBQKSA9PiB1c2VSb3ZpbmdUYWJJbmRleENoaWxkUHJvcHMoKHVzZU1lcmdlZFByb3BzPEM+KCkoeyBvbkNsaWNrIH0sIHByb3BzKSkpLCBbdXNlUm92aW5nVGFiSW5kZXhDaGlsZFByb3BzXSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7IHRhYmJhYmxlLCB1c2VHcmlkTmF2aWdhdGlvbkNlbGxQcm9wcyB9O1xuICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnJlbnRDb2x1bW4sXG4gICAgICAgICAgICB1c2VHcmlkTmF2aWdhdGlvblJvd1Byb3BzLFxuICAgICAgICAgICAgdXNlR3JpZE5hdmlnYXRpb25DZWxsLFxuICAgICAgICAgICAgY2VsbENvdW50LFxuICAgICAgICAgICAgaXNUYWJiYWJsZVJvdyxcbiAgICAgICAgICAgIG1hbmFnZWRDZWxsczogbWFuYWdlZENlbGxzIGFzIElDW11cbiAgICAgICAgfTtcblxuICAgIH0sIFt1c2VNYW5hZ2VkUm93LCBpbmRleERlbWFuZ2xlciwgaW5kZXhNYW5nbGVyXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VHcmlkTmF2aWdhdGlvblByb3BzOiB1c2VMaW5lYXJOYXZpZ2F0aW9uUm93UHJvcHMsXG4gICAgICAgIHVzZUdyaWROYXZpZ2F0aW9uUm93LFxuICAgICAgICB1c2VHcmlkTmF2aWdhdGlvbkNvbHVtbixcbiAgICAgICAgcm93Q291bnQ6IGNoaWxkQ291bnQsXG4gICAgICAgIGNlbGxJbmRleDogY3VycmVudENvbHVtbixcbiAgICAgICAgcm93SW5kZXg6IGN1cnJlbnRSb3csXG4gICAgICAgIG1hbmFnZWRSb3dzXG5cbiAgICB9XG5cbn1cblxuXG4iLCJpbXBvcnQgeyBDb21wb25lbnRDaGlsZHJlbiwgY3JlYXRlQ29udGV4dCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuXG50eXBlIFJhZkNhbGxiYWNrVHlwZSA9IChtc1NpbmNlTGFzdDogbnVtYmVyLCB0YWc/OiBhbnkpID0+IHZvaWQ7XG5cbmludGVyZmFjZSBDb250ZXh0VHlwZSB7XG4gICAgYWRkQ2FsbGJhY2s6IChjYWxsYmFjazogUmFmQ2FsbGJhY2tUeXBlLCB0YWc/OiBhbnkpID0+IHZvaWQ7XG4gICAgcmVtb3ZlQ2FsbGJhY2s6IChjYWxsYmFjazogUmFmQ2FsbGJhY2tUeXBlKSA9PiB2b2lkO1xufVxuXG5jb25zdCBTaGFyZWRBbmltYXRpb25GcmFtZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PG51bGwgfCBDb250ZXh0VHlwZT4obnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBQcm92aWRlQmF0Y2hlZEFuaW1hdGlvbkZyYW1lcyh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IENvbXBvbmVudENoaWxkcmVuIH0pIHtcblxuICAgIGNvbnN0IGFkZENhbGxiYWNrID0gdXNlQ2FsbGJhY2s8Q29udGV4dFR5cGVbXCJhZGRDYWxsYmFja1wiXT4oKGNhbGxiYWNrVG9CZUJhdGNoZWQsIHRhZykgPT4geyBhbGxDYWxsYmFja3MuY3VycmVudC5zZXQoY2FsbGJhY2tUb0JlQmF0Y2hlZCwgdGFnKTsgfSwgW10pO1xuICAgIGNvbnN0IHJlbW92ZUNhbGxiYWNrID0gdXNlQ2FsbGJhY2s8Q29udGV4dFR5cGVbXCJyZW1vdmVDYWxsYmFja1wiXT4oKGNhbGxiYWNrKSA9PiB7IGFsbENhbGxiYWNrcy5jdXJyZW50LmRlbGV0ZShjYWxsYmFjayk7IH0sIFtdKTtcblxuICAgIGNvbnN0IGNvbnRleHRJbmZvID0gdXNlUmVmPENvbnRleHRUeXBlPihudWxsISk7XG4gICAgaWYgKGNvbnRleHRJbmZvLmN1cnJlbnQgPT0gbnVsbClcbiAgICAgICAgY29udGV4dEluZm8uY3VycmVudCA9IHsgYWRkQ2FsbGJhY2ssIHJlbW92ZUNhbGxiYWNrIH07XG4gICAgY29uc3QgYWxsQ2FsbGJhY2tzID0gdXNlUmVmPE1hcDxSYWZDYWxsYmFja1R5cGUsIGFueT4+KG51bGwhKTtcbiAgICBpZiAoYWxsQ2FsbGJhY2tzLmN1cnJlbnQgPT0gbnVsbClcbiAgICAgICAgYWxsQ2FsbGJhY2tzLmN1cnJlbnQgPSBuZXcgTWFwKCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsZXQgaGFuZGxlID0gLTE7XG5cbiAgICAgICAgZnVuY3Rpb24gcmFmV2l0aEJhdGNoZWRDYWxsYmFja3MobXNTaW5jZUxhc3Q6IG51bWJlcikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbYmF0Y2hlZFJhZkNhbGxiYWNrLCB0YWddIG9mIGFsbENhbGxiYWNrcy5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgYmF0Y2hlZFJhZkNhbGxiYWNrKG1zU2luY2VMYXN0LCB0YWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJhZldpdGhCYXRjaGVkQ2FsbGJhY2tzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhbmRsZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyYWZXaXRoQmF0Y2hlZENhbGxiYWNrcyk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IGNhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZSk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFNoYXJlZEFuaW1hdGlvbkZyYW1lQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dEluZm8uY3VycmVudH0+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvU2hhcmVkQW5pbWF0aW9uRnJhbWVDb250ZXh0LlByb3ZpZGVyPilcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VBbmltYXRpb25GcmFtZVBhcmFtZXRlcnMge1xuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHdpdGggZWZmZWN0aXZlbHkgdGhlIHNhbWUgcnVsZXMgYXMgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBcbiAgICAgKi9cbiAgICBjYWxsYmFjazogbnVsbCB8ICgobXNTaW5jZUxhc3Q6IG51bWJlcikgPT4gdm9pZCk7XG59XG5cbi8qKlxuICogVGhlIChvcHRpb25hbGx5IG5vbi1zdGFibGUpIGBjYWxsYmFja2AgeW91IHByb3ZpZGUgd2lsbCBzdGFydCBydW5uaW5nIGV2ZXJ5IGZyYW1lIGFmdGVyIHRoZSBjb21wb25lbnQgbW91bnRzLlxuICogXG4gKiBQYXNzaW5nIGBudWxsYCBpcyBmaW5lIGFuZCBzaW1wbHkgc3RvcHMgdGhlIGVmZmVjdCB1bnRpbCB5b3UgcmVzdGFydCBpdCBieSBwcm92aWRpbmcgYSBub24tbnVsbCBjYWxsYmFjay5cbiAqIFxuICogKipUaGlzIGhvb2sgZG9lcyBub3QgcmV0dXJuIGFueXRoaW5nIGF0IGFsbCwgaW5jbHVkaW5nIG5vIHByb3AtbW9kaWZ5aW5nIGhvb2tzKipcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFuaW1hdGlvbkZyYW1lKHsgY2FsbGJhY2sgfTogVXNlQW5pbWF0aW9uRnJhbWVQYXJhbWV0ZXJzKTogdm9pZCB7XG4gICAgLy8gR2V0IGEgd3JhcHBlciBhcm91bmQgdGhlIGdpdmVuIGNhbGxiYWNrIHRoYXQncyBzdGFibGVcbiAgICBjb25zdCBzdGFibGVDYWxsYmFjayA9IHVzZVN0YWJsZUNhbGxiYWNrKGNhbGxiYWNrID8/IG5vb3ApO1xuICAgIGNvbnN0IGhhc0NhbGxiYWNrID0gKGNhbGxiYWNrICE9IG51bGwpO1xuXG4gICAgY29uc3Qgc2hhcmVkQW5pbWF0aW9uRnJhbWVDb250ZXh0ID0gdXNlQ29udGV4dChTaGFyZWRBbmltYXRpb25GcmFtZUNvbnRleHQpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHNoYXJlZEFuaW1hdGlvbkZyYW1lQ29udGV4dCkge1xuICAgICAgICAgICAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2hhcmVkQW5pbWF0aW9uRnJhbWVDb250ZXh0LmFkZENhbGxiYWNrKHN0YWJsZUNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNoYXJlZEFuaW1hdGlvbkZyYW1lQ29udGV4dC5yZW1vdmVDYWxsYmFjayhzdGFibGVDYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgYSB3cmFwcGVyIGFyb3VuZCB0aGUgd3JhcHBlciBhcm91bmQgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBhbHNvIGNhbGxzIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGFnYWluLlxuICAgICAgICAgICAgICAgIGNvbnN0IHJhZkNhbGxiYWNrID0gKG1zOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJhZkNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhYmxlQ2FsbGJhY2sobXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgaGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJhZkNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtzaGFyZWRBbmltYXRpb25GcmFtZUNvbnRleHQsIGhhc0NhbGxiYWNrXSlcbn1cblxuLy8gZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG5mdW5jdGlvbiBub29wKCkgeyB9XG4iLCJpbXBvcnQgeyBoLCBSZWYgfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgTWVyZ2VkUHJvcHMsIHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1wcm9wc1wiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwiLi91c2Utc3RhdGVcIjtcblxuaW50ZXJmYWNlIFVzZURyYWdnYWJsZVJldHVyblR5cGU8RSBleHRlbmRzIEV2ZW50VGFyZ2V0PiB7XG4gICAgdXNlRHJhZ2dhYmxlUHJvcHM6IFVzZURyYWdnYWJsZVByb3BzPEU+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBlbGVtZW50IGluIHF1ZXN0aW9uIGlzIGN1cnJlbnRseSBiZWluZyBkcmFnZ2VkXG4gICAgICovXG4gICAgZHJhZ2dpbmc6IGJvb2xlYW47XG4gICAgZ2V0RHJhZ2dpbmc6ICgpID0+IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBPbmNlIHRoZSBkcmFnIGVuZHMsIGlmIGl0IHdhcyBvdmVyIGEgdmFsaWQgZHJvcHBhYmxlLCB0aGlzIHdpbGwgYmVcbiAgICAgKiBzZXQgdG8gdGhlIGBkcm9wRWZmZWN0YCB2YWx1ZSBpdCBoYWQuXG4gICAgICogXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBkZXRlY3Qgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHJvcHBlZCwgXG4gICAgICogYW5kIHRoZW4gd2hhdCBzaG91bGQgYmUgZG9uZSB3aXRoIGl0IChnZW5lcmFsbHkgZGVsZXRlZCBpZiB0aGUgZWZmZWN0IHdhcyBcIm1vdmVcIilcbiAgICAgKi9cbiAgICBsYXN0RHJvcEVmZmVjdDogRGF0YVRyYW5zZmVyW1wiZHJvcEVmZmVjdFwiXSB8IG51bGw7XG4gICAgZ2V0TGFzdERyb3BFZmZlY3Q6ICgpID0+IChEYXRhVHJhbnNmZXJbXCJkcm9wRWZmZWN0XCJdIHwgbnVsbCk7XG59XG5cbnR5cGUgVXNlRHJhZ2dhYmxlUHJvcHM8RSBleHRlbmRzIEV2ZW50VGFyZ2V0PiA9IDxQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4+KHA6IFApID0+IE1lcmdlZFByb3BzPEUsIHtcbiAgICBkcmFnZ2FibGU6IGJvb2xlYW47XG4gICAgb25EcmFnU3RhcnQ6IChlOiBEcmFnRXZlbnQpID0+IHZvaWQ7XG4gICAgb25EcmFnRW5kOiAoZTogRHJhZ0V2ZW50KSA9PiB2b2lkO1xuICAgIHJlZjogUmVmPEU+O1xufSwgUD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlRHJhZ2dhYmxlUGFyYW1ldGVycyB7XG5cbiAgICAvKipcbiAgICAgKiBNYXBzIHRvIHRoZSBEcmFnIGFuZCBEcm9wIEFQSSAtLSBhbGxvd3MgbGltaXRpbmcgdGhlIGFyZWFzIHRoaXMgZWxlbWVudCBjYW4gYmUgZHJvcHBlZC5cbiAgICAgKiBGb3IgZXhhbXBsZSwgc2V0dGluZyB0aGlzIHRvIFwiY29weUxpbmtcIiB3aWxsIGFsbG93IHRoaXMgdGhpcyB0byBiZSBkcm9wcGVkIG9udG9cbiAgICAgKiBhIGRyb3BwYWJsZSB3aXRoIGFuIGVmZmVjdCBvZiBcImNvcHlcIiBvciBcImxpbmtcIiwgYnV0IG5vdCBcIm1vdmVcIi5cbiAgICAgKiBcbiAgICAgKi9cbiAgICBlZmZlY3RBbGxvd2VkPzogRGF0YVRyYW5zZmVyW1wiZWZmZWN0QWxsb3dlZFwiXSB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIENhbiBiZSB1c2VkIHRvIHNwZWNpZnkgYSBjdXN0b20gZHJhZyBpbWFnZSBpbnN0ZWFkIG9mIHRoZSBicm93c2VyIGRlZmF1bHQgKGEgdHJhbnNwYXJlbnQgcmVuZGVyIG9mIHRoZSBvcmlnaW5hbCBlbGVtZW50LCBnZW5lcmFsbHkpXG4gICAgICovXG4gICAgZHJhZ0ltYWdlPzogSFRNTENhbnZhc0VsZW1lbnQgfCBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTFZpZGVvRWxlbWVudDtcbiAgICBkcmFnSW1hZ2VYT2Zmc2V0PzogbnVtYmVyO1xuICAgIGRyYWdJbWFnZVlPZmZzZXQ/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgZGljdGlvbmFyeSBtYXBwaW5nIG9mIE1JTUUgdHlwZXMgdG8gZGF0YVxuICAgICAqL1xuICAgIGRhdGE6IHsgW21pbWVUeXBlOiBzdHJpbmddOiBzdHJpbmcgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURyYWdnYWJsZTxFIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KHsgZWZmZWN0QWxsb3dlZCwgZGF0YSwgZHJhZ0ltYWdlLCBkcmFnSW1hZ2VYT2Zmc2V0LCBkcmFnSW1hZ2VZT2Zmc2V0IH06IFVzZURyYWdnYWJsZVBhcmFtZXRlcnMpIHtcblxuICAgIGNvbnN0IFtkcmFnZ2luZywgc2V0RHJhZ2dpbmcsIGdldERyYWdnaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbbGFzdERyb3BFZmZlY3QsIHNldExhc3REcm9wRWZmZWN0LCBnZXRMYXN0RHJvcEVmZmVjdF0gPSB1c2VTdGF0ZTxEYXRhVHJhbnNmZXJbXCJkcm9wRWZmZWN0XCJdIHwgbnVsbD4obnVsbCk7XG5cbiAgICBjb25zdCB1c2VEcmFnZ2FibGVQcm9wcyA9IHVzZUNhbGxiYWNrKDxQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4+KHA6IFApID0+IHtcblxuICAgICAgICBjb25zdCByZWYgPSB1c2VSZWY8RT4obnVsbCk7XG5cbiAgICAgICAgY29uc3Qgb25EcmFnU3RhcnQgPSAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgICAgICAgICAvL2UucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNldERyYWdnaW5nKHRydWUpO1xuICAgICAgICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IChlZmZlY3RBbGxvd2VkID8/IFwiYWxsXCIpO1xuICAgICAgICAgICAgICAgIGlmIChkcmFnSW1hZ2UpXG4gICAgICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZShkcmFnSW1hZ2UsIGRyYWdJbWFnZVhPZmZzZXQgPz8gMCwgZHJhZ0ltYWdlWU9mZnNldCA/PyAwKVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGRhdGEpIGFzIFttaW1lVHlwZTogc3RyaW5nLCBkYXRhOiBzdHJpbmddW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbWltZVR5cGUsIGRhdGFdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShtaW1lVHlwZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9uRHJhZ0VuZCA9IChlOiBEcmFnRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNldERyYWdnaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChlLmRhdGFUcmFuc2Zlcikge1xuICAgICAgICAgICAgICAgIGlmIChlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ICE9IFwibm9uZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldExhc3REcm9wRWZmZWN0KGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TGFzdERyb3BFZmZlY3QobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG5cbiAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzPEU+KCkoe1xuICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgb25EcmFnU3RhcnQsXG4gICAgICAgICAgICBvbkRyYWdFbmQsXG4gICAgICAgICAgICByZWZcbiAgICAgICAgfSwgcCk7XG5cbiAgICB9LCBbZWZmZWN0QWxsb3dlZCwgZHJhZ0ltYWdlLCBkcmFnSW1hZ2VYT2Zmc2V0LCBkcmFnSW1hZ2VZT2Zmc2V0LCAuLi5PYmplY3QuZW50cmllcyhkYXRhKS5mbGF0KCldKTtcblxuICAgIC8vIFJldHVybiBib3RoIHRoZSBlbGVtZW50IGFuZCB0aGUgaG9vayB0aGF0IG1vZGlmaWVzIFxuICAgIC8vIHRoZSBwcm9wcyBhbmQgYWxsb3dzIHVzIHRvIGFjdHVhbGx5IGZpbmQgdGhlIGVsZW1lbnRcbiAgICBjb25zdCByZXQ6IFVzZURyYWdnYWJsZVJldHVyblR5cGU8RT4gPSB7XG4gICAgICAgIHVzZURyYWdnYWJsZVByb3BzLFxuICAgICAgICBkcmFnZ2luZyxcbiAgICAgICAgZ2V0RHJhZ2dpbmcsXG5cbiAgICAgICAgLy8gU2V0IG9uY2UgYSBkcmFnIGhhcyBjb21wbGV0ZWQgd2l0aCB0aGUgcmVzdWx0aW5nIGFjdGlvblxuICAgICAgICAvLyBVc2VmdWwgZm9yIHJlbW92aW5nIHRoZSBlbGVtZW50IGFmdGVyd2FyZHMgaWYgaXQgd2FzIFwibW92ZVwiXG4gICAgICAgIGxhc3REcm9wRWZmZWN0LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0XG4gICAgICAgICAqL1xuICAgICAgICBnZXRMYXN0RHJvcEVmZmVjdFxuICAgIH07XG5cbiAgICByZXR1cm4gcmV0O1xufVxuXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyBNZXJnZWRQcm9wcywgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XG5pbXBvcnQgeyBVc2VSZWZFbGVtZW50UHJvcHNSZXR1cm5UeXBlIH0gZnJvbSBcIi4vdXNlLXJlZi1lbGVtZW50XCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZURyb3BwYWJsZVJldHVyblR5cGU8RSBleHRlbmRzIEhUTUxFbGVtZW50PiB7XG5cbiAgICAvKipcbiAgICAgKiBIb29rIGZvciBtb2RpZnlpbmcgdGhlIHByb3BzIHlvdSB3ZXJlIGdvaW5nIHRvIHBhc3MgdG8geW91ciBkcm9wIHRhcmdldCBFbGVtZW50LlxuICAgICAqL1xuICAgIHVzZURyb3BwYWJsZVByb3BzOiBVc2VEcm9wcGFibGVQcm9wczxFPjtcblxuICAgIC8qKlxuICAgICAqIFdoaWxlIHNvbWV0aGluZyBpcyBiZWluZyBkcmFnZ2VkIG92ZXIgdGhpcyBlbGVtZW50LCB0aGlzIHdpbGwgY29udGFpbiBhbnkgaW5mb3JtYXRpb24gYWJvdXQgYW55IGZpbGVzIGluY2x1ZGVkIGluIHRoYXQgZHJvcC5cbiAgICAgKiBPdGhlcndpc2UsIGl0J2xsIGJlIG51bGwsIG1lYW5pbmcgbm90aGluZyBpcyBiZWluZyBkcmFnZ2VkIG92ZXIgdGhpcyBlbGVtZW50LlxuICAgICAqL1xuICAgIGZpbGVzRm9yQ29uc2lkZXJhdGlvbjogRHJvcEZpbGVNZXRhZGF0YVtdIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBXaGlsZSBzb21ldGhpbmcgaXMgYmVpbmcgZHJhZ2dlZCBvdmVyIHRoaXMgZWxlbWVudCwgYSBsaXN0IG9mIGF2YWlsYWJsZSBNSU1FIHR5cGVzIGZvciB0aGUgbm9uLWZpbGUgZGF0YSB3aWxsIGJlIGxpc3RlZCBoZXJlLlxuICAgICAqIE90aGVyd2lzZSwgaXQnbGwgYmUgbnVsbCwgbWVhbmluZyBub3RoaW5nIGlzIGJlaW5nIGRyYWdnZWQgb3ZlciB0aGlzIGVsZW1lbnQuXG4gICAgICovXG4gICAgc3RyaW5nc0ZvckNvbnNpZGVyYXRpb246IFNldDxzdHJpbmc+IHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gZmlsZXMgYXJlIGRyb3BwZWQgb3ZlciB0aGUgZWxlbWVudCwgdGhlaXIgZGF0YSB3aWxsIGJlIGdpdmVuIGhlcmUuXG4gICAgICogVGhpcyB3aWxsIHVwZGF0ZSBhcyBuZXcgZHJvcHMgaGFwcGVuLlxuICAgICAqL1xuICAgIGRyb3BwZWRGaWxlczogRHJvcEZpbGVbXSB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIG5vbi1maWxlIGRhdGEgaXMgZHJvcHBlZCBvdmVyIHRoZSBlbGVtZW50LCB0aGVpciBkYXRhIHdpbGwgYmUgZ2l2ZW4gaGVyZS5cbiAgICAgKiBUaGlzIHdpbGwgdXBkYXRlIGFzIG5ldyBkcm9wcyBoYXBwZW4uXG4gICAgICovXG4gICAgZHJvcHBlZFN0cmluZ3M6IHsgW01pbWVUeXBlOiBzdHJpbmddOiBzdHJpbmcgfSB8IG51bGw7XG5cblxuICAgIGRyb3BFcnJvcjogdW5rbm93bjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VEcm9wcGFibGVQYXJhbWV0ZXJzIHtcbiAgICAvKipcbiAgICAgKiBNYXBzIHRvIHRoZSBEcmFnIGFuZCBEcm9wIEFQSSAtLSBlZmZlY3RpdmVseSBtZWFucyBcImFzIGNsb3NlIGFzIHBvc3NpYmxlLCB3aGF0J3MgaGFwcGVuaW5nIHRvIHRoZSBkYXRhIHdoZW4gSSBkcm9wIGl0IGhlcmU/IFxuICAgICAqIEFtIEkgY29weWluZyBpdCBhbmQgbGVhdmluZyB0aGUgb3JpZ2luYWwsIGFtIEkgbW92aW5nIGl0IGFuZCBkZWxldGluZyB0aGUgb3JpZ2luYWwsIG9yIGFtIEkgbGlua2luZyBpdCB0byB0aGUgb3JpZ2luYWw/XCJcbiAgICAgKiBcbiAgICAgKiBXaGF0ZXZlciBpcyBiZWluZyBkcmFnZ2VkIG92ZXIgdGhpcyB3aWxsIGhhdmUgaXRzIG93biBwZXJtaXNzaW9uIHRoYXQncyBjaGVja2VkIGFnYWluc3QgdGhpcy5cbiAgICAgKi9cbiAgICBlZmZlY3Q6IERhdGFUcmFuc2ZlcltcImRyb3BFZmZlY3RcIl0gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJvcEZpbGUgZXh0ZW5kcyBEcm9wRmlsZU1ldGFkYXRhIHsgbmFtZTogc3RyaW5nLCBkYXRhOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyIHwgdW5kZWZpbmVkLCBsYXN0TW9kaWZpZWQ6IG51bWJlciB8IHVuZGVmaW5lZCB9XG5leHBvcnQgaW50ZXJmYWNlIERyb3BGaWxlTWV0YWRhdGEgeyB0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQgfVxuXG5cbnR5cGUgRHJvcHBhYmxlRmlsZUVycm9yVHlwZSA9IFwiSW5kZXhTaXplRXJyb3JcIiB8IFwiSGllcmFyY2h5UmVxdWVzdEVycm9yXCIgfCBcIldyb25nRG9jdW1lbnRFcnJvclwiIHwgXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIiB8IFwiTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3JcIiB8IFwiTm90Rm91bmRFcnJvclwiIHwgXCJOb3RTdXBwb3J0ZWRFcnJvclwiIHwgXCJJbnZhbGlkU3RhdGVFcnJvclwiIHwgXCJJblVzZUF0dHJpYnV0ZUVycm9yXCIgfCBcIlN5bnRheEVycm9yXCIgfCBcIkludmFsaWRNb2RpZmljYXRpb25FcnJvclwiIHwgXCJOYW1lc3BhY2VFcnJvclwiIHwgXCJJbnZhbGlkQWNjZXNzRXJyb3JcIiB8IFwiVHlwZU1pc21hdGNoRXJyb3JcIiB8IFwiU2VjdXJpdHlFcnJvclwiIHwgXCJOZXR3b3JrRXJyb3JcIiB8IFwiQWJvcnRFcnJvclwiIHwgXCJVUkxNaXNtYXRjaEVycm9yXCIgfCBcIlF1b3RhRXhjZWVkZWRFcnJvclwiIHwgXCJUaW1lb3V0RXJyb3JcIiB8IFwiSW52YWxpZE5vZGVUeXBlRXJyb3JcIiB8IFwiRGF0YUNsb25lRXJyb3JcIiB8IFwiRW5jb2RpbmdFcnJvclwiIHwgXCJOb3RSZWFkYWJsZUVycm9yXCIgfCBcIlVua25vd25FcnJvclwiIHwgXCJDb25zdHJhaW50RXJyb3JcIiB8IFwiRGF0YUVycm9yXCIgfCBcIlRyYW5zYWN0aW9uSW5hY3RpdmVFcnJvclwiIHwgXCJSZWFkT25seUVycm9yXCIgfCBcIlZlcnNpb25FcnJvclwiIHwgXCJPcGVyYXRpb25FcnJvclwiIHwgXCJOb3RBbGxvd2VkRXJyb3JcIjtcblxuZXhwb3J0IGNsYXNzIERyb3BwYWJsZUZpbGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBmaWxlTmFtZTogc3RyaW5nO1xuICAgIGVycm9yVHlwZTogRHJvcHBhYmxlRmlsZUVycm9yVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGVOYW1lOiBzdHJpbmcsIGJhc2U6IERPTUV4Y2VwdGlvbiB8IG51bGwpIHtcbiAgICAgICAgc3VwZXIoYmFzZT8ubWVzc2FnZSA/PyBcIkFuIHVuc3BlY2lmaWVkIGVycm9yIG9jY3VycmVkIHJlYWRpbmcgdGhlIGZpbGUuXCIpO1xuICAgICAgICB0aGlzLmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgIHRoaXMuZXJyb3JUeXBlID0gKGJhc2U/Lm5hbWUgYXMgRHJvcHBhYmxlRmlsZUVycm9yVHlwZSk7XG4gICAgfVxuXG59XG5cbnR5cGUgVXNlRHJvcHBhYmxlUHJvcHM8RSBleHRlbmRzIEhUTUxFbGVtZW50PiA9IDxQIGV4dGVuZHMgVXNlRHJvcHBhYmxlUHJvcHNQYXJhbWV0ZXJzPEU+PihwOiBQKSA9PiBVc2VEcm9wcGFibGVQcm9wc1JldHVyblR5cGU8RSwgUD47XG50eXBlIFVzZURyb3BwYWJsZVByb3BzUGFyYW1ldGVyczxFIGV4dGVuZHMgSFRNTEVsZW1lbnQ+ID0gaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT47XG50eXBlIFVzZURyb3BwYWJsZVByb3BzUmV0dXJuVHlwZTxFIGV4dGVuZHMgSFRNTEVsZW1lbnQsIFAgZXh0ZW5kcyBVc2VEcm9wcGFibGVQcm9wc1BhcmFtZXRlcnM8RT4+ID0gXG5NZXJnZWRQcm9wczxFLCBVc2VSZWZFbGVtZW50UHJvcHNSZXR1cm5UeXBlPEUsIHsgb25EcmFnRW50ZXI6IChlOiBEcmFnRXZlbnQpID0+IHZvaWQ7IG9uRHJhZ0xlYXZlOiAoZTogRHJhZ0V2ZW50KSA9PiB2b2lkOyBvbkRyYWdPdmVyOiAoZTogRHJhZ0V2ZW50KSA9PiB2b2lkOyBvbkRyb3A6IChlOiBEcmFnRXZlbnQpID0+IHZvaWQ7IH0+LCBQPjtcbi8vTWVyZ2VkUHJvcHM8VXNlUmVmRWxlbWVudFByb3BzUmV0dXJuVHlwZTxFLCBQaWNrPGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+LCBcIm9uRHJhZ0VudGVyXCIgfCBcIm9uRHJhZ0xlYXZlXCIgfCBcIm9uRHJhZ092ZXJcIiB8IFwib25Ecm9wXCI+PiwgUD47XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURyb3BwYWJsZTxFIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KHsgZWZmZWN0IH06IFVzZURyb3BwYWJsZVBhcmFtZXRlcnMpOiBVc2VEcm9wcGFibGVSZXR1cm5UeXBlPEU+IHtcblxuICAgIGNvbnN0IFtmaWxlc0ZvckNvbnNpZGVyYXRpb24sIHNldEZpbGVzRm9yQ29uc2lkZXJhdGlvbl0gPSB1c2VTdGF0ZTxudWxsIHwgRHJvcEZpbGVNZXRhZGF0YVtdPihudWxsKTtcbiAgICBjb25zdCBbc3RyaW5nc0ZvckNvbnNpZGVyYXRpb24sIHNldFN0cmluZ3NGb3JDb25zaWRlcmF0aW9uXSA9IHVzZVN0YXRlPG51bGwgfCBTZXQ8c3RyaW5nPj4obnVsbCk7XG5cbiAgICBjb25zdCBbZHJvcHBlZEZpbGVzLCBzZXREcm9wcGVkRmlsZXNdID0gdXNlU3RhdGU8bnVsbCB8IERyb3BGaWxlW10+KG51bGwpO1xuICAgIGNvbnN0IFtkcm9wcGVkU3RyaW5ncywgc2V0RHJvcHBlZFN0cmluZ3NdID0gdXNlU3RhdGU8bnVsbCB8IHsgW01pbWVUeXBlOiBzdHJpbmddOiBzdHJpbmcgfT4obnVsbCk7XG5cbiAgICBjb25zdCBbZHJvcEVycm9yLCBzZXREcm9wRXJyb3JdID0gdXNlU3RhdGU8dW5rbm93biB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuICAgIC8vIEFsbCB0aGUgcHJvbWlzZXMgZ2VuZXJhdGVkIGZyb20gdGhlIGRyb3AgZXZlbnRzLlxuICAgIC8vIFVzZWQgdG8gcHJvY2VzcyBtdWx0aXBsZSBkcm9wIGV2ZW50cyBpbiBzdWNjZXNzaW9uXG4gICAgY29uc3QgZHJvcFByb21pc2VzUmVmID0gdXNlUmVmPFByb21pc2U8bnVsbCB8IHsgc3RyaW5nczogeyBbbWltZVR5cGU6IHN0cmluZ106IHN0cmluZyB9LCBmaWxlczogRHJvcEZpbGVbXSB9PltdPihbXSk7XG4gICAgY29uc3QgW2N1cnJlbnRQcm9taXNlSW5kZXgsIHNldEN1cnJlbnRQcm9taXNlSW5kZXgsIGdldEN1cnJlbnRQcm9taXNlSW5kZXhdID0gdXNlU3RhdGUoLTEpO1xuICAgIGNvbnN0IFtwcm9taXNlQ291bnQsIHNldFByb21pc2VDb3VudCwgZ2V0UHJvbWlzZUNvdW50XSA9IHVzZVN0YXRlKDApO1xuXG4gICAgLy8gQW55IHRpbWUgd2UgYWRkIGEgbmV3IHByb21pc2UsIGlmIHRoZXJlJ3Mgbm8gY3VycmVudCBwcm9taXNlIHJ1bm5pbmcsIHdlIG5lZWQgdG8gc3RhcnQgb25lLlxuICAgIC8vIElmIHRoZXJlIGlzIG9uZSwgdGhlbiB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nLCBzaW5jZSBpdCBydW5zIHRoZSBzYW1lIGNoZWNrLlxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQcm9taXNlSW5kZXggPSBnZXRDdXJyZW50UHJvbWlzZUluZGV4KCk7XG4gICAgICAgIGNvbnN0IHByb21pc2VDb3VudCA9IGdldFByb21pc2VDb3VudCgpO1xuXG4gICAgICAgIGlmIChwcm9taXNlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICBpZiAoKGN1cnJlbnRQcm9taXNlSW5kZXggKyAxKSA8IHByb21pc2VDb3VudCkge1xuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRQcm9taXNlSW5kZXgoaSA9PiArK2kpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LCBbcHJvbWlzZUNvdW50XSk7XG5cbiAgICAvLyBBbnl0aW1lIG91ciBjdXJyZW50IHByb21pc2UgY2hhbmdlcyxcbiAgICAvLyB3YWl0IGZvciBpdCB0byBmaW5pc2gsIHRoZW4gc2V0IG91ciBzdGF0ZSB0byBpdHMgcmVzdWx0LlxuICAgIC8vIEZpbmFsbHksIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBhcmUgYW55bW9yZSBwcm9taXNlcy5cbiAgICAvLyBJZiB0aGVyZSBhcmUsIHRoZW4gaW5jcmVhc2UgY3VycmVudFByb21pc2VDb3VudCxcbiAgICAvLyB3aGljaCB3aWxsIHRyaWdnZXIgdGhpcyBhZ2Fpbi5cbiAgICAvL1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiAqb2Z0ZW4qLCBidXQgbWF5YmUgaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBpbmRpdmlkdWFsbHkgZHJvcHBpbmcgYSBidW5jaCBvZiBsYXJnZSBmaWxlcyBvciBzb21ldGhpbmcuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnRQcm9taXNlSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFByb21pc2UgPSBkcm9wUHJvbWlzZXNSZWYuY3VycmVudFtjdXJyZW50UHJvbWlzZUluZGV4XTtcbiAgICAgICAgICAgIGN1cnJlbnRQcm9taXNlLnRoZW4oKGluZm8pID0+IHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmZvICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZmlsZXMsIHN0cmluZ3MgfSA9IGluZm87XG4gICAgICAgICAgICAgICAgICAgIHNldERyb3BwZWRGaWxlcyhmaWxlcyk7XG4gICAgICAgICAgICAgICAgICAgIHNldERyb3BwZWRTdHJpbmdzKHN0cmluZ3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE5vdyB0aGF0IHdlJ3JlIGRvbmUsIGFyZSB0aGVyZSBtb3JlIHByb21pc2VzIGluIHRoZSBxdWV1ZT9cblxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQcm9taXNlSW5kZXggPSBnZXRDdXJyZW50UHJvbWlzZUluZGV4KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZUNvdW50ID0gZ2V0UHJvbWlzZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoKGN1cnJlbnRQcm9taXNlSW5kZXggKyAxKSA8IHByb21pc2VDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGlzIHByb21pc2UgaGFzIHN0YXJ0ZWQsIG1vcmUgaGF2ZSBiZWVuIGFkZGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBSdW4gdGhpcyBlZmZlY3QgYWdhaW4uXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRQcm9taXNlSW5kZXgoaSA9PiArK2kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LCBbY3VycmVudFByb21pc2VJbmRleF0pXG5cblxuICAgIGNvbnN0IHVzZURyb3BwYWJsZVByb3BzOiBVc2VEcm9wcGFibGVQcm9wczxFPiA9IDxQIGV4dGVuZHMgVXNlRHJvcHBhYmxlUHJvcHNQYXJhbWV0ZXJzPEU+PihwOiBQKTogVXNlRHJvcHBhYmxlUHJvcHNSZXR1cm5UeXBlPEUsIFA+ID0+IHtcblxuICAgICAgICAvL2NvbnN0IHJlZiA9IHVzZVJlZjxFPihudWxsKTtcblxuICAgICAgICAvLyBIYW5kbGUgY29sbGVjdGluZyB0aGUgY3VycmVudCBmaWxlIG1ldGFkYXRhIG9yIE1JTUUgdHlwZXMuXG4gICAgICAgIGNvbnN0IG9uRHJhZ0VudGVyID0gKGU6IERyYWdFdmVudCkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBJcyB0aGVyZSBhIGRlZmF1bHQ/IEkgY2FuJ3QgZmluZCBvbmUgYW55d2hlcmUuXG4gICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IChlZmZlY3QgPz8gXCJtb3ZlXCIpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TWltZVR5cGVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RmlsZXMgPSBuZXcgQXJyYXk8RHJvcEZpbGVNZXRhZGF0YT4oKTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBlLmRhdGFUcmFuc2Zlcj8uaXRlbXMgPz8gW10pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBraW5kLCB0eXBlIH0gPSBpdGVtO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChraW5kID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdNaW1lVHlwZXMuYWRkKHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtpbmQgPT09IFwiZmlsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGaWxlcy5wdXNoKHsgdHlwZTogaXRlbS50eXBlIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZXRGaWxlc0ZvckNvbnNpZGVyYXRpb24obmV3RmlsZXMpO1xuICAgICAgICAgICAgICAgIHNldFN0cmluZ3NGb3JDb25zaWRlcmF0aW9uKG5ld01pbWVUeXBlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSGFuZGxlIHJlc2V0dGluZyB0aGUgY3VycmVudCBmaWxlIG1ldGFkYXRhIG9yIE1JTUUgdHlwZXNcbiAgICAgICAgY29uc3Qgb25EcmFnTGVhdmUgPSAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzZXRGaWxlc0ZvckNvbnNpZGVyYXRpb24obnVsbCk7XG4gICAgICAgICAgICBzZXRTdHJpbmdzRm9yQ29uc2lkZXJhdGlvbihudWxsKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBCb2lsZXJwbGF0ZSwgSSBndWVzc1xuICAgICAgICBjb25zdCBvbkRyYWdPdmVyID0gKGU6IERyYWdFdmVudCkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGdldHRpbmcgdGhlIGRyb3AgZGF0YSBhc3luY2hyb25vdXNseVxuICAgICAgICBjb25zdCBvbkRyb3AgPSAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHNldEZpbGVzRm9yQ29uc2lkZXJhdGlvbihudWxsKTtcbiAgICAgICAgICAgIHNldFN0cmluZ3NGb3JDb25zaWRlcmF0aW9uKG51bGwpO1xuXG4gICAgICAgICAgICBjb25zdCBhbGxQcm9taXNlcyA9IG5ldyBBcnJheTxQcm9taXNlPHVua25vd24+PigpO1xuXG4gICAgICAgICAgICBjb25zdCBkcm9wRGF0YTogeyBbbWltZVR5cGU6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gICAgICAgICAgICBjb25zdCBkcm9wRmlsZTogRHJvcEZpbGVbXSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZS5kYXRhVHJhbnNmZXI/Lml0ZW1zID8/IFtdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBraW5kLCB0eXBlIH0gPSBpdGVtO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtpbmQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsUHJvbWlzZXMucHVzaCgobmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgX3JlamVjdCkgPT4gaXRlbS5nZXRBc1N0cmluZyhyZXNvbHZlKSkpLnRoZW4oc3RyID0+IGRyb3BEYXRhW3R5cGVdID0gc3RyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtpbmQgPT09IFwiZmlsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBpdGVtLmdldEFzRmlsZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsUHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gKF8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZWFkZXIucmVzdWx0IGFzIEFycmF5QnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcEZpbGUucHVzaCh7IGRhdGEsIG5hbWU6IGZpbGUubmFtZSwgdHlwZTogZmlsZS50eXBlLCBzaXplOiBkYXRhLmJ5dGVMZW5ndGgsIGxhc3RNb2RpZmllZDogZmlsZS5sYXN0TW9kaWZpZWQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbmVycm9yID0gKF8pID0+IHsgcmVqZWN0KG5ldyBEcm9wcGFibGVGaWxlRXJyb3IoZmlsZS5uYW1lLCByZWFkZXIuZXJyb3IpKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9uYWJvcnQgPSAoXykgPT4geyByZWplY3QobmV3IERyb3BwYWJsZUZpbGVFcnJvcihmaWxlLm5hbWUsIHJlYWRlci5lcnJvcikpOyB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BGaWxlLnB1c2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBkcm9wUHJvbWlzZXNSZWYuY3VycmVudC5wdXNoKFByb21pc2UuYWxsKGFsbFByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRQcm9taXNlQ291bnQoaSA9PiArK2kpO1xuICAgICAgICAgICAgICAgIHNldERyb3BFcnJvcihudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdzOiBkcm9wRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZmlsZXM6IGRyb3BGaWxlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2F0Y2goZXggPT4ge1xuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWRlYnVnZ2VyICovXG4gICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgc2V0UHJvbWlzZUNvdW50KGkgPT4gKytpKTtcbiAgICAgICAgICAgICAgICBzZXREcm9wRXJyb3IoZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cblxuICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHM8RT4oKSh7IG9uRHJhZ0VudGVyLCBvbkRyYWdMZWF2ZSwgb25EcmFnT3Zlciwgb25Ecm9wIH0sIHApO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VEcm9wcGFibGVQcm9wcyxcbiAgICAgICAgZmlsZXNGb3JDb25zaWRlcmF0aW9uLFxuICAgICAgICBzdHJpbmdzRm9yQ29uc2lkZXJhdGlvbixcbiAgICAgICAgZHJvcHBlZEZpbGVzLFxuICAgICAgICBkcm9wcGVkU3RyaW5ncyxcblxuICAgICAgICBkcm9wRXJyb3JcbiAgICB9XG59XG5cblxuIiwiXG5pbXBvcnQgeyBTdGF0ZVVwZGF0ZXIsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgT25QYXNzaXZlU3RhdGVDaGFuZ2UsIHJldHVybk51bGwsIHJldHVyblRydWUsIHVzZUVuc3VyZVN0YWJpbGl0eSwgdXNlUGFzc2l2ZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcbmltcG9ydCB7IHVzZVJlZkVsZW1lbnQsIFVzZVJlZkVsZW1lbnRQYXJhbWV0ZXJzLCBVc2VSZWZFbGVtZW50UmV0dXJuVHlwZSB9IGZyb20gXCIuL3VzZS1yZWYtZWxlbWVudFwiO1xuXG5cbi8qKlxuICogXG4gKiBUaGVyZSBhcmUgc2V2ZXJhbCBkaWZmZXJlbnQgd2F5cyB0aGF0IGEgZm9jdXMgZXZlbnQgY2FuIGhhcHBlbi4gIEFzc3VtZVxuICogdGhlIGZvbGxvd2luZyBzdGVwcyBoYXBwZW4gaW4gb3JkZXI6XG4gKiBcbiAqIDEuIFRoZSBwYWdlIGxvYWRzLlxuICogICAgKiBOb3RoaW5nIGlzIGZvY3VzZWQsIGJ1dCBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYGJvZHlgLiBcbiAqICAgICogTm8gZm9jdXMgZXZlbnRzIGFyZSBmaXJlZC5cbiAqIDIuIFRoZSB3aW5kb3cgaXMgZm9jdXNlZCwgYW4gdW5mb2N1c2FibGUgZWxlbWVudCBpcyBjbGlja2VkLCB0ZXh0IGlzIHNlbGVjdGVkLCBldGMuXG4gKiAgICAqIFRoZSBgYWN0aXZlRWxlbWVudGAgcmVtYWlucyBhcyBgYm9keWAuXG4gKiAgICAqIEEgYGZvY3VzYC9gZm9jdXNpbmAgZXZlbnQgKk1JR0hUKiBiZSBmaXJlZCBmb3IgYGJvZHlgLiBEZXBlbmRpbmcgb25cbiAqICAgICAgdGhlIGJyb3dzZXIsIHRoaXMgZGVwZW5kcyBvbiB3aGV0aGVyIHRoZSBoYW5kbGVyIHdhcyBhdHRhY2hlZCB0byBgd2luZG93YCBvciBgZG9jdW1lbnRgLlxuICogICAgICBQcm9iYWJseSBqdXN0IGJlc3QgdG8gbm90IHJlbHkgb24gaXQsIG9yIGxpc3RlbiB0byBgd2luZG93YCBmb2N1cyBldmVudHMgZGlyZWN0bHkuXG4gKiAzLiBBIGZvY3VzYWJsZSBlbGVtZW50IGlzIGNsaWNrZWQsIGV0Yy5cbiAqICAgICogVGhlIGBhY3RpdmVFbGVtZW50YCBpcyBzZXQgdG8gdGhlIG5ldyBlbGVtZW50IGJlZm9yZSBhbnkgZXZlbnQgZXZlbiBmaXJlcy5cbiAqICAgICogYGZvY3Vzb3V0YCBhbmQgYGJsdXJgIGFyZSAqbm90KiBmaXJlZCBvbiBgYm9keWAuXG4gKiAgICAqIGBmb2N1c2AgYW5kIGBmb2N1c2luYCBhcmUgZmlyZWQgb24gdGhlIG5ldyBlbGVtZW50LiBgcmVsYXRlZFRhcmdldGAgaXMgbnVsbC5cbiAqIDQuIEEgZm9jdXNhYmxlIGVsZW1lbnQgaXMgY2xpY2tlZCwgZXRjLlxuICogICAgKiAqKlRoZSBgYWN0aXZlRWxlbWVudGAgaXMgc2V0IHRvIHRoZSBgYm9keWAqKiBiZWZvcmUgYW55IGV2ZW50IGV2ZW4gZmlyZXMuXG4gKiAgICAqIGBibHVyYCBhbmQgYGZvY3Vzb3V0YCBhcmUgZmlyZWQgb24gdGhlIG9sZCBlbGVtZW50LiBgcmVsYXRlZFRhcmdldGAgaXMgdGhlIG5ldyBlbGVtZW50LlxuICogICAgKiBUaGUgYGFjdGl2ZUVsZW1lbnRgIGlzIG5vdyBzZXQgdG8gdGhlIG5ldyBlbGVtZW50LlxuICogICAgKiBgZm9jdXNpbmAgaXMgZmlyZWQgb24gdGhlIG5ldyBlbGVtZW50LiBgcmVsYXRlZFRhcmdldGAgaXMgdGhlIG9sZCBlbGVtZW50LlxuICogNS4gQW4gdW5mb2N1c2FibGUgZWxlbWVudCBpcyBjbGlja2VkLCB0ZXh0IGlzIHNlbGVjdGVkLCBldGMuXG4gKiAgICAqIFRoZSBgYWN0aXZlRWxlbWVudGAgaXMgc2V0IHRvIGBib2R5YC5cbiAqICAgICogYGJsdXJgIGFuZCBgZm9jdXNvdXRgIGFyZSBmaXJlZCBvbiB0aGUgb2xkIGVsZW1lbnQuIGByZWxhdGVkVGFyZ2V0YCBpcyBudWxsLlxuICogICAgKiBgZm9jdXNpbmAgaXMgKm5vdCogZmlyZWQgb24gYGJvZHlgLlxuICogXG4gKiBcbiAqIEluIHN1bW1hcnk6XG4gKiAxLiBGb2N1cyBldmVudHMgKmRvKiBub3RpZnkgdXMgb2YgYWxsIGNoYW5nZXMgaW4gZm9jdXMsIGJ1dCB0aGVyZSBpcyBubyBvbmUgc2luZ2xlIGNvbXByZWhlbnNpdmUgZXZlbnQgdGhhdCBwcm92aWRlcyB1cyB3aXRoIGFsbCBhdmFpbGFibGUgaW5mb3JtYXRpb24uXG4gKiAyLiBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgKmlzIG5vdCogYWx3YXlzIHRoZSBzYW1lIGFzIHdoYXQncyBiZWluZyByZWZlcmVuY2VkIGJ5IGEgZm9jdXMgZXZlbnQuIEluIHBhcnRpY3VsYXIsIGl0IG1heSBiZWNvbWUgYGJvZHlgIGF0IGFueSBhcmJpdHJhcnkgdGltZS5cbiAqIDMuIEEgYGJsdXJgIHdpdGhvdXQgYSBgZm9jdXNgIGNhbiBhbmQgd2lsbCBvY2N1ci4gVGhpcyBtZWFucyBpdCBpcyBub3QgcG9zc2libGUgdG8gc29sZWx5IHVzZSBgZm9jdXNgIHRvIGRldGVjdCBhbGwgY2hhbmdlcy5cbiAqIDQuIEEgYGJsdXJgIGV2ZW50IHdob3NlIGByZWxhdGVkVGFyZ2V0YCBpcyBudWxsIGluZGljYXRlcyB0aGF0IHRoZXJlIHdpbGwgYmUgbm8gZm9sbG93aW5nIGBmb2N1c2AgZXZlbnQuXG4gKiBcbiAqIFxuICogQHBhcmFtIGNhbGxiYWNrIFxuICogQHJldHVybnMgXG4gKi9cbmNvbnN0IF9kdW1teSA9IDA7XG5cbmNvbnN0IGFjdGl2ZUVsZW1lbnRVcGRhdGVycyA9IG5ldyBNYXA8V2luZG93IHwgbnVsbCB8IHVuZGVmaW5lZCwgU2V0PHVuZGVmaW5lZCB8ICgoZTogTm9kZSB8IG51bGwpID0+IHZvaWQpPj4oKTtcbmNvbnN0IGxhc3RBY3RpdmVFbGVtZW50VXBkYXRlcnMgPSBuZXcgTWFwPFdpbmRvdyB8IG51bGwgfCB1bmRlZmluZWQsIFNldDx1bmRlZmluZWQgfCAoKGU6IE5vZGUpID0+IHZvaWQpPj4oKTtcbmNvbnN0IHdpbmRvd0ZvY3VzZWRVcGRhdGVycyA9IG5ldyBNYXA8V2luZG93IHwgbnVsbCB8IHVuZGVmaW5lZCwgU2V0PHVuZGVmaW5lZCB8ICgoZm9jdXNlZDogYm9vbGVhbikgPT4gdm9pZCk+PigpO1xuY29uc3Qgd2luZG93c0ZvY3VzZWRVcGRhdGVycyA9IG5ldyBNYXA8V2luZG93IHwgbnVsbCB8IHVuZGVmaW5lZCwgYm9vbGVhbj4oKTtcblxuZnVuY3Rpb24gZm9yRWFjaFVwZGF0ZXI8VD4od2luZG93OiBXaW5kb3cgfCBudWxsIHwgdW5kZWZpbmVkLCBtYXA6IE1hcDxXaW5kb3cgfCBudWxsIHwgdW5kZWZpbmVkLCBTZXQ8dW5kZWZpbmVkIHwgKChlOiBUKSA9PiB2b2lkKT4+LCB2YWx1ZTogVCkge1xuICAgIGZvciAoY29uc3QgW290aGVyV2luZG93LCB1cGRhdGVyc10gb2YgbWFwKSB7XG4gICAgICAgIGlmICh3aW5kb3cgPT09IG90aGVyV2luZG93KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHVwZGF0ZXIgb2YgdXBkYXRlcnMpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVyPy4odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb2N1c291dChlOiBGb2N1c0V2ZW50KSB7XG4gICAgY29uc3Qgd2luZG93ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgICBpZiAoZS5yZWxhdGVkVGFyZ2V0ID09IG51bGwpIHtcbiAgICAgICAgZm9yRWFjaFVwZGF0ZXIod2luZG93LCBhY3RpdmVFbGVtZW50VXBkYXRlcnMsIG51bGwpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gSnVzdCB3YWl0IGZvciB0aGUgZm9jdXNpbiBldmVudC5cbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gZm9jdXNpbihlOiBGb2N1c0V2ZW50KSB7XG4gICAgY29uc3Qgd2luZG93ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgY29uc3QgY3VycmVudGx5Rm9jdXNlZEVsZW1lbnQgPSBlLnRhcmdldCBhcyAoRWxlbWVudCAmIEhUTUxPclNWR0VsZW1lbnQpO1xuICAgIGZvckVhY2hVcGRhdGVyKHdpbmRvdywgYWN0aXZlRWxlbWVudFVwZGF0ZXJzLCBjdXJyZW50bHlGb2N1c2VkRWxlbWVudCk7XG4gICAgZm9yRWFjaFVwZGF0ZXIod2luZG93LCBsYXN0QWN0aXZlRWxlbWVudFVwZGF0ZXJzLCBjdXJyZW50bHlGb2N1c2VkRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHdpbmRvd0ZvY3VzKGU6IEZvY3VzRXZlbnQpIHtcbiAgICBjb25zdCB3aW5kb3cgPSAoZS50YXJnZXQgaW5zdGFuY2VvZiBXaW5kb3cgPyBlLnRhcmdldCA6IGUuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIFdpbmRvdyA/IGUuY3VycmVudFRhcmdldCA6IChlLnRhcmdldCBhcyBFbGVtZW50KS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KTtcbiAgICB3aW5kb3dzRm9jdXNlZFVwZGF0ZXJzLnNldCh3aW5kb3csIHRydWUpO1xuICAgIGZvckVhY2hVcGRhdGVyKHdpbmRvdywgd2luZG93Rm9jdXNlZFVwZGF0ZXJzLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gd2luZG93Qmx1cihlOiBGb2N1c0V2ZW50KSB7XG4gICAgY29uc3Qgd2luZG93ID0gKGUudGFyZ2V0IGluc3RhbmNlb2YgV2luZG93ID8gZS50YXJnZXQgOiBlLmN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBXaW5kb3cgPyBlLmN1cnJlbnRUYXJnZXQgOiAoZS50YXJnZXQgYXMgRWxlbWVudCkub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldyk7XG4gICAgd2luZG93c0ZvY3VzZWRVcGRhdGVycy5zZXQod2luZG93LCBmYWxzZSk7XG4gICAgZm9yRWFjaFVwZGF0ZXIod2luZG93LCB3aW5kb3dGb2N1c2VkVXBkYXRlcnMsIGZhbHNlKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VBY3RpdmVFbGVtZW50UGFyYW1ldGVyczxUIGV4dGVuZHMgTm9kZT4ge1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGFueSB0aW1lIHRoZSBhY3RpdmUgZWxlbWVudCBjaGFuZ2VzLiBNdXN0IGJlIHN0YWJsZS5cbiAgICAgKi9cbiAgICBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2U/OiBPblBhc3NpdmVTdGF0ZUNoYW5nZTxUIHwgbnVsbD47XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYW55IHRpbWUgdGhlIGFjdGl2ZSBlbGVtZW50IGNoYW5nZXMgYW5kIGlzIG5vdCBudWxsLiBcbiAgICAgKiBNdXN0IGJlIHN0YWJsZS5cbiAgICAgKi9cbiAgICBvbkxhc3RBY3RpdmVFbGVtZW50Q2hhbmdlPzogT25QYXNzaXZlU3RhdGVDaGFuZ2U8VD47XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYW55IHRpbWUgdGhlIHdpbmRvdyBnYWlucy9sb3NlcyBmb2N1cy4gTXVzdCBiZSBzdGFibGUuXG4gICAgICovXG4gICAgb25XaW5kb3dGb2N1c2VkQ2hhbmdlPzogT25QYXNzaXZlU3RhdGVDaGFuZ2U8Ym9vbGVhbj47XG5cbiAgICBvbk1vdW50PzogVXNlUmVmRWxlbWVudFBhcmFtZXRlcnM8VD5bXCJvbk1vdW50XCJdO1xuICAgIG9uVW5tb3VudD86IFVzZVJlZkVsZW1lbnRQYXJhbWV0ZXJzPFQ+W1wib25Vbm1vdW50XCJdO1xuICAgIG9uTW91bnRDaGFuZ2U/OiBVc2VSZWZFbGVtZW50UGFyYW1ldGVyczxUPltcIm9uRWxlbWVudENoYW5nZVwiXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VBY3RpdmVFbGVtZW50UmV0dXJuVHlwZTxUIGV4dGVuZHMgTm9kZT4gZXh0ZW5kcyBPbWl0PFVzZVJlZkVsZW1lbnRSZXR1cm5UeXBlPFQ+LCBcInVzZVJlZkVsZW1lbnRQcm9wc1wiPiB7XG4gICAgLyoqIFJldHVybnMgd2hhdGV2ZXIgZWxlbWVudCBpcyBjdXJyZW50bHkgZm9jdXNlZCwgb3IgYG51bGxgIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50ICovXG4gICAgZ2V0QWN0aXZlRWxlbWVudDogKCkgPT4gVCB8IG51bGw7XG4gICAgLyoqIFJldHVybnMgd2hhdGV2ZXIgZWxlbWVudCBpcyBjdXJyZW50bHkgZm9jdXNlZCwgb3Igd2hhdGV2ZXIgZWxlbWVudCB3YXMgbW9zdCByZWNlbnRseSBmb2N1c2VkIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50ICovXG4gICAgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQ6ICgpID0+IFQ7XG4gICAgLyoqIFJldHVybnMgaWYgdGhlIHdpbmRvdyBpdHNlbGYgaGFzIGZvY3VzIG9yIG5vdCAqL1xuICAgIGdldFdpbmRvd0ZvY3VzZWQ6ICgpID0+IGJvb2xlYW47XG5cbiAgICB1c2VBY3RpdmVFbGVtZW50UHJvcHM6IFVzZVJlZkVsZW1lbnRSZXR1cm5UeXBlPFQ+W1widXNlUmVmRWxlbWVudFByb3BzXCJdO1xufVxuXG4vKipcbiAqIEFsbG93cyB5b3UgdG8gaW5zcGVjdCB3aGljaCBlbGVtZW50IGluIHRoZSBgZG9jdW1lbnRgIGN1cnJlbnRseSBoYXMgZm9jdXMsIHdoaWNoIHdhcyBtb3N0IHJlY2VudGx5IGZvY3VzZWQgaWYgbm9uZSBhcmUgY3VycmVudGx5LCBhbmQgd2hldGhlciBvciBub3QgdGhlIHdpbmRvdyBoYXMgZm9jdXMgYnkgcmV0dXJuaW5nIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxuICogKiBgZ2V0QWN0aXZlRWxlbWVudCgpYFxuICogKiBgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQoKWBcbiAqICogYGdldFdpbmRvd0ZvY3VzZWQoKWBcbiAqIFxuICogKFRoZSBkb2N1bWVudCdzIGJvZHkgcmVjZWl2aW5nIGZvY3VzLCBsaWtlIGl0IGRvZXMgd2hlbiB5b3UgY2xpY2sgb24gYW4gZW1wdHkgYXJlYSwgaXMgY291bnRlZCBhcyBubyBlbGVtZW50IGhhdmluZyBmb2N1cyBmb3IgYWxsIGludGVudHMgYW5kIHB1cnBvc2VzKVxuICogXG4gKiBUaGlzIGlzIGEgcGFzc2l2ZSBob29rLCBzbyBieSBkZWZhdWx0IGl0IHJldHVybnMgZ2V0dGVyIGZ1bmN0aW9ucyB0aGF0IHJlcG9ydCB0aGlzIGluZm9ybWF0aW9uIGJ1dCB0aGUgY29tcG9uZW50IHdpbGwgbm90IHJlLXJlbmRlciBieSBkZWZhdWx0IHdoZW4gdGhlIGFjdGl2ZSBlbGVtZW50IGNoYW5nZXMuXG4gKiBcbiAqIElmIHlvdSBuZWVkIHRoZSBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW4gdGhlIGFjdGl2ZSBlbGVtZW50IGNoYW5nZXMsIHVzZSB0aGUgYG9uKkNoYW5nZWAgYXJndW1lbnRzIHRvIHNldCBzb21lIHN0YXRlIG9uIHlvdXIgZW5kLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQWN0aXZlRWxlbWVudDxUIGV4dGVuZHMgTm9kZT4oeyBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uV2luZG93Rm9jdXNlZENoYW5nZSwgb25Nb3VudCwgb25Vbm1vdW50LCBvbk1vdW50Q2hhbmdlIH06IFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzPFQ+KTogVXNlQWN0aXZlRWxlbWVudFJldHVyblR5cGU8VD4ge1xuXG4gICAgdXNlRW5zdXJlU3RhYmlsaXR5KFwidXNlQWN0aXZlRWxlbWVudFwiLCBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uV2luZG93Rm9jdXNlZENoYW5nZSwgb25Nb3VudENoYW5nZSwgb25Nb3VudCwgb25Vbm1vdW50KTtcblxuICAgIGNvbnN0IHsgZ2V0RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50PFQ+KHtcbiAgICAgICAgb25Nb3VudCwgXG4gICAgICAgIG9uVW5tb3VudCxcbiAgICAgICAgb25FbGVtZW50Q2hhbmdlOiB1c2VDYWxsYmFjaygoZWxlbWVudDogVCB8IG51bGwsIHByZXZWYWx1ZTogVCB8IG51bGwgfCB1bmRlZmluZWQpID0+IHtcbiAgICAgICAgICAgIG9uTW91bnRDaGFuZ2U/LihlbGVtZW50LCBwcmV2VmFsdWUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICAgICAgICAgICAgICBjb25zdCB3aW5kb3cgPSBkb2N1bWVudD8uZGVmYXVsdFZpZXc7XG5cbiAgICAgICAgICAgICAgICBpZiAoKGFjdGl2ZUVsZW1lbnRVcGRhdGVycy5nZXQod2luZG93KT8uc2l6ZSA/PyAwKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudD8uYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgZm9jdXNpbiwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudD8uYWRkRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIGZvY3Vzb3V0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdz8uYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHdpbmRvd0ZvY3VzLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdz8uYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgd2luZG93Qmx1ciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFkZCB0aGVtIGV2ZW4gaWYgdGhleSdyZSB1bmRlZmluZWQgdG8gbW9yZSBlYXNpbHlcbiAgICAgICAgICAgICAgICAvLyBtYW5hZ2UgdGhlIFwiPjAgbWVhbnMgZG9uJ3QgYWRkIGhhbmRsZXJzXCIgbG9naWMuXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxBY3RpdmVFbGVtZW50VXBkYXRlcnMgPSBhY3RpdmVFbGVtZW50VXBkYXRlcnMuZ2V0KHdpbmRvdykgPz8gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsTGFzdEFjdGl2ZUVsZW1lbnRVcGRhdGVycyA9IGxhc3RBY3RpdmVFbGVtZW50VXBkYXRlcnMuZ2V0KHdpbmRvdykgPz8gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsV2luZG93Rm9jdXNlZFVwZGF0ZXJzID0gd2luZG93Rm9jdXNlZFVwZGF0ZXJzLmdldCh3aW5kb3cpID8/IG5ldyBTZXQoKTtcblxuICAgICAgICAgICAgICAgIGxvY2FsQWN0aXZlRWxlbWVudFVwZGF0ZXJzLmFkZChzZXRBY3RpdmVFbGVtZW50IGFzIFN0YXRlVXBkYXRlcjxOb2RlIHwgbnVsbD4pO1xuICAgICAgICAgICAgICAgIGxvY2FsTGFzdEFjdGl2ZUVsZW1lbnRVcGRhdGVycy5hZGQoc2V0TGFzdEFjdGl2ZUVsZW1lbnQgYXMgU3RhdGVVcGRhdGVyPE5vZGU+KTtcbiAgICAgICAgICAgICAgICBsb2NhbFdpbmRvd0ZvY3VzZWRVcGRhdGVycy5hZGQoc2V0V2luZG93Rm9jdXNlZCk7XG5cbiAgICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50VXBkYXRlcnMuc2V0KHdpbmRvdywgbG9jYWxBY3RpdmVFbGVtZW50VXBkYXRlcnMpO1xuICAgICAgICAgICAgICAgIGxhc3RBY3RpdmVFbGVtZW50VXBkYXRlcnMuc2V0KHdpbmRvdywgbG9jYWxMYXN0QWN0aXZlRWxlbWVudFVwZGF0ZXJzKTtcbiAgICAgICAgICAgICAgICB3aW5kb3dGb2N1c2VkVXBkYXRlcnMuc2V0KHdpbmRvdywgbG9jYWxXaW5kb3dGb2N1c2VkVXBkYXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlRWxlbWVudFVwZGF0ZXJzLmdldCh3aW5kb3cpIS5kZWxldGUoc2V0QWN0aXZlRWxlbWVudCBhcyBTdGF0ZVVwZGF0ZXI8Tm9kZSB8IG51bGw+KTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdEFjdGl2ZUVsZW1lbnRVcGRhdGVycy5nZXQod2luZG93KSEuZGVsZXRlKHNldExhc3RBY3RpdmVFbGVtZW50IGFzIFN0YXRlVXBkYXRlcjxOb2RlPik7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd0ZvY3VzZWRVcGRhdGVycy5nZXQod2luZG93KSEuZGVsZXRlKHNldFdpbmRvd0ZvY3VzZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50VXBkYXRlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIGZvY3VzaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBmb2N1c291dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3c/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB3aW5kb3dGb2N1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3c/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHdpbmRvd0JsdXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXSlcbiAgICB9KVxuXG4gICAgY29uc3QgW2dldEFjdGl2ZUVsZW1lbnQsIHNldEFjdGl2ZUVsZW1lbnRdID0gdXNlUGFzc2l2ZVN0YXRlPFQgfCBudWxsPihvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsIHJldHVybk51bGwpO1xuICAgIGNvbnN0IFtnZXRMYXN0QWN0aXZlRWxlbWVudCwgc2V0TGFzdEFjdGl2ZUVsZW1lbnRdID0gdXNlUGFzc2l2ZVN0YXRlPFQ+KG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIHJldHVybk51bGwgYXMgKCkgPT4gbmV2ZXIpO1xuICAgIGNvbnN0IFtnZXRXaW5kb3dGb2N1c2VkLCBzZXRXaW5kb3dGb2N1c2VkXSA9IHVzZVBhc3NpdmVTdGF0ZTxib29sZWFuPihvbldpbmRvd0ZvY3VzZWRDaGFuZ2UsIHJldHVyblRydWUpO1xuXG4gICAgcmV0dXJuIHsgZ2V0RWxlbWVudCwgdXNlQWN0aXZlRWxlbWVudFByb3BzOiB1c2VSZWZFbGVtZW50UHJvcHMsIGdldEFjdGl2ZUVsZW1lbnQsIGdldExhc3RBY3RpdmVFbGVtZW50LCBnZXRXaW5kb3dGb2N1c2VkIH07XG59XG4iLCJcclxuaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZUFjdGl2ZUVsZW1lbnQsIFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzLCBVc2VBY3RpdmVFbGVtZW50UmV0dXJuVHlwZSB9IGZyb20gXCIuL3VzZS1hY3RpdmUtZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBNZXJnZWRQcm9wcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcHJvcHNcIjtcclxuaW1wb3J0IHsgcmV0dXJuRmFsc2UsIHVzZUVuc3VyZVN0YWJpbGl0eSwgdXNlUGFzc2l2ZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcclxuaW1wb3J0IHsgVXNlUmVmRWxlbWVudFByb3BzUmV0dXJuVHlwZSwgVXNlUmVmRWxlbWVudFJldHVyblR5cGUgfSBmcm9tIFwiLi91c2UtcmVmLWVsZW1lbnRcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlRm9jdXNQYXJhbWV0ZXJzPFQgZXh0ZW5kcyBOb2RlPiBleHRlbmRzIFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzPFQ+IHtcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGUgZWxlbWVudCBpdHNlbGYgY3VycmVudGx5IGhhcyBmb2N1cy5cclxuICAgICAqL1xyXG4gICAgb25Gb2N1c2VkQ2hhbmdlZD8oZm9jdXNlZDogYm9vbGVhbik6IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMaWtlIGBmb2N1c2VkYCwgYnV0IGFsc28gKmFkZGl0aW9uYWxseSogaWYgYW55IGNoaWxkIGVsZW1lbnRzIGFyZSBmb2N1c2VkLlxyXG4gICAgICogXHJcbiAgICAgKiBAc2VlIHNldEZvY3VzZWRcclxuICAgICAqL1xyXG4gICAgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkPyhmb2N1c2VkOiBib29sZWFuKTogdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNpbWlsYXIgdG8gYHNldEZvY3VzZWRgLCBidXQgaWYgdGhlcmUgaXMgbm8gY3VycmVudGx5IGZvY3VzZWQgZWxlbWVudCwgaXMgYHRydWVgIGlmIHRoaXMgZWxlbWVudCB0aGF0ICpkaWQqIGhhdmUgZm9jdXMgbGFzdC5cclxuICAgICAqIFxyXG4gICAgICogVGhpcyBpcyBhbHdheXMgYHRydWVgIHdoaWxlIGBmb2N1c2VkYCBpcyBgdHJ1ZWAuIElmIGBmb2N1c2VkYCBpcyBgZmFsc2VgLCB0aGlzIG1heSBiZSBgdHJ1ZWAgb3IgYGZhbHNlYC5cclxuICAgICAqL1xyXG4gICAgb25MYXN0Rm9jdXNlZENoYW5nZWQ/KGZvY3VzZWQ6IGJvb2xlYW4pOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tYmluZXMgdGhlIGltcGxpY2F0aW9ucyBvZiBgc2V0TGFzdEZvY3VzZWRgIGFuZCBgc2V0Rm9jdXNlZElubmVyYC5cclxuICAgICAqL1xyXG4gICAgb25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZD8oZm9jdXNlZDogYm9vbGVhbik6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlSGFzRm9jdXNQcm9wc1BhcmFtZXRlcnM8VCBleHRlbmRzIEV2ZW50VGFyZ2V0PiBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPFQ+IHsgfVxyXG5cclxuZXhwb3J0IHR5cGUgVXNlSGFzRm9jdXNQcm9wc1JldHVyblR5cGU8VCBleHRlbmRzIEV2ZW50VGFyZ2V0LCBQIGV4dGVuZHMgVXNlSGFzRm9jdXNQcm9wc1BhcmFtZXRlcnM8VD4+ID0gTWVyZ2VkUHJvcHM8VCwgVXNlUmVmRWxlbWVudFByb3BzUmV0dXJuVHlwZTxULCB7IG9uRm9jdXM6IChlOiBGb2N1c0V2ZW50KSA9PiB2b2lkOyBvbkJsdXI6IChlOiBGb2N1c0V2ZW50KSA9PiB2b2lkOyB9PiwgUD47XHJcbi8qXHJcbmludGVyZmFjZSBVc2VGb2N1c1Jlc3VsdDxUIGV4dGVuZHMgRXZlbnRUYXJnZXQ+IHtcclxuICAgIHVzZUZvY3VzUHJvcHM6IDxQIGV4dGVuZHMgVXNlRm9jdXNQcm9wczxUPj4ocHJvcHM6IFApID0+IE1lcmdlZFByb3BzPEZvY3VzUHJvcHMsIFA+XHJcbn0qL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VIYXNGb2N1c1JldHVyblR5cGU8VCBleHRlbmRzIE5vZGU+IGV4dGVuZHMgT21pdDxVc2VSZWZFbGVtZW50UmV0dXJuVHlwZTxUPiwgXCJ1c2VSZWZFbGVtZW50UHJvcHNcIj4sIE9taXQ8VXNlQWN0aXZlRWxlbWVudFJldHVyblR5cGU8VD4sIFwidXNlQWN0aXZlRWxlbWVudFByb3BzXCI+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1vZGlmaWVzIHRoZSBlbGVtZW50IHRvIGJlIGFibGUgdG8gdHJhY2sgaXRzIG93biBmb2N1cyBzdGF0ZVxyXG4gICAgICovXHJcbiAgICB1c2VIYXNGb2N1c1Byb3BzOiA8UCBleHRlbmRzIFVzZUhhc0ZvY3VzUHJvcHNQYXJhbWV0ZXJzPFQ+Pihwcm9wczogUCkgPT4gVXNlSGFzRm9jdXNQcm9wc1JldHVyblR5cGU8VCwgUD47XHJcblxyXG4gICAgZ2V0Rm9jdXNlZCgpOiBib29sZWFuO1xyXG4gICAgZ2V0Rm9jdXNlZElubmVyKCk6IGJvb2xlYW47XHJcbiAgICBnZXRMYXN0Rm9jdXNlZCgpOiBib29sZWFuO1xyXG4gICAgZ2V0TGFzdEZvY3VzZWRJbm5lcigpOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlSGFzRm9jdXM8VCBleHRlbmRzIE5vZGU+KHsgb25Gb2N1c2VkQ2hhbmdlZCwgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkQ2hhbmdlZCwgb25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZCwgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSwgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbldpbmRvd0ZvY3VzZWRDaGFuZ2UgfTogVXNlRm9jdXNQYXJhbWV0ZXJzPFQ+KTogVXNlSGFzRm9jdXNSZXR1cm5UeXBlPFQ+IHtcclxuXHJcbiAgICB1c2VFbnN1cmVTdGFiaWxpdHkoXCJ1c2VIYXNGb2N1c1wiLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbkxhc3RBY3RpdmVFbGVtZW50Q2hhbmdlLCBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uV2luZG93Rm9jdXNlZENoYW5nZSk7XHJcblxyXG4gICAgY29uc3QgW2dldEZvY3VzZWQsIHNldEZvY3VzZWRdID0gdXNlUGFzc2l2ZVN0YXRlPGJvb2xlYW4+KG9uRm9jdXNlZENoYW5nZWQsIHJldHVybkZhbHNlKTtcclxuICAgIGNvbnN0IFtnZXRGb2N1c2VkSW5uZXIsIHNldEZvY3VzZWRJbm5lcl0gPSB1c2VQYXNzaXZlU3RhdGU8Ym9vbGVhbj4ob25Gb2N1c2VkSW5uZXJDaGFuZ2VkLCByZXR1cm5GYWxzZSk7XHJcbiAgICBjb25zdCBbZ2V0TGFzdEZvY3VzZWQsIHNldExhc3RGb2N1c2VkXSA9IHVzZVBhc3NpdmVTdGF0ZTxib29sZWFuPihvbkxhc3RGb2N1c2VkQ2hhbmdlZCwgcmV0dXJuRmFsc2UpO1xyXG4gICAgY29uc3QgW2dldExhc3RGb2N1c2VkSW5uZXIsIHNldExhc3RGb2N1c2VkSW5uZXJdID0gdXNlUGFzc2l2ZVN0YXRlPGJvb2xlYW4+KG9uTGFzdEZvY3VzZWRJbm5lckNoYW5nZWQsIHJldHVybkZhbHNlKTtcclxuXHJcbiAgICBjb25zdCB7IGdldEFjdGl2ZUVsZW1lbnQsIGdldExhc3RBY3RpdmVFbGVtZW50LCBnZXRXaW5kb3dGb2N1c2VkLCB1c2VBY3RpdmVFbGVtZW50UHJvcHMsIGdldEVsZW1lbnQgfSA9IHVzZUFjdGl2ZUVsZW1lbnQ8VD4oe1xyXG4gICAgICAgIG9uQWN0aXZlRWxlbWVudENoYW5nZTogdXNlQ2FsbGJhY2s8Tm9uTnVsbGFibGU8VXNlQWN0aXZlRWxlbWVudFBhcmFtZXRlcnM8VD5bXCJvbkFjdGl2ZUVsZW1lbnRDaGFuZ2VcIl0+PigoYWN0aXZlRWxlbWVudCwgcHJldkFjdGl2ZUVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZkVsZW1lbnQgPSBnZXRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWQgPSAoc2VsZkVsZW1lbnQgIT0gbnVsbCAmJiAoc2VsZkVsZW1lbnQgPT0gYWN0aXZlRWxlbWVudCBhcyBOb2RlIHwgbnVsbCkpO1xyXG4gICAgICAgICAgICBjb25zdCBmb2N1c2VkSW5uZXIgPSAoISFzZWxmRWxlbWVudD8uY29udGFpbnMoYWN0aXZlRWxlbWVudCBhcyBOb2RlIHwgbnVsbCkpO1xyXG4gICAgICAgICAgICBzZXRGb2N1c2VkKGZvY3VzZWQpO1xyXG4gICAgICAgICAgICBzZXRGb2N1c2VkSW5uZXIoZm9jdXNlZElubmVyKTtcclxuICAgICAgICAgICAgb25BY3RpdmVFbGVtZW50Q2hhbmdlPy4oYWN0aXZlRWxlbWVudCwgcHJldkFjdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH0sIFtdKSxcclxuICAgICAgICBvbkxhc3RBY3RpdmVFbGVtZW50Q2hhbmdlOiB1c2VDYWxsYmFjazxOb25OdWxsYWJsZTxVc2VBY3RpdmVFbGVtZW50UGFyYW1ldGVyczxUPltcIm9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2VcIl0+PigobGFzdEFjdGl2ZUVsZW1lbnQsIHByZXZMYXN0QWN0aXZlRWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGdldEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgY29uc3QgZm9jdXNlZCA9IChzZWxmRWxlbWVudCAhPSBudWxsICYmIChzZWxmRWxlbWVudCA9PSBsYXN0QWN0aXZlRWxlbWVudCBhcyBOb2RlIHwgbnVsbCkpO1xyXG4gICAgICAgICAgICBjb25zdCBmb2N1c2VkSW5uZXIgPSAoISFzZWxmRWxlbWVudD8uY29udGFpbnMobGFzdEFjdGl2ZUVsZW1lbnQgYXMgTm9kZSB8IG51bGwpKTtcclxuICAgICAgICAgICAgc2V0TGFzdEZvY3VzZWQoZm9jdXNlZCk7XHJcbiAgICAgICAgICAgIHNldExhc3RGb2N1c2VkSW5uZXIoZm9jdXNlZElubmVyKTtcclxuICAgICAgICAgICAgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZT8uKGxhc3RBY3RpdmVFbGVtZW50LCBwcmV2TGFzdEFjdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH0sIFtdKSxcclxuICAgICAgICBvbldpbmRvd0ZvY3VzZWRDaGFuZ2VcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHVzZUhhc0ZvY3VzUHJvcHMgPSB1c2VDYWxsYmFjayg8UCBleHRlbmRzIFVzZUhhc0ZvY3VzUHJvcHNQYXJhbWV0ZXJzPFQ+Pihwcm9wczogUCkgPT4geyByZXR1cm4gdXNlQWN0aXZlRWxlbWVudFByb3BzKHByb3BzKTsgfSwgW3VzZUFjdGl2ZUVsZW1lbnRQcm9wc10pO1xyXG5cclxuXHJcbiAgICByZXR1cm4geyB1c2VIYXNGb2N1c1Byb3BzLCBnZXRFbGVtZW50LCBnZXRGb2N1c2VkLCBnZXRGb2N1c2VkSW5uZXIsIGdldExhc3RGb2N1c2VkLCBnZXRMYXN0Rm9jdXNlZElubmVyLCBnZXRBY3RpdmVFbGVtZW50LCBnZXRMYXN0QWN0aXZlRWxlbWVudCwgZ2V0V2luZG93Rm9jdXNlZCB9O1xyXG59XHJcbiIsImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuaW1wb3J0IHsgdXNlU3RhYmxlR2V0dGVyIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1nZXR0ZXJcIjtcblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlSW50ZXJ2YWwge1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbXMgdG8gd2FpdCBiZWZvcmUgaW52b2tpbmcgYGNhbGxiYWNrYC5cbiAgICAgKi9cbiAgICBpbnRlcnZhbDogbnVtYmVyIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBgdGltZW91dGAgbXMgYWZ0ZXIgbW91bnQsIG9yIHRoZSBsYXN0IGNoYW5nZSB0byBgdHJpZ2dlckluZGV4YC5cbiAgICAgKi9cbiAgICBjYWxsYmFjazogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUludGVydmFsKHsgaW50ZXJ2YWwsIGNhbGxiYWNrIH06IFVzZUludGVydmFsKSB7XG4gICAgLy8gR2V0IGEgd3JhcHBlciBhcm91bmQgdGhlIGdpdmVuIGNhbGxiYWNrIHRoYXQncyBzdGFibGVcbiAgICBjb25zdCBzdGFibGVDYWxsYmFjayA9IHVzZVN0YWJsZUNhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICBjb25zdCBnZXRJbnRlcnZhbCA9IHVzZVN0YWJsZUdldHRlcihpbnRlcnZhbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IGdldEludGVydmFsKCk7XG4gICAgICAgIGxldCBsYXN0RGVsYXlVc2VkID0gaW50ZXJ2YWw7XG5cbiAgICAgICAgaWYgKGludGVydmFsID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG5cblxuICAgICAgICAvLyBHZXQgYSB3cmFwcGVyIGFyb3VuZCB0aGUgd3JhcHBlciBhcm91bmQgdGhlIGNhbGxiYWNrXG4gICAgICAgIC8vIHRoYXQgY2xlYXJzIGFuZCByZXNldHMgdGhlIGludGVydmFsIGlmIGl0IGNoYW5nZXMuXG4gICAgICAgIGNvbnN0IGFkanVzdGFibGVDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgIHN0YWJsZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50SW50ZXJ2YWwgPSBnZXRJbnRlcnZhbCgpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbnRlcnZhbCAhPSBsYXN0RGVsYXlVc2VkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SW50ZXJ2YWwgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlID0gc2V0SW50ZXJ2YWwoYWRqdXN0YWJsZUNhbGxiYWNrLCBsYXN0RGVsYXlVc2VkID0gY3VycmVudEludGVydmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgaGFuZGxlID0gc2V0SW50ZXJ2YWwoYWRqdXN0YWJsZUNhbGxiYWNrLCBpbnRlcnZhbCk7XG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGhhbmRsZSk7XG4gICAgfSwgW10pO1xufVxuXG4iLCJjb25zdCBjYW5kaWRhdGVTZWxlY3RvcnMgPSBbXG4gICdpbnB1dCcsXG4gICdzZWxlY3QnLFxuICAndGV4dGFyZWEnLFxuICAnYVtocmVmXScsXG4gICdidXR0b24nLFxuICAnW3RhYmluZGV4XTpub3Qoc2xvdCknLFxuICAnYXVkaW9bY29udHJvbHNdJyxcbiAgJ3ZpZGVvW2NvbnRyb2xzXScsXG4gICdbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdKScsXG4gICdkZXRhaWxzPnN1bW1hcnk6Zmlyc3Qtb2YtdHlwZScsXG4gICdkZXRhaWxzJyxcbl07XG5jb25zdCBjYW5kaWRhdGVTZWxlY3RvciA9IC8qICNfX1BVUkVfXyAqLyBjYW5kaWRhdGVTZWxlY3RvcnMuam9pbignLCcpO1xuXG5jb25zdCBOb0VsZW1lbnQgPSB0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCc7XG5cbmNvbnN0IG1hdGNoZXMgPSBOb0VsZW1lbnRcbiAgPyBmdW5jdGlvbiAoKSB7fVxuICA6IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgfHxcbiAgICBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcblxuY29uc3QgZ2V0Um9vdE5vZGUgPVxuICAhTm9FbGVtZW50ICYmIEVsZW1lbnQucHJvdG90eXBlLmdldFJvb3ROb2RlXG4gICAgPyAoZWxlbWVudCkgPT4gZWxlbWVudC5nZXRSb290Tm9kZSgpXG4gICAgOiAoZWxlbWVudCkgPT4gZWxlbWVudC5vd25lckRvY3VtZW50O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgY29udGFpbmVyIHRvIGNoZWNrIGluXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVDb250YWluZXIgYWRkIGNvbnRhaW5lciB0byBjaGVja1xuICogQHBhcmFtIHsobm9kZTogRWxlbWVudCkgPT4gYm9vbGVhbn0gZmlsdGVyIGZpbHRlciBjYW5kaWRhdGVzXG4gKiBAcmV0dXJucyB7RWxlbWVudFtdfVxuICovXG5jb25zdCBnZXRDYW5kaWRhdGVzID0gZnVuY3Rpb24gKGVsLCBpbmNsdWRlQ29udGFpbmVyLCBmaWx0ZXIpIHtcbiAgbGV0IGNhbmRpZGF0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoXG4gICAgZWwucXVlcnlTZWxlY3RvckFsbChjYW5kaWRhdGVTZWxlY3RvcilcbiAgKTtcbiAgaWYgKGluY2x1ZGVDb250YWluZXIgJiYgbWF0Y2hlcy5jYWxsKGVsLCBjYW5kaWRhdGVTZWxlY3RvcikpIHtcbiAgICBjYW5kaWRhdGVzLnVuc2hpZnQoZWwpO1xuICB9XG4gIGNhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzLmZpbHRlcihmaWx0ZXIpO1xuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIEdldFNoYWRvd1Jvb3RcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCB0byBjaGVjayBmb3Igc2hhZG93IHJvb3RcbiAqIEByZXR1cm5zIHtTaGFkb3dSb290fGJvb2xlYW59IFNoYWRvd1Jvb3QgaWYgYXZhaWxhYmxlIG9yIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBhIHNoYWRvd1Jvb3QgaXMgYXR0YWNoZWQgYnV0IG5vdCBhdmFpbGFibGUuXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgU2hhZG93Um9vdEZpbHRlclxuICogQHBhcmFtIHtFbGVtZW50fSBzaGFkb3dIb3N0Tm9kZSB0aGUgZWxlbWVudCB3aGljaCBjb250YWlucyBzaGFkb3cgY29udGVudFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgYSBzaGFkb3cgcm9vdCBjb3VsZCBwb3RlbnRpYWxseSBjb250YWluIHZhbGlkIGNhbmRpZGF0ZXMuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDYW5kaWRhdGVzU2NvcGVcbiAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gc2NvcGUgY29udGFpbnMgaW5uZXIgY2FuZGlkYXRlc1xuICogQHByb3BlcnR5IHtFbGVtZW50W119IGNhbmRpZGF0ZXNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEl0ZXJhdGl2ZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7R2V0U2hhZG93Um9vdHxib29sZWFufSBnZXRTaGFkb3dSb290IHRydWUgaWYgc2hhZG93IHN1cHBvcnQgaXMgZW5hYmxlZDsgZmFsc3kgaWYgbm90O1xuICogIGlmIGEgZnVuY3Rpb24sIGltcGxpZXMgc2hhZG93IHN1cHBvcnQgaXMgZW5hYmxlZCBhbmQgZWl0aGVyIHJldHVybnMgdGhlIHNoYWRvdyByb290IG9mIGFuIGVsZW1lbnRcbiAqICBvciBhIGJvb2xlYW4gc3RhdGluZyBpZiBpdCBoYXMgYW4gdW5kaXNjbG9zZWQgc2hhZG93IHJvb3RcbiAqIEBwcm9wZXJ0eSB7KG5vZGU6IEVsZW1lbnQpID0+IGJvb2xlYW59IGZpbHRlciBmaWx0ZXIgY2FuZGlkYXRlc1xuICogQHByb3BlcnR5IHtib29sZWFufSBmbGF0dGVuIGlmIHRydWUgdGhlbiByZXN1bHQgd2lsbCBmbGF0dGVuIGFueSBDYW5kaWRhdGVzU2NvcGUgaW50byB0aGUgcmV0dXJuZWQgbGlzdFxuICogQHByb3BlcnR5IHtTaGFkb3dSb290RmlsdGVyfSBzaGFkb3dSb290RmlsdGVyIGZpbHRlciBzaGFkb3cgcm9vdHM7XG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnRbXX0gZWxlbWVudHMgbGlzdCBvZiBlbGVtZW50IGNvbnRhaW5lcnMgdG8gbWF0Y2ggY2FuZGlkYXRlcyBmcm9tXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVDb250YWluZXIgYWRkIGNvbnRhaW5lciBsaXN0IHRvIGNoZWNrXG4gKiBAcGFyYW0ge0l0ZXJhdGl2ZU9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtBcnJheS48RWxlbWVudHxDYW5kaWRhdGVzU2NvcGU+fVxuICovXG5jb25zdCBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkgPSBmdW5jdGlvbiAoXG4gIGVsZW1lbnRzLFxuICBpbmNsdWRlQ29udGFpbmVyLFxuICBvcHRpb25zXG4pIHtcbiAgY29uc3QgY2FuZGlkYXRlcyA9IFtdO1xuICBjb25zdCBlbGVtZW50c1RvQ2hlY2sgPSBBcnJheS5mcm9tKGVsZW1lbnRzKTtcbiAgd2hpbGUgKGVsZW1lbnRzVG9DaGVjay5sZW5ndGgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNUb0NoZWNrLnNoaWZ0KCk7XG4gICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ1NMT1QnKSB7XG4gICAgICAvLyBhZGQgc2hhZG93IGRvbSBzbG90IHNjb3BlIChzbG90IGl0c2VsZiBjYW5ub3QgYmUgZm9jdXNhYmxlKVxuICAgICAgY29uc3QgYXNzaWduZWQgPSBlbGVtZW50LmFzc2lnbmVkRWxlbWVudHMoKTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBhc3NpZ25lZC5sZW5ndGggPyBhc3NpZ25lZCA6IGVsZW1lbnQuY2hpbGRyZW47XG4gICAgICBjb25zdCBuZXN0ZWRDYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5KGNvbnRlbnQsIHRydWUsIG9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMuZmxhdHRlbikge1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2goLi4ubmVzdGVkQ2FuZGlkYXRlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2goe1xuICAgICAgICAgIHNjb3BlOiBlbGVtZW50LFxuICAgICAgICAgIGNhbmRpZGF0ZXM6IG5lc3RlZENhbmRpZGF0ZXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjaGVjayBjYW5kaWRhdGUgZWxlbWVudFxuICAgICAgY29uc3QgdmFsaWRDYW5kaWRhdGUgPSBtYXRjaGVzLmNhbGwoZWxlbWVudCwgY2FuZGlkYXRlU2VsZWN0b3IpO1xuICAgICAgaWYgKFxuICAgICAgICB2YWxpZENhbmRpZGF0ZSAmJlxuICAgICAgICBvcHRpb25zLmZpbHRlcihlbGVtZW50KSAmJlxuICAgICAgICAoaW5jbHVkZUNvbnRhaW5lciB8fCAhZWxlbWVudHMuaW5jbHVkZXMoZWxlbWVudCkpXG4gICAgICApIHtcbiAgICAgICAgY2FuZGlkYXRlcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBpdGVyYXRlIG92ZXIgc2hhZG93IGNvbnRlbnQgaWYgcG9zc2libGVcbiAgICAgIGNvbnN0IHNoYWRvd1Jvb3QgPVxuICAgICAgICBlbGVtZW50LnNoYWRvd1Jvb3QgfHxcbiAgICAgICAgLy8gY2hlY2sgZm9yIGFuIHVuZGlzY2xvc2VkIHNoYWRvd1xuICAgICAgICAodHlwZW9mIG9wdGlvbnMuZ2V0U2hhZG93Um9vdCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgIG9wdGlvbnMuZ2V0U2hhZG93Um9vdChlbGVtZW50KSk7XG5cbiAgICAgIGNvbnN0IHZhbGlkU2hhZG93Um9vdCA9XG4gICAgICAgICFvcHRpb25zLnNoYWRvd1Jvb3RGaWx0ZXIgfHwgb3B0aW9ucy5zaGFkb3dSb290RmlsdGVyKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2hhZG93Um9vdCAmJiB2YWxpZFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgLy8gYWRkIHNoYWRvdyBkb20gc2NvcGUgSUlGIGEgc2hhZG93IHJvb3Qgbm9kZSB3YXMgZ2l2ZW47IG90aGVyd2lzZSwgYW4gdW5kaXNjbG9zZWRcbiAgICAgICAgLy8gIHNoYWRvdyBleGlzdHMsIHNvIGxvb2sgYXQgbGlnaHQgZG9tIGNoaWxkcmVuIGFzIGZhbGxiYWNrIEJVVCBjcmVhdGUgYSBzY29wZSBmb3IgYW55XG4gICAgICAgIC8vICBjaGlsZCBjYW5kaWRhdGVzIGZvdW5kIGJlY2F1c2UgdGhleSdyZSBsaWtlbHkgc2xvdHRlZCBlbGVtZW50cyAoZWxlbWVudHMgdGhhdCBhcmVcbiAgICAgICAgLy8gIGNoaWxkcmVuIG9mIHRoZSB3ZWIgY29tcG9uZW50IGVsZW1lbnQgKHdoaWNoIGhhcyB0aGUgc2hhZG93KSwgaW4gdGhlIGxpZ2h0IGRvbSwgYnV0XG4gICAgICAgIC8vICBzbG90dGVkIHNvbWV3aGVyZSBfaW5zaWRlXyB0aGUgdW5kaXNjbG9zZWQgc2hhZG93KSAtLSB0aGUgc2NvcGUgaXMgY3JlYXRlZCBiZWxvdyxcbiAgICAgICAgLy8gIF9hZnRlcl8gd2UgcmV0dXJuIGZyb20gdGhpcyByZWN1cnNpdmUgY2FsbFxuICAgICAgICBjb25zdCBuZXN0ZWRDYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5KFxuICAgICAgICAgIHNoYWRvd1Jvb3QgPT09IHRydWUgPyBlbGVtZW50LmNoaWxkcmVuIDogc2hhZG93Um9vdC5jaGlsZHJlbixcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5mbGF0dGVuKSB7XG4gICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKC4uLm5lc3RlZENhbmRpZGF0ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7XG4gICAgICAgICAgICBzY29wZTogZWxlbWVudCxcbiAgICAgICAgICAgIGNhbmRpZGF0ZXM6IG5lc3RlZENhbmRpZGF0ZXMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoZXJlJ3Mgbm90IHNoYWRvdyBzbyBqdXN0IGRpZyBpbnRvIHRoZSBlbGVtZW50J3MgKGxpZ2h0IGRvbSkgY2hpbGRyZW5cbiAgICAgICAgLy8gIF9fd2l0aG91dF9fIGdpdmluZyB0aGUgZWxlbWVudCBzcGVjaWFsIHNjb3BlIHRyZWF0bWVudFxuICAgICAgICBlbGVtZW50c1RvQ2hlY2sudW5zaGlmdCguLi5lbGVtZW50LmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZXM7XG59O1xuXG5jb25zdCBnZXRUYWJpbmRleCA9IGZ1bmN0aW9uIChub2RlLCBpc1Njb3BlKSB7XG4gIGlmIChub2RlLnRhYkluZGV4IDwgMCkge1xuICAgIC8vIGluIENocm9tZSwgPGRldGFpbHMvPiwgPGF1ZGlvIGNvbnRyb2xzLz4gYW5kIDx2aWRlbyBjb250cm9scy8+IGVsZW1lbnRzIGdldCBhIGRlZmF1bHRcbiAgICAvLyBgdGFiSW5kZXhgIG9mIC0xIHdoZW4gdGhlICd0YWJpbmRleCcgYXR0cmlidXRlIGlzbid0IHNwZWNpZmllZCBpbiB0aGUgRE9NLFxuICAgIC8vIHlldCB0aGV5IGFyZSBzdGlsbCBwYXJ0IG9mIHRoZSByZWd1bGFyIHRhYiBvcmRlcjsgaW4gRkYsIHRoZXkgZ2V0IGEgZGVmYXVsdFxuICAgIC8vIGB0YWJJbmRleGAgb2YgMDsgc2luY2UgQ2hyb21lIHN0aWxsIHB1dHMgdGhvc2UgZWxlbWVudHMgaW4gdGhlIHJlZ3VsYXIgdGFiXG4gICAgLy8gb3JkZXIsIGNvbnNpZGVyIHRoZWlyIHRhYiBpbmRleCB0byBiZSAwLlxuICAgIC8vIEFsc28gYnJvd3NlcnMgZG8gbm90IHJldHVybiBgdGFiSW5kZXhgIGNvcnJlY3RseSBmb3IgY29udGVudEVkaXRhYmxlIG5vZGVzO1xuICAgIC8vIHNvIGlmIHRoZXkgZG9uJ3QgaGF2ZSBhIHRhYmluZGV4IGF0dHJpYnV0ZSBzcGVjaWZpY2FsbHkgc2V0LCBhc3N1bWUgaXQncyAwLlxuICAgIC8vXG4gICAgLy8gaXNTY29wZSBpcyBwb3NpdGl2ZSBmb3IgY3VzdG9tIGVsZW1lbnQgd2l0aCBzaGFkb3cgcm9vdCBvciBzbG90IHRoYXQgYnkgZGVmYXVsdFxuICAgIC8vIGhhdmUgdGFiSW5kZXggLTEsIGJ1dCBuZWVkIHRvIGJlIHNvcnRlZCBieSBkb2N1bWVudCBvcmRlciBpbiBvcmRlciBmb3IgdGhlaXJcbiAgICAvLyBjb250ZW50IHRvIGJlIGluc2VydGVkIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgaWYgKFxuICAgICAgKGlzU2NvcGUgfHxcbiAgICAgICAgL14oQVVESU98VklERU98REVUQUlMUykkLy50ZXN0KG5vZGUudGFnTmFtZSkgfHxcbiAgICAgICAgbm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkgJiZcbiAgICAgIGlzTmFOKHBhcnNlSW50KG5vZGUuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpLCAxMCkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbm9kZS50YWJJbmRleDtcbn07XG5cbmNvbnN0IHNvcnRPcmRlcmVkVGFiYmFibGVzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgcmV0dXJuIGEudGFiSW5kZXggPT09IGIudGFiSW5kZXhcbiAgICA/IGEuZG9jdW1lbnRPcmRlciAtIGIuZG9jdW1lbnRPcmRlclxuICAgIDogYS50YWJJbmRleCAtIGIudGFiSW5kZXg7XG59O1xuXG5jb25zdCBpc0lucHV0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gJ0lOUFVUJztcbn07XG5cbmNvbnN0IGlzSGlkZGVuSW5wdXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICByZXR1cm4gaXNJbnB1dChub2RlKSAmJiBub2RlLnR5cGUgPT09ICdoaWRkZW4nO1xufTtcblxuY29uc3QgaXNEZXRhaWxzV2l0aFN1bW1hcnkgPSBmdW5jdGlvbiAobm9kZSkge1xuICBjb25zdCByID1cbiAgICBub2RlLnRhZ05hbWUgPT09ICdERVRBSUxTJyAmJlxuICAgIEFycmF5LnByb3RvdHlwZS5zbGljZVxuICAgICAgLmFwcGx5KG5vZGUuY2hpbGRyZW4pXG4gICAgICAuc29tZSgoY2hpbGQpID0+IGNoaWxkLnRhZ05hbWUgPT09ICdTVU1NQVJZJyk7XG4gIHJldHVybiByO1xufTtcblxuY29uc3QgZ2V0Q2hlY2tlZFJhZGlvID0gZnVuY3Rpb24gKG5vZGVzLCBmb3JtKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobm9kZXNbaV0uY2hlY2tlZCAmJiBub2Rlc1tpXS5mb3JtID09PSBmb3JtKSB7XG4gICAgICByZXR1cm4gbm9kZXNbaV07XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBpc1RhYmJhYmxlUmFkaW8gPSBmdW5jdGlvbiAobm9kZSkge1xuICBpZiAoIW5vZGUubmFtZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IHJhZGlvU2NvcGUgPSBub2RlLmZvcm0gfHwgZ2V0Um9vdE5vZGUobm9kZSk7XG4gIGNvbnN0IHF1ZXJ5UmFkaW9zID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gcmFkaW9TY29wZS5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgJ2lucHV0W3R5cGU9XCJyYWRpb1wiXVtuYW1lPVwiJyArIG5hbWUgKyAnXCJdJ1xuICAgICk7XG4gIH07XG5cbiAgbGV0IHJhZGlvU2V0O1xuICBpZiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2Ygd2luZG93LkNTUyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2Ygd2luZG93LkNTUy5lc2NhcGUgPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmFkaW9TZXQgPSBxdWVyeVJhZGlvcyh3aW5kb3cuQ1NTLmVzY2FwZShub2RlLm5hbWUpKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgcmFkaW9TZXQgPSBxdWVyeVJhZGlvcyhub2RlLm5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdMb29rcyBsaWtlIHlvdSBoYXZlIGEgcmFkaW8gYnV0dG9uIHdpdGggYSBuYW1lIGF0dHJpYnV0ZSBjb250YWluaW5nIGludmFsaWQgQ1NTIHNlbGVjdG9yIGNoYXJhY3RlcnMgYW5kIG5lZWQgdGhlIENTUy5lc2NhcGUgcG9seWZpbGw6ICVzJyxcbiAgICAgICAgZXJyLm1lc3NhZ2VcbiAgICAgICk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY2hlY2tlZCA9IGdldENoZWNrZWRSYWRpbyhyYWRpb1NldCwgbm9kZS5mb3JtKTtcbiAgcmV0dXJuICFjaGVja2VkIHx8IGNoZWNrZWQgPT09IG5vZGU7XG59O1xuXG5jb25zdCBpc1JhZGlvID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIGlzSW5wdXQobm9kZSkgJiYgbm9kZS50eXBlID09PSAncmFkaW8nO1xufTtcblxuY29uc3QgaXNOb25UYWJiYWJsZVJhZGlvID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIGlzUmFkaW8obm9kZSkgJiYgIWlzVGFiYmFibGVSYWRpbyhub2RlKTtcbn07XG5cbmNvbnN0IGlzWmVyb0FyZWEgPSBmdW5jdGlvbiAobm9kZSkge1xuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB3aWR0aCA9PT0gMCAmJiBoZWlnaHQgPT09IDA7XG59O1xuY29uc3QgaXNIaWRkZW4gPSBmdW5jdGlvbiAobm9kZSwgeyBkaXNwbGF5Q2hlY2ssIGdldFNoYWRvd1Jvb3QgfSkge1xuICAvLyBOT1RFOiB2aXNpYmlsaXR5IHdpbGwgYmUgYHVuZGVmaW5lZGAgaWYgbm9kZSBpcyBkZXRhY2hlZCBmcm9tIHRoZSBkb2N1bWVudFxuICAvLyAgKHNlZSBub3RlcyBhYm91dCB0aGlzIGZ1cnRoZXIgZG93biksIHdoaWNoIG1lYW5zIHdlIHdpbGwgY29uc2lkZXIgaXQgdmlzaWJsZVxuICAvLyAgKHRoaXMgaXMgbGVnYWN5IGJlaGF2aW9yIGZyb20gYSB2ZXJ5IGxvbmcgd2F5IGJhY2spXG4gIC8vIE5PVEU6IHdlIGNoZWNrIHRoaXMgcmVnYXJkbGVzcyBvZiBgZGlzcGxheUNoZWNrPVwibm9uZVwiYCBiZWNhdXNlIHRoaXMgaXMgYVxuICAvLyAgX3Zpc2liaWxpdHlfIGNoZWNrLCBub3QgYSBfZGlzcGxheV8gY2hlY2tcbiAgaWYgKGdldENvbXB1dGVkU3R5bGUobm9kZSkudmlzaWJpbGl0eSA9PT0gJ2hpZGRlbicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IGlzRGlyZWN0U3VtbWFyeSA9IG1hdGNoZXMuY2FsbChub2RlLCAnZGV0YWlscz5zdW1tYXJ5OmZpcnN0LW9mLXR5cGUnKTtcbiAgY29uc3Qgbm9kZVVuZGVyRGV0YWlscyA9IGlzRGlyZWN0U3VtbWFyeSA/IG5vZGUucGFyZW50RWxlbWVudCA6IG5vZGU7XG4gIGlmIChtYXRjaGVzLmNhbGwobm9kZVVuZGVyRGV0YWlscywgJ2RldGFpbHM6bm90KFtvcGVuXSkgKicpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBUaGUgcm9vdCBub2RlIGlzIHRoZSBzaGFkb3cgcm9vdCBpZiB0aGUgbm9kZSBpcyBpbiBhIHNoYWRvdyBET007IHNvbWUgZG9jdW1lbnQgb3RoZXJ3aXNlXG4gIC8vICAoYnV0IE5PVCBfdGhlXyBkb2N1bWVudDsgc2VlIHNlY29uZCAnSWYnIGNvbW1lbnQgYmVsb3cgZm9yIG1vcmUpLlxuICAvLyBJZiByb290Tm9kZSBpcyBzaGFkb3cgcm9vdCwgaXQnbGwgaGF2ZSBhIGhvc3QsIHdoaWNoIGlzIHRoZSBlbGVtZW50IHRvIHdoaWNoIHRoZSBzaGFkb3dcbiAgLy8gIGlzIGF0dGFjaGVkLCBhbmQgdGhlIG9uZSB3ZSBuZWVkIHRvIGNoZWNrIGlmIGl0J3MgaW4gdGhlIGRvY3VtZW50IG9yIG5vdCAoYmVjYXVzZSB0aGVcbiAgLy8gIHNoYWRvdywgYW5kIGFsbCBub2RlcyBpdCBjb250YWlucywgaXMgbmV2ZXIgY29uc2lkZXJlZCBpbiB0aGUgZG9jdW1lbnQgc2luY2Ugc2hhZG93c1xuICAvLyAgYmVoYXZlIGxpa2Ugc2VsZi1jb250YWluZWQgRE9NczsgYnV0IGlmIHRoZSBzaGFkb3cncyBIT1NULCB3aGljaCBpcyBwYXJ0IG9mIHRoZSBkb2N1bWVudCxcbiAgLy8gIGlzIGhpZGRlbiwgb3IgaXMgbm90IGluIHRoZSBkb2N1bWVudCBpdHNlbGYgYnV0IGlzIGRldGFjaGVkLCBpdCB3aWxsIGFmZmVjdCB0aGUgc2hhZG93J3NcbiAgLy8gIHZpc2liaWxpdHksIGluY2x1ZGluZyBhbGwgdGhlIG5vZGVzIGl0IGNvbnRhaW5zKS4gVGhlIGhvc3QgY291bGQgYmUgYW55IG5vcm1hbCBub2RlLFxuICAvLyAgb3IgYSBjdXN0b20gZWxlbWVudCAoaS5lLiB3ZWIgY29tcG9uZW50KS4gRWl0aGVyIHdheSwgdGhhdCdzIHRoZSBvbmUgdGhhdCBpcyBjb25zaWRlcmVkXG4gIC8vICBwYXJ0IG9mIHRoZSBkb2N1bWVudCwgbm90IHRoZSBzaGFkb3cgcm9vdCwgbm9yIGFueSBvZiBpdHMgY2hpbGRyZW4gKGkuZS4gdGhlIG5vZGUgYmVpbmdcbiAgLy8gIHRlc3RlZCkuXG4gIC8vIElmIHJvb3ROb2RlIGlzIG5vdCBhIHNoYWRvdyByb290LCBpdCB3b24ndCBoYXZlIGEgaG9zdCwgYW5kIHNvIHJvb3ROb2RlIHNob3VsZCBiZSB0aGVcbiAgLy8gIGRvY3VtZW50IChwZXIgdGhlIGRvY3MpIGFuZCB3aGlsZSBpdCdzIGEgRG9jdW1lbnQtdHlwZSBvYmplY3QsIHRoYXQgZG9jdW1lbnQgZG9lcyBub3RcbiAgLy8gIGFwcGVhciB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbm9kZSdzIGBvd25lckRvY3VtZW50YCBmb3Igc29tZSByZWFzb24sIHNvIGl0J3Mgc2FmZXJcbiAgLy8gIHRvIGlnbm9yZSB0aGUgcm9vdE5vZGUgYXQgdGhpcyBwb2ludCwgYW5kIHVzZSBgbm9kZS5vd25lckRvY3VtZW50YC4gT3RoZXJ3aXNlLFxuICAvLyAgdXNpbmcgYHJvb3ROb2RlLmNvbnRhaW5zKG5vZGUpYCB3aWxsIF9hbHdheXNfIGJlIHRydWUgd2UnbGwgZ2V0IGZhbHNlLXBvc2l0aXZlcyB3aGVuXG4gIC8vICBub2RlIGlzIGFjdHVhbGx5IGRldGFjaGVkLlxuICBjb25zdCBub2RlUm9vdEhvc3QgPSBnZXRSb290Tm9kZShub2RlKS5ob3N0O1xuICBjb25zdCBub2RlSXNBdHRhY2hlZCA9XG4gICAgbm9kZVJvb3RIb3N0Py5vd25lckRvY3VtZW50LmNvbnRhaW5zKG5vZGVSb290SG9zdCkgfHxcbiAgICBub2RlLm93bmVyRG9jdW1lbnQuY29udGFpbnMobm9kZSk7XG5cbiAgaWYgKCFkaXNwbGF5Q2hlY2sgfHwgZGlzcGxheUNoZWNrID09PSAnZnVsbCcpIHtcbiAgICBpZiAodHlwZW9mIGdldFNoYWRvd1Jvb3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGZpZ3VyZSBvdXQgaWYgd2Ugc2hvdWxkIGNvbnNpZGVyIHRoZSBub2RlIHRvIGJlIGluIGFuIHVuZGlzY2xvc2VkIHNoYWRvdyBhbmQgdXNlIHRoZVxuICAgICAgLy8gICdub24temVyby1hcmVhJyBmYWxsYmFja1xuICAgICAgY29uc3Qgb3JpZ2luYWxOb2RlID0gbm9kZTtcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHJvb3ROb2RlID0gZ2V0Um9vdE5vZGUobm9kZSk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBwYXJlbnRFbGVtZW50ICYmXG4gICAgICAgICAgIXBhcmVudEVsZW1lbnQuc2hhZG93Um9vdCAmJlxuICAgICAgICAgIGdldFNoYWRvd1Jvb3QocGFyZW50RWxlbWVudCkgPT09IHRydWUgLy8gY2hlY2sgaWYgdGhlcmUncyBhbiB1bmRpc2Nsb3NlZCBzaGFkb3dcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gbm9kZSBoYXMgYW4gdW5kaXNjbG9zZWQgc2hhZG93IHdoaWNoIG1lYW5zIHdlIGNhbiBvbmx5IHRyZWF0IGl0IGFzIGEgYmxhY2sgYm94LCBzbyB3ZVxuICAgICAgICAgIC8vICBmYWxsIGJhY2sgdG8gYSBub24temVyby1hcmVhIHRlc3RcbiAgICAgICAgICByZXR1cm4gaXNaZXJvQXJlYShub2RlKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmFzc2lnbmVkU2xvdCkge1xuICAgICAgICAgIC8vIGl0ZXJhdGUgdXAgc2xvdFxuICAgICAgICAgIG5vZGUgPSBub2RlLmFzc2lnbmVkU2xvdDtcbiAgICAgICAgfSBlbHNlIGlmICghcGFyZW50RWxlbWVudCAmJiByb290Tm9kZSAhPT0gbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgLy8gY3Jvc3Mgc2hhZG93IGJvdW5kYXJ5XG4gICAgICAgICAgbm9kZSA9IHJvb3ROb2RlLmhvc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaXRlcmF0ZSB1cCBub3JtYWwgZG9tXG4gICAgICAgICAgbm9kZSA9IHBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbm9kZSA9IG9yaWdpbmFsTm9kZTtcbiAgICB9XG4gICAgLy8gZWxzZSwgYGdldFNoYWRvd1Jvb3RgIG1pZ2h0IGJlIHRydWUsIGJ1dCBhbGwgdGhhdCBkb2VzIGlzIGVuYWJsZSBzaGFkb3cgRE9NIHN1cHBvcnRcbiAgICAvLyAgKGkuZS4gaXQgZG9lcyBub3QgYWxzbyBwcmVzdW1lIHRoYXQgYWxsIG5vZGVzIG1pZ2h0IGhhdmUgdW5kaXNjbG9zZWQgc2hhZG93cyk7IG9yXG4gICAgLy8gIGl0IG1pZ2h0IGJlIGEgZmFsc3kgdmFsdWUsIHdoaWNoIG1lYW5zIHNoYWRvdyBET00gc3VwcG9ydCBpcyBkaXNhYmxlZFxuXG4gICAgLy8gU2luY2Ugd2UgZGlkbid0IGZpbmQgaXQgc2l0dGluZyBpbiBhbiB1bmRpc2Nsb3NlZCBzaGFkb3cgKG9yIHNoYWRvd3MgYXJlIGRpc2FibGVkKVxuICAgIC8vICBub3cgd2UgY2FuIGp1c3QgdGVzdCB0byBzZWUgaWYgaXQgd291bGQgbm9ybWFsbHkgYmUgdmlzaWJsZSBvciBub3QsIHByb3ZpZGVkIGl0J3NcbiAgICAvLyAgYXR0YWNoZWQgdG8gdGhlIG1haW4gZG9jdW1lbnQuXG4gICAgLy8gTk9URTogV2UgbXVzdCBjb25zaWRlciBjYXNlIHdoZXJlIG5vZGUgaXMgaW5zaWRlIGEgc2hhZG93IERPTSBhbmQgZ2l2ZW4gZGlyZWN0bHkgdG9cbiAgICAvLyAgYGlzVGFiYmFibGUoKWAgb3IgYGlzRm9jdXNhYmxlKClgIC0tIHJlZ2FyZGxlc3Mgb2YgYGdldFNoYWRvd1Jvb3RgIG9wdGlvbiBzZXR0aW5nLlxuXG4gICAgaWYgKG5vZGVJc0F0dGFjaGVkKSB7XG4gICAgICAvLyB0aGlzIHdvcmtzIHdoZXJldmVyIHRoZSBub2RlIGlzOiBpZiB0aGVyZSdzIGF0IGxlYXN0IG9uZSBjbGllbnQgcmVjdCwgaXQnc1xuICAgICAgLy8gIHNvbWVob3cgZGlzcGxheWVkOyBpdCBhbHNvIGNvdmVycyB0aGUgQ1NTICdkaXNwbGF5OiBjb250ZW50cycgY2FzZSB3aGVyZSB0aGVcbiAgICAgIC8vICBub2RlIGl0c2VsZiBpcyBoaWRkZW4gaW4gcGxhY2Ugb2YgaXRzIGNvbnRlbnRzOyBhbmQgdGhlcmUncyBubyBuZWVkIHRvIHNlYXJjaFxuICAgICAgLy8gIHVwIHRoZSBoaWVyYXJjaHkgZWl0aGVyXG4gICAgICByZXR1cm4gIW5vZGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gRWxzZSwgdGhlIG5vZGUgaXNuJ3QgYXR0YWNoZWQgdG8gdGhlIGRvY3VtZW50LCB3aGljaCBtZWFucyB0aGUgYGdldENsaWVudFJlY3RzKClgXG4gICAgLy8gIEFQSSB3aWxsIF9fYWx3YXlzX18gcmV0dXJuIHplcm8gcmVjdHMgKHRoaXMgY2FuIGhhcHBlbiwgZm9yIGV4YW1wbGUsIGlmIFJlYWN0XG4gICAgLy8gIGlzIHVzZWQgdG8gcmVuZGVyIG5vZGVzIG9udG8gYSBkZXRhY2hlZCB0cmVlLCBhcyBjb25maXJtZWQgaW4gdGhpcyB0aHJlYWQ6XG4gICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvOTExNyNpc3N1ZWNvbW1lbnQtMjg0MjI4ODcwKVxuICAgIC8vXG4gICAgLy8gSXQgYWxzbyBtZWFucyB0aGF0IGV2ZW4gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSkuZGlzcGxheSB3aWxsIHJldHVybiBgdW5kZWZpbmVkYFxuICAgIC8vICBiZWNhdXNlIHN0eWxlcyBhcmUgb25seSBjb21wdXRlZCBmb3Igbm9kZXMgdGhhdCBhcmUgaW4gdGhlIGRvY3VtZW50LlxuICAgIC8vXG4gICAgLy8gTk9URTogVEhJUyBIQVMgQkVFTiBUSEUgQ0FTRSBGT1IgWUVBUlMuIEl0IGlzIG5vdCBuZXcsIG5vciBpcyBpdCBjYXVzZWQgYnkgdGFiYmFibGVcbiAgICAvLyAgc29tZWhvdy4gVGhvdWdoIGl0IHdhcyBuZXZlciBzdGF0ZWQgb2ZmaWNpYWxseSwgYW55b25lIHdobyBoYXMgZXZlciB1c2VkIHRhYmJhYmxlXG4gICAgLy8gIEFQSXMgb24gbm9kZXMgaW4gZGV0YWNoZWQgY29udGFpbmVycyBoYXMgYWN0dWFsbHkgaW1wbGljaXRseSB1c2VkIHRhYmJhYmxlIGluIHdoYXRcbiAgICAvLyAgd2FzIGxhdGVyIChhcyBvZiB2NS4yLjAgb24gQXByIDksIDIwMjEpIGNhbGxlZCBgZGlzcGxheUNoZWNrPVwibm9uZVwiYCBtb2RlIC0tIGVzc2VudGlhbGx5XG4gICAgLy8gIGNvbnNpZGVyaW5nIF9fZXZlcnl0aGluZ19fIHRvIGJlIHZpc2libGUgYmVjYXVzZSBvZiB0aGUgaW5uYWJpbGl0eSB0byBkZXRlcm1pbmUgc3R5bGVzLlxuICB9IGVsc2UgaWYgKGRpc3BsYXlDaGVjayA9PT0gJ25vbi16ZXJvLWFyZWEnKSB7XG4gICAgLy8gTk9URTogRXZlbiB0aG91Z2ggdGhpcyB0ZXN0cyB0aGF0IHRoZSBub2RlJ3MgY2xpZW50IHJlY3QgaXMgbm9uLXplcm8gdG8gZGV0ZXJtaW5lXG4gICAgLy8gIHdoZXRoZXIgaXQncyBkaXNwbGF5ZWQsIGFuZCB0aGF0IGEgZGV0YWNoZWQgbm9kZSB3aWxsIF9fYWx3YXlzX18gaGF2ZSBhIHplcm8tYXJlYVxuICAgIC8vICBjbGllbnQgcmVjdCwgd2UgZG9uJ3Qgc3BlY2lhbC1jYXNlIGZvciB3aGV0aGVyIHRoZSBub2RlIGlzIGF0dGFjaGVkIG9yIG5vdC4gSW5cbiAgICAvLyAgdGhpcyBtb2RlLCB3ZSBkbyB3YW50IHRvIGNvbnNpZGVyIG5vZGVzIHRoYXQgaGF2ZSBhIHplcm8gYXJlYSB0byBiZSBoaWRkZW4gYXQgYWxsXG4gICAgLy8gIHRpbWVzLCBhbmQgdGhhdCBpbmNsdWRlcyBhdHRhY2hlZCBvciBub3QuXG4gICAgcmV0dXJuIGlzWmVyb0FyZWEobm9kZSk7XG4gIH1cblxuICAvLyB2aXNpYmxlLCBhcyBmYXIgYXMgd2UgY2FuIHRlbGwsIG9yIHBlciBjdXJyZW50IGBkaXNwbGF5Q2hlY2tgIG1vZGVcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8gZm9ybSBmaWVsZHMgKG5lc3RlZCkgaW5zaWRlIGEgZGlzYWJsZWQgZmllbGRzZXQgYXJlIG5vdCBmb2N1c2FibGUvdGFiYmFibGVcbi8vICB1bmxlc3MgdGhleSBhcmUgaW4gdGhlIF9maXJzdF8gPGxlZ2VuZD4gZWxlbWVudCBvZiB0aGUgdG9wLW1vc3QgZGlzYWJsZWRcbi8vICBmaWVsZHNldFxuY29uc3QgaXNEaXNhYmxlZEZyb21GaWVsZHNldCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIGlmICgvXihJTlBVVHxCVVRUT058U0VMRUNUfFRFWFRBUkVBKSQvLnRlc3Qobm9kZS50YWdOYW1lKSkge1xuICAgIGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnRFbGVtZW50O1xuICAgIC8vIGNoZWNrIGlmIGBub2RlYCBpcyBjb250YWluZWQgaW4gYSBkaXNhYmxlZCA8ZmllbGRzZXQ+XG4gICAgd2hpbGUgKHBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChwYXJlbnROb2RlLnRhZ05hbWUgPT09ICdGSUVMRFNFVCcgJiYgcGFyZW50Tm9kZS5kaXNhYmxlZCkge1xuICAgICAgICAvLyBsb29rIGZvciB0aGUgZmlyc3QgPGxlZ2VuZD4gYW1vbmcgdGhlIGNoaWxkcmVuIG9mIHRoZSBkaXNhYmxlZCA8ZmllbGRzZXQ+XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyZW50Tm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNoaWxkID0gcGFyZW50Tm9kZS5jaGlsZHJlbi5pdGVtKGkpO1xuICAgICAgICAgIC8vIHdoZW4gdGhlIGZpcnN0IDxsZWdlbmQ+IChpbiBkb2N1bWVudCBvcmRlcikgaXMgZm91bmRcbiAgICAgICAgICBpZiAoY2hpbGQudGFnTmFtZSA9PT0gJ0xFR0VORCcpIHtcbiAgICAgICAgICAgIC8vIGlmIGl0cyBwYXJlbnQgPGZpZWxkc2V0PiBpcyBub3QgbmVzdGVkIGluIGFub3RoZXIgZGlzYWJsZWQgPGZpZWxkc2V0PixcbiAgICAgICAgICAgIC8vIHJldHVybiB3aGV0aGVyIGBub2RlYCBpcyBhIGRlc2NlbmRhbnQgb2YgaXRzIGZpcnN0IDxsZWdlbmQ+XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlcy5jYWxsKHBhcmVudE5vZGUsICdmaWVsZHNldFtkaXNhYmxlZF0gKicpXG4gICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICA6ICFjaGlsZC5jb250YWlucyhub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlIGRpc2FibGVkIDxmaWVsZHNldD4gY29udGFpbmluZyBgbm9kZWAgaGFzIG5vIDxsZWdlbmQ+XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50RWxlbWVudDtcbiAgICB9XG4gIH1cblxuICAvLyBlbHNlLCBub2RlJ3MgdGFiYmFibGUvZm9jdXNhYmxlIHN0YXRlIHNob3VsZCBub3QgYmUgYWZmZWN0ZWQgYnkgYSBmaWVsZHNldCdzXG4gIC8vICBlbmFibGVkL2Rpc2FibGVkIHN0YXRlXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUgPSBmdW5jdGlvbiAob3B0aW9ucywgbm9kZSkge1xuICBpZiAoXG4gICAgbm9kZS5kaXNhYmxlZCB8fFxuICAgIGlzSGlkZGVuSW5wdXQobm9kZSkgfHxcbiAgICBpc0hpZGRlbihub2RlLCBvcHRpb25zKSB8fFxuICAgIC8vIEZvciBhIGRldGFpbHMgZWxlbWVudCB3aXRoIGEgc3VtbWFyeSwgdGhlIHN1bW1hcnkgZWxlbWVudCBnZXRzIHRoZSBmb2N1c1xuICAgIGlzRGV0YWlsc1dpdGhTdW1tYXJ5KG5vZGUpIHx8XG4gICAgaXNEaXNhYmxlZEZyb21GaWVsZHNldChub2RlKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5jb25zdCBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUgPSBmdW5jdGlvbiAob3B0aW9ucywgbm9kZSkge1xuICBpZiAoXG4gICAgaXNOb25UYWJiYWJsZVJhZGlvKG5vZGUpIHx8XG4gICAgZ2V0VGFiaW5kZXgobm9kZSkgPCAwIHx8XG4gICAgIWlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUob3B0aW9ucywgbm9kZSlcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgaXNWYWxpZFNoYWRvd1Jvb3RUYWJiYWJsZSA9IGZ1bmN0aW9uIChzaGFkb3dIb3N0Tm9kZSkge1xuICBjb25zdCB0YWJJbmRleCA9IHBhcnNlSW50KHNoYWRvd0hvc3ROb2RlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSwgMTApO1xuICBpZiAoaXNOYU4odGFiSW5kZXgpIHx8IHRhYkluZGV4ID49IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBJZiBhIGN1c3RvbSBlbGVtZW50IGhhcyBhbiBleHBsaWNpdCBuZWdhdGl2ZSB0YWJpbmRleCxcbiAgLy8gYnJvd3NlcnMgd2lsbCBub3QgYWxsb3cgdGFiIHRhcmdldGluZyBzYWlkIGVsZW1lbnQncyBjaGlsZHJlbi5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LjxFbGVtZW50fENhbmRpZGF0ZXNTY29wZT59IGNhbmRpZGF0ZXNcbiAqIEByZXR1cm5zIEVsZW1lbnRbXVxuICovXG5jb25zdCBzb3J0QnlPcmRlciA9IGZ1bmN0aW9uIChjYW5kaWRhdGVzKSB7XG4gIGNvbnN0IHJlZ3VsYXJUYWJiYWJsZXMgPSBbXTtcbiAgY29uc3Qgb3JkZXJlZFRhYmJhYmxlcyA9IFtdO1xuICBjYW5kaWRhdGVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICBjb25zdCBpc1Njb3BlID0gISFpdGVtLnNjb3BlO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBpc1Njb3BlID8gaXRlbS5zY29wZSA6IGl0ZW07XG4gICAgY29uc3QgY2FuZGlkYXRlVGFiaW5kZXggPSBnZXRUYWJpbmRleChlbGVtZW50LCBpc1Njb3BlKTtcbiAgICBjb25zdCBlbGVtZW50cyA9IGlzU2NvcGUgPyBzb3J0QnlPcmRlcihpdGVtLmNhbmRpZGF0ZXMpIDogZWxlbWVudDtcbiAgICBpZiAoY2FuZGlkYXRlVGFiaW5kZXggPT09IDApIHtcbiAgICAgIGlzU2NvcGVcbiAgICAgICAgPyByZWd1bGFyVGFiYmFibGVzLnB1c2goLi4uZWxlbWVudHMpXG4gICAgICAgIDogcmVndWxhclRhYmJhYmxlcy5wdXNoKGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmRlcmVkVGFiYmFibGVzLnB1c2goe1xuICAgICAgICBkb2N1bWVudE9yZGVyOiBpLFxuICAgICAgICB0YWJJbmRleDogY2FuZGlkYXRlVGFiaW5kZXgsXG4gICAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICAgIGlzU2NvcGU6IGlzU2NvcGUsXG4gICAgICAgIGNvbnRlbnQ6IGVsZW1lbnRzLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb3JkZXJlZFRhYmJhYmxlc1xuICAgIC5zb3J0KHNvcnRPcmRlcmVkVGFiYmFibGVzKVxuICAgIC5yZWR1Y2UoKGFjYywgc29ydGFibGUpID0+IHtcbiAgICAgIHNvcnRhYmxlLmlzU2NvcGVcbiAgICAgICAgPyBhY2MucHVzaCguLi5zb3J0YWJsZS5jb250ZW50KVxuICAgICAgICA6IGFjYy5wdXNoKHNvcnRhYmxlLmNvbnRlbnQpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSlcbiAgICAuY29uY2F0KHJlZ3VsYXJUYWJiYWJsZXMpO1xufTtcblxuY29uc3QgdGFiYmFibGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgbGV0IGNhbmRpZGF0ZXM7XG4gIGlmIChvcHRpb25zLmdldFNoYWRvd1Jvb3QpIHtcbiAgICBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5KFtlbF0sIG9wdGlvbnMuaW5jbHVkZUNvbnRhaW5lciwge1xuICAgICAgZmlsdGVyOiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICAgIGZsYXR0ZW46IGZhbHNlLFxuICAgICAgZ2V0U2hhZG93Um9vdDogb3B0aW9ucy5nZXRTaGFkb3dSb290LFxuICAgICAgc2hhZG93Um9vdEZpbHRlcjogaXNWYWxpZFNoYWRvd1Jvb3RUYWJiYWJsZSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlcyhcbiAgICAgIGVsLFxuICAgICAgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLFxuICAgICAgaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlLmJpbmQobnVsbCwgb3B0aW9ucylcbiAgICApO1xuICB9XG4gIHJldHVybiBzb3J0QnlPcmRlcihjYW5kaWRhdGVzKTtcbn07XG5cbmNvbnN0IGZvY3VzYWJsZSA9IGZ1bmN0aW9uIChlbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBsZXQgY2FuZGlkYXRlcztcbiAgaWYgKG9wdGlvbnMuZ2V0U2hhZG93Um9vdCkge1xuICAgIGNhbmRpZGF0ZXMgPSBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkoW2VsXSwgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLCB7XG4gICAgICBmaWx0ZXI6IGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICAgIGZsYXR0ZW46IHRydWUsXG4gICAgICBnZXRTaGFkb3dSb290OiBvcHRpb25zLmdldFNoYWRvd1Jvb3QsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY2FuZGlkYXRlcyA9IGdldENhbmRpZGF0ZXMoXG4gICAgICBlbCxcbiAgICAgIG9wdGlvbnMuaW5jbHVkZUNvbnRhaW5lcixcbiAgICAgIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUuYmluZChudWxsLCBvcHRpb25zKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG5cbmNvbnN0IGlzVGFiYmFibGUgPSBmdW5jdGlvbiAobm9kZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBub2RlIHByb3ZpZGVkJyk7XG4gIH1cbiAgaWYgKG1hdGNoZXMuY2FsbChub2RlLCBjYW5kaWRhdGVTZWxlY3RvcikgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUob3B0aW9ucywgbm9kZSk7XG59O1xuXG5jb25zdCBmb2N1c2FibGVDYW5kaWRhdGVTZWxlY3RvciA9IC8qICNfX1BVUkVfXyAqLyBjYW5kaWRhdGVTZWxlY3RvcnNcbiAgLmNvbmNhdCgnaWZyYW1lJylcbiAgLmpvaW4oJywnKTtcblxuY29uc3QgaXNGb2N1c2FibGUgPSBmdW5jdGlvbiAobm9kZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBub2RlIHByb3ZpZGVkJyk7XG4gIH1cbiAgaWYgKG1hdGNoZXMuY2FsbChub2RlLCBmb2N1c2FibGVDYW5kaWRhdGVTZWxlY3RvcikgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG9wdGlvbnMsIG5vZGUpO1xufTtcblxuZXhwb3J0IHsgdGFiYmFibGUsIGZvY3VzYWJsZSwgaXNUYWJiYWJsZSwgaXNGb2N1c2FibGUgfTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSgnaW5lcnQnLCBmYWN0b3J5KSA6XG4gIChmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4gIC8qKlxuICAgKiBUaGlzIHdvcmsgaXMgbGljZW5zZWQgdW5kZXIgdGhlIFczQyBTb2Z0d2FyZSBhbmQgRG9jdW1lbnQgTGljZW5zZVxuICAgKiAoaHR0cDovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDE1L2NvcHlyaWdodC1zb2Z0d2FyZS1hbmQtZG9jdW1lbnQpLlxuICAgKi9cblxuICAoZnVuY3Rpb24gKCkge1xuICAgIC8vIFJldHVybiBlYXJseSBpZiB3ZSdyZSBub3QgcnVubmluZyBpbnNpZGUgb2YgdGhlIGJyb3dzZXIuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGNvbnZlcnRpbmcgTm9kZUxpc3RzLlxuICAgIC8qKiBAdHlwZSB7dHlwZW9mIEFycmF5LnByb3RvdHlwZS5zbGljZX0gKi9cbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgICAvKipcbiAgICAgKiBJRSBoYXMgYSBub24tc3RhbmRhcmQgbmFtZSBmb3IgXCJtYXRjaGVzXCIuXG4gICAgICogQHR5cGUge3R5cGVvZiBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzfVxuICAgICAqL1xuICAgIHZhciBtYXRjaGVzID0gRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fCBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvcjtcblxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHZhciBfZm9jdXNhYmxlRWxlbWVudHNTdHJpbmcgPSBbJ2FbaHJlZl0nLCAnYXJlYVtocmVmXScsICdpbnB1dDpub3QoW2Rpc2FibGVkXSknLCAnc2VsZWN0Om5vdChbZGlzYWJsZWRdKScsICd0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSknLCAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKScsICdkZXRhaWxzJywgJ3N1bW1hcnknLCAnaWZyYW1lJywgJ29iamVjdCcsICdlbWJlZCcsICdbY29udGVudGVkaXRhYmxlXSddLmpvaW4oJywnKTtcblxuICAgIC8qKlxuICAgICAqIGBJbmVydFJvb3RgIG1hbmFnZXMgYSBzaW5nbGUgaW5lcnQgc3VidHJlZSwgaS5lLiBhIERPTSBzdWJ0cmVlIHdob3NlIHJvb3QgZWxlbWVudCBoYXMgYW4gYGluZXJ0YFxuICAgICAqIGF0dHJpYnV0ZS5cbiAgICAgKlxuICAgICAqIEl0cyBtYWluIGZ1bmN0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtIHRvIGNyZWF0ZSBhbmQgbWFpbnRhaW4gYSBzZXQgb2YgbWFuYWdlZCBgSW5lcnROb2RlYHMsIGluY2x1ZGluZyB3aGVuIG11dGF0aW9ucyBvY2N1ciBpbiB0aGVcbiAgICAgKiAgIHN1YnRyZWUuIFRoZSBgbWFrZVN1YnRyZWVVbmZvY3VzYWJsZSgpYCBtZXRob2QgaGFuZGxlcyBjb2xsZWN0aW5nIGBJbmVydE5vZGVgcyB2aWEgcmVnaXN0ZXJpbmdcbiAgICAgKiAgIGVhY2ggZm9jdXNhYmxlIG5vZGUgaW4gdGhlIHN1YnRyZWUgd2l0aCB0aGUgc2luZ2xldG9uIGBJbmVydE1hbmFnZXJgIHdoaWNoIG1hbmFnZXMgYWxsIGtub3duXG4gICAgICogICBmb2N1c2FibGUgbm9kZXMgd2l0aGluIGluZXJ0IHN1YnRyZWVzLiBgSW5lcnRNYW5hZ2VyYCBlbnN1cmVzIHRoYXQgYSBzaW5nbGUgYEluZXJ0Tm9kZWBcbiAgICAgKiAgIGluc3RhbmNlIGV4aXN0cyBmb3IgZWFjaCBmb2N1c2FibGUgbm9kZSB3aGljaCBoYXMgYXQgbGVhc3Qgb25lIGluZXJ0IHJvb3QgYXMgYW4gYW5jZXN0b3IuXG4gICAgICpcbiAgICAgKiAtIHRvIG5vdGlmeSBhbGwgbWFuYWdlZCBgSW5lcnROb2RlYHMgd2hlbiB0aGlzIHN1YnRyZWUgc3RvcHMgYmVpbmcgaW5lcnQgKGkuZS4gd2hlbiB0aGUgYGluZXJ0YFxuICAgICAqICAgYXR0cmlidXRlIGlzIHJlbW92ZWQgZnJvbSB0aGUgcm9vdCBub2RlKS4gVGhpcyBpcyBoYW5kbGVkIGluIHRoZSBkZXN0cnVjdG9yLCB3aGljaCBjYWxscyB0aGVcbiAgICAgKiAgIGBkZXJlZ2lzdGVyYCBtZXRob2Qgb24gYEluZXJ0TWFuYWdlcmAgZm9yIGVhY2ggbWFuYWdlZCBpbmVydCBub2RlLlxuICAgICAqL1xuXG4gICAgdmFyIEluZXJ0Um9vdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IHJvb3RFbGVtZW50IFRoZSBIVE1MRWxlbWVudCBhdCB0aGUgcm9vdCBvZiB0aGUgaW5lcnQgc3VidHJlZS5cbiAgICAgICAqIEBwYXJhbSB7IUluZXJ0TWFuYWdlcn0gaW5lcnRNYW5hZ2VyIFRoZSBnbG9iYWwgc2luZ2xldG9uIEluZXJ0TWFuYWdlciBvYmplY3QuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIEluZXJ0Um9vdChyb290RWxlbWVudCwgaW5lcnRNYW5hZ2VyKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmVydFJvb3QpO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUluZXJ0TWFuYWdlcn0gKi9cbiAgICAgICAgdGhpcy5faW5lcnRNYW5hZ2VyID0gaW5lcnRNYW5hZ2VyO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL1xuICAgICAgICB0aGlzLl9yb290RWxlbWVudCA9IHJvb3RFbGVtZW50O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7IVNldDwhSW5lcnROb2RlPn1cbiAgICAgICAgICogQWxsIG1hbmFnZWQgZm9jdXNhYmxlIG5vZGVzIGluIHRoaXMgSW5lcnRSb290J3Mgc3VidHJlZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX21hbmFnZWROb2RlcyA9IG5ldyBTZXQoKTtcblxuICAgICAgICAvLyBNYWtlIHRoZSBzdWJ0cmVlIGhpZGRlbiBmcm9tIGFzc2lzdGl2ZSB0ZWNobm9sb2d5XG4gICAgICAgIGlmICh0aGlzLl9yb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykpIHtcbiAgICAgICAgICAvKiogQHR5cGUgez9zdHJpbmd9ICovXG4gICAgICAgICAgdGhpcy5fc2F2ZWRBcmlhSGlkZGVuID0gdGhpcy5fcm9vdEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3NhdmVkQXJpYUhpZGRlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgLy8gTWFrZSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIGluIHRoZSBzdWJ0cmVlIHVuZm9jdXNhYmxlIGFuZCBhZGQgdGhlbSB0byBfbWFuYWdlZE5vZGVzXG4gICAgICAgIHRoaXMuX21ha2VTdWJ0cmVlVW5mb2N1c2FibGUodGhpcy5fcm9vdEVsZW1lbnQpO1xuXG4gICAgICAgIC8vIFdhdGNoIGZvcjpcbiAgICAgICAgLy8gLSBhbnkgYWRkaXRpb25zIGluIHRoZSBzdWJ0cmVlOiBtYWtlIHRoZW0gdW5mb2N1c2FibGUgdG9vXG4gICAgICAgIC8vIC0gYW55IHJlbW92YWxzIGZyb20gdGhlIHN1YnRyZWU6IHJlbW92ZSB0aGVtIGZyb20gdGhpcyBpbmVydCByb290J3MgbWFuYWdlZCBub2Rlc1xuICAgICAgICAvLyAtIGF0dHJpYnV0ZSBjaGFuZ2VzOiBpZiBgdGFiaW5kZXhgIGlzIGFkZGVkLCBvciByZW1vdmVkIGZyb20gYW4gaW50cmluc2ljYWxseSBmb2N1c2FibGVcbiAgICAgICAgLy8gICBlbGVtZW50LCBtYWtlIHRoYXQgbm9kZSBhIG1hbmFnZWQgbm9kZS5cbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLl9vbk11dGF0aW9uLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKHRoaXMuX3Jvb3RFbGVtZW50LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsIHRoaXMgd2hlbmV2ZXIgdGhpcyBvYmplY3QgaXMgYWJvdXQgdG8gYmVjb21lIG9ic29sZXRlLiAgVGhpcyB1bndpbmRzIGFsbCBvZiB0aGUgc3RhdGVcbiAgICAgICAqIHN0b3JlZCBpbiB0aGlzIG9iamVjdCBhbmQgdXBkYXRlcyB0aGUgc3RhdGUgb2YgYWxsIG9mIHRoZSBtYW5hZ2VkIG5vZGVzLlxuICAgICAgICovXG5cblxuICAgICAgX2NyZWF0ZUNsYXNzKEluZXJ0Um9vdCwgW3tcbiAgICAgICAga2V5OiAnZGVzdHJ1Y3RvcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cnVjdG9yKCkge1xuICAgICAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcblxuICAgICAgICAgIGlmICh0aGlzLl9yb290RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NhdmVkQXJpYUhpZGRlbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aGlzLl9yb290RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdGhpcy5fc2F2ZWRBcmlhSGlkZGVuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9tYW5hZ2VkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5lcnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl91bm1hbmFnZU5vZGUoaW5lcnROb2RlLm5vZGUpO1xuICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgLy8gTm90ZSB3ZSBjYXN0IHRoZSBudWxscyB0byB0aGUgQU5ZIHR5cGUgaGVyZSBiZWNhdXNlOlxuICAgICAgICAgIC8vIDEpIFdlIHdhbnQgdGhlIGNsYXNzIHByb3BlcnRpZXMgdG8gYmUgZGVjbGFyZWQgYXMgbm9uLW51bGwsIG9yIGVsc2Ugd2VcbiAgICAgICAgICAvLyAgICBuZWVkIGV2ZW4gbW9yZSBjYXN0cyB0aHJvdWdob3V0IHRoaXMgY29kZS4gQWxsIGJldHMgYXJlIG9mZiBpZiBhblxuICAgICAgICAgIC8vICAgIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZCBhbmQgYSBtZXRob2QgaXMgY2FsbGVkLlxuICAgICAgICAgIC8vIDIpIFdlIGRvbid0IHdhbnQgdG8gY2FzdCBcInRoaXNcIiwgYmVjYXVzZSB3ZSB3YW50IHR5cGUtYXdhcmUgb3B0aW1pemF0aW9uc1xuICAgICAgICAgIC8vICAgIHRvIGtub3cgd2hpY2ggcHJvcGVydGllcyB3ZSdyZSBzZXR0aW5nLlxuICAgICAgICAgIHRoaXMuX29ic2VydmVyID0gLyoqIEB0eXBlIHs/fSAqL251bGw7XG4gICAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgICB0aGlzLl9tYW5hZ2VkTm9kZXMgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgICB0aGlzLl9pbmVydE1hbmFnZXIgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHshU2V0PCFJbmVydE5vZGU+fSBBIGNvcHkgb2YgdGhpcyBJbmVydFJvb3QncyBtYW5hZ2VkIG5vZGVzIHNldC5cbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnX21ha2VTdWJ0cmVlVW5mb2N1c2FibGUnLFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7IU5vZGV9IHN0YXJ0Tm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYWtlU3VidHJlZVVuZm9jdXNhYmxlKHN0YXJ0Tm9kZSkge1xuICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgY29tcG9zZWRUcmVlV2FsayhzdGFydE5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLl92aXNpdE5vZGUobm9kZSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgICAgICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnMoc3RhcnROb2RlKSkge1xuICAgICAgICAgICAgLy8gc3RhcnROb2RlIG1heSBiZSBpbiBzaGFkb3cgRE9NLCBzbyBmaW5kIGl0cyBuZWFyZXN0IHNoYWRvd1Jvb3QgdG8gZ2V0IHRoZSBhY3RpdmVFbGVtZW50LlxuICAgICAgICAgICAgdmFyIG5vZGUgPSBzdGFydE5vZGU7XG4gICAgICAgICAgICAvKiogQHR5cGUgeyFTaGFkb3dSb290fHVuZGVmaW5lZH0gKi9cbiAgICAgICAgICAgIHZhciByb290ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAgIHJvb3QgPSAvKiogQHR5cGUgeyFTaGFkb3dSb290fSAqL25vZGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb290KSB7XG4gICAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSByb290LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGFydE5vZGUuY29udGFpbnMoYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgICAgICAgLy8gSW4gSUUxMSwgaWYgYW4gZWxlbWVudCBpcyBhbHJlYWR5IGZvY3VzZWQsIGFuZCB0aGVuIHNldCB0byB0YWJpbmRleD0tMVxuICAgICAgICAgICAgLy8gY2FsbGluZyBibHVyKCkgd2lsbCBub3QgYWN0dWFsbHkgbW92ZSB0aGUgZm9jdXMuXG4gICAgICAgICAgICAvLyBUbyB3b3JrIGFyb3VuZCB0aGlzIHdlIGNhbGwgZm9jdXMoKSBvbiB0aGUgYm9keSBpbnN0ZWFkLlxuICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ192aXNpdE5vZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Zpc2l0Tm9kZShub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBlbGVtZW50ID0gLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovbm9kZTtcblxuICAgICAgICAgIC8vIElmIGEgZGVzY2VuZGFudCBpbmVydCByb290IGJlY29tZXMgdW4taW5lcnQsIGl0cyBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlIGluZXJ0IGJlY2F1c2Ugb2ZcbiAgICAgICAgICAvLyB0aGlzIGluZXJ0IHJvb3QsIHNvIGFsbCBvZiBpdHMgbWFuYWdlZCBub2RlcyBuZWVkIHRvIGJlIGFkb3B0ZWQgYnkgdGhpcyBJbmVydFJvb3QuXG4gICAgICAgICAgaWYgKGVsZW1lbnQgIT09IHRoaXMuX3Jvb3RFbGVtZW50ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdpbmVydCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9hZG9wdEluZXJ0Um9vdChlbGVtZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsZW1lbnQsIF9mb2N1c2FibGVFbGVtZW50c1N0cmluZykgfHwgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZU5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVyIHRoZSBnaXZlbiBub2RlIHdpdGggdGhpcyBJbmVydFJvb3QgYW5kIHdpdGggSW5lcnRNYW5hZ2VyLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ19tYW5hZ2VOb2RlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYW5hZ2VOb2RlKG5vZGUpIHtcbiAgICAgICAgICB2YXIgaW5lcnROb2RlID0gdGhpcy5faW5lcnRNYW5hZ2VyLnJlZ2lzdGVyKG5vZGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlcy5hZGQoaW5lcnROb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbnJlZ2lzdGVyIHRoZSBnaXZlbiBub2RlIHdpdGggdGhpcyBJbmVydFJvb3QgYW5kIHdpdGggSW5lcnRNYW5hZ2VyLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ191bm1hbmFnZU5vZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VubWFuYWdlTm9kZShub2RlKSB7XG4gICAgICAgICAgdmFyIGluZXJ0Tm9kZSA9IHRoaXMuX2luZXJ0TWFuYWdlci5kZXJlZ2lzdGVyKG5vZGUsIHRoaXMpO1xuICAgICAgICAgIGlmIChpbmVydE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlc1snZGVsZXRlJ10oaW5lcnROb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVW5yZWdpc3RlciB0aGUgZW50aXJlIHN1YnRyZWUgc3RhcnRpbmcgYXQgYHN0YXJ0Tm9kZWAuXG4gICAgICAgICAqIEBwYXJhbSB7IU5vZGV9IHN0YXJ0Tm9kZVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfdW5tYW5hZ2VTdWJ0cmVlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91bm1hbmFnZVN1YnRyZWUoc3RhcnROb2RlKSB7XG4gICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICBjb21wb3NlZFRyZWVXYWxrKHN0YXJ0Tm9kZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMuX3VubWFuYWdlTm9kZShub2RlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBhIGRlc2NlbmRhbnQgbm9kZSBpcyBmb3VuZCB3aXRoIGFuIGBpbmVydGAgYXR0cmlidXRlLCBhZG9wdCBpdHMgbWFuYWdlZCBub2Rlcy5cbiAgICAgICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IG5vZGVcbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2Fkb3B0SW5lcnRSb290JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZG9wdEluZXJ0Um9vdChub2RlKSB7XG4gICAgICAgICAgdmFyIGluZXJ0U3Vicm9vdCA9IHRoaXMuX2luZXJ0TWFuYWdlci5nZXRJbmVydFJvb3Qobm9kZSk7XG5cbiAgICAgICAgICAvLyBEdXJpbmcgaW5pdGlhbGlzYXRpb24gdGhpcyBpbmVydCByb290IG1heSBub3QgaGF2ZSBiZWVuIHJlZ2lzdGVyZWQgeWV0LFxuICAgICAgICAgIC8vIHNvIHJlZ2lzdGVyIGl0IG5vdyBpZiBuZWVkIGJlLlxuICAgICAgICAgIGlmICghaW5lcnRTdWJyb290KSB7XG4gICAgICAgICAgICB0aGlzLl9pbmVydE1hbmFnZXIuc2V0SW5lcnQobm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpbmVydFN1YnJvb3QgPSB0aGlzLl9pbmVydE1hbmFnZXIuZ2V0SW5lcnRSb290KG5vZGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluZXJ0U3Vicm9vdC5tYW5hZ2VkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoc2F2ZWRJbmVydE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZU5vZGUoc2F2ZWRJbmVydE5vZGUubm9kZSk7XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGJhY2sgdXNlZCB3aGVuIG11dGF0aW9uIG9ic2VydmVyIGRldGVjdHMgc3VidHJlZSBhZGRpdGlvbnMsIHJlbW92YWxzLCBvciBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAgICogQHBhcmFtIHshQXJyYXk8IU11dGF0aW9uUmVjb3JkPn0gcmVjb3Jkc1xuICAgICAgICAgKiBAcGFyYW0geyFNdXRhdGlvbk9ic2VydmVyfSBzZWxmXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ19vbk11dGF0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk11dGF0aW9uKHJlY29yZHMsIHNlbGYpIHtcbiAgICAgICAgICByZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL3JlY29yZC50YXJnZXQ7XG4gICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgIC8vIE1hbmFnZSBhZGRlZCBub2Rlc1xuICAgICAgICAgICAgICBzbGljZS5jYWxsKHJlY29yZC5hZGRlZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFrZVN1YnRyZWVVbmZvY3VzYWJsZShub2RlKTtcbiAgICAgICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgICAgICAgLy8gVW4tbWFuYWdlIHJlbW92ZWQgbm9kZXNcbiAgICAgICAgICAgICAgc2xpY2UuY2FsbChyZWNvcmQucmVtb3ZlZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5tYW5hZ2VTdWJ0cmVlKG5vZGUpO1xuICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09ICdhdHRyaWJ1dGVzJykge1xuICAgICAgICAgICAgICBpZiAocmVjb3JkLmF0dHJpYnV0ZU5hbWUgPT09ICd0YWJpbmRleCcpIHtcbiAgICAgICAgICAgICAgICAvLyBSZS1pbml0aWFsaXNlIGluZXJ0IG5vZGUgaWYgdGFiaW5kZXggY2hhbmdlc1xuICAgICAgICAgICAgICAgIHRoaXMuX21hbmFnZU5vZGUodGFyZ2V0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgIT09IHRoaXMuX3Jvb3RFbGVtZW50ICYmIHJlY29yZC5hdHRyaWJ1dGVOYW1lID09PSAnaW5lcnQnICYmIHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2luZXJ0JykpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBhIG5ldyBpbmVydCByb290IGlzIGFkZGVkLCBhZG9wdCBpdHMgbWFuYWdlZCBub2RlcyBhbmQgbWFrZSBzdXJlIGl0IGtub3dzIGFib3V0IHRoZVxuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgbWFuYWdlZCBub2RlcyBmcm9tIHRoaXMgaW5lcnQgc3Vicm9vdC5cbiAgICAgICAgICAgICAgICB0aGlzLl9hZG9wdEluZXJ0Um9vdCh0YXJnZXQpO1xuICAgICAgICAgICAgICAgIHZhciBpbmVydFN1YnJvb3QgPSB0aGlzLl9pbmVydE1hbmFnZXIuZ2V0SW5lcnRSb290KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFuYWdlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG1hbmFnZWROb2RlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmNvbnRhaW5zKG1hbmFnZWROb2RlLm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZXJ0U3Vicm9vdC5fbWFuYWdlTm9kZShtYW5hZ2VkTm9kZS5ub2RlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ21hbmFnZWROb2RlcycsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBuZXcgU2V0KHRoaXMuX21hbmFnZWROb2Rlcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHJldHVybiB7Ym9vbGVhbn0gKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNTYXZlZEFyaWFIaWRkZW4nLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fc2F2ZWRBcmlhSGlkZGVuICE9PSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEBwYXJhbSB7P3N0cmluZ30gYXJpYUhpZGRlbiAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3NhdmVkQXJpYUhpZGRlbicsXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGFyaWFIaWRkZW4pIHtcbiAgICAgICAgICB0aGlzLl9zYXZlZEFyaWFIaWRkZW4gPSBhcmlhSGlkZGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEByZXR1cm4gez9zdHJpbmd9ICovXG4gICAgICAgICxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NhdmVkQXJpYUhpZGRlbjtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gSW5lcnRSb290O1xuICAgIH0oKTtcblxuICAgIC8qKlxuICAgICAqIGBJbmVydE5vZGVgIGluaXRpYWxpc2VzIGFuZCBtYW5hZ2VzIGEgc2luZ2xlIGluZXJ0IG5vZGUuXG4gICAgICogQSBub2RlIGlzIGluZXJ0IGlmIGl0IGlzIGEgZGVzY2VuZGFudCBvZiBvbmUgb3IgbW9yZSBpbmVydCByb290IGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogT24gY29uc3RydWN0aW9uLCBgSW5lcnROb2RlYCBzYXZlcyB0aGUgZXhpc3RpbmcgYHRhYmluZGV4YCB2YWx1ZSBmb3IgdGhlIG5vZGUsIGlmIGFueSwgYW5kXG4gICAgICogZWl0aGVyIHJlbW92ZXMgdGhlIGB0YWJpbmRleGAgYXR0cmlidXRlIG9yIHNldHMgaXQgdG8gYC0xYCwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGVsZW1lbnRcbiAgICAgKiBpcyBpbnRyaW5zaWNhbGx5IGZvY3VzYWJsZSBvciBub3QuXG4gICAgICpcbiAgICAgKiBgSW5lcnROb2RlYCBtYWludGFpbnMgYSBzZXQgb2YgYEluZXJ0Um9vdGBzIHdoaWNoIGFyZSBkZXNjZW5kYW50cyBvZiB0aGlzIGBJbmVydE5vZGVgLiBXaGVuIGFuXG4gICAgICogYEluZXJ0Um9vdGAgaXMgZGVzdHJveWVkLCBhbmQgY2FsbHMgYEluZXJ0TWFuYWdlci5kZXJlZ2lzdGVyKClgLCB0aGUgYEluZXJ0TWFuYWdlcmAgbm90aWZpZXMgdGhlXG4gICAgICogYEluZXJ0Tm9kZWAgdmlhIGByZW1vdmVJbmVydFJvb3QoKWAsIHdoaWNoIGluIHR1cm4gZGVzdHJveXMgdGhlIGBJbmVydE5vZGVgIGlmIG5vIGBJbmVydFJvb3Rgc1xuICAgICAqIHJlbWFpbiBpbiB0aGUgc2V0LiBPbiBkZXN0cnVjdGlvbiwgYEluZXJ0Tm9kZWAgcmVpbnN0YXRlcyB0aGUgc3RvcmVkIGB0YWJpbmRleGAgaWYgb25lIGV4aXN0cyxcbiAgICAgKiBvciByZW1vdmVzIHRoZSBgdGFiaW5kZXhgIGF0dHJpYnV0ZSBpZiB0aGUgZWxlbWVudCBpcyBpbnRyaW5zaWNhbGx5IGZvY3VzYWJsZS5cbiAgICAgKi9cblxuXG4gICAgdmFyIEluZXJ0Tm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBBIGZvY3VzYWJsZSBlbGVtZW50IHRvIGJlIG1hZGUgaW5lcnQuXG4gICAgICAgKiBAcGFyYW0geyFJbmVydFJvb3R9IGluZXJ0Um9vdCBUaGUgaW5lcnQgcm9vdCBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGluZXJ0IG5vZGUuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIEluZXJ0Tm9kZShub2RlLCBpbmVydFJvb3QpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZXJ0Tm9kZSk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHshTm9kZX0gKi9cbiAgICAgICAgdGhpcy5fbm9kZSA9IG5vZGU7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9vdmVycm9kZUZvY3VzTWV0aG9kID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHshU2V0PCFJbmVydFJvb3Q+fSBUaGUgc2V0IG9mIGRlc2NlbmRhbnQgaW5lcnQgcm9vdHMuXG4gICAgICAgICAqICAgIElmIGFuZCBvbmx5IGlmIHRoaXMgc2V0IGJlY29tZXMgZW1wdHksIHRoaXMgbm9kZSBpcyBubyBsb25nZXIgaW5lcnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9pbmVydFJvb3RzID0gbmV3IFNldChbaW5lcnRSb290XSk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHs/bnVtYmVyfSAqL1xuICAgICAgICB0aGlzLl9zYXZlZFRhYkluZGV4ID0gbnVsbDtcblxuICAgICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIFNhdmUgYW55IHByaW9yIHRhYmluZGV4IGluZm8gYW5kIG1ha2UgdGhpcyBub2RlIHVudGFiYmFibGVcbiAgICAgICAgdGhpcy5lbnN1cmVVbnRhYmJhYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbCB0aGlzIHdoZW5ldmVyIHRoaXMgb2JqZWN0IGlzIGFib3V0IHRvIGJlY29tZSBvYnNvbGV0ZS5cbiAgICAgICAqIFRoaXMgbWFrZXMgdGhlIG1hbmFnZWQgbm9kZSBmb2N1c2FibGUgYWdhaW4gYW5kIGRlbGV0ZXMgYWxsIG9mIHRoZSBwcmV2aW91c2x5IHN0b3JlZCBzdGF0ZS5cbiAgICAgICAqL1xuXG5cbiAgICAgIF9jcmVhdGVDbGFzcyhJbmVydE5vZGUsIFt7XG4gICAgICAgIGtleTogJ2Rlc3RydWN0b3InLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJ1Y3RvcigpIHtcbiAgICAgICAgICB0aGlzLl90aHJvd0lmRGVzdHJveWVkKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbm9kZSAmJiB0aGlzLl9ub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi90aGlzLl9ub2RlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NhdmVkVGFiSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgdGhpcy5fc2F2ZWRUYWJJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGBkZWxldGVgIHRvIHJlc3RvcmUgbmF0aXZlIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vdmVycm9kZUZvY3VzTWV0aG9kKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50LmZvY3VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNlZSBub3RlIGluIEluZXJ0Um9vdC5kZXN0cnVjdG9yIGZvciB3aHkgd2UgY2FzdCB0aGVzZSBudWxscyB0byBBTlkuXG4gICAgICAgICAgdGhpcy5fbm9kZSA9IC8qKiBAdHlwZSB7P30gKi9udWxsO1xuICAgICAgICAgIHRoaXMuX2luZXJ0Um9vdHMgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufSBXaGV0aGVyIHRoaXMgb2JqZWN0IGlzIG9ic29sZXRlIGJlY2F1c2UgdGhlIG1hbmFnZWQgbm9kZSBpcyBubyBsb25nZXIgaW5lcnQuXG4gICAgICAgICAqIElmIHRoZSBvYmplY3QgaGFzIGJlZW4gZGVzdHJveWVkLCBhbnkgYXR0ZW1wdCB0byBhY2Nlc3MgaXQgd2lsbCBjYXVzZSBhbiBleGNlcHRpb24uXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ190aHJvd0lmRGVzdHJveWVkJyxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaHJvdyBpZiB1c2VyIHRyaWVzIHRvIGFjY2VzcyBkZXN0cm95ZWQgSW5lcnROb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90aHJvd0lmRGVzdHJveWVkKCkge1xuICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGRlc3Ryb3llZCBJbmVydE5vZGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHJldHVybiB7Ym9vbGVhbn0gKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdlbnN1cmVVbnRhYmJhYmxlJyxcblxuXG4gICAgICAgIC8qKiBTYXZlIHRoZSBleGlzdGluZyB0YWJpbmRleCB2YWx1ZSBhbmQgbWFrZSB0aGUgbm9kZSB1bnRhYmJhYmxlIGFuZCB1bmZvY3VzYWJsZSAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZW5zdXJlVW50YWJiYWJsZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5ub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZWxlbWVudCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL3RoaXMubm9kZTtcbiAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsZW1lbnQsIF9mb2N1c2FibGVFbGVtZW50c1N0cmluZykpIHtcbiAgICAgICAgICAgIGlmICggLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovZWxlbWVudC50YWJJbmRleCA9PT0gLTEgJiYgdGhpcy5oYXNTYXZlZFRhYkluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3NhdmVkVGFiSW5kZXggPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9lbGVtZW50LnRhYkluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgICAgICB0aGlzLl9vdmVycm9kZUZvY3VzTWV0aG9kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9zYXZlZFRhYkluZGV4ID0gLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovZWxlbWVudC50YWJJbmRleDtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgYW5vdGhlciBpbmVydCByb290IHRvIHRoaXMgaW5lcnQgbm9kZSdzIHNldCBvZiBtYW5hZ2luZyBpbmVydCByb290cy5cbiAgICAgICAgICogQHBhcmFtIHshSW5lcnRSb290fSBpbmVydFJvb3RcbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnYWRkSW5lcnRSb290JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEluZXJ0Um9vdChpbmVydFJvb3QpIHtcbiAgICAgICAgICB0aGlzLl90aHJvd0lmRGVzdHJveWVkKCk7XG4gICAgICAgICAgdGhpcy5faW5lcnRSb290cy5hZGQoaW5lcnRSb290KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgdGhlIGdpdmVuIGluZXJ0IHJvb3QgZnJvbSB0aGlzIGluZXJ0IG5vZGUncyBzZXQgb2YgbWFuYWdpbmcgaW5lcnQgcm9vdHMuXG4gICAgICAgICAqIElmIHRoZSBzZXQgb2YgbWFuYWdpbmcgaW5lcnQgcm9vdHMgYmVjb21lcyBlbXB0eSwgdGhpcyBub2RlIGlzIG5vIGxvbmdlciBpbmVydCxcbiAgICAgICAgICogc28gdGhlIG9iamVjdCBzaG91bGQgYmUgZGVzdHJveWVkLlxuICAgICAgICAgKiBAcGFyYW0geyFJbmVydFJvb3R9IGluZXJ0Um9vdFxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZW1vdmVJbmVydFJvb3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlSW5lcnRSb290KGluZXJ0Um9vdCkge1xuICAgICAgICAgIHRoaXMuX3Rocm93SWZEZXN0cm95ZWQoKTtcbiAgICAgICAgICB0aGlzLl9pbmVydFJvb3RzWydkZWxldGUnXShpbmVydFJvb3QpO1xuICAgICAgICAgIGlmICh0aGlzLl9pbmVydFJvb3RzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJ1Y3RvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdkZXN0cm95ZWQnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gKC8qKiBAdHlwZSB7IUluZXJ0Tm9kZX0gKi90aGlzLl9kZXN0cm95ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhc1NhdmVkVGFiSW5kZXgnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fc2F2ZWRUYWJJbmRleCAhPT0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAcmV0dXJuIHshTm9kZX0gKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdub2RlJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgdGhpcy5fdGhyb3dJZkRlc3Ryb3llZCgpO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9ub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEBwYXJhbSB7P251bWJlcn0gdGFiSW5kZXggKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdzYXZlZFRhYkluZGV4JyxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodGFiSW5kZXgpIHtcbiAgICAgICAgICB0aGlzLl90aHJvd0lmRGVzdHJveWVkKCk7XG4gICAgICAgICAgdGhpcy5fc2F2ZWRUYWJJbmRleCA9IHRhYkluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEByZXR1cm4gez9udW1iZXJ9ICovXG4gICAgICAgICxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgdGhpcy5fdGhyb3dJZkRlc3Ryb3llZCgpO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zYXZlZFRhYkluZGV4O1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBJbmVydE5vZGU7XG4gICAgfSgpO1xuXG4gICAgLyoqXG4gICAgICogSW5lcnRNYW5hZ2VyIGlzIGEgcGVyLWRvY3VtZW50IHNpbmdsZXRvbiBvYmplY3Qgd2hpY2ggbWFuYWdlcyBhbGwgaW5lcnQgcm9vdHMgYW5kIG5vZGVzLlxuICAgICAqXG4gICAgICogV2hlbiBhbiBlbGVtZW50IGJlY29tZXMgYW4gaW5lcnQgcm9vdCBieSBoYXZpbmcgYW4gYGluZXJ0YCBhdHRyaWJ1dGUgc2V0IGFuZC9vciBpdHMgYGluZXJ0YFxuICAgICAqIHByb3BlcnR5IHNldCB0byBgdHJ1ZWAsIHRoZSBgc2V0SW5lcnRgIG1ldGhvZCBjcmVhdGVzIGFuIGBJbmVydFJvb3RgIG9iamVjdCBmb3IgdGhlIGVsZW1lbnQuXG4gICAgICogVGhlIGBJbmVydFJvb3RgIGluIHR1cm4gcmVnaXN0ZXJzIGl0c2VsZiBhcyBtYW5hZ2luZyBhbGwgb2YgdGhlIGVsZW1lbnQncyBmb2N1c2FibGUgZGVzY2VuZGFudFxuICAgICAqIG5vZGVzIHZpYSB0aGUgYHJlZ2lzdGVyKClgIG1ldGhvZC4gVGhlIGBJbmVydE1hbmFnZXJgIGVuc3VyZXMgdGhhdCBhIHNpbmdsZSBgSW5lcnROb2RlYCBpbnN0YW5jZVxuICAgICAqIGlzIGNyZWF0ZWQgZm9yIGVhY2ggc3VjaCBub2RlLCB2aWEgdGhlIGBfbWFuYWdlZE5vZGVzYCBtYXAuXG4gICAgICovXG5cblxuICAgIHZhciBJbmVydE1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2N1bWVudFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBJbmVydE1hbmFnZXIoZG9jdW1lbnQpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZXJ0TWFuYWdlcik7XG5cbiAgICAgICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBhcmd1bWVudDsgSW5lcnRNYW5hZ2VyIG5lZWRzIHRvIHdyYXAgYSBkb2N1bWVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAdHlwZSB7IURvY3VtZW50fSAqL1xuICAgICAgICB0aGlzLl9kb2N1bWVudCA9IGRvY3VtZW50O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGwgbWFuYWdlZCBub2RlcyBrbm93biB0byB0aGlzIEluZXJ0TWFuYWdlci4gSW4gYSBtYXAgdG8gYWxsb3cgbG9va2luZyB1cCBieSBOb2RlLlxuICAgICAgICAgKiBAdHlwZSB7IU1hcDwhTm9kZSwgIUluZXJ0Tm9kZT59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9tYW5hZ2VkTm9kZXMgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBpbmVydCByb290cyBrbm93biB0byB0aGlzIEluZXJ0TWFuYWdlci4gSW4gYSBtYXAgdG8gYWxsb3cgbG9va2luZyB1cCBieSBOb2RlLlxuICAgICAgICAgKiBAdHlwZSB7IU1hcDwhTm9kZSwgIUluZXJ0Um9vdD59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9pbmVydFJvb3RzID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPYnNlcnZlciBmb3IgbXV0YXRpb25zIG9uIGBkb2N1bWVudC5ib2R5YC5cbiAgICAgICAgICogQHR5cGUgeyFNdXRhdGlvbk9ic2VydmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLl93YXRjaEZvckluZXJ0LmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIEFkZCBpbmVydCBzdHlsZS5cbiAgICAgICAgYWRkSW5lcnRTdHlsZShkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcblxuICAgICAgICAvLyBXYWl0IGZvciBkb2N1bWVudCB0byBiZSBsb2FkZWQuXG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgdGhpcy5fb25Eb2N1bWVudExvYWRlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9vbkRvY3VtZW50TG9hZGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYmUgYW4gaW5lcnQgcm9vdCBvciBub3QuXG4gICAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gcm9vdFxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBpbmVydFxuICAgICAgICovXG5cblxuICAgICAgX2NyZWF0ZUNsYXNzKEluZXJ0TWFuYWdlciwgW3tcbiAgICAgICAga2V5OiAnc2V0SW5lcnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SW5lcnQocm9vdCwgaW5lcnQpIHtcbiAgICAgICAgICBpZiAoaW5lcnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbmVydFJvb3RzLmhhcyhyb290KSkge1xuICAgICAgICAgICAgICAvLyBlbGVtZW50IGlzIGFscmVhZHkgaW5lcnRcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaW5lcnRSb290ID0gbmV3IEluZXJ0Um9vdChyb290LCB0aGlzKTtcbiAgICAgICAgICAgIHJvb3Quc2V0QXR0cmlidXRlKCdpbmVydCcsICcnKTtcbiAgICAgICAgICAgIHRoaXMuX2luZXJ0Um9vdHMuc2V0KHJvb3QsIGluZXJ0Um9vdCk7XG4gICAgICAgICAgICAvLyBJZiBub3QgY29udGFpbmVkIGluIHRoZSBkb2N1bWVudCwgaXQgbXVzdCBiZSBpbiBhIHNoYWRvd1Jvb3QuXG4gICAgICAgICAgICAvLyBFbnN1cmUgaW5lcnQgc3R5bGVzIGFyZSBhZGRlZCB0aGVyZS5cbiAgICAgICAgICAgIGlmICghdGhpcy5fZG9jdW1lbnQuYm9keS5jb250YWlucyhyb290KSkge1xuICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gcm9vdC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5ub2RlVHlwZSA9PT0gMTEpIHtcbiAgICAgICAgICAgICAgICAgIGFkZEluZXJ0U3R5bGUocGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbmVydFJvb3RzLmhhcyhyb290KSkge1xuICAgICAgICAgICAgICAvLyBlbGVtZW50IGlzIGFscmVhZHkgbm9uLWluZXJ0XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9pbmVydFJvb3QgPSB0aGlzLl9pbmVydFJvb3RzLmdldChyb290KTtcbiAgICAgICAgICAgIF9pbmVydFJvb3QuZGVzdHJ1Y3RvcigpO1xuICAgICAgICAgICAgdGhpcy5faW5lcnRSb290c1snZGVsZXRlJ10ocm9vdCk7XG4gICAgICAgICAgICByb290LnJlbW92ZUF0dHJpYnV0ZSgnaW5lcnQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBJbmVydFJvb3Qgb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGluZXJ0IHJvb3QgZWxlbWVudCwgaWYgYW55LlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBlbGVtZW50XG4gICAgICAgICAqIEByZXR1cm4geyFJbmVydFJvb3R8dW5kZWZpbmVkfVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRJbmVydFJvb3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5lcnRSb290KGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5faW5lcnRSb290cy5nZXQoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVnaXN0ZXIgdGhlIGdpdmVuIEluZXJ0Um9vdCBhcyBtYW5hZ2luZyB0aGUgZ2l2ZW4gbm9kZS5cbiAgICAgICAgICogSW4gdGhlIGNhc2Ugd2hlcmUgdGhlIG5vZGUgaGFzIGEgcHJldmlvdXNseSBleGlzdGluZyBpbmVydCByb290LCB0aGlzIGluZXJ0IHJvb3Qgd2lsbFxuICAgICAgICAgKiBiZSBhZGRlZCB0byBpdHMgc2V0IG9mIGluZXJ0IHJvb3RzLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqIEBwYXJhbSB7IUluZXJ0Um9vdH0gaW5lcnRSb290XG4gICAgICAgICAqIEByZXR1cm4geyFJbmVydE5vZGV9IGluZXJ0Tm9kZVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZWdpc3RlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3Rlcihub2RlLCBpbmVydFJvb3QpIHtcbiAgICAgICAgICB2YXIgaW5lcnROb2RlID0gdGhpcy5fbWFuYWdlZE5vZGVzLmdldChub2RlKTtcbiAgICAgICAgICBpZiAoaW5lcnROb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vZGUgd2FzIGFscmVhZHkgaW4gYW4gaW5lcnQgc3VidHJlZVxuICAgICAgICAgICAgaW5lcnROb2RlLmFkZEluZXJ0Um9vdChpbmVydFJvb3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmVydE5vZGUgPSBuZXcgSW5lcnROb2RlKG5vZGUsIGluZXJ0Um9vdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbWFuYWdlZE5vZGVzLnNldChub2RlLCBpbmVydE5vZGUpO1xuXG4gICAgICAgICAgcmV0dXJuIGluZXJ0Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZS1yZWdpc3RlciB0aGUgZ2l2ZW4gSW5lcnRSb290IGFzIG1hbmFnaW5nIHRoZSBnaXZlbiBpbmVydCBub2RlLlxuICAgICAgICAgKiBSZW1vdmVzIHRoZSBpbmVydCByb290IGZyb20gdGhlIEluZXJ0Tm9kZSdzIHNldCBvZiBtYW5hZ2luZyBpbmVydCByb290cywgYW5kIHJlbW92ZSB0aGUgaW5lcnRcbiAgICAgICAgICogbm9kZSBmcm9tIHRoZSBJbmVydE1hbmFnZXIncyBzZXQgb2YgbWFuYWdlZCBub2RlcyBpZiBpdCBpcyBkZXN0cm95ZWQuXG4gICAgICAgICAqIElmIHRoZSBub2RlIGlzIG5vdCBjdXJyZW50bHkgbWFuYWdlZCwgdGhpcyBpcyBlc3NlbnRpYWxseSBhIG5vLW9wLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqIEBwYXJhbSB7IUluZXJ0Um9vdH0gaW5lcnRSb290XG4gICAgICAgICAqIEByZXR1cm4gez9JbmVydE5vZGV9IFRoZSBwb3RlbnRpYWxseSBkZXN0cm95ZWQgSW5lcnROb2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG5vZGUsIGlmIGFueS5cbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVyZWdpc3RlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXJlZ2lzdGVyKG5vZGUsIGluZXJ0Um9vdCkge1xuICAgICAgICAgIHZhciBpbmVydE5vZGUgPSB0aGlzLl9tYW5hZ2VkTm9kZXMuZ2V0KG5vZGUpO1xuICAgICAgICAgIGlmICghaW5lcnROb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmVydE5vZGUucmVtb3ZlSW5lcnRSb290KGluZXJ0Um9vdCk7XG4gICAgICAgICAgaWYgKGluZXJ0Tm9kZS5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlc1snZGVsZXRlJ10obm9kZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGluZXJ0Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsYmFjayB1c2VkIHdoZW4gZG9jdW1lbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ19vbkRvY3VtZW50TG9hZGVkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRvY3VtZW50TG9hZGVkKCkge1xuICAgICAgICAgIC8vIEZpbmQgYWxsIGluZXJ0IHJvb3RzIGluIGRvY3VtZW50IGFuZCBtYWtlIHRoZW0gYWN0dWFsbHkgaW5lcnQuXG4gICAgICAgICAgdmFyIGluZXJ0RWxlbWVudHMgPSBzbGljZS5jYWxsKHRoaXMuX2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpbmVydF0nKSk7XG4gICAgICAgICAgaW5lcnRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpbmVydEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5lcnQoaW5lcnRFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgIC8vIENvbW1lbnQgdGhpcyBvdXQgdG8gdXNlIHByb2dyYW1tYXRpYyBBUEkgb25seS5cbiAgICAgICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKHRoaXMuX2RvY3VtZW50LmJvZHkgfHwgdGhpcy5fZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7IGF0dHJpYnV0ZXM6IHRydWUsIHN1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsYmFjayB1c2VkIHdoZW4gbXV0YXRpb24gb2JzZXJ2ZXIgZGV0ZWN0cyBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAgICogQHBhcmFtIHshQXJyYXk8IU11dGF0aW9uUmVjb3JkPn0gcmVjb3Jkc1xuICAgICAgICAgKiBAcGFyYW0geyFNdXRhdGlvbk9ic2VydmVyfSBzZWxmXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ193YXRjaEZvckluZXJ0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF93YXRjaEZvckluZXJ0KHJlY29yZHMsIHNlbGYpIHtcbiAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgIHJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2NoaWxkTGlzdCc6XG4gICAgICAgICAgICAgICAgc2xpY2UuY2FsbChyZWNvcmQuYWRkZWROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciBpbmVydEVsZW1lbnRzID0gc2xpY2UuY2FsbChub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpbmVydF0nKSk7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKG5vZGUsICdbaW5lcnRdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5lcnRFbGVtZW50cy51bnNoaWZ0KG5vZGUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaW5lcnRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpbmVydEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbmVydChpbmVydEVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgfSwgX3RoaXMpO1xuICAgICAgICAgICAgICAgIH0sIF90aGlzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYXR0cmlidXRlcyc6XG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC5hdHRyaWJ1dGVOYW1lICE9PSAnaW5lcnQnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9yZWNvcmQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciBpbmVydCA9IHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2luZXJ0Jyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0SW5lcnQodGFyZ2V0LCBpbmVydCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIEluZXJ0TWFuYWdlcjtcbiAgICB9KCk7XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSB3YWxrIHRoZSBjb21wb3NlZCB0cmVlIGZyb20gfG5vZGV8LlxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbiAoIUhUTUxFbGVtZW50KSk9fSBjYWxsYmFjayBDYWxsYmFjayB0byBiZSBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCB0cmF2ZXJzZWQsXG4gICAgICogICAgIGJlZm9yZSBkZXNjZW5kaW5nIGludG8gY2hpbGQgbm9kZXMuXG4gICAgICogQHBhcmFtIHs/U2hhZG93Um9vdD19IHNoYWRvd1Jvb3RBbmNlc3RvciBUaGUgbmVhcmVzdCBTaGFkb3dSb290IGFuY2VzdG9yLCBpZiBhbnkuXG4gICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGNvbXBvc2VkVHJlZVdhbGsobm9kZSwgY2FsbGJhY2ssIHNoYWRvd1Jvb3RBbmNlc3Rvcikge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9ub2RlO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlc2NlbmQgaW50byBub2RlOlxuICAgICAgICAvLyBJZiBpdCBoYXMgYSBTaGFkb3dSb290LCBpZ25vcmUgYWxsIGNoaWxkIGVsZW1lbnRzIC0gdGhlc2Ugd2lsbCBiZSBwaWNrZWRcbiAgICAgICAgLy8gdXAgYnkgdGhlIDxjb250ZW50PiBvciA8c2hhZG93PiBlbGVtZW50cy4gRGVzY2VuZCBzdHJhaWdodCBpbnRvIHRoZVxuICAgICAgICAvLyBTaGFkb3dSb290LlxuICAgICAgICB2YXIgc2hhZG93Um9vdCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL2VsZW1lbnQuc2hhZG93Um9vdDtcbiAgICAgICAgaWYgKHNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICBjb21wb3NlZFRyZWVXYWxrKHNoYWRvd1Jvb3QsIGNhbGxiYWNrLCBzaGFkb3dSb290KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBpdCBpcyBhIDxjb250ZW50PiBlbGVtZW50LCBkZXNjZW5kIGludG8gZGlzdHJpYnV0ZWQgZWxlbWVudHMgLSB0aGVzZVxuICAgICAgICAvLyBhcmUgZWxlbWVudHMgZnJvbSBvdXRzaWRlIHRoZSBzaGFkb3cgcm9vdCB3aGljaCBhcmUgcmVuZGVyZWQgaW5zaWRlIHRoZVxuICAgICAgICAvLyBzaGFkb3cgRE9NLlxuICAgICAgICBpZiAoZWxlbWVudC5sb2NhbE5hbWUgPT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgICAgdmFyIGNvbnRlbnQgPSAvKiogQHR5cGUgeyFIVE1MQ29udGVudEVsZW1lbnR9ICovZWxlbWVudDtcbiAgICAgICAgICAvLyBWZXJpZmllcyBpZiBTaGFkb3dEb20gdjAgaXMgc3VwcG9ydGVkLlxuICAgICAgICAgIHZhciBkaXN0cmlidXRlZE5vZGVzID0gY29udGVudC5nZXREaXN0cmlidXRlZE5vZGVzID8gY29udGVudC5nZXREaXN0cmlidXRlZE5vZGVzKCkgOiBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3RyaWJ1dGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbXBvc2VkVHJlZVdhbGsoZGlzdHJpYnV0ZWROb2Rlc1tpXSwgY2FsbGJhY2ssIHNoYWRvd1Jvb3RBbmNlc3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGl0IGlzIGEgPHNsb3Q+IGVsZW1lbnQsIGRlc2NlbmQgaW50byBhc3NpZ25lZCBub2RlcyAtIHRoZXNlXG4gICAgICAgIC8vIGFyZSBlbGVtZW50cyBmcm9tIG91dHNpZGUgdGhlIHNoYWRvdyByb290IHdoaWNoIGFyZSByZW5kZXJlZCBpbnNpZGUgdGhlXG4gICAgICAgIC8vIHNoYWRvdyBET00uXG4gICAgICAgIGlmIChlbGVtZW50LmxvY2FsTmFtZSA9PSAnc2xvdCcpIHtcbiAgICAgICAgICB2YXIgc2xvdCA9IC8qKiBAdHlwZSB7IUhUTUxTbG90RWxlbWVudH0gKi9lbGVtZW50O1xuICAgICAgICAgIC8vIFZlcmlmeSBpZiBTaGFkb3dEb20gdjEgaXMgc3VwcG9ydGVkLlxuICAgICAgICAgIHZhciBfZGlzdHJpYnV0ZWROb2RlcyA9IHNsb3QuYXNzaWduZWROb2RlcyA/IHNsb3QuYXNzaWduZWROb2Rlcyh7IGZsYXR0ZW46IHRydWUgfSkgOiBbXTtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2Rpc3RyaWJ1dGVkTm9kZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBjb21wb3NlZFRyZWVXYWxrKF9kaXN0cmlidXRlZE5vZGVzW19pXSwgY2FsbGJhY2ssIHNoYWRvd1Jvb3RBbmNlc3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiBpdCBpcyBuZWl0aGVyIHRoZSBwYXJlbnQgb2YgYSBTaGFkb3dSb290LCBhIDxjb250ZW50PiBlbGVtZW50LCBhIDxzbG90PlxuICAgICAgLy8gZWxlbWVudCwgbm9yIGEgPHNoYWRvdz4gZWxlbWVudCByZWN1cnNlIG5vcm1hbGx5LlxuICAgICAgdmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGNoaWxkICE9IG51bGwpIHtcbiAgICAgICAgY29tcG9zZWRUcmVlV2FsayhjaGlsZCwgY2FsbGJhY2ssIHNoYWRvd1Jvb3RBbmNlc3Rvcik7XG4gICAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHN0eWxlIGVsZW1lbnQgdG8gdGhlIG5vZGUgY29udGFpbmluZyB0aGUgaW5lcnQgc3BlY2lmaWMgc3R5bGVzXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEluZXJ0U3R5bGUobm9kZSkge1xuICAgICAgaWYgKG5vZGUucXVlcnlTZWxlY3Rvcignc3R5bGUjaW5lcnQtc3R5bGUsIGxpbmsjaW5lcnQtc3R5bGUnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKCdpZCcsICdpbmVydC1zdHlsZScpO1xuICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSAnXFxuJyArICdbaW5lcnRdIHtcXG4nICsgJyAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuJyArICcgIGN1cnNvcjogZGVmYXVsdDtcXG4nICsgJ31cXG4nICsgJ1xcbicgKyAnW2luZXJ0XSwgW2luZXJ0XSAqIHtcXG4nICsgJyAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4nICsgJyAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4nICsgJyAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbicgKyAnICB1c2VyLXNlbGVjdDogbm9uZTtcXG4nICsgJ31cXG4nO1xuICAgICAgbm9kZS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuXG4gICAgaWYgKCFIVE1MRWxlbWVudC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ2luZXJ0JykpIHtcbiAgICAgIC8qKiBAdHlwZSB7IUluZXJ0TWFuYWdlcn0gKi9cbiAgICAgIHZhciBpbmVydE1hbmFnZXIgPSBuZXcgSW5lcnRNYW5hZ2VyKGRvY3VtZW50KTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2luZXJ0Jywge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAvKiogQHRoaXMgeyFIVE1MRWxlbWVudH0gKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdpbmVydCcpO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHRoaXMgeyFIVE1MRWxlbWVudH0gKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoaW5lcnQpIHtcbiAgICAgICAgICBpbmVydE1hbmFnZXIuc2V0SW5lcnQodGhpcywgaW5lcnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pKCk7XG5cbn0pKSk7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIGBCbG9ja2luZ0VsZW1lbnRzYCBtYW5hZ2VzIGEgc3RhY2sgb2YgZWxlbWVudHMgdGhhdCBpbmVydCB0aGUgaW50ZXJhY3Rpb25cbiAqIG91dHNpZGUgdGhlbS4gVGhlIHRvcCBlbGVtZW50IGlzIHRoZSBpbnRlcmFjdGl2ZSBwYXJ0IG9mIHRoZSBkb2N1bWVudC5cbiAqIFRoZSBzdGFjayBjYW4gYmUgdXBkYXRlZCB3aXRoIHRoZSBtZXRob2RzIGBwdXNoLCByZW1vdmUsIHBvcGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmxvY2tpbmdFbGVtZW50cyB7XG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgd2hlbmV2ZXIgdGhpcyBvYmplY3QgaXMgYWJvdXQgdG8gYmVjb21lIG9ic29sZXRlLiBUaGlzIGVtcHRpZXNcbiAgICogdGhlIGJsb2NraW5nIGVsZW1lbnRzXG4gICAqL1xuICBkZXN0cnVjdG9yKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFRoZSB0b3AgYmxvY2tpbmcgZWxlbWVudC5cbiAgICovXG4gIHRvcDogSFRNTEVsZW1lbnR8bnVsbDtcblxuICAvKipcbiAgICogQWRkcyB0aGUgZWxlbWVudCB0byB0aGUgYmxvY2tpbmcgZWxlbWVudHMuXG4gICAqL1xuICBwdXNoKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZDtcblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZWxlbWVudCBmcm9tIHRoZSBibG9ja2luZyBlbGVtZW50cy4gUmV0dXJucyB0cnVlIGlmIHRoZVxuICAgKiBlbGVtZW50IHdhcyByZW1vdmVkLlxuICAgKi9cbiAgcmVtb3ZlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSB0b3AgYmxvY2tpbmcgZWxlbWVudCBhbmQgcmV0dXJucyBpdC5cbiAgICovXG4gIHBvcCgpOiBIVE1MRWxlbWVudHxudWxsO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGlmIHRoZSBlbGVtZW50IGlzIGEgYmxvY2tpbmcgZWxlbWVudC5cbiAgICovXG4gIGhhcyhlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRXaXRoQmxvY2tpbmdFbGVtZW50cyBleHRlbmRzIERvY3VtZW50IHtcbiAgJGJsb2NraW5nRWxlbWVudHM6IEJsb2NraW5nRWxlbWVudHM7XG59XG5cbigoKSA9PiB7XG4gIC8qIFN5bWJvbHMgZm9yIHByaXZhdGUgcHJvcGVydGllcyAqL1xuICBjb25zdCBfYmxvY2tpbmdFbGVtZW50cyA9IFN5bWJvbCgpO1xuICBjb25zdCBfYWxyZWFkeUluZXJ0RWxlbWVudHMgPSBTeW1ib2woKTtcbiAgY29uc3QgX3RvcEVsUGFyZW50cyA9IFN5bWJvbCgpO1xuICBjb25zdCBfc2libGluZ3NUb1Jlc3RvcmUgPSBTeW1ib2woKTtcbiAgY29uc3QgX3BhcmVudE1PID0gU3ltYm9sKCk7XG5cbiAgLyogU3ltYm9scyBmb3IgcHJpdmF0ZSBzdGF0aWMgbWV0aG9kcyAqL1xuICBjb25zdCBfdG9wQ2hhbmdlZCA9IFN5bWJvbCgpO1xuICBjb25zdCBfc3dhcEluZXJ0ZWRTaWJsaW5nID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9pbmVydFNpYmxpbmdzID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9yZXN0b3JlSW5lcnRlZFNpYmxpbmdzID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9nZXRQYXJlbnRzID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9nZXREaXN0cmlidXRlZENoaWxkcmVuID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9pc0luZXJ0YWJsZSA9IFN5bWJvbCgpO1xuICBjb25zdCBfaGFuZGxlTXV0YXRpb25zID0gU3ltYm9sKCk7XG5cbiAgaW50ZXJmYWNlIEluZXJ0YWJsZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBpbmVydD86IGJvb2xlYW47XG4gIH1cblxuICBpbnRlcmZhY2UgSW50ZXJuYWxTdGF0ZSB7XG4gICAgW19zaWJsaW5nc1RvUmVzdG9yZV06IFNldDxNYXliZUhhc0ludGVybmFsU3RhdGU+O1xuICAgIFtfcGFyZW50TU9dOiBNdXRhdGlvbk9ic2VydmVyO1xuICB9XG4gIGludGVyZmFjZSBIYXNJbnRlcm5hbFN0YXRlIGV4dGVuZHMgSW5lcnRhYmxlLCBJbnRlcm5hbFN0YXRlIHt9XG4gIGludGVyZmFjZSBNYXliZUhhc0ludGVybmFsU3RhdGUgZXh0ZW5kcyBJbmVydGFibGUsIFBhcnRpYWw8SW50ZXJuYWxTdGF0ZT4ge31cblxuICAvKipcbiAgICogU2hhZHlET00gc2hhZHkgcm9vdHMgbG9vayBhIGxvdCBsaWtlIHJlYWwgU2hhZG93Um9vdHMuIFRoZSBfX3NoYWR5IHByb3BlcnR5XG4gICAqIGdpdmVzIHRoZW0gYXdheSwgdGhvdWdoLlxuICAgKi9cbiAgaW50ZXJmYWNlIE1heWJlU2hhZHlSb290IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgX19zaGFkeTogdW5rbm93bjtcbiAgICBob3N0OiBFbGVtZW50O1xuICB9XG5cbiAgY2xhc3MgQmxvY2tpbmdFbGVtZW50c0ltcGwgaW1wbGVtZW50cyBCbG9ja2luZ0VsZW1lbnRzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYmxvY2tpbmcgZWxlbWVudHMuXG4gICAgICovXG4gICAgcHJpdmF0ZVtfYmxvY2tpbmdFbGVtZW50c106IE1heWJlSGFzSW50ZXJuYWxTdGF0ZVtdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGtlZXAgdHJhY2sgb2YgdGhlIHBhcmVudHMgb2YgdGhlIHRvcCBlbGVtZW50LCBmcm9tIHRoZSBlbGVtZW50XG4gICAgICogaXRzZWxmIHVwIHRvIGJvZHkuIFdoZW4gdG9wIGNoYW5nZXMsIHRoZSBvbGQgdG9wIG1pZ2h0IGhhdmUgYmVlbiByZW1vdmVkXG4gICAgICogZnJvbSB0aGUgZG9jdW1lbnQsIHNvIHdlIG5lZWQgdG8gbWVtb2l6ZSB0aGUgaW5lcnRlZCBwYXJlbnRzJyBzaWJsaW5nc1xuICAgICAqIGluIG9yZGVyIHRvIHJlc3RvcmUgdGhlaXIgaW5lcnRlbmVzcyB3aGVuIHRvcCBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHByaXZhdGVbX3RvcEVsUGFyZW50c106IEhhc0ludGVybmFsU3RhdGVbXSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogRWxlbWVudHMgdGhhdCBhcmUgYWxyZWFkeSBpbmVydCBiZWZvcmUgdGhlIGZpcnN0IGJsb2NraW5nIGVsZW1lbnQgaXNcbiAgICAgKiBwdXNoZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZVtfYWxyZWFkeUluZXJ0RWxlbWVudHNdID0gbmV3IFNldDxNYXliZUhhc0ludGVybmFsU3RhdGU+KCk7XG5cbiAgICBkZXN0cnVjdG9yKCk6IHZvaWQge1xuICAgICAgLy8gUmVzdG9yZSBvcmlnaW5hbCBpbmVydG5lc3MuXG4gICAgICB0aGlzW19yZXN0b3JlSW5lcnRlZFNpYmxpbmdzXSh0aGlzW190b3BFbFBhcmVudHNdKTtcbiAgICAgIC8vIE5vdGUgd2UgZG9uJ3Qgd2FudCB0byBtYWtlIHRoZXNlIHByb3BlcnRpZXMgbnVsbGFibGUgb24gdGhlIGNsYXNzLFxuICAgICAgLy8gc2luY2UgdGhlbiB3ZSdkIG5lZWQgbm9uLW51bGwgY2FzdHMgaW4gbWFueSBwbGFjZXMuIENhbGxpbmcgYSBtZXRob2Qgb25cbiAgICAgIC8vIGEgQmxvY2tpbmdFbGVtZW50cyBpbnN0YW5jZSBhZnRlciBjYWxsaW5nIGRlc3RydWN0b3Igd2lsbCByZXN1bHQgaW4gYW5cbiAgICAgIC8vIGV4Y2VwdGlvbi5cbiAgICAgIGNvbnN0IG51bGxhYmxlID0gdGhpcyBhcyB1bmtub3duIGFzIHtcbiAgICAgICAgW19ibG9ja2luZ0VsZW1lbnRzXTogbnVsbDtcbiAgICAgICAgW190b3BFbFBhcmVudHNdOiBudWxsO1xuICAgICAgICBbX2FscmVhZHlJbmVydEVsZW1lbnRzXTogbnVsbDtcbiAgICAgIH07XG4gICAgICBudWxsYWJsZVtfYmxvY2tpbmdFbGVtZW50c10gPSBudWxsO1xuICAgICAgbnVsbGFibGVbX3RvcEVsUGFyZW50c10gPSBudWxsO1xuICAgICAgbnVsbGFibGVbX2FscmVhZHlJbmVydEVsZW1lbnRzXSA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IHRvcCgpOiBIVE1MRWxlbWVudHxudWxsIHtcbiAgICAgIGNvbnN0IGVsZW1zID0gdGhpc1tfYmxvY2tpbmdFbGVtZW50c107XG4gICAgICByZXR1cm4gZWxlbXNbZWxlbXMubGVuZ3RoIC0gMV0gfHwgbnVsbDtcbiAgICB9XG5cbiAgICBwdXNoKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudCA9PT0gdGhpcy50b3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIGl0IGZyb20gdGhlIHN0YWNrLCB3ZSdsbCBicmluZyBpdCB0byB0aGUgdG9wLlxuICAgICAgdGhpcy5yZW1vdmUoZWxlbWVudCk7XG4gICAgICB0aGlzW190b3BDaGFuZ2VkXShlbGVtZW50KTtcbiAgICAgIHRoaXNbX2Jsb2NraW5nRWxlbWVudHNdLnB1c2goZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBpID0gdGhpc1tfYmxvY2tpbmdFbGVtZW50c10uaW5kZXhPZihlbGVtZW50KTtcbiAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzW19ibG9ja2luZ0VsZW1lbnRzXS5zcGxpY2UoaSwgMSk7XG4gICAgICAvLyBUb3AgY2hhbmdlZCBvbmx5IGlmIHRoZSByZW1vdmVkIGVsZW1lbnQgd2FzIHRoZSB0b3AgZWxlbWVudC5cbiAgICAgIGlmIChpID09PSB0aGlzW19ibG9ja2luZ0VsZW1lbnRzXS5sZW5ndGgpIHtcbiAgICAgICAgdGhpc1tfdG9wQ2hhbmdlZF0odGhpcy50b3ApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcG9wKCk6IEhUTUxFbGVtZW50fG51bGwge1xuICAgICAgY29uc3QgdG9wID0gdGhpcy50b3A7XG4gICAgICB0b3AgJiYgdGhpcy5yZW1vdmUodG9wKTtcbiAgICAgIHJldHVybiB0b3A7XG4gICAgfVxuXG4gICAgaGFzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpc1tfYmxvY2tpbmdFbGVtZW50c10uaW5kZXhPZihlbGVtZW50KSAhPT0gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBgaW5lcnRgIHRvIGFsbCBkb2N1bWVudCBlbGVtZW50cyBleGNlcHQgdGhlIG5ldyB0b3AgZWxlbWVudCwgaXRzXG4gICAgICogcGFyZW50cywgYW5kIGl0cyBkaXN0cmlidXRlZCBjb250ZW50LlxuICAgICAqL1xuICAgIHByaXZhdGVbX3RvcENoYW5nZWRdKG5ld1RvcDogTWF5YmVIYXNJbnRlcm5hbFN0YXRlfG51bGwpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHRvS2VlcEluZXJ0ID0gdGhpc1tfYWxyZWFkeUluZXJ0RWxlbWVudHNdO1xuICAgICAgY29uc3Qgb2xkUGFyZW50cyA9IHRoaXNbX3RvcEVsUGFyZW50c107XG4gICAgICAvLyBObyBuZXcgdG9wLCByZXNldCBvbGQgdG9wIGlmIGFueS5cbiAgICAgIGlmICghbmV3VG9wKSB7XG4gICAgICAgIHRoaXNbX3Jlc3RvcmVJbmVydGVkU2libGluZ3NdKG9sZFBhcmVudHMpO1xuICAgICAgICB0b0tlZXBJbmVydC5jbGVhcigpO1xuICAgICAgICB0aGlzW190b3BFbFBhcmVudHNdID0gW107XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3UGFyZW50cyA9IHRoaXNbX2dldFBhcmVudHNdKG5ld1RvcCk7XG4gICAgICAvLyBOZXcgdG9wIGlzIG5vdCBjb250YWluZWQgaW4gdGhlIG1haW4gZG9jdW1lbnQhXG4gICAgICBpZiAobmV3UGFyZW50c1tuZXdQYXJlbnRzLmxlbmd0aCAtIDFdLnBhcmVudE5vZGUgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ05vbi1jb25uZWN0ZWQgZWxlbWVudCBjYW5ub3QgYmUgYSBibG9ja2luZyBlbGVtZW50Jyk7XG4gICAgICB9XG4gICAgICAvLyBDYXN0IGhlcmUgYmVjYXVzZSB3ZSBrbm93IHdlJ2xsIGNhbGwgX2luZXJ0U2libGluZ3Mgb24gbmV3UGFyZW50c1xuICAgICAgLy8gYmVsb3cuXG4gICAgICB0aGlzW190b3BFbFBhcmVudHNdID0gbmV3UGFyZW50cyBhcyBBcnJheTxIYXNJbnRlcm5hbFN0YXRlPjtcblxuICAgICAgY29uc3QgdG9Ta2lwID0gdGhpc1tfZ2V0RGlzdHJpYnV0ZWRDaGlsZHJlbl0obmV3VG9wKTtcblxuICAgICAgLy8gTm8gcHJldmlvdXMgdG9wIGVsZW1lbnQuXG4gICAgICBpZiAoIW9sZFBhcmVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXNbX2luZXJ0U2libGluZ3NdKG5ld1BhcmVudHMsIHRvU2tpcCwgdG9LZWVwSW5lcnQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBpID0gb2xkUGFyZW50cy5sZW5ndGggLSAxO1xuICAgICAgbGV0IGogPSBuZXdQYXJlbnRzLmxlbmd0aCAtIDE7XG4gICAgICAvLyBGaW5kIGNvbW1vbiBwYXJlbnQuIEluZGV4IDAgaXMgdGhlIGVsZW1lbnQgaXRzZWxmIChzbyBzdG9wIGJlZm9yZSBpdCkuXG4gICAgICB3aGlsZSAoaSA+IDAgJiYgaiA+IDAgJiYgb2xkUGFyZW50c1tpXSA9PT0gbmV3UGFyZW50c1tqXSkge1xuICAgICAgICBpLS07XG4gICAgICAgIGotLTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHVwIHRoZSBwYXJlbnRzIHRyZWUgdGhlcmUgYXJlIDIgZWxlbWVudHMgdGhhdCBhcmUgc2libGluZ3MsIHN3YXBcbiAgICAgIC8vIHRoZSBpbmVydGVkIHNpYmxpbmcuXG4gICAgICBpZiAob2xkUGFyZW50c1tpXSAhPT0gbmV3UGFyZW50c1tqXSkge1xuICAgICAgICB0aGlzW19zd2FwSW5lcnRlZFNpYmxpbmddKG9sZFBhcmVudHNbaV0sIG5ld1BhcmVudHNbal0pO1xuICAgICAgfVxuICAgICAgLy8gUmVzdG9yZSBvbGQgcGFyZW50cyBzaWJsaW5ncyBpbmVydG5lc3MuXG4gICAgICBpID4gMCAmJiB0aGlzW19yZXN0b3JlSW5lcnRlZFNpYmxpbmdzXShvbGRQYXJlbnRzLnNsaWNlKDAsIGkpKTtcbiAgICAgIC8vIE1ha2UgbmV3IHBhcmVudHMgc2libGluZ3MgaW5lcnQuXG4gICAgICBqID4gMCAmJiB0aGlzW19pbmVydFNpYmxpbmdzXShuZXdQYXJlbnRzLnNsaWNlKDAsIGopLCB0b1NraXAsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN3YXBzIGluZXJ0bmVzcyBiZXR3ZWVuIHR3byBzaWJsaW5nIGVsZW1lbnRzLlxuICAgICAqIFNldHMgdGhlIHByb3BlcnR5IGBpbmVydGAgb3ZlciB0aGUgYXR0cmlidXRlIHNpbmNlIHRoZSBpbmVydCBzcGVjXG4gICAgICogZG9lc24ndCBzcGVjaWZ5IGlmIGl0IHNob3VsZCBiZSByZWZsZWN0ZWQuXG4gICAgICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNpbmVydFxuICAgICAqL1xuICAgIHByaXZhdGVbX3N3YXBJbmVydGVkU2libGluZ10oXG4gICAgICAgIG9sZEluZXJ0OiBIYXNJbnRlcm5hbFN0YXRlLCBuZXdJbmVydDogTWF5YmVIYXNJbnRlcm5hbFN0YXRlKTogdm9pZCB7XG4gICAgICBjb25zdCBzaWJsaW5nc1RvUmVzdG9yZSA9IG9sZEluZXJ0W19zaWJsaW5nc1RvUmVzdG9yZV07XG4gICAgICAvLyBvbGRJbmVydCBpcyBub3QgY29udGFpbmVkIGluIHNpYmxpbmdzIHRvIHJlc3RvcmUsIHNvIHdlIGhhdmUgdG8gY2hlY2tcbiAgICAgIC8vIGlmIGl0J3MgaW5lcnRhYmxlIGFuZCBpZiBhbHJlYWR5IGluZXJ0LlxuICAgICAgaWYgKHRoaXNbX2lzSW5lcnRhYmxlXShvbGRJbmVydCkgJiYgIW9sZEluZXJ0LmluZXJ0KSB7XG4gICAgICAgIG9sZEluZXJ0LmluZXJ0ID0gdHJ1ZTtcbiAgICAgICAgc2libGluZ3NUb1Jlc3RvcmUuYWRkKG9sZEluZXJ0KTtcbiAgICAgIH1cbiAgICAgIC8vIElmIG5ld0luZXJ0IHdhcyBhbHJlYWR5IGJldHdlZW4gdGhlIHNpYmxpbmdzIHRvIHJlc3RvcmUsIGl0IG1lYW5zIGl0IGlzXG4gICAgICAvLyBpbmVydGFibGUgYW5kIG11c3QgYmUgcmVzdG9yZWQuXG4gICAgICBpZiAoc2libGluZ3NUb1Jlc3RvcmUuaGFzKG5ld0luZXJ0KSkge1xuICAgICAgICBuZXdJbmVydC5pbmVydCA9IGZhbHNlO1xuICAgICAgICBzaWJsaW5nc1RvUmVzdG9yZS5kZWxldGUobmV3SW5lcnQpO1xuICAgICAgfVxuICAgICAgbmV3SW5lcnRbX3BhcmVudE1PXSA9IG9sZEluZXJ0W19wYXJlbnRNT107XG4gICAgICBuZXdJbmVydFtfc2libGluZ3NUb1Jlc3RvcmVdID0gc2libGluZ3NUb1Jlc3RvcmU7XG4gICAgICAob2xkSW5lcnQgYXMgTWF5YmVIYXNJbnRlcm5hbFN0YXRlKVtfcGFyZW50TU9dID0gdW5kZWZpbmVkO1xuICAgICAgKG9sZEluZXJ0IGFzIE1heWJlSGFzSW50ZXJuYWxTdGF0ZSlbX3NpYmxpbmdzVG9SZXN0b3JlXSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlcyBvcmlnaW5hbCBpbmVydG5lc3MgdG8gdGhlIHNpYmxpbmdzIG9mIHRoZSBlbGVtZW50cy5cbiAgICAgKiBTZXRzIHRoZSBwcm9wZXJ0eSBgaW5lcnRgIG92ZXIgdGhlIGF0dHJpYnV0ZSBzaW5jZSB0aGUgaW5lcnQgc3BlY1xuICAgICAqIGRvZXNuJ3Qgc3BlY2lmeSBpZiBpdCBzaG91bGQgYmUgcmVmbGVjdGVkLlxuICAgICAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2ludGVyYWN0aW9uLmh0bWwjaW5lcnRcbiAgICAgKi9cbiAgICBwcml2YXRlW19yZXN0b3JlSW5lcnRlZFNpYmxpbmdzXShlbGVtZW50czogSGFzSW50ZXJuYWxTdGF0ZVtdKSB7XG4gICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgbW8gPSBlbGVtZW50W19wYXJlbnRNT107XG4gICAgICAgIG1vLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgKGVsZW1lbnQgYXMgTWF5YmVIYXNJbnRlcm5hbFN0YXRlKVtfcGFyZW50TU9dID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGVsZW1lbnRbX3NpYmxpbmdzVG9SZXN0b3JlXTtcbiAgICAgICAgZm9yIChjb25zdCBzaWJsaW5nIG9mIHNpYmxpbmdzKSB7XG4gICAgICAgICAgc2libGluZy5pbmVydCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIChlbGVtZW50IGFzIE1heWJlSGFzSW50ZXJuYWxTdGF0ZSlbX3NpYmxpbmdzVG9SZXN0b3JlXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmVydHMgdGhlIHNpYmxpbmdzIG9mIHRoZSBlbGVtZW50cyBleGNlcHQgdGhlIGVsZW1lbnRzIHRvIHNraXAuIFN0b3Jlc1xuICAgICAqIHRoZSBpbmVydGVkIHNpYmxpbmdzIGludG8gdGhlIGVsZW1lbnQncyBzeW1ib2wgYF9zaWJsaW5nc1RvUmVzdG9yZWAuXG4gICAgICogUGFzcyBgdG9LZWVwSW5lcnRgIHRvIGNvbGxlY3QgdGhlIGFscmVhZHkgaW5lcnQgZWxlbWVudHMuXG4gICAgICogU2V0cyB0aGUgcHJvcGVydHkgYGluZXJ0YCBvdmVyIHRoZSBhdHRyaWJ1dGUgc2luY2UgdGhlIGluZXJ0IHNwZWNcbiAgICAgKiBkb2Vzbid0IHNwZWNpZnkgaWYgaXQgc2hvdWxkIGJlIHJlZmxlY3RlZC5cbiAgICAgKiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI2luZXJ0XG4gICAgICovXG4gICAgcHJpdmF0ZVtfaW5lcnRTaWJsaW5nc10oXG4gICAgICAgIGVsZW1lbnRzOiBNYXliZUhhc0ludGVybmFsU3RhdGVbXSwgdG9Ta2lwOiBTZXQ8SFRNTEVsZW1lbnQ+fG51bGwsXG4gICAgICAgIHRvS2VlcEluZXJ0OiBTZXQ8SFRNTEVsZW1lbnQ+fG51bGwpIHtcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAvLyBBc3N1bWUgZWxlbWVudCBpcyBub3QgYSBEb2N1bWVudCwgc28gaXQgbXVzdCBoYXZlIGEgcGFyZW50Tm9kZS5cbiAgICAgICAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlITtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGluZXJ0ZWRTaWJsaW5ncyA9IG5ldyBTZXQ8SFRNTEVsZW1lbnQ+KCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjb25zdCBzaWJsaW5nID0gY2hpbGRyZW5bal0gYXMgTWF5YmVIYXNJbnRlcm5hbFN0YXRlO1xuICAgICAgICAgIC8vIFNraXAgdGhlIGlucHV0IGVsZW1lbnQsIGlmIG5vdCBpbmVydGFibGUgb3IgdG8gYmUgc2tpcHBlZC5cbiAgICAgICAgICBpZiAoc2libGluZyA9PT0gZWxlbWVudCB8fCAhdGhpc1tfaXNJbmVydGFibGVdKHNpYmxpbmcpIHx8XG4gICAgICAgICAgICAgICh0b1NraXAgJiYgdG9Ta2lwLmhhcyhzaWJsaW5nKSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBTaG91bGQgYmUgY29sbGVjdGVkIHNpbmNlIGFscmVhZHkgaW5lcnRlZC5cbiAgICAgICAgICBpZiAodG9LZWVwSW5lcnQgJiYgc2libGluZy5pbmVydCkge1xuICAgICAgICAgICAgdG9LZWVwSW5lcnQuYWRkKHNpYmxpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWJsaW5nLmluZXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGluZXJ0ZWRTaWJsaW5ncy5hZGQoc2libGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFN0b3JlIHRoZSBzaWJsaW5ncyB0aGF0IHdlcmUgaW5lcnRlZC5cbiAgICAgICAgZWxlbWVudFtfc2libGluZ3NUb1Jlc3RvcmVdID0gaW5lcnRlZFNpYmxpbmdzO1xuICAgICAgICAvLyBPYnNlcnZlIG9ubHkgaW1tZWRpYXRlIGNoaWxkcmVuIG11dGF0aW9ucyBvbiB0aGUgcGFyZW50LlxuICAgICAgICBjb25zdCBtbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXNbX2hhbmRsZU11dGF0aW9uc10uYmluZCh0aGlzKSk7XG4gICAgICAgIGVsZW1lbnRbX3BhcmVudE1PXSA9IG1vO1xuICAgICAgICBsZXQgcGFyZW50VG9PYnNlcnZlID0gcGFyZW50O1xuICAgICAgICAvLyBJZiB3ZSdyZSB1c2luZyB0aGUgU2hhZHlET00gcG9seWZpbGwsIHRoZW4gb3VyIHBhcmVudCBjb3VsZCBiZSBhXG4gICAgICAgIC8vIHNoYWR5IHJvb3QsIHdoaWNoIGlzIGFuIG9iamVjdCB0aGF0IGFjdHMgbGlrZSBhIFNoYWRvd1Jvb3QsIGJ1dCBpc24ndFxuICAgICAgICAvLyBhY3R1YWxseSBhIG5vZGUgaW4gdGhlIHJlYWwgRE9NLiBPYnNlcnZlIHRoZSByZWFsIERPTSBwYXJlbnQgaW5zdGVhZC5cbiAgICAgICAgY29uc3QgbWF5YmVTaGFkeVJvb3QgPSBwYXJlbnRUb09ic2VydmUgYXMgTWF5YmVTaGFkeVJvb3Q7XG4gICAgICAgIGlmIChtYXliZVNoYWR5Um9vdC5fX3NoYWR5ICYmIG1heWJlU2hhZHlSb290Lmhvc3QpIHtcbiAgICAgICAgICBwYXJlbnRUb09ic2VydmUgPSBtYXliZVNoYWR5Um9vdC5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIG1vLm9ic2VydmUocGFyZW50VG9PYnNlcnZlLCB7XG4gICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIG5ld2x5IGFkZGVkL3JlbW92ZWQgbm9kZXMgYnkgdG9nZ2xpbmcgdGhlaXIgaW5lcnRuZXNzLlxuICAgICAqIEl0IGFsc28gY2hlY2tzIGlmIHRoZSBjdXJyZW50IHRvcCBCbG9ja2luZyBFbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQsXG4gICAgICogbm90aWZ5aW5nIGFuZCByZW1vdmluZyBpdC5cbiAgICAgKi9cbiAgICBwcml2YXRlW19oYW5kbGVNdXRhdGlvbnNdKG11dGF0aW9uczogTXV0YXRpb25SZWNvcmRbXSk6IHZvaWQge1xuICAgICAgY29uc3QgcGFyZW50cyA9IHRoaXNbX3RvcEVsUGFyZW50c107XG4gICAgICBjb25zdCB0b0tlZXBJbmVydCA9IHRoaXNbX2FscmVhZHlJbmVydEVsZW1lbnRzXTtcbiAgICAgIGZvciAoY29uc3QgbXV0YXRpb24gb2YgbXV0YXRpb25zKSB7XG4gICAgICAgIC8vIElmIHRoZSB0YXJnZXQgaXMgYSBzaGFkb3dSb290LCBnZXQgaXRzIGhvc3QgYXMgd2Ugc2tpcCBzaGFkb3dSb290cyB3aGVuXG4gICAgICAgIC8vIGNvbXB1dGluZyBfdG9wRWxQYXJlbnRzLlxuICAgICAgICBjb25zdCB0YXJnZXQgPSAobXV0YXRpb24udGFyZ2V0IGFzIFNoYWRvd1Jvb3QpLmhvc3QgfHwgbXV0YXRpb24udGFyZ2V0O1xuICAgICAgICBjb25zdCBpZHggPSB0YXJnZXQgPT09IGRvY3VtZW50LmJvZHkgP1xuICAgICAgICAgICAgcGFyZW50cy5sZW5ndGggOlxuICAgICAgICAgICAgcGFyZW50cy5pbmRleE9mKHRhcmdldCBhcyBIYXNJbnRlcm5hbFN0YXRlKTtcbiAgICAgICAgY29uc3QgaW5lcnRlZENoaWxkID0gcGFyZW50c1tpZHggLSAxXTtcbiAgICAgICAgY29uc3QgaW5lcnRlZFNpYmxpbmdzID0gaW5lcnRlZENoaWxkW19zaWJsaW5nc1RvUmVzdG9yZV07XG5cbiAgICAgICAgLy8gVG8gcmVzdG9yZS5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbi5yZW1vdmVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzaWJsaW5nID0gbXV0YXRpb24ucmVtb3ZlZE5vZGVzW2ldIGFzIE1heWJlSGFzSW50ZXJuYWxTdGF0ZTtcbiAgICAgICAgICBpZiAoc2libGluZyA9PT0gaW5lcnRlZENoaWxkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ0RldGVjdGVkIHJlbW92YWwgb2YgdGhlIHRvcCBCbG9ja2luZyBFbGVtZW50LicpO1xuICAgICAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZXJ0ZWRTaWJsaW5ncy5oYXMoc2libGluZykpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuaW5lcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZXJ0ZWRTaWJsaW5ncy5kZWxldGUoc2libGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG8gaW5lcnQuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHNpYmxpbmcgPSBtdXRhdGlvbi5hZGRlZE5vZGVzW2ldIGFzIE1heWJlSGFzSW50ZXJuYWxTdGF0ZTtcbiAgICAgICAgICBpZiAoIXRoaXNbX2lzSW5lcnRhYmxlXShzaWJsaW5nKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0b0tlZXBJbmVydCAmJiBzaWJsaW5nLmluZXJ0KSB7XG4gICAgICAgICAgICB0b0tlZXBJbmVydC5hZGQoc2libGluZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNpYmxpbmcuaW5lcnQgPSB0cnVlO1xuICAgICAgICAgICAgaW5lcnRlZFNpYmxpbmdzLmFkZChzaWJsaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIHRoZSBlbGVtZW50IGlzIGluZXJ0YWJsZS5cbiAgICAgKi9cbiAgICBwcml2YXRlW19pc0luZXJ0YWJsZV0oZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZSA9PT0gL14oc3R5bGV8dGVtcGxhdGV8c2NyaXB0KSQvLnRlc3QoZWxlbWVudC5sb2NhbE5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgbmV3UGFyZW50cyBvZiBhbiBlbGVtZW50LCBzdGFydGluZyBmcm9tIGVsZW1lbnRcbiAgICAgKiAoaW5jbHVkZWQpIHVwIHRvIGBkb2N1bWVudC5ib2R5YCAoZXhjbHVkZWQpLlxuICAgICAqL1xuICAgIHByaXZhdGVbX2dldFBhcmVudHNdKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogQXJyYXk8SFRNTEVsZW1lbnQ+IHtcbiAgICAgIGNvbnN0IHBhcmVudHMgPSBbXTtcbiAgICAgIGxldCBjdXJyZW50OiBIVE1MRWxlbWVudHxudWxsfHVuZGVmaW5lZCA9IGVsZW1lbnQ7XG4gICAgICAvLyBTdG9wIHRvIGJvZHkuXG4gICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIC8vIFNraXAgc2hhZG93IHJvb3RzLlxuICAgICAgICBpZiAoY3VycmVudC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICBwYXJlbnRzLnB1c2goY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2hhZG93RG9tIHYxXG4gICAgICAgIGlmIChjdXJyZW50LmFzc2lnbmVkU2xvdCkge1xuICAgICAgICAgIC8vIENvbGxlY3Qgc2xvdHMgZnJvbSBkZWVwZXN0IHNsb3QgdG8gdG9wLlxuICAgICAgICAgIHdoaWxlIChjdXJyZW50ID0gY3VycmVudC5hc3NpZ25lZFNsb3QpIHtcbiAgICAgICAgICAgIHBhcmVudHMucHVzaChjdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ29udGludWUgdGhlIHNlYXJjaCBvbiB0aGUgdG9wIHNsb3QuXG4gICAgICAgICAgY3VycmVudCA9IHBhcmVudHMucG9wKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCB8fFxuICAgICAgICAgICAgKGN1cnJlbnQgYXMgTm9kZSBhcyBTaGFkb3dSb290KS5ob3N0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGlzdHJpYnV0ZWQgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQncyBzaGFkb3cgcm9vdC5cbiAgICAgKiBSZXR1cm5zIG51bGwgaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGEgc2hhZG93IHJvb3QuXG4gICAgICovXG4gICAgcHJpdmF0ZVtfZ2V0RGlzdHJpYnV0ZWRDaGlsZHJlbl0oZWxlbWVudDogSFRNTEVsZW1lbnQpOlxuICAgICAgICBTZXQ8SFRNTEVsZW1lbnQ+fG51bGwge1xuICAgICAgY29uc3Qgc2hhZG93Um9vdCA9IGVsZW1lbnQuc2hhZG93Um9vdDtcbiAgICAgIGlmICghc2hhZG93Um9vdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQ8SFRNTEVsZW1lbnQ+KCk7XG4gICAgICBsZXQgaTtcbiAgICAgIGxldCBqO1xuICAgICAgbGV0IG5vZGVzO1xuICAgICAgY29uc3Qgc2xvdHMgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ3Nsb3QnKTtcbiAgICAgIGlmIChzbG90cy5sZW5ndGggJiYgc2xvdHNbMF0uYXNzaWduZWROb2Rlcykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2xvdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBub2RlcyA9IHNsb3RzW2ldLmFzc2lnbmVkTm9kZXMoe1xuICAgICAgICAgICAgZmxhdHRlbjogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1tqXS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgcmVzdWx0LmFkZChub2Rlc1tqXSBhcyBIVE1MRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE5vIG5lZWQgdG8gc2VhcmNoIGZvciA8Y29udGVudD4uXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIChkb2N1bWVudCBhcyBEb2N1bWVudFdpdGhCbG9ja2luZ0VsZW1lbnRzKS4kYmxvY2tpbmdFbGVtZW50cyA9XG4gICAgICBuZXcgQmxvY2tpbmdFbGVtZW50c0ltcGwoKTtcbn0pKCk7XG4iLCJpbXBvcnQgXCJ3aWNnLWluZXJ0XCI7XG5pbXBvcnQgXCJibG9ja2luZy1lbGVtZW50c1wiO1xuaW1wb3J0IHsgRG9jdW1lbnRXaXRoQmxvY2tpbmdFbGVtZW50cyB9IGZyb20gXCJibG9ja2luZy1lbGVtZW50c1wiO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tIFwiLi91c2UtZG9jdW1lbnQtY2xhc3NcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuXG5mdW5jdGlvbiBibG9ja2luZ0VsZW1lbnRzKCkgeyByZXR1cm4gKGdldERvY3VtZW50KCkgYXMgRG9jdW1lbnRXaXRoQmxvY2tpbmdFbGVtZW50cykuJGJsb2NraW5nRWxlbWVudHMgfVxuLyoqXG4gKiBBbGxvd3MgYW4gZWxlbWVudCB0byB0cmFwIGZvY3VzIGJ5IGFwcGx5aW5nIHRoZSBcImluZXJ0XCIgYXR0cmlidXRlIHRvIGFsbCBzaWJsaW5nLCBhdW50LCBhbmQgdW5jbGUgbm9kZXMuXG4gKiBcbiAqIEF1dG9tYXRpY2FsbHkgaGFuZGxlcyBjb25zZWN1dGl2ZSBjYWxscyB3aXRoIGEgbG9vc2VseSBhcHBsaWVkIHN0YWNrIG9wZXJhdGlvbiBcbiAqIChzcGVjaWZpY2FsbHkgdmlhIGBibG9ja2luZ0VsZW1lbnRzYCwgd2l0aCBhIHNtYWxsIHBvbHlmaWxsIGJlY2F1c2UgSSdtIG5vdCBzdXJlIGhvdyBsb25nXG4gKiBpdCdsbCB0YWtlIHRvIGZpbmQgaXRzIHdheSBpbnRvIHRoZSBzcGVjLCBpZiBldmVyKVxuICogQHBhcmFtIHRhcmdldCBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUJsb2NraW5nRWxlbWVudDxFIGV4dGVuZHMgRWxlbWVudD4oZW5hYmxlZDogYm9vbGVhbiwgZ2V0VGFyZ2V0OiAoKSA9PiAoRSB8IG51bGwpKSB7XG5cbiAgICBjb25zdCBzdGFibGVHZXRUYXJnZXQgPSB1c2VTdGFibGVDYWxsYmFjayhnZXRUYXJnZXQpO1xuXG4gICAgLyoqXG4gICAgICogUHVzaC9wb3AgdGhlIGVsZW1lbnQgZnJvbSB0aGUgYmxvY2tpbmdFbGVtZW50cyBzdGFjay5cbiAgICAgKi9cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBzdGFibGVHZXRUYXJnZXQoKTtcblxuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgICAgLy8gU29tZXRpbWVzIGJsb2NraW5nRWxlbWVudHMgd2lsbCBmYWlsIGlmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgICAgIC8vIHRoZSB0YXJnZXQgZWxlbWVudCBpc24ndCBjb25uZWN0ZWQgdG8gZG9jdW1lbnQuYm9keS5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgcmFyZSwgYnV0IGl0J3MgYmV0dGVyIHRvIGZhaWwgc2lsZW50bHkgd2l0aCB3ZWlyZCB0YWJiaW5nIGJlaGF2aW9yXG4gICAgICAgICAgICAvLyB0aGFuIHRvIGNyYXNoIHRoZSBlbnRpcmUgYXBwbGljYXRpb24uXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGJsb2NraW5nRWxlbWVudHMoKS5wdXNoKHRhcmdldCBhcyBFbGVtZW50IGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBibG9ja2luZ0VsZW1lbnRzKCkucmVtb3ZlKHRhcmdldCBhcyBFbGVtZW50IGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gV2VsbCwgc2VtaS1zaWxlbnRseS5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtlbmFibGVkXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb3BFbGVtZW50KCkge1xuICAgIHJldHVybiBibG9ja2luZ0VsZW1lbnRzKCkudG9wO1xufVxuXG5cbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgaXNGb2N1c2FibGUgfSBmcm9tIFwidGFiYmFibGVcIjtcbmltcG9ydCB7IHVzZUFjdGl2ZUVsZW1lbnQgfSBmcm9tIFwiLi91c2UtYWN0aXZlLWVsZW1lbnRcIjtcbmltcG9ydCB7IGdldFRvcEVsZW1lbnQsIHVzZUJsb2NraW5nRWxlbWVudCB9IGZyb20gXCIuL3VzZS1ibG9ja2luZy1lbGVtZW50XCI7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gXCIuL3VzZS1kb2N1bWVudC1jbGFzc1wiO1xuaW1wb3J0IHsgTWVyZ2VkUHJvcHMsIHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1wcm9wc1wiO1xuaW1wb3J0IHsgVXNlUmVmRWxlbWVudFByb3BzUmV0dXJuVHlwZSwgVXNlUmVmRWxlbWVudFJldHVyblR5cGUgfSBmcm9tIFwiLi91c2UtcmVmLWVsZW1lbnRcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUZvY3VzVHJhcFBhcmFtZXRlcnMgeyB0cmFwQWN0aXZlOiBib29sZWFuOyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlRm9jdXNUcmFwUmV0dXJuVHlwZTxFIGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBPbWl0PFVzZVJlZkVsZW1lbnRSZXR1cm5UeXBlPEU+LCBcInVzZVJlZkVsZW1lbnRQcm9wc1wiPiB7XG4gICAgdXNlRm9jdXNUcmFwUHJvcHM6IFVzZUZvY3VzVHJhcFByb3BzPEU+O1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlRm9jdXNUcmFwUHJvcHNQYXJhbWV0ZXJzPEUgZXh0ZW5kcyBOb2RlPiBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+IHsgfVxuZXhwb3J0IHR5cGUgVXNlRm9jdXNUcmFwUHJvcHNSZXR1cm5UeXBlPEUgZXh0ZW5kcyBOb2RlLCBQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4+ID0gTWVyZ2VkUHJvcHM8RSwgVXNlUmVmRWxlbWVudFByb3BzUmV0dXJuVHlwZTxFLCBQPiwgeyAgfT5cblxuZXhwb3J0IHR5cGUgVXNlRm9jdXNUcmFwUHJvcHM8RSBleHRlbmRzIEVsZW1lbnQ+ID0gPFAgZXh0ZW5kcyBVc2VGb2N1c1RyYXBQcm9wc1BhcmFtZXRlcnM8RT4+KHByb3BzOiBQKSA9PiBVc2VGb2N1c1RyYXBQcm9wc1JldHVyblR5cGU8RSwgUD47XG5cblxuXG5jb25zdCBlbGVtZW50c1RvUmVzdG9yZUZvY3VzVG8gPSBuZXcgTWFwPEVsZW1lbnQgfCBudWxsLCAoTm9kZSAmIEhUTUxPclNWR0VsZW1lbnQpPigpO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9jdXNUcmFwPEUgZXh0ZW5kcyBIVE1MRWxlbWVudD4oeyB0cmFwQWN0aXZlIH06IFVzZUZvY3VzVHJhcFBhcmFtZXRlcnMpOiBVc2VGb2N1c1RyYXBSZXR1cm5UeXBlPEU+IHtcbiAgICBcbiAgICBjb25zdCBoYW5kbGVBY3RpdmVDaGFuZ2UgPSB1c2VDYWxsYmFjaygodHJhcEFjdGl2ZTogYm9vbGVhbiwgZWxlbWVudDogRSB8IG51bGwpID0+IHtcbiAgICAgICAgaWYgKHRyYXBBY3RpdmUgJiYgZWxlbWVudCkge1xuXG4gICAgICAgICAgICBsZXQgcmFmSGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBUaGlzIGV4dHJhIHF1ZXVlTWljcm90YXNrIGlzIG5lZWRlZCBmb3JcbiAgICAgICAgICAgICAgICAvLyAuLi5yZWFzb25zP1xuICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZmluZEZpcnN0Rm9jdXNhYmxlKGVsZW1lbnQpPy5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICByYWZIYW5kbGUgPSAwO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyYWZIYW5kbGUpXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZkhhbmRsZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVsZW1lbnQpIHtcblxuICAgICAgICAgICAgLy8gUmVzdG9yZSB0aGUgZm9jdXMgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIHRoYXQgaGFzIHJldHVybmVkIHRvIHRoZSB0b3Agb2YgdGhlIHN0YWNrXG4gICAgICAgICAgICBsZXQgcmFmSGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzVG9SZXN0b3JlRm9jdXNUby5nZXQoZ2V0VG9wRWxlbWVudCgpKT8uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmFmSGFuZGxlID0gMDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyYWZIYW5kbGUpXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZkhhbmRsZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuICAgIFxuICAgIGNvbnN0IHsgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQsIHVzZUFjdGl2ZUVsZW1lbnRQcm9wcywgZ2V0RWxlbWVudCB9ID0gdXNlQWN0aXZlRWxlbWVudDxFPih7IG9uTW91bnRDaGFuZ2U6IHVzZVN0YWJsZUNhbGxiYWNrKChlbGVtZW50OiBFIHwgbnVsbCkgPT4gaGFuZGxlQWN0aXZlQ2hhbmdlKHRyYXBBY3RpdmUsIGVsZW1lbnQpKSB9KTtcblxuXG4gICAgLy8gV2hlbiB0aGUgdHJhcCBiZWNvbWVzIGFjdGl2ZSwgYmVmb3JlIHdlIGxldCB0aGUgYmxvY2tpbmdFbGVtZW50cyBob29rIHJ1bixcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHdoYXRldmVyJ3MgY3VycmVudGx5IGZvY3VzZWQgYW5kIHNhdmUgaXQuXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGdldEVsZW1lbnQoKTtcbiAgICAgICAgaWYgKHRyYXBBY3RpdmUgJiYgZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudChlbGVtZW50KTtcblxuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudGx5IGZvY3VzZWQgZWxlbWVudFxuICAgICAgICAgICAgLy8gdG8gd2hhdGV2ZXIncyBjdXJyZW50bHkgYXQgdGhlIHRvcCBvZiB0aGUgc3RhY2tcbiAgICAgICAgICAgIGVsZW1lbnRzVG9SZXN0b3JlRm9jdXNUby5zZXQoZ2V0VG9wRWxlbWVudCgpLCAoZ2V0TGFzdEFjdGl2ZUVsZW1lbnQoKSBhcyAoTm9kZSAmIEhUTUxPclNWR0VsZW1lbnQpKSA/PyBkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgfVxuICAgIH0sIFt0cmFwQWN0aXZlXSk7XG5cbiAgICB1c2VCbG9ja2luZ0VsZW1lbnQodHJhcEFjdGl2ZSwgZ2V0RWxlbWVudCk7XG5cbiAgICAvKipcbiAgICAgKiBBbnkgdGltZSB3ZSBhY3RpdmF0ZSBvciBkZWFjdGl2YXRlIHRoZSB0cmFwLFxuICAgICAqIGNoYW5nZSBmb2N1cyB0byBzb21ldGhpbmcgZWxzZSAoc29tZXRoaW5nIGluXG4gICAgICogdGhlIHRyYXAgaWYgaXQncyBhY3RpdmUsIG9yIHdoYXRldmVyIHdlJ3ZlXG4gICAgICogdHJhY2tlZCBpbiBlbGVtZW50c1RvUmVzdG9yZUZvY3VzVG8gaWYgbm90KVxuICAgICAqL1xuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGhhbmRsZUFjdGl2ZUNoYW5nZSh0cmFwQWN0aXZlLCBnZXRFbGVtZW50KCkpO1xuICAgIH0sIFt0cmFwQWN0aXZlXSk7XG5cbiAgICBjb25zdCB1c2VGb2N1c1RyYXBQcm9wcyA9ICg8UCBleHRlbmRzIFVzZUZvY3VzVHJhcFByb3BzUGFyYW1ldGVyczxFPj4ocHJvcHM6IFApID0+IHtcbiAgICAgICAgY29uc3QgcDEgPSB1c2VBY3RpdmVFbGVtZW50UHJvcHMocHJvcHMpO1xuICAgICAgICBjb25zdCBwMiA9IHsgXCJhcmlhLW1vZGFsXCI6IHRyYXBBY3RpdmUgPyBcInRydWVcIiA6IHVuZGVmaW5lZCB9IGFzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+O1xuICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHM8RT4oKShwMSwgcDIpO1xuICAgIH0pO1xuXG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VGb2N1c1RyYXBQcm9wcyxcbiAgICAgICAgZ2V0RWxlbWVudFxuICAgIH07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgY29udGFpbmVkIHdpdGhpbiB0aGUgZ2l2ZW4gbm9kZSwgb3IgbnVsbCBpZiBub25lIGFyZSBmb3VuZC5cbiAqIEBwYXJhbSBlbGVtZW50IFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRmlyc3RGb2N1c2FibGUoZWxlbWVudDogTm9kZSkge1xuICAgIGNvbnN0IHRyZWVXYWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGVsZW1lbnQsIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5ULCB7IGFjY2VwdE5vZGU6IChub2RlKSA9PiAobm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgaXNGb2N1c2FibGUobm9kZSkgPyBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQgOiBOb2RlRmlsdGVyLkZJTFRFUl9TS0lQKSB9KVxuICAgIGNvbnN0IGZpcnN0Rm9jdXNhYmxlID0gdHJlZVdhbGtlci5maXJzdENoaWxkKCkgYXMgKEVsZW1lbnQgJiBIVE1MT3JTVkdFbGVtZW50KSB8IG51bGw7XG4gICAgcmV0dXJuIGZpcnN0Rm9jdXNhYmxlO1xufVxuXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyB1c2VJbnRlcnZhbCB9IGZyb20gXCIuLi8uLlwiO1xuXG5cbmV4cG9ydCBjb25zdCBEZW1vVXNlSW50ZXJ2YWwgPSAoKSA9PiB7XG4gICAgY29uc3QgW2ludGVydmFsLCBzZXRJbnRlcnZhbF0gPSB1c2VTdGF0ZSgxMDAwKTtcblxuICAgIGNvbnN0IFtmaXJlQ291bnQsIHNldEZpcmVDb3VudF0gPSB1c2VTdGF0ZSgwKTtcblxuICAgIHVzZUludGVydmFsKHsgaW50ZXJ2YWwsIGNhbGxiYWNrOiAoKSA9PiBzZXRGaXJlQ291bnQoaSA9PiArK2kpIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzcz1cImRlbW9cIj5cbiAgICAgICAgICAgIDxsYWJlbD5JbnRlcnZhbCBkdXJhdGlvbjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiB2YWx1ZT17aW50ZXJ2YWx9IG9uSW5wdXQ9e2UgPT4gc2V0SW50ZXJ2YWwoZS5jdXJyZW50VGFyZ2V0LnZhbHVlQXNOdW1iZXIpfSAvPjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2PlRoZSBjYWxsYmFjayBoYXMgYmVlbiBjYWxsZWQge2ZpcmVDb3VudH0gdGltZXtmaXJlQ291bnQgPT09IDEgPyBcIlwiIDogXCJzXCJ9LjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgbWVtbywgdXNlQ29udGV4dCB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCI7XG5pbXBvcnQgeyB1c2VIYXNGb2N1cyB9IGZyb20gXCIuLi8uLlwiO1xuaW1wb3J0IHsgdXNlTGlzdE5hdmlnYXRpb24sIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQsIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRJbmZvIH0gZnJvbSBcIi4uLy4uL3VzZS1saXN0LW5hdmlnYXRpb25cIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4uLy4uL3VzZS1zdGF0ZVwiO1xuXG5cbmNvbnN0IFJhbmRvbVdvcmRzID0gXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uXCIuc3BsaXQoXCIgXCIpO1xuXG5jb25zdCBSb3ZpbmdDaGlsZENvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQ8SFRNTExJRWxlbWVudCwgVXNlTGlzdE5hdmlnYXRpb25DaGlsZEluZm8+PihudWxsISlcbmV4cG9ydCBjb25zdCBEZW1vVXNlUm92aW5nVGFiSW5kZXggPSBtZW1vKCgpID0+IHtcblxuICAgIGNvbnN0IFtsYXN0Rm9jdXNlZElubmVyLCBzZXRMYXN0Rm9jdXNlZElubmVyLCBnZXRMYXN0Rm9jdXNlZElubmVyXSA9IHVzZVN0YXRlKGZhbHNlKVxuICAgIGNvbnN0IHsgdXNlSGFzRm9jdXNQcm9wcyB9ID0gdXNlSGFzRm9jdXM8SFRNTFVMaXN0RWxlbWVudD4oeyBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkOiBzZXRMYXN0Rm9jdXNlZElubmVyIH0pO1xuICAgIGNvbnN0IHsgdXNlTGlzdE5hdmlnYXRpb25DaGlsZCwgY3VycmVudFR5cGVhaGVhZCwgdGFiYmFibGVJbmRleCwgdXNlTGlzdE5hdmlnYXRpb25Qcm9wcywgbmF2aWdhdGVUb0luZGV4IH0gPSB1c2VMaXN0TmF2aWdhdGlvbjxIVE1MTElFbGVtZW50LCBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkSW5mbz4oeyBzaG91bGRGb2N1c09uQ2hhbmdlOiBnZXRMYXN0Rm9jdXNlZElubmVyIH0pO1xuICAgIC8vY29uc3QgeyB1c2VSb3ZpbmdUYWJJbmRleENoaWxkLCB1c2VSb3ZpbmdUYWJJbmRleFByb3BzIH0gPSB1c2VSb3ZpbmdUYWJJbmRleDxIVE1MVUxpc3RFbGVtZW50LCBSb3ZpbmdUYWJJbmRleENoaWxkSW5mbz4oeyB0YWJiYWJsZUluZGV4LCBmb2N1c09uQ2hhbmdlOiBmYWxzZSB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGVtb1wiPlxuICAgICAgICAgICAgPGgyPktleWJvYXJkICZhbXA7IExpc3QgTmF2aWdhdGlvbjwvaDI+XG4gICAgICAgICAgICA8aDM+PGNvZGU+dXNlUm92aW5nVGFiSW5kZXg8L2NvZGU+PC9oMz5cblxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgTmF0aXZlIEhUTUwgZWxlbWVudHMgb2ZmZXIgZmFudGFzdGljIGtleWJvYXJkIGFjY2Vzc2FiaWxpdHksIGJ1dCBjb3ZlciBhIHJlbGF0aXZlbHkgbGltaXRlZCBudW1iZXIgb2YgdXNlIGNhc2VzLlxuICAgICAgICAgICAgICAgIFRoZXJlIGlzIG5vIG5hdGl2ZSBIVE1MIHRyZWUgZWxlbWVudCwgZm9yIGV4YW1wbGUsIHRoYXQgYWxsb3dzIGtleWJvYXJkIG5hdmlnYXRpb24gb2YgaXRzIGl0ZW1zLFxuICAgICAgICAgICAgICAgIG5vciBpcyBpdCBwb3NzaWJsZSB0byBjb21iaW5lIHRoZSBrZXlib2FyZCBuYXZpZ2F0aW9uIGJlaGF2aW9yIG9mIGEgPGNvZGU+e1wiPHNlbGVjdD5cIn08L2NvZGU+IG1lbnUgd2l0aCB0aGUgbWVudSBpbiBhIGRyYXdlciBjb21wb25lbnQuPC9wPlxuXG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICBXaGVuIGNvbWluZyBhY3Jvc3MgYSBMaXN0IG9yIGEgTWVudSBvciBhIFJhZGlvR3JvdXAgb3IgYSBUb2dnbGVCdXR0b25Hcm91cCBvciBhbnkgb3RoZXIgXCJvbmUgY29tcG9uZW50IG1hZGUgdXAgb2YgY2hpbGQgY29tcG9uZW50c1wiLCB0aGUgdXN1YWwgZXhwZWN0ZWQgYmVoYXZpb3IsXG4gICAgICAgICAgICAgICAgYXQgbGVhc3QgbmF0aXZlbHksIGlzIHRoYXQgdGFiYmluZyBpbnRvIHRoZSBjb21wb25lbnQgaXMgb25lIGFjdGlvbiwgYW5kIHRhYmJpbmcgb3V0IGlzIGFub3RoZXIuICBOYXZpZ2F0aW5nIDxlbT53aXRoaW48L2VtPiB0aGUgY29tcG9uZW50IGlzIGRvbmUgd2l0aCB0aGUgYXJyb3cga2V5cyBvciBvdGhlciBtZXRob2RzLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgVGhpcyBpcyBpbXBvcnRhbnQgYm90aCBmb3IgYWNjZXNzYWJpbGl0eSwgYnV0IGFsc28ganVzdCBmb3IgZ2VuZXJhbCB1c2FiaWxpdHkuICBXaGVuIHRhYmJpbmcgYmFjayBhbmQgZm9ydGgsIHRoZSBhYmlsaXR5IHRvIHNraXAgYSBsb25nIGxpc3Qgd2l0aG91dCBuZWVkaW5nIHRvIHRydWRnZSB0aHJvdWdoIDxlbT5ldmVyeSBvbmU8L2VtPiBvZiBpdHMgY2hpbGQgZWxlbWVudHMgaXMgZXh0cmVtZWx5IGltcG9ydGFudC5cbiAgICAgICAgICAgIDwvcD5cblxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgPGNvZGU+dXNlTGlzdE5hdmlnYXRpb248L2NvZGU+IHdyYXBzIHVwIHRoZSBmdW5jdGlvbmFsaXR5IG9mIGEgZmV3IGhvb2tzICg8Y29kZT51c2VSb3ZpbmdUYWJJbmRleDwvY29kZT4sIDxjb2RlPnVzZUxpbmVhck5hdmlnYXRpb248L2NvZGU+LCA8Y29kZT51c2VUeXBlYWhlYWROYXZpZ2F0aW9uPC9jb2RlPlxuICAgICAgICAgICAgICAgIHRvIGFsbG93IGZvciBBUklBLWNvbXBsaWFudCBuYXZpZ2F0aW9uIG9mIGxpc3RzIGFuZCBvdGhlciBzaW1pbGFyIGNvbXBvbmVudHMuICBGb3IgbW9yZSBhZHZhbmNlZCB1c2UgY2FzZXMsIHlvdSBjYW4gdXNlIHRoZSBvdGhlciBob29rcyBpbmRpdmlkdWFsbHkuXG4gICAgICAgICAgICA8L3A+XG5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgIDxjb2RlPnVzZUxpc3ROYXZpZ2F0aW9uPC9jb2RlPiAoYW5kIDxjb2RlPnVzZVJvdmluZ1RhYkluZGV4PC9jb2RlPikgaW50ZXJuYWxseSB1c2UgPGNvZGU+dXNlQ2hpbGRNYW5hZ2VyPC9jb2RlPiwgd2hpY2ggaXMgaG93IHRoZSBjaGlsZCBlbGVtZW50cyBhbmQgdGhlIHBhcmVudCBjb21tdW5pY2F0ZSB3aXRoIGVhY2ggb3RoZXIuXG4gICAgICAgICAgICAgICAgVGhpcyBtZWFucyB0aGVyZSBhcmUgdmlydHVhbGx5IG5vIHJlc3RyaWN0aW9ucyBvbiBob3cgdGhlIERPTSBpcyBzZXQgdXAgYXMgbG9uZyBhcyB5b3UgY2FuIHByb3ZpZGUgdGhlIGNoaWxkcmVuIHdpdGggdGhlIDxjb2RlPnVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQ8L2NvZGU+IGhvb2sgdGhhdCdzIHJldHVybmVkLCB1c3VhbGx5IHdpdGggYSBzaW1wbGUgPGNvZGU+Q29udGV4dDwvY29kZT4uXG4gICAgICAgICAgICAgICAgSWYgdGhlIGNoaWxkIGVsZW1lbnQgaXRzZWxmIGhhcyBhIGZvY3VzYWJsZSBlbGVtZW50LCBsaWtlIGEgYnV0dG9uLCBpdCBjYW4gYWxzbyBiZSB3aXJlZCB1cCB0byBkaXNhYmxlIGl0c2VsZlxuICAgICAgICAgICAgICAgIEZlZWwgZnJlZSB0byBuZXN0IHRoZW0gdG9vLCBhcyBsb25nIGFzIHlvdSBhcmUgYXdhcmUgb2YgeW91ciA8Y29kZT5Db250ZXh0PC9jb2RlPiBtYW5hZ2VtZW50IChpLmUuIHJlbWVtYmVyIHRoYXQgeW91IG5lZWQgdG8gY3JlYXRlIGEgbmV3IDxjb2RlPkNvbnRleHQ8L2NvZGU+IGZvciBlYWNoIHVzZSBjYXNlKS5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxsYWJlbD5UYWJiYWJsZSBpbmRleDogPGlucHV0IHR5cGU9XCJudW1iZXJcIiB2YWx1ZT17dGFiYmFibGVJbmRleCA/PyB1bmRlZmluZWR9IG9uSW5wdXQ9e2UgPT4geyBlLnByZXZlbnREZWZhdWx0KCk7IG5hdmlnYXRlVG9JbmRleChlLmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcik7IH19IC8+PC9sYWJlbD5cbiAgICAgICAgICAgIDx1bCB7Li4udXNlSGFzRm9jdXNQcm9wcyh1c2VMaXN0TmF2aWdhdGlvblByb3BzKHt9KSl9PlxuICAgICAgICAgICAgICAgIDxSb3ZpbmdDaGlsZENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3VzZUxpc3ROYXZpZ2F0aW9uQ2hpbGR9PlxuICAgICAgICAgICAgICAgICAgICB7QXJyYXkuZnJvbSgoZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIDxEZW1vVXNlUm92aW5nVGFiSW5kZXhDaGlsZCBpbmRleD17aX0ga2V5PXtpfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSgpKX1cbiAgICAgICAgICAgICAgICA8L1JvdmluZ0NoaWxkQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICB7Y3VycmVudFR5cGVhaGVhZCAmJiA8ZGl2PlR5cGVhaGVhZDoge2N1cnJlbnRUeXBlYWhlYWR9PC9kaXY+fVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufSlcblxuY29uc3QgUHJlZml4ID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiO1xuY29uc3QgRGVtb1VzZVJvdmluZ1RhYkluZGV4Q2hpbGQgPSBtZW1vKCgoeyBpbmRleCB9OiB7IGluZGV4OiBudW1iZXIgfSkgPT4ge1xuICAgIGNvbnN0IFtyYW5kb21Xb3JkXSA9IHVzZVN0YXRlKCgpID0+IFJhbmRvbVdvcmRzW2luZGV4LypNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoUmFuZG9tV29yZHMubGVuZ3RoIC0gMSkpKi9dKTtcbiAgICBjb25zdCB1c2VSb3ZpbmdUYWJJbmRleENoaWxkID0gdXNlQ29udGV4dChSb3ZpbmdDaGlsZENvbnRleHQpO1xuICAgIGNvbnN0IHRleHQgPSBgJHtyYW5kb21Xb3JkfSBUaGlzIGlzIGl0ZW0gIyR7aW5kZXggKyAxfWA7XG4gICAgY29uc3QgeyB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHMsIHVzZUxpc3ROYXZpZ2F0aW9uU2libGluZ1Byb3BzLCB0YWJiYWJsZSB9ID0gdXNlUm92aW5nVGFiSW5kZXhDaGlsZCh7IGluZGV4LCB0ZXh0LCBoaWRkZW46IChpbmRleCA9PSA1KSB9KTtcbiAgICBcbiAgICBjb25zdCBwcm9wcyA9IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wcyh7fSk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGxpIHsuLi5wcm9wc30+e3RleHR9ICh7dGFiYmFibGU/IFwiVGFiYmFibGVcIiA6IFwiTm90IHRhYmJhYmxlXCJ9KTxpbnB1dCB7Li4udXNlTGlzdE5hdmlnYXRpb25TaWJsaW5nUHJvcHMoeyB0eXBlOiBcImNoZWNrYm94XCIgfSl9IC8+PC9saT5cbiAgICApXG59KSk7IiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgdXNlVGltZW91dCB9IGZyb20gXCIuLi8uLlwiO1xuXG5cbmV4cG9ydCBjb25zdCBEZW1vVXNlVGltZW91dCA9ICgpID0+IHtcbiAgICBjb25zdCBbdGltZW91dCwgc2V0VGltZW91dF0gPSB1c2VTdGF0ZSgxMDAwKTtcbiAgICBjb25zdCBbdHJpZ2dlckluZGV4LCBzZXRUcmlnZ2VySW5kZXhdID0gdXNlU3RhdGUoXCJcIik7XG5cbiAgICBjb25zdCBbZmlyZUNvdW50LCBzZXRGaXJlQ291bnRdID0gdXNlU3RhdGUoMCk7XG5cbiAgICB1c2VUaW1lb3V0KHsgdGltZW91dCwgdHJpZ2dlckluZGV4LCBjYWxsYmFjazogKCkgPT4gc2V0RmlyZUNvdW50KGkgPT4gKytpKSB9KVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzcz1cImRlbW9cIj5cbiAgICAgICAgICAgIDxsYWJlbD5UaW1lb3V0IGR1cmF0aW9uOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHZhbHVlPXt0aW1lb3V0fSBvbklucHV0PXtlID0+IHNldFRpbWVvdXQoZS5jdXJyZW50VGFyZ2V0LnZhbHVlQXNOdW1iZXIpfSAvPjwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWw+UmVmcmVzaCBrZXk6IDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPXt0cmlnZ2VySW5kZXh9IG9uSW5wdXQ9e2UgPT4gc2V0VHJpZ2dlckluZGV4KGUuY3VycmVudFRhcmdldC52YWx1ZSl9IC8+PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXY+VGhlIGNhbGxiYWNrIGhhcyBiZWVuIGNhbGxlZCB7ZmlyZUNvdW50fSB0aW1le2ZpcmVDb3VudCA9PT0gMSA/IFwiXCIgOiBcInNcIn0uPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIGgsIHJlbmRlciB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgdXNlQW5pbWF0aW9uRnJhbWUsIHVzZUFzeW5jSGFuZGxlciwgdXNlRHJhZ2dhYmxlLCB1c2VEcm9wcGFibGUsIHVzZUVsZW1lbnRTaXplLCB1c2VGb2N1c1RyYXAsIHVzZU1lcmdlZFByb3BzLCB1c2VTdGF0ZSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgRWxlbWVudFNpemUgfSBmcm9tIFwiLi4vdXNlLWVsZW1lbnQtc2l6ZVwiO1xuaW1wb3J0IHsgdXNlR3JpZE5hdmlnYXRpb24sIFVzZUdyaWROYXZpZ2F0aW9uQ2VsbCwgVXNlR3JpZE5hdmlnYXRpb25DZWxsSW5mbywgVXNlR3JpZE5hdmlnYXRpb25Sb3csIFVzZUdyaWROYXZpZ2F0aW9uUm93SW5mbyB9IGZyb20gXCIuLi91c2UtZ3JpZC1uYXZpZ2F0aW9uXCI7XG5pbXBvcnQgeyB1c2VIYXNGb2N1cyB9IGZyb20gXCIuLi91c2UtaGFzLWZvY3VzXCI7XG5pbXBvcnQgeyBEZW1vVXNlSW50ZXJ2YWwgfSBmcm9tIFwiLi9kZW1vcy91c2UtaW50ZXJ2YWxcIjtcbmltcG9ydCB7IERlbW9Vc2VSb3ZpbmdUYWJJbmRleCB9IGZyb20gXCIuL2RlbW9zL3VzZS1yb3ZpbmctdGFiLWluZGV4XCI7XG5pbXBvcnQgeyBEZW1vVXNlVGltZW91dCB9IGZyb20gXCIuL2RlbW9zL3VzZS10aW1lb3V0XCI7XG5cbmNvbnN0IFJhbmRvbVdvcmRzID0gXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uXCIuc3BsaXQoXCIgXCIpO1xuXG5cblxuY29uc3QgRGVtb1VzZURyb3BwYWJsZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGRyb3BwZWRGaWxlcywgZHJvcHBlZFN0cmluZ3MsIGZpbGVzRm9yQ29uc2lkZXJhdGlvbiwgc3RyaW5nc0ZvckNvbnNpZGVyYXRpb24sIHVzZURyb3BwYWJsZVByb3BzLCBkcm9wRXJyb3IgfSA9IHVzZURyb3BwYWJsZTxIVE1MRGl2RWxlbWVudD4oeyBlZmZlY3Q6IFwiY29weVwiIH0pO1xuXG4gICAgY29uc3QgeyByZWY6IF9yZWYgfSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHsgcmVmOiB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCEpIH0pXG5cbiAgICBjb25zdCBwID0gdXNlRHJvcHBhYmxlUHJvcHMoeyBjbGFzc05hbWU6IFwiZGVtbyBkcm9wcGFibGVcIiB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgey4uLnB9PlxuXG4gICAgICAgICAgICB7ZHJvcHBlZFN0cmluZ3MgIT0gbnVsbCAmJiA8ZGl2PkRhdGEgZHJvcHBlZDogPHVsPnsoT2JqZWN0LmVudHJpZXMoZHJvcHBlZFN0cmluZ3MpIGFzIFtrZXlvZiB0eXBlb2Ygc3RyaW5nc0ZvckNvbnNpZGVyYXRpb24sIHN0cmluZ11bXSkubWFwKChbdHlwZSwgdmFsdWVdKSA9PiA8bGk+e3R5cGV9OiB7dmFsdWV9PC9saT4pfTwvdWw+PC9kaXY+fVxuICAgICAgICAgICAge2Ryb3BwZWRGaWxlcyAhPSBudWxsICYmIDxkaXY+RmlsZXMgZHJvcHBlZDogPHRhYmxlPlxuICAgICAgICAgICAgICAgIDx0aGVhZD48dHI+PHRoPk5hbWU8L3RoPjx0aD5TaXplPC90aD48dGg+VHlwZTwvdGg+PHRoPkxhc3QgbW9kaWZpZWQ8L3RoPjwvdHI+PC90aGVhZD5cbiAgICAgICAgICAgICAgICA8dGJvZHk+e2Ryb3BwZWRGaWxlcy5tYXAoZiA9PiA8dHI+PHRkPntmLm5hbWV9PC90ZD57Zi5kYXRhLmJ5dGVMZW5ndGh9PHRkPntmLnR5cGV9PC90ZD48dGQ+e25ldyBEYXRlKGYubGFzdE1vZGlmaWVkID8/IDApfTwvdGQ+PC90cj4pfTwvdGJvZHk+XG4gICAgICAgICAgICA8L3RhYmxlPjwvZGl2Pn1cbiAgICAgICAgICAgIDxociAvPlxuXG4gICAgICAgICAgICB7c3RyaW5nc0ZvckNvbnNpZGVyYXRpb24gIT0gbnVsbCAmJiA8ZGl2PkRhdGEgYmVpbmcgY29uc2lkZXJlZDogPHVsPntBcnJheS5mcm9tKHN0cmluZ3NGb3JDb25zaWRlcmF0aW9uKS5tYXAodHlwZSA9PiA8bGk+e3R5cGV9PC9saT4pfTwvdWw+PC9kaXY+fVxuICAgICAgICAgICAge2ZpbGVzRm9yQ29uc2lkZXJhdGlvbiAhPSBudWxsICYmIDxkaXY+RmlsZXMgYmVpbmcgY29uc2lkZXJlZDogPHVsPntmaWxlc0ZvckNvbnNpZGVyYXRpb24ubWFwKGYgPT4gPGxpPntKU09OLnN0cmluZ2lmeShmKX08L2xpPil9PC91bD48L2Rpdj59XG5cbiAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAge2Ryb3BFcnJvciAmJiA8ZGl2Pntkcm9wRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGRyb3BFcnJvci5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkoZHJvcEVycm9yKX08L2Rpdj59XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuY29uc3QgRGVtb1VzZURyYWdnYWJsZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IHVzZURyYWdnYWJsZVByb3BzIH0gPSB1c2VEcmFnZ2FibGU8SFRNTERpdkVsZW1lbnQ+KHsgZGF0YTogeyBcInRleHQvcGxhaW5cIjogXCJUaGlzIGlzIGN1c3RvbSBkcmFnZ2FibGUgY29udGVudCBvZiB0eXBlIHRleHQvcGxhaW4uXCIgfSB9KTtcblxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiB7Li4udXNlRHJhZ2dhYmxlUHJvcHMoeyBjbGFzc05hbWU6IFwiZGVtb1wiIH0pfT5cbiAgICAgICAgICAgIERyYWdnYWJsZSBjb250ZW50XG4gICAgICAgIDwvZGl2Pilcbn1cblxuY29uc3QgRGVtb1VzZUVsZW1lbnRTaXplQW5pbWF0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IFtoZWlnaHQsIHNldEhlaWdodF0gPSB1c2VTdGF0ZSgwKTtcbiAgICBjb25zdCBbYW5nbGUsIHNldEFuZ2xlXSA9IHVzZVN0YXRlKDApO1xuICAgIHVzZUFuaW1hdGlvbkZyYW1lKHtcbiAgICAgICAgY2FsbGJhY2s6IChfbXMpID0+IHtcbiAgICAgICAgICAgIHNldEFuZ2xlKGEgPT4gYSArIDAuMDEpXG4gICAgICAgICAgICBzZXRIZWlnaHQoKE1hdGguc2luKGFuZ2xlKSArIDEpIC8gMC41KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgW2VsZW1lbnRTaXplLCBzZXRFbGVtZW50U2l6ZV0gPSB1c2VTdGF0ZTxFbGVtZW50U2l6ZSB8IG51bGw+KG51bGwpO1xuXG4gICAgY29uc3QgeyB1c2VFbGVtZW50U2l6ZVByb3BzIH0gPSB1c2VFbGVtZW50U2l6ZTxIVE1MRGl2RWxlbWVudD4oeyBvblNpemVDaGFuZ2U6IHNldEVsZW1lbnRTaXplIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiB7Li4udXNlRWxlbWVudFNpemVQcm9wcyh7IHJlZjogdW5kZWZpbmVkLCBjbGFzc05hbWU6IFwiZGVtb1wiLCBzdHlsZTogeyBoZWlnaHQ6IGAkeyhoZWlnaHQgKiAxMDApICsgMTAwfXB4YCB9IH0pfT5cbiAgICAgICAgICAgIDxwcmU+e0pTT04uc3RyaW5naWZ5KGVsZW1lbnRTaXplLCBudWxsLCAyKX08L3ByZT5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cblxuXG5jb25zdCBEZW1vVXNlRm9jdXNUcmFwID0gbWVtbygoeyBkZXB0aCB9OiB7IGRlcHRoPzogbnVtYmVyIH0pID0+IHtcblxuICAgIGNvbnN0IFthY3RpdmUsIHNldEFjdGl2ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBjb25zdCB7IHVzZUZvY3VzVHJhcFByb3BzIH0gPSB1c2VGb2N1c1RyYXA8SFRNTERpdkVsZW1lbnQ+KHsgdHJhcEFjdGl2ZTogYWN0aXZlIH0pO1xuICAgIC8vY29uc3QgeyB1c2VSb3ZpbmdUYWJJbmRleENoaWxkLCB1c2VSb3ZpbmdUYWJJbmRleFByb3BzIH0gPSB1c2VSb3ZpbmdUYWJJbmRleDxIVE1MVUxpc3RFbGVtZW50LCBSb3ZpbmdUYWJJbmRleENoaWxkSW5mbz4oeyB0YWJiYWJsZUluZGV4LCBmb2N1c09uQ2hhbmdlOiBmYWxzZSB9KTtcblxuICAgIGNvbnN0IGRpdlByb3BzID0gdXNlRm9jdXNUcmFwUHJvcHMoeyByZWY6IHVuZGVmaW5lZCwgY2xhc3NOYW1lOiBcImZvY3VzLXRyYXAtZGVtb1wiIH0pO1xuICAgIGlmIChkZXB0aCA9PSAyKVxuICAgICAgICByZXR1cm4gPGRpdiAvPjtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGVtb1wiPlxuICAgICAgICAgICAgPGxhYmVsPkFjdGl2ZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQ9e2FjdGl2ZX0gb25JbnB1dD17ZSA9PiB7IGUucHJldmVudERlZmF1bHQoKTsgc2V0QWN0aXZlKGUuY3VycmVudFRhcmdldC5jaGVja2VkKTsgfX0gLz48L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiB7Li4uZGl2UHJvcHN9ID5cbiAgICAgICAgICAgICAgICA8RGVtb1VzZUZvY3VzVHJhcENoaWxkIGFjdGl2ZT17YWN0aXZlfSBzZXRBY3RpdmU9e3NldEFjdGl2ZX0gZGVwdGg9e2RlcHRoID8/IDB9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn0pO1xuXG5cbmNvbnN0IERlbW9Vc2VGb2N1c1RyYXBDaGlsZCA9IG1lbW8oKHsgc2V0QWN0aXZlLCBhY3RpdmUgfTogeyBhY3RpdmU6IGJvb2xlYW4sIHNldEFjdGl2ZTogKGFjdGl2ZTogYm9vbGVhbikgPT4gdm9pZCwgZGVwdGg6IG51bWJlciB9KSA9PiB7XG5cblxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8YnV0dG9uPkJ1dHRvbiAxPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uPkJ1dHRvbiAyPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uPkJ1dHRvbiAzPC9idXR0b24+XG4gICAgICAgICAgICA8bGFiZWw+QWN0aXZlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZD17YWN0aXZlfSBvbklucHV0PXtlID0+IHsgZS5wcmV2ZW50RGVmYXVsdCgpOyBzZXRBY3RpdmUoZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpOyB9fSAvPjwvbGFiZWw+XG5cbiAgICAgICAgPC8+XG4gICAgKTtcbn0pO1xuXG5jb25zdCBEZW1vVXNlQXN5bmNIYW5kbGVyMSA9IG1lbW8oKCkgPT4ge1xuXG4gICAgY29uc3QgW3RpbWVvdXQsIHNldFRpbWVvdXRdID0gdXNlU3RhdGUoMTAwMCk7XG4gICAgY29uc3QgW2RlYm91bmNlLCBzZXREZWJvdW5jZV0gPSB1c2VTdGF0ZSgwKTtcbiAgICBjb25zdCBbc2hvdWxkVGhyb3csIHNldFNob3VsZFRocm93LCBnZXRTaG91bGRUaHJvd10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2Rpc2FibGVDb25zZWN1dGl2ZSwgc2V0RGlzYWJsZUNvbnNlY3V0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIGNvbnN0IGFzeW5jT25DbGljayA9ICgoX3Y6IHZvaWQsIF9lOiBoLkpTWC5UYXJnZXRlZE1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KSA9PiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiBnZXRTaG91bGRUaHJvdygpID8gcmVqZWN0KCkgOiByZXNvbHZlKCksIHRpbWVvdXQpKSk7XG4gICAgY29uc3Qge1xuICAgICAgICBjYWxsQ291bnQsXG4gICAgICAgIHNldHRsZUNvdW50LFxuICAgICAgICBoYXNDYXB0dXJlLFxuICAgICAgICBzeW5jSGFuZGxlcixcbiAgICAgICAgcGVuZGluZyxcbiAgICAgICAgaGFzRXJyb3IsXG4gICAgICAgIHJlamVjdENvdW50LFxuICAgICAgICByZXNvbHZlQ291bnRcbiAgICB9ID0gdXNlQXN5bmNIYW5kbGVyPGguSlNYLlRhcmdldGVkTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4sIHZvaWQ+KGFzeW5jT25DbGljaywgeyBjYXB0dXJlOiAoKSA9PiB7IH0sIGRlYm91bmNlOiBkZWJvdW5jZSA9PSAwID8gdW5kZWZpbmVkIDogZGVib3VuY2UgfSk7XG5cbiAgICBjb25zdCBvbkNsaWNrID0gcGVuZGluZyA/IHVuZGVmaW5lZCA6IHN5bmNIYW5kbGVyO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZW1vXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGRpc2FibGVkPXtwZW5kaW5nICYmIGRpc2FibGVDb25zZWN1dGl2ZX0gb25DbGljaz17b25DbGlja30+Q2xpY2sgbWUhPC9idXR0b24+XG4gICAgICAgICAgICA8bGFiZWw+U2xlZXAgZm9yOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHZhbHVlPXt0aW1lb3V0fSBvbklucHV0PXtlID0+IHNldFRpbWVvdXQoZS5jdXJyZW50VGFyZ2V0LnZhbHVlQXNOdW1iZXIpfSAvPjwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWw+VGhyb3cgYW4gZXJyb3IgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQ9e3Nob3VsZFRocm93fSBvbklucHV0PXtlID0+IHNldFNob3VsZFRocm93KGUuY3VycmVudFRhcmdldC5jaGVja2VkKX0gLz48L2xhYmVsPlxuICAgICAgICAgICAgPGxhYmVsPkRpc2FibGVkIHdoaWxlIHBlbmRpbmcgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQ9e2Rpc2FibGVDb25zZWN1dGl2ZX0gb25JbnB1dD17ZSA9PiBzZXREaXNhYmxlQ29uc2VjdXRpdmUoZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpfSAvPjwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWw+RGVib3VuY2U6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e2RlYm91bmNlfSBvbklucHV0PXtlID0+IHNldERlYm91bmNlKGUuY3VycmVudFRhcmdldC52YWx1ZUFzTnVtYmVyKX0gLz48L2xhYmVsPlxuICAgICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZpZWxkPC90aD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5WYWx1ZTwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+Y2FsbENvdW50PC90ZD48dGQ+e2NhbGxDb3VudH08L3RkPjwvdHI+XG4gICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+c2V0dGxlQ291bnQ8L3RkPjx0ZD57c2V0dGxlQ291bnR9PC90ZD48L3RyPlxuICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPnJlc29sdmVDb3VudDwvdGQ+PHRkPntyZXNvbHZlQ291bnR9PC90ZD48L3RyPlxuICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPnJlamVjdENvdW50PC90ZD48dGQ+e3JlamVjdENvdW50fTwvdGQ+PC90cj5cbiAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5oYXNFcnJvcjwvdGQ+PHRkPntoYXNFcnJvci50b1N0cmluZygpfTwvdGQ+PC90cj5cbiAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5oYXNDYXB0dXJlPC90ZD48dGQ+e2hhc0NhcHR1cmUudG9TdHJpbmcoKX08L3RkPjwvdHI+XG4gICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcblxuY29uc3QgRGVtb1VzZUFzeW5jSGFuZGxlcjIgPSBtZW1vKCgpID0+IHtcblxuICAgIGNvbnN0IFt0aW1lb3V0LCBzZXRUaW1lb3V0XSA9IHVzZVN0YXRlKDEwMDApO1xuICAgIGNvbnN0IFtkZWJvdW5jZSwgc2V0RGVib3VuY2VdID0gdXNlU3RhdGUoMCk7XG4gICAgY29uc3QgW3Nob3VsZFRocm93LCBzZXRTaG91bGRUaHJvdywgZ2V0U2hvdWxkVGhyb3ddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtkaXNhYmxlQ29uc2VjdXRpdmUsIHNldERpc2FibGVDb25zZWN1dGl2ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBjb25zdCBbdGV4dCwgc2V0VGV4dF0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICAgIGNvbnN0IG9uSW5wdXRBc3luYyA9IGFzeW5jICh2OiBzdHJpbmcsIF9lOiBhbnkpID0+IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKGdldFNob3VsZFRocm93KCkpIHtcbiAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0VGV4dCh2KTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgIH0sIHRpbWVvdXQpKTtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgY2FsbENvdW50LFxuICAgICAgICBzZXR0bGVDb3VudCxcbiAgICAgICAgaGFzQ2FwdHVyZSxcbiAgICAgICAgc3luY0hhbmRsZXIsXG4gICAgICAgIGN1cnJlbnRDYXB0dXJlLFxuICAgICAgICBwZW5kaW5nLFxuICAgICAgICBoYXNFcnJvcixcbiAgICAgICAgcmVqZWN0Q291bnQsXG4gICAgICAgIHJlc29sdmVDb3VudFxuICAgIH0gPSB1c2VBc3luY0hhbmRsZXI8aC5KU1guVGFyZ2V0ZWRFdmVudDxIVE1MSW5wdXRFbGVtZW50Piwgc3RyaW5nPihvbklucHV0QXN5bmMsIHsgY2FwdHVyZTogKGU6IGguSlNYLlRhcmdldGVkRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHsgZS5wcmV2ZW50RGVmYXVsdCgpOyByZXR1cm4gZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0sIGRlYm91bmNlOiBkZWJvdW5jZSA9PSAwID8gdW5kZWZpbmVkIDogZGVib3VuY2UgfSk7XG5cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGVtb1wiPlxuICAgICAgICAgICAgPGxhYmVsPkRlbW8gdGV4dDogPGlucHV0IHZhbHVlPXtoYXNDYXB0dXJlID8gY3VycmVudENhcHR1cmUgOiB0ZXh0fSBkaXNhYmxlZD17cGVuZGluZyAmJiBkaXNhYmxlQ29uc2VjdXRpdmV9IG9uSW5wdXQ9e3N5bmNIYW5kbGVyfSAvPjwvbGFiZWw+XG4gICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgIDxsYWJlbD5TbGVlcCBmb3I6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3RpbWVvdXR9IG9uSW5wdXQ9e2UgPT4gc2V0VGltZW91dChlLmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcil9IC8+PC9sYWJlbD5cbiAgICAgICAgICAgIDxsYWJlbD5UaHJvdyBhbiBlcnJvciA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZD17c2hvdWxkVGhyb3d9IG9uSW5wdXQ9e2UgPT4gc2V0U2hvdWxkVGhyb3coZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpfSAvPjwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWw+RGlzYWJsZWQgd2hpbGUgcGVuZGluZyA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZD17ZGlzYWJsZUNvbnNlY3V0aXZlfSBvbklucHV0PXtlID0+IHNldERpc2FibGVDb25zZWN1dGl2ZShlLmN1cnJlbnRUYXJnZXQuY2hlY2tlZCl9IC8+PC9sYWJlbD5cbiAgICAgICAgICAgIDxsYWJlbD5EZWJvdW5jZTogPGlucHV0IHR5cGU9XCJudW1iZXJcIiB2YWx1ZT17ZGVib3VuY2V9IG9uSW5wdXQ9e2UgPT4gc2V0RGVib3VuY2UoZS5jdXJyZW50VGFyZ2V0LnZhbHVlQXNOdW1iZXIpfSAvPjwvbGFiZWw+XG4gICAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+RmllbGQ8L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZhbHVlPC90aD5cbiAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5jYWxsQ291bnQ8L3RkPjx0ZD57Y2FsbENvdW50fTwvdGQ+PC90cj5cbiAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5zZXR0bGVDb3VudDwvdGQ+PHRkPntzZXR0bGVDb3VudH08L3RkPjwvdHI+XG4gICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+cmVzb2x2ZUNvdW50PC90ZD48dGQ+e3Jlc29sdmVDb3VudH08L3RkPjwvdHI+XG4gICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+cmVqZWN0Q291bnQ8L3RkPjx0ZD57cmVqZWN0Q291bnR9PC90ZD48L3RyPlxuICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPmhhc0Vycm9yPC90ZD48dGQ+e2hhc0Vycm9yLnRvU3RyaW5nKCl9PC90ZD48L3RyPlxuICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPmN1cnJlbnRDYXB0dXJlPC90ZD48dGQ+e2N1cnJlbnRDYXB0dXJlfTwvdGQ+PC90cj5cbiAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5cIlNhdmVkXCIgaW5wdXQ8L3RkPjx0ZD57dGV4dH08L3RkPjwvdHI+XG4gICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcblxuXG5jb25zdCBEZW1vRm9jdXMgPSBtZW1vKCgpID0+IHtcbiAgICBjb25zdCBbbGFzdEFjdGl2ZUVsZW1lbnQsIHNldExhc3RBY3RpdmVFbGVtZW50XSA9IHVzZVN0YXRlPChFbGVtZW50ICYgSFRNTE9yU1ZHRWxlbWVudCkgfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBbYWN0aXZlRWxlbWVudCwgc2V0QWN0aXZlRWxlbWVudF0gPSB1c2VTdGF0ZTwoRWxlbWVudCAmIEhUTUxPclNWR0VsZW1lbnQpIHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW3dpbmRvd0ZvY3VzZWQsIHNldFdpbmRvd0ZvY3VzZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbZm9jdXNlZElubmVyLCBzZXRGb2N1c2VkSW5uZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtsYXN0Rm9jdXNlZCwgc2V0TGFzdEZvY3VzZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtsYXN0Rm9jdXNlZElubmVyLCBzZXRMYXN0Rm9jdXNlZElubmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCB7IHVzZUhhc0ZvY3VzUHJvcHMgfSA9IHVzZUhhc0ZvY3VzPEhUTUxEaXZFbGVtZW50Pih7IFxuICAgICAgICBvbkZvY3VzZWRDaGFuZ2VkOiBzZXRGb2N1c2VkLCBcbiAgICAgICAgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkOiBzZXRGb2N1c2VkSW5uZXIsIFxuICAgICAgICBvbkxhc3RGb2N1c2VkQ2hhbmdlZDogc2V0TGFzdEZvY3VzZWQsIFxuICAgICAgICBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkOiBzZXRMYXN0Rm9jdXNlZElubmVyLFxuICAgICAgICBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2U6IHNldEFjdGl2ZUVsZW1lbnQsXG4gICAgICAgIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2U6IHNldExhc3RBY3RpdmVFbGVtZW50LFxuICAgICAgICBvbldpbmRvd0ZvY3VzZWRDaGFuZ2U6IHNldFdpbmRvd0ZvY3VzZWRcbiAgICAgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzcz1cImRlbW9cIj5cbiAgICAgICAgICAgIDxoMj51c2VIYXNGb2N1czwvaDI+XG4gICAgICAgICAgICA8ZGl2IHsuLi51c2VIYXNGb2N1c1Byb3BzKHsgc3R5bGU6IHsgYm9yZGVyOiBcIjFweCBzb2xpZCBibGFja1wiIH0sIHRhYkluZGV4OiAwIH0pfSA+T3V0ZXIgPGRpdiB0YWJJbmRleD17MH0gc3R5bGU9e3sgYm9yZGVyOiBcIjFweCBzb2xpZCBibGFja1wiIH19PklubmVyIGVsZW1lbnQ8L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICA8bGk+U3RyaWN0bHkgZm9jdXNlZDoge2ZvY3VzZWQudG9TdHJpbmcoKX0sIHtsYXN0Rm9jdXNlZC50b1N0cmluZygpfTwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5Jbm5lciBmb2N1c2VkOiB7Zm9jdXNlZElubmVyLnRvU3RyaW5nKCl9LCB7bGFzdEZvY3VzZWRJbm5lci50b1N0cmluZygpfTwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5XaW5kb3cgZm9jdXNlZDoge3dpbmRvd0ZvY3VzZWQudG9TdHJpbmcoKX08L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+YWN0aXZlRWxlbWVudDoge2FjdGl2ZUVsZW1lbnQ/LnRleHRDb250ZW50fTwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5sYXN0QWN0aXZlRWxlbWVudDoge2xhc3RBY3RpdmVFbGVtZW50Py50ZXh0Q29udGVudH08L2xpPlxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufSlcblxuXG5jb25zdCBHcmlkUm93Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VXNlR3JpZE5hdmlnYXRpb25Sb3c8SFRNTERpdkVsZW1lbnQsIEhUTUxEaXZFbGVtZW50LCBVc2VHcmlkTmF2aWdhdGlvblJvd0luZm8sIFVzZUdyaWROYXZpZ2F0aW9uQ2VsbEluZm8+PihudWxsISk7XG5jb25zdCBHcmlkQ2VsbENvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZUdyaWROYXZpZ2F0aW9uQ2VsbDxIVE1MRGl2RWxlbWVudCwgVXNlR3JpZE5hdmlnYXRpb25DZWxsSW5mbz4+KG51bGwhKTtcbmV4cG9ydCBjb25zdCBEZW1vVXNlR3JpZCA9IG1lbW8oKCkgPT4ge1xuXG4gICAgY29uc3QgWywgc2V0TGFzdEZvY3VzZWRJbm5lciwgZ2V0TGFzdEZvY3VzZWRJbm5lcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBjb25zdCB7IHVzZUhhc0ZvY3VzUHJvcHMgfSA9IHVzZUhhc0ZvY3VzPEhUTUxEaXZFbGVtZW50Pih7IG9uTGFzdEZvY3VzZWRJbm5lckNoYW5nZWQ6IHNldExhc3RGb2N1c2VkSW5uZXIgfSk7XG4gICAgY29uc3QgeyB1c2VHcmlkTmF2aWdhdGlvblJvdywgcm93Q291bnQsIGNlbGxJbmRleCwgcm93SW5kZXgsIHVzZUdyaWROYXZpZ2F0aW9uUHJvcHMgfSA9IHVzZUdyaWROYXZpZ2F0aW9uPEhUTUxEaXZFbGVtZW50LCBIVE1MRGl2RWxlbWVudCwgVXNlR3JpZE5hdmlnYXRpb25Sb3dJbmZvLCBVc2VHcmlkTmF2aWdhdGlvbkNlbGxJbmZvPih7IHNob3VsZEZvY3VzT25DaGFuZ2U6IGdldExhc3RGb2N1c2VkSW5uZXIgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRlbW9cIj5cbiAgICAgICAgICAgIDxkaXY+e2NlbGxJbmRleH0re3Jvd0luZGV4fS97cm93Q291bnR9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IHsuLi51c2VIYXNGb2N1c1Byb3BzKHVzZUdyaWROYXZpZ2F0aW9uUHJvcHMoe30pKX0+XG4gICAgICAgICAgICAgICAgPEdyaWRSb3dDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt1c2VHcmlkTmF2aWdhdGlvblJvd30+XG4gICAgICAgICAgICAgICAgICAgIHtBcnJheS5mcm9tKChmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgPERlbW9Vc2VHcmlkUm93IGluZGV4PXtpfSBrZXk9e2l9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKCkpfVxuICAgICAgICAgICAgICAgIDwvR3JpZFJvd0NvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn0pXG5cbmNvbnN0IF9QcmVmaXggPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCI7XG5jb25zdCBEZW1vVXNlR3JpZFJvdyA9IG1lbW8oKCh7IGluZGV4IH06IHsgaW5kZXg6IG51bWJlciB9KSA9PiB7XG4gICAgY29uc3QgW19yYW5kb21Xb3JkXSA9IHVzZVN0YXRlKCgpID0+IFJhbmRvbVdvcmRzW2luZGV4LypNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoUmFuZG9tV29yZHMubGVuZ3RoIC0gMSkpKi9dKTtcbiAgICBjb25zdCB1c2VHcmlkUm93ID0gdXNlQ29udGV4dChHcmlkUm93Q29udGV4dCk7XG4gICAgY29uc3QgeyBpc1RhYmJhYmxlUm93LCBjZWxsQ291bnQsIHVzZUdyaWROYXZpZ2F0aW9uUm93UHJvcHMsIHVzZUdyaWROYXZpZ2F0aW9uQ2VsbCwgY3VycmVudENvbHVtbiB9ID0gdXNlR3JpZFJvdyh7IGluZGV4IH0pO1xuXG4gICAgY29uc3QgcHJvcHMgPSB1c2VHcmlkTmF2aWdhdGlvblJvd1Byb3BzKHt9KTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHsuLi5wcm9wc30+XG4gICAgICAgICAgICA8ZGl2PntgJHtpc1RhYmJhYmxlUm93fWB9ICh7Y3VycmVudENvbHVtbn0ve2NlbGxDb3VudCAtIDF9KTwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwiZGlzcGxheTogZmxleFwiPlxuICAgICAgICAgICAgICAgIDxHcmlkQ2VsbENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3VzZUdyaWROYXZpZ2F0aW9uQ2VsbH0+XG4gICAgICAgICAgICAgICAgICAgIHtBcnJheS5mcm9tKChmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCA8RGVtb1VzZUdyaWRDZWxsIGluZGV4PXtpfSBrZXk9e2l9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKCkpfVxuICAgICAgICAgICAgICAgIDwvR3JpZENlbGxDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn0pKTtcblxuY29uc3QgRGVtb1VzZUdyaWRDZWxsID0gKCh7IGluZGV4IH06IHsgaW5kZXg6IG51bWJlciB9KSA9PiB7XG4gICAgY29uc3QgdXNlR3JpZENlbGwgPSB1c2VDb250ZXh0KEdyaWRDZWxsQ29udGV4dCk7XG4gICAgY29uc3QgeyB1c2VHcmlkTmF2aWdhdGlvbkNlbGxQcm9wcyB9ID0gdXNlR3JpZENlbGwoeyBpbmRleCB9KTtcblxuICAgIGNvbnN0IHByb3BzID0gdXNlR3JpZE5hdmlnYXRpb25DZWxsUHJvcHMoe30pIGFzIGFueTtcblxuICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgcmV0dXJuIDxkaXYgey4uLnByb3BzfT5HcmlkIGNlbGwgI3tpbmRleCArIDF9PC9kaXY+XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gPGxhYmVsPjxpbnB1dCAgey4uLnByb3BzfSB0eXBlPVwiY2hlY2tib3hcIiAvPiBUZXN0IGlucHV0PC9sYWJlbD5cbn0pXG5cbmNvbnN0IENvbXBvbmVudCA9ICgpID0+IHtcbiAgICByZXR1cm4gPGRpdiBjbGFzcz1cImZsZXhcIiBzdHlsZT17eyBmbGV4V3JhcDogXCJ3cmFwXCIgfX0+XG4gICAgPERlbW9Gb2N1cyAvPlxuICAgIDxociAvPlxuICAgICAgICA8RGVtb1VzZUdyaWQgLz5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxEZW1vVXNlVGltZW91dCAvPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPERlbW9Vc2VJbnRlcnZhbCAvPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPERlbW9Vc2VSb3ZpbmdUYWJJbmRleCAvPlxuICAgICAgICA8aHIgLz5cblxuXG4gICAgICAgIDxEZW1vVXNlRm9jdXNUcmFwIC8+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8RGVtb1VzZUFzeW5jSGFuZGxlcjEgLz5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxEZW1vVXNlQXN5bmNIYW5kbGVyMiAvPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPERlbW9Vc2VEcm9wcGFibGUgLz5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxEZW1vVXNlRHJhZ2dhYmxlIC8+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8RGVtb1VzZUVsZW1lbnRTaXplQW5pbWF0aW9uIC8+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8aW5wdXQgLz5cbiAgICA8L2Rpdj5cbn1cblxucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICByZW5kZXIoPENvbXBvbmVudCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpISk7XG59KVxuIl0sIm5hbWVzIjpbInNsaWNlIiwib3B0aW9ucyIsInZub2RlSWQiLCJyZXJlbmRlclF1ZXVlIiwiZGVmZXIiLCJwcmV2RGVib3VuY2UiLCJpIiwiRU1QVFlfT0JKIiwiRU1QVFlfQVJSIiwiSVNfTk9OX0RJTUVOU0lPTkFMIiwiYXNzaWduIiwib2JqIiwicHJvcHMiLCJyZW1vdmVOb2RlIiwibm9kZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiY2hpbGRyZW4iLCJrZXkiLCJyZWYiLCJub3JtYWxpemVkUHJvcHMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjYWxsIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwiY3JlYXRlVk5vZGUiLCJvcmlnaW5hbCIsInZub2RlIiwiY29uc3RydWN0b3IiLCJGcmFnbWVudCIsIkNvbXBvbmVudCIsImNvbnRleHQiLCJnZXREb21TaWJsaW5nIiwiY2hpbGRJbmRleCIsImluZGV4T2YiLCJzaWJsaW5nIiwidXBkYXRlUGFyZW50RG9tUG9pbnRlcnMiLCJjaGlsZCIsImJhc2UiLCJlbnF1ZXVlUmVuZGVyIiwiYyIsInB1c2giLCJwcm9jZXNzIiwiZGVib3VuY2VSZW5kZXJpbmciLCJxdWV1ZSIsInNvcnQiLCJhIiwiYiIsInNvbWUiLCJjb21wb25lbnQiLCJjb21taXRRdWV1ZSIsIm9sZFZOb2RlIiwib2xkRG9tIiwicGFyZW50RG9tIiwiZGlmZiIsIm93bmVyU1ZHRWxlbWVudCIsImNvbW1pdFJvb3QiLCJkaWZmQ2hpbGRyZW4iLCJyZW5kZXJSZXN1bHQiLCJuZXdQYXJlbnRWTm9kZSIsIm9sZFBhcmVudFZOb2RlIiwiZ2xvYmFsQ29udGV4dCIsImlzU3ZnIiwiZXhjZXNzRG9tQ2hpbGRyZW4iLCJpc0h5ZHJhdGluZyIsImoiLCJjaGlsZFZOb2RlIiwibmV3RG9tIiwiZmlyc3RDaGlsZERvbSIsInJlZnMiLCJvbGRDaGlsZHJlbiIsIm9sZENoaWxkcmVuTGVuZ3RoIiwiQXJyYXkiLCJpc0FycmF5IiwicmVvcmRlckNoaWxkcmVuIiwicGxhY2VDaGlsZCIsInVubW91bnQiLCJhcHBseVJlZiIsInRtcCIsInRvQ2hpbGRBcnJheSIsIm91dCIsIm5leHREb20iLCJzaWJEb20iLCJvdXRlciIsImFwcGVuZENoaWxkIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJkaWZmUHJvcHMiLCJkb20iLCJuZXdQcm9wcyIsIm9sZFByb3BzIiwiaHlkcmF0ZSIsInNldFByb3BlcnR5Iiwic2V0U3R5bGUiLCJzdHlsZSIsInZhbHVlIiwidGVzdCIsIm5hbWUiLCJvbGRWYWx1ZSIsInVzZUNhcHR1cmUiLCJvIiwiY3NzVGV4dCIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsIl9saXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnRQcm94eUNhcHR1cmUiLCJldmVudFByb3h5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImUiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJldmVudCIsIm5ld1ZOb2RlIiwiaXNOZXciLCJvbGRTdGF0ZSIsInNuYXBzaG90IiwiY2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uIiwicHJvdmlkZXIiLCJjb21wb25lbnRDb250ZXh0IiwicmVuZGVySG9vayIsImNvdW50IiwibmV3VHlwZSIsImNvbnRleHRUeXBlIiwicHJvdG90eXBlIiwicmVuZGVyIiwiZG9SZW5kZXIiLCJzdWIiLCJzdGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImZvckVhY2giLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJkaWZmRWxlbWVudE5vZGVzIiwiZGlmZmVkIiwicm9vdCIsImNiIiwib2xkSHRtbCIsIm5ld0h0bWwiLCJub2RlVHlwZSIsImxvY2FsTmFtZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVFbGVtZW50TlMiLCJpcyIsImRhdGEiLCJjaGlsZE5vZGVzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJhdHRyaWJ1dGVzIiwiaW5uZXJIVE1MIiwiY2hlY2tlZCIsImN1cnJlbnQiLCJwYXJlbnRWTm9kZSIsInNraXBSZW1vdmUiLCJyIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ0aGlzIiwicmVwbGFjZU5vZGUiLCJmaXJzdENoaWxkIiwiY3JlYXRlQ29udGV4dCIsImRlZmF1bHRWYWx1ZSIsImNvbnRleHRJZCIsIkNvbnN1bWVyIiwiY29udGV4dFZhbHVlIiwiUHJvdmlkZXIiLCJzdWJzIiwiY3R4IiwiX3Byb3BzIiwib2xkIiwic3BsaWNlIiwiZXJyb3IiLCJlcnJvckluZm8iLCJjdG9yIiwiaGFuZGxlZCIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInNldFN0YXRlIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJ1cGRhdGUiLCJjYWxsYmFjayIsInMiLCJmb3JjZVVwZGF0ZSIsIlByb21pc2UiLCJ0aGVuIiwiYmluZCIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiX19zZWxmIiwiX19zb3VyY2UiLCJjdXJyZW50SW5kZXgiLCJjdXJyZW50Q29tcG9uZW50IiwicHJldmlvdXNDb21wb25lbnQiLCJwcmV2UmFmIiwiY3VycmVudEhvb2siLCJhZnRlclBhaW50RWZmZWN0cyIsIm9sZEJlZm9yZURpZmYiLCJvbGRCZWZvcmVSZW5kZXIiLCJvbGRBZnRlckRpZmYiLCJvbGRDb21taXQiLCJvbGRCZWZvcmVVbm1vdW50IiwiZ2V0SG9va1N0YXRlIiwiaW5kZXgiLCJob29rcyIsInVzZVN0YXRlIiwiaW5pdGlhbFN0YXRlIiwidXNlUmVkdWNlciIsImludm9rZU9yUmV0dXJuIiwicmVkdWNlciIsImluaXQiLCJob29rU3RhdGUiLCJfcmVkdWNlciIsImFjdGlvbiIsIm5leHRWYWx1ZSIsInVzZUVmZmVjdCIsImFyZ3MiLCJhcmdzQ2hhbmdlZCIsIl9wZW5kaW5nQXJncyIsInVzZUxheW91dEVmZmVjdCIsInVzZVJlZiIsImluaXRpYWxWYWx1ZSIsInVzZU1lbW8iLCJmYWN0b3J5IiwiX3BlbmRpbmdWYWx1ZSIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsImZsdXNoQWZ0ZXJQYWludEVmZmVjdHMiLCJzaGlmdCIsImludm9rZUNsZWFudXAiLCJpbnZva2VFZmZlY3QiLCJob29rSXRlbSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZiIsImRvbmUiLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0IiwiSEFTX1JBRiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZmlsdGVyIiwiaGFzRXJyb3JlZCIsImhvb2siLCJjb21wIiwiY2xlYW51cCIsIm9sZEFyZ3MiLCJuZXdBcmdzIiwiYXJnIiwiZiIsInNoYWxsb3dEaWZmZXJzIiwiUHVyZUNvbXBvbmVudCIsInAiLCJtZW1vIiwiY29tcGFyZXIiLCJzaG91bGRVcGRhdGUiLCJuZXh0UHJvcHMiLCJ1cGRhdGVSZWYiLCJNZW1vZWQiLCJkaXNwbGF5TmFtZSIsImlzUmVhY3RDb21wb25lbnQiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIm9sZERpZmZIb29rIiwiRm9yd2FyZGVkIiwib2xkQ2F0Y2hFcnJvciIsIm9sZFVubW91bnQiLCJTdXNwZW5zZSIsIl9zdXNwZW5kZXJzIiwic3VzcGVuZGVkIiwiU3VzcGVuc2VMaXN0IiwiX25leHQiLCJfbWFwIiwicHJvbWlzZSIsInN1c3BlbmRpbmdWTm9kZSIsInN1c3BlbmRpbmdDb21wb25lbnQiLCJyZXNvbHZlZCIsIm9uUmVzb2x2ZWQiLCJvblN1c3BlbnNpb25Db21wbGV0ZSIsInN1c3BlbmRlZFZOb2RlIiwicmVtb3ZlT3JpZ2luYWwiLCJkZXRhY2hlZFBhcmVudCIsIm9yaWdpbmFsUGFyZW50IiwibWFwIiwicG9wIiwid2FzSHlkcmF0aW5nIiwiZGV0YWNoZWRDb21wb25lbnQiLCJkZXRhY2hlZENsb25lIiwiZWZmZWN0IiwiZmFsbGJhY2siLCJsaXN0IiwiZGVsZXRlIiwicmV2ZWFsT3JkZXIiLCJzaXplIiwiZGVsZWdhdGVkIiwiZ2V0IiwidW5zdXNwZW5kIiwid3JhcHBlZFVuc3VzcGVuZCIsIk1hcCIsInJldmVyc2UiLCJzZXQiLCJfdGhpcyIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsIlN5bWJvbCIsImZvciIsIkNBTUVMX1BST1BTIiwiSVNfRE9NIiwib25DaGFuZ2VJbnB1dFR5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInYiLCJ3cml0YWJsZSIsIm9sZEV2ZW50SG9vayIsImVtcHR5IiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjYW5jZWxCdWJibGUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicGVyc2lzdCIsIm5hdGl2ZUV2ZW50IiwiY2xhc3NOYW1lRGVzY3JpcHRvciIsImNsYXNzIiwib2xkVk5vZGVIb29rIiwibm9uQ3VzdG9tRWxlbWVudCIsIm11bHRpcGxlIiwic2VsZWN0ZWQiLCJjbGFzc05hbWUiLCJlbnVtZXJhYmxlIiwiJCR0eXBlb2YiLCJVbnNldCIsInJldHVybk51bGwiLCJ1c2VTdGF0ZVAiLCJvYmplY3RQcm90byIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJGVU5DX0VSUk9SX1RFWFQiLCJpZGVudGl0eSIsInVzZUVmZmVjdE5hdGl2ZSIsInVzZUxheW91dEVmZmVjdE5hdGl2ZSIsImNhbmRpZGF0ZVNlbGVjdG9ycyIsIk5vRWxlbWVudCIsIkVsZW1lbnQiLCJtYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJnZXRSb290Tm9kZSIsImVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiaXNJbnB1dCIsInRhZ05hbWUiLCJpc0hpZGRlbklucHV0IiwiaXNEZXRhaWxzV2l0aFN1bW1hcnkiLCJhcHBseSIsImlzWmVyb0FyZWEiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsImhlaWdodCIsImlzSGlkZGVuIiwiZGlzcGxheUNoZWNrIiwiZ2V0U2hhZG93Um9vdCIsImdldENvbXB1dGVkU3R5bGUiLCJ2aXNpYmlsaXR5IiwiaXNEaXJlY3RTdW1tYXJ5Iiwibm9kZVVuZGVyRGV0YWlscyIsInBhcmVudEVsZW1lbnQiLCJub2RlUm9vdEhvc3QiLCJob3N0Iiwibm9kZUlzQXR0YWNoZWQiLCJjb250YWlucyIsIm9yaWdpbmFsTm9kZSIsInJvb3ROb2RlIiwic2hhZG93Um9vdCIsImFzc2lnbmVkU2xvdCIsImdldENsaWVudFJlY3RzIiwiaXNEaXNhYmxlZEZyb21GaWVsZHNldCIsImRpc2FibGVkIiwiaXRlbSIsImlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUiLCJmb2N1c2FibGVDYW5kaWRhdGVTZWxlY3RvciIsImNvbmNhdCIsImpvaW4iLCJpc0ZvY3VzYWJsZSIsIkVycm9yIiwiX2pzeHMiLCJfanN4IiwiUmFuZG9tV29yZHMiXSwibWFwcGluZ3MiOiI7OztBQTBCYUEsS0FBQUEsQ0FBQUEsQ0NmUEMsR0NSRkMsQ0FBQUEsR0FBQUEsQ0N1S0FDLEdBQUFBLENBUUVDLEdBY0ZDLENBQUFBLEdBQUFBLENDOUxPQyxHQ0ZFQyxDQUFBQSxHQUFBQSxDQUFZLEVBQ1pDLENBQUFBLEdBQUFBLENBQVks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Q0FBSyxJQUFJLEVBQUksSUFBQSxFQUFBLEtBQUssSUFBTSxDQUFDLEVBQUEsQ0FBTSxJQUFNLEVBQ25NLFlBQVksSUFBSSxJQUFJLElBQUlBLDJDQUFvQkEsR0FDekMsQ0FBQSxPQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsQ0FBQUMsR0FBQSxDQUFBLE9BQUEsRUFBQSxFQUFBLFFBQUEsRUFBT0QsR0FBSSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUFBQyxHQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxDQUFhLEVBQUFBLEdBQWEsQ0FBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQUEsK0JBQWEsRUFBQUEsR0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxlQUFBLEVBQUEsQ0FBc0IsSUFBSyxFQUFRLENBQUEsRUFDckZBLHlCQUFRLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJRCx1QkFBSUMsR0FBSyxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUFDLENBQUMsSUFBSSxHQUFNLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUNBLEdBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUssQ0FBQyxDQUFDLElBQUksR0FBTSxFQUFBQSxHQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLEVBQU0sQ0FBQSxDQUFBLEVBQUEsQ0FBSyxDQUFDLEVBQVMsQ0FBQSxDQUFBLEVBQUEsQ0FDMUksSUFBTSxFQUNkQSxHQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsQ0FBTSxFQUVMLHVCQUF1QixJQUFJLElBQUksSUFBSUQsR0FBQSxDQUFBLEtBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUFBLHlCQUFBLEVBQTRCQyxzQkFBSyxLQUFLLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENB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YUFBYSxDQUFDLEdBQUksQ0FBUSxFQUFBLENBQUEsRUFDMUhELEdBQXNCLENBQUEsT0FBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLENBQUEsaUJBQUEsRUFBQUMsR0FBQSxDQUFBLE9BQUEsRUFBQSxFQUFPLElBQUksRUFBQyxVQUFVLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFBLENBQUksSUFBUSxFQUNwSUQsR0FBQSxDQUFBLE9BQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUFBLHlCQUFBLEVBQThCQyxHQUFPLENBQUEsT0FBQSxFQUFBLEVBQUEsSUFBSSxFQUFDLFVBQVUsRUFBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFBLENBQUksSUFBUSxFQUMxSkQsR0FBQSxDQUFBLE9BQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUFBLFlBQUEsRUFBaUJDLEdBQU8sQ0FBQSxPQUFBLEVBQUEsRUFBQSxJQUFJLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsRUFBQSxDQUFJLElBQVEsRUFDM0hELEdBQUEsQ0FBQSxPQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsQ0FDSUMsR0FDSSxDQUFBLE9BQUEsRUFBQSxFQUFBLFFBQUEsRUFBQUQsR0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUNJQyxHQUFjLENBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQ2RBLGdDQUFjLENBQ2IsRUFBQSxDQUFBLEVBQUEsQ0FDRCxFQUNSRCxHQUFBLENBQUEsT0FBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLENBQ0lBLEdBQUksQ0FBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsQ0FBQUMsR0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxXQUFBLEVBQUEsQ0FBa0IsRUFBQUEsR0FBSyxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxTQUFTLEVBQU0sQ0FBQSxDQUFBLEVBQUEsQ0FBSyxFQUMvQ0QsR0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUFJQyxzQ0FBb0IsRUFBQUEsR0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBSyxXQUFXLEVBQU0sQ0FBQSxDQUFBLEVBQUEsQ0FBSyxFQUNuREQsR0FBSSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUFBQyxHQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLGNBQUEsRUFBQSxDQUFxQixFQUFBQSxHQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFLLFlBQVksRUFBQSxDQUFNLElBQUssRUFDckRELEdBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsQ0FBSUMsR0FBb0IsQ0FBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFBLENBQUEsRUFBQUEsR0FBSyxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxXQUFXLEdBQU0sQ0FBSyxFQUFBLENBQUEsRUFDbkRELEdBQUksQ0FBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsQ0FBQUMsR0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxVQUFBLEVBQUEsQ0FBaUIsRUFBQUEsR0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsRUFBSyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUEsQ0FBTSxDQUFLLEVBQUEsQ0FBQSxFQUN4REQsdUJBQUlDLEdBQXVCLENBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLGdCQUFBLEVBQUEsQ0FBQSxFQUFBQSxHQUFLLENBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLGNB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
