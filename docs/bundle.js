var bundle = (function (exports) {
	'use strict';

	var n,l$1,u$1,t$1,o$2,r$1,f$1,e$2={},c$1=[],s$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function a$1(n,l){for(var u in l)n[u]=l[u];return n}function h$1(n){var l=n.parentNode;l&&l.removeChild(n);}function v$1(l,u,i){var t,o,r,f={};for(r in u)"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return y$1(l,f,t,o,null)}function y$1(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u$1:r};return null==r&&null!=l$1.vnode&&l$1.vnode(f),f}function d$1(n){return n.children}function _(n,l){this.props=n,this.context=l;}function k$1(n,l){if(null==l)return n.__?k$1(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?k$1(n):null}function b$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return b$1(n)}}function m$1(n){(!n.__d&&(n.__d=!0)&&t$1.push(n)&&!g$2.__r++||r$1!==l$1.debounceRendering)&&((r$1=l$1.debounceRendering)||o$2)(g$2);}function g$2(){for(var n;g$2.__r=t$1.length;)n=t$1.sort(function(n,l){return n.__v.__b-l.__v.__b}),t$1=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=a$1({},t)).__v=t.__v+1,j$2(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?k$1(t):o,t.__h),z$2(u,t),t.__e!=o&&b$1(t)));});}function w$2(n,l,u,i,t,o,r,f,s,a){var h,v,p,_,b,m,g,w=i&&i.__k||c$1,A=w.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(_=u.__k[h]=null==(_=l[h])||"boolean"==typeof _?null:"string"==typeof _||"number"==typeof _||"bigint"==typeof _?y$1(null,_,null,null,_):Array.isArray(_)?y$1(d$1,{children:_},null,null,null):_.__b>0?y$1(_.type,_.props,_.key,null,_.__v):_)){if(_.__=u,_.__b=u.__b+1,null===(p=w[h])||p&&_.key==p.key&&_.type===p.type)w[h]=void 0;else for(v=0;v<A;v++){if((p=w[v])&&_.key==p.key&&_.type===p.type){w[v]=void 0;break}p=null;}j$2(n,_,p=p||e$2,t,o,r,f,s,a),b=_.__e,(v=_.ref)&&p.ref!=v&&(g||(g=[]),p.ref&&g.push(p.ref,null,_),g.push(v,_.__c||b,_)),null!=b?(null==m&&(m=b),"function"==typeof _.type&&_.__k===p.__k?_.__d=s=x(_,s,n):s=P$1(n,_,p,w,b,s),"function"==typeof u.type&&(u.__d=s)):s&&p.__e==s&&s.parentNode!=n&&(s=k$1(p));}for(u.__e=m,h=A;h--;)null!=w[h]&&("function"==typeof u.type&&null!=w[h].__e&&w[h].__e==u.__d&&(u.__d=k$1(i,h+1)),N(w[h],w[h]));if(g)for(h=0;h<g.length;h++)M$2(g[h],g[++h],g[++h]);}function x(n,l,u){for(var i,t=n.__k,o=0;t&&o<t.length;o++)(i=t[o])&&(i.__=n,l="function"==typeof i.type?x(i,l,u):P$1(u,i,i,t,i.__e,l));return l}function A$2(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){A$2(n,l);}):l.push(n)),l}function P$1(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else {for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=2)if(f==t)break n;n.insertBefore(t,o),r=o;}return void 0!==r?r:t.nextSibling}function C$1(n,l,u,i,t){var o;for(o in u)"children"===o||"key"===o||o in l||H$1(n,o,null,u[o],i);for(o in l)t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||H$1(n,o,l[o],u[o],i);}function $(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||s$1.test(l)?u:u+"px";}function H$1(n,l,u,i,t){var o;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||$(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||$(n.style,l,u[l]);}else if("o"===l[0]&&"n"===l[1])o=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T$2:I,o):n.removeEventListener(l,o?T$2:I,o);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null!=u&&(!1!==u||"a"===l[0]&&"r"===l[1])?n.setAttribute(l,u):n.removeAttribute(l));}}function I(n){this.l[n.type+!1](l$1.event?l$1.event(n):n);}function T$2(n){this.l[n.type+!0](l$1.event?l$1.event(n):n);}function j$2(n,u,i,t,o,r,f,e,c){var s,h,v,y,p,k,b,m,g,x,A,P,C,$=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(s=l$1.__b)&&s(u);try{n:if("function"==typeof $){if(m=u.props,g=(s=$.contextType)&&t[s.__c],x=s?g?g.props.value:s.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in $&&$.prototype.render?u.__c=h=new $(m,x):(u.__c=h=new _(m,x),h.constructor=$,h.render=O$1),g&&g.sub(h),h.props=m,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=$.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=a$1({},h.__s)),a$1(h.__s,$.getDerivedStateFromProps(m,h.__s))),y=h.props,p=h.state,v)null==$.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else {if(null==$.getDerivedStateFromProps&&m!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(m,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(m,h.__s,x)||u.__v===i.__v){h.props=m,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),h.__h.length&&f.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(m,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,p,k);});}if(h.context=x,h.props=m,h.__v=u,h.__P=n,A=l$1.__r,P=0,"prototype"in $&&$.prototype.render)h.state=h.__s,h.__d=!1,A&&A(u),s=h.render(h.props,h.state,h.context);else do{h.__d=!1,A&&A(u),s=h.render(h.props,h.state,h.context),h.state=h.__s;}while(h.__d&&++P<25);h.state=h.__s,null!=h.getChildContext&&(t=a$1(a$1({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,p)),C=null!=s&&s.type===d$1&&null==s.key?s.props.children:s,w$2(n,Array.isArray(C)?C:[C],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L$1(i.__e,u,i,t,o,r,f,c);(s=l$1.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l$1.__e(n,u,i);}}function z$2(n,u){l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function L$1(l,u,i,t,o,r,f,c){var s,a,v,y=i.props,p=u.props,d=u.type,_=0;if("svg"===d&&(o=!0),null!=r)for(;_<r.length;_++)if((s=r[_])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,r[_]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),r=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else {if(r=r&&n.call(l.childNodes),a=(y=i.props||e$2).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},_=0;_<l.attributes.length;_++)y[l.attributes[_].name]=l.attributes[_].value;(v||a)&&(v&&(a&&v.__html==a.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if(C$1(l,p,y,o,c),v)u.__k=[];else if(_=u.props.children,w$2(l,Array.isArray(_)?_:[_],u,i,t,o&&"foreignObject"!==d,r,f,r?r[0]:i.__k&&k$1(i,0),c),null!=r)for(_=r.length;_--;)null!=r[_]&&h$1(r[_]);c||("value"in p&&void 0!==(_=p.value)&&(_!==l.value||"progress"===d&&!_||"option"===d&&_!==y.value)&&H$1(l,"value",_,y.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==l.checked&&H$1(l,"checked",_,y.checked,!1));}return l}function M$2(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$1.__e(n,i);}}function N(n,u,i){var t,o;if(l$1.unmount&&l$1.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M$2(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$1.__e(n,u);}t.base=t.__P=null;}if(t=n.__k)for(o=0;o<t.length;o++)t[o]&&N(t[o],u,"function"!=typeof n.type);i||null==n.__e||h$1(n.__e),n.__e=n.__d=void 0;}function O$1(n,l,u){return this.constructor(n,u)}function S$1(u,i,t){var o,r,f;l$1.__&&l$1.__(u,i),r=(o="function"==typeof t)?null:t&&t.__k||i.__k,f=[],j$2(i,u=(!o&&t||i).__k=v$1(d$1,null,[u]),r||e$2,e$2,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n.call(i.childNodes):null,f,!o&&t?t:r?r.__e:i.firstChild,o),z$2(f,u);}function D(n,l){var u={__c:l="__cC"+f$1++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(m$1);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=c$1.slice,l$1={__e:function(n,l,u,i){for(var t,o,r;l=l.__;)if((t=l.__c)&&!t.__)try{if((o=t.constructor)&&null!=o.getDerivedStateFromError&&(t.setState(o.getDerivedStateFromError(n)),r=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),r=t.__d),r)return t.__E=t}catch(l){n=l;}throw n}},u$1=0,_.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=a$1({},this.state),"function"==typeof n&&(n=n(a$1({},u),this.props)),n&&a$1(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),m$1(this));},_.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),m$1(this));},_.prototype.render=d$1,t$1=[],o$2="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,g$2.__r=0,f$1=0;

	var o$1=0;function e$1(_,e,n,t,f){var l,s,u={};for(s in e)"ref"==s?l=e[s]:u[s]=e[s];var a={type:_,props:u,key:n,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--o$1,__source:f,__self:t};if("function"==typeof _&&(l=_.defaultProps))for(s in l)void 0===u[s]&&(u[s]=l[s]);return l$1.vnode&&l$1.vnode(a),a}

	var t,u,r,o,i=0,c=[],f=l$1.__b,e=l$1.__r,a=l$1.diffed,v=l$1.__c,l=l$1.unmount;function m(t,r){l$1.__h&&l$1.__h(u,t,i||r),i=0;var o=u.__H||(u.__H={__:[],__h:[]});return t>=o.__.length&&o.__.push({}),o.__[t]}function d(n){return i=1,p(z$1,n)}function p(n,r,o){var i=m(t++,2);return i.t=n,i.__c||(i.__=[o?o(r):z$1(void 0,r),function(n){var t=i.t(i.__[0],n);i.__[0]!==t&&(i.__=[t,i.__[1]],i.__c.setState({}));}],i.__c=u),i.__}function y(r,o){var i=m(t++,3);!l$1.__s&&w$1(i.__H,o)&&(i.__=r,i.u=o,u.__H.__h.push(i));}function h(r,o){var i=m(t++,4);!l$1.__s&&w$1(i.__H,o)&&(i.__=r,i.u=o,u.__h.push(i));}function s(n){return i=5,A$1(function(){return {current:n}},[])}function A$1(n,u){var r=m(t++,7);return w$1(r.__H,u)?(r.o=n(),r.u=u,r.__h=n,r.o):r.__}function F(n,t){return i=8,A$1(function(){return n},t)}function T$1(n){var r=u.context[n.__c],o=m(t++,9);return o.c=n,r?(null==o.__&&(o.__=!0,r.sub(u)),r.props.value):n.__}function b(){for(var t;t=c.shift();)if(t.__P)try{t.__H.__h.forEach(j$1),t.__H.__h.forEach(k),t.__H.__h=[];}catch(u){t.__H.__h=[],l$1.__e(u,t.__v);}}l$1.__b=function(n){u=null,f&&f(n);},l$1.__r=function(n){e&&e(n),t=0;var o=(u=n.__c).__H;o&&(r===u?(o.__h=[],u.__h=[],o.__.forEach(function(n){n.o=n.u=void 0;})):(o.__.forEach(function(n){n.u&&(n.__H=n.u),n.o&&(n.__=n.o),n.o=n.u=void 0;}),o.__h.forEach(j$1),o.__h.forEach(k),o.__h=[])),r=u;},l$1.diffed=function(t){a&&a(t);var i=t.__c;i&&i.__H&&i.__H.__h.length&&(1!==c.push(i)&&o===l$1.requestAnimationFrame||((o=l$1.requestAnimationFrame)||function(n){var t,u=function(){clearTimeout(r),g$1&&cancelAnimationFrame(t),setTimeout(n);},r=setTimeout(u,100);g$1&&(t=requestAnimationFrame(u));})(b)),u=null,r=null;},l$1.__c=function(t,u){u.some(function(t){try{t.__H&&t.__H.__.forEach(function(n){n.u&&(n.__H=n.u),n.o&&(n.__=n.o),n.o=n.u=void 0;}),t.__h.forEach(j$1),t.__h=t.__h.filter(function(n){return !n.__||k(n)});}catch(r){u.some(function(n){n.__h&&(n.__h=[]);}),u=[],l$1.__e(r,t.__v);}}),v&&v(t,u);},l$1.unmount=function(t){l&&l(t);var u,r=t.__c;r&&r.__H&&(r.__H.__.forEach(function(n){try{j$1(n);}catch(n){u=n;}}),u&&l$1.__e(u,r.__v));};var g$1="function"==typeof requestAnimationFrame;function j$1(n){var t=u,r=n.__c;"function"==typeof r&&(n.__c=void 0,r()),u=t;}function k(n){var t=u;n.__c=n.__(),u=t;}function w$1(n,t){return !n||n.length!==t.length||t.some(function(t,u){return t!==n[u]})}function z$1(n,t){return "function"==typeof t?t(n):t}

	function C(n,t){for(var e in t)n[e]=t[e];return n}function S(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}function E(n){this.props=n;}function g(n,t){function e(n){var e=this.props.ref,r=e==n.ref;return !r&&e&&(e.call?e(null):e.current=null),t?!t(this.props,n)||!r:S(this.props,n)}function r(t){return this.shouldComponentUpdate=e,v$1(n,t)}return r.displayName="Memo("+(n.displayName||n.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(E.prototype=new _).isPureReactComponent=!0,E.prototype.shouldComponentUpdate=function(n,t){return S(this.props,n)||S(this.state,t)};var w=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),w&&w(n);};var A=l$1.__e;l$1.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;)if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);A(n,t,e,r);};var O=l$1.unmount;function L(){this.__u=0,this.t=null,this.__b=null;}function U(n){var t=n.__.__c;return t&&t.__e&&t.__e(n)}function M$1(){this.u=null,this.o=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),O&&O(n);},(L.prototype=new _).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=U(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(!--r.__u){if(r.state.__e){var n=r.state.__e;r.__v.__k[0]=function n(t,e,r){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)}),t.__c&&t.__c.__P===e&&(t.__e&&r.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=r)),t}(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__e:r.__b=null});t=r.t.pop();)t.forceUpdate();}},f=!0===t.__h;r.__u++||f||r.setState({__e:r.__b=r.__v.__k[0]}),n.then(i,i);},L.prototype.componentWillUnmount=function(){this.t=[];},L.prototype.render=function(n,t){if(this.__b){if(this.__v.__k){var e=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=function n(t,e,r){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),t.__c.__H=null),null!=(t=C({},t)).__c&&(t.__c.__P===r&&(t.__c.__P=e),t.__c=null),t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)})),t}(this.__b,e,r.__O=r.__P);}this.__b=null;}var u=t.__e&&v$1(d$1,null,n.fallback);return u&&(u.__h=null),[v$1(d$1,null,t.__e?null:n.children),u]};var T=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};(M$1.prototype=new _).__e=function(n){var t=this,e=U(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),T(t,n,r)):u();};e?e(o):o();}},M$1.prototype.render=function(n){this.u=null,this.o=new Map;var t=A$2(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children},M$1.prototype.componentDidUpdate=M$1.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){T(n,e,t);});};var P="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,V=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,j="undefined"!=typeof document,z=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n)};_.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(n){Object.defineProperty(_.prototype,n,{configurable:!0,get:function(){return this["UNSAFE_"+n]},set:function(t){Object.defineProperty(this,n,{configurable:!0,writable:!0,value:t});}});});var H=l$1.event;function Z(){}function Y(){return this.cancelBubble}function q(){return this.defaultPrevented}l$1.event=function(n){return H&&(n=H(n)),n.persist=Z,n.isPropagationStopped=Y,n.isDefaultPrevented=q,n.nativeEvent=n};var J={configurable:!0,get:function(){return this.class}},K=l$1.vnode;l$1.vnode=function(n){var t=n.type,e=n.props,r=e;if("string"==typeof t){var u=-1===t.indexOf("-");for(var o in r={},e){var i=e[o];j&&"children"===o&&"noscript"===t||"value"===o&&"defaultValue"in e&&null==i||("defaultValue"===o&&"value"in e&&null==e.value?o="value":"download"===o&&!0===i?i="":/ondoubleclick/i.test(o)?o="ondblclick":/^onchange(textarea|input)/i.test(o+t)&&!z(e.type)?o="oninput":/^onfocus$/i.test(o)?o="onfocusin":/^onblur$/i.test(o)?o="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(o)?o=o.toLowerCase():u&&V.test(o)?o=o.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===i&&(i=void 0),/^oninput/i.test(o)&&(o=o.toLowerCase(),r[o]&&(o="oninputCapture")),r[o]=i);}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=-1!=r.value.indexOf(n.props.value);})),"select"==t&&null!=r.defaultValue&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=r.multiple?-1!=r.defaultValue.indexOf(n.props.value):r.defaultValue==n.props.value;})),n.props=r,e.class!=e.className&&(J.enumerable="className"in e,null!=e.className&&(r.class=e.className),Object.defineProperty(r,"className",J));}n.$$typeof=P,K&&K(n);};var Q=l$1.__r;l$1.__r=function(n){Q&&Q(n),n.__c;};

	function toVal(mix) {
		var k, y, str='';

		if (typeof mix === 'string' || typeof mix === 'number') {
			str += mix;
		} else if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k]) {
						if (y = toVal(mix[k])) {
							str && (str += ' ');
							str += y;
						}
					}
				}
			} else {
				for (k in mix) {
					if (mix[k]) {
						str && (str += ' ');
						str += k;
					}
				}
			}
		}

		return str;
	}

	function clsx () {
		var i=0, tmp, x, str='';
		while (i < arguments.length) {
			if (tmp = arguments[i++]) {
				if (x = toVal(tmp)) {
					str && (str += ' ');
					str += x;
				}
			}
		}
		return str;
	}

	function getDocument(element) { return (element?.ownerDocument ?? document ?? window.document ?? globalThis.document); }

	/**
	 * Debug hook.
	 *
	 * Given a value or set of values, emits a console error if any of them change from one render to the next.
	 *
	 * Eventually, when useEvent lands, we hopefully won't need this.
	 */
	function useEnsureStability(parentHookName, ...values) {
	    useHelper(values.length, 0);
	    values.forEach(useHelper);
	    return;
	    function useHelper(value, index) {
	        // Make sure that the provided functions are perfectly stable across renders
	        const helperToEnsureStability = s(value);
	        const shownError = s(false);
	        if (helperToEnsureStability.current != value) {
	            if (!shownError.current) {
	                /* eslint-disable no-debugger */
	                debugger;
	                console.error(`The hook ${parentHookName} requires some or all of its arguments remain stable across each render; please check the ${index}-indexed argument.`);
	                shownError.current = true;
	            }
	        }
	    }
	}
	/**
	 * Similar to `useState`, but for values that aren't "render-important" &ndash; updates don't cause a re-render and so the value shouldn't be used during render (though it certainly can, at least by re-rendering again).
	 *
	 * To compensate for this, you should pass a `useEffect`-esque callback that is run whenever the value changes.  Just like `useEffect`, this callback can return a cleanup function that's run before the value changes.  If you would like to re-render when the value changes (or, say, when the value meets some criteria), this is where you'll want to put in a call to a `setState` function.
	 *
	 * To summarize, it's like a `useState`-`useEffect` mashup:
	 *
	 * 1. It's like `useState`, except this version of `setState` doesn't re-render the whole component
	 * 2. It's like `useState`, except you can run a function when the value changes that optionally returns a cleanup function
	 * 3. It's like `useEffect`, except you trigger the effect function "remotely" instead of it running after rendering
	 * 4. It's like `useEffect`, except the single "dependency" is based on your calls to `setState`
	 *
	 * Note that while calling `setState` doesn't cause any re-renders, you can do that within your `onChange` function, called whenever the value changes via that `setState`.
	 *
	 * @param onChange The "effect" function to run when the value changes. Effectively the same as `useEffect`'s "effect" function.  MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
	 * @param getInitialValue If provided, the effect will be invoked once with this value on mount. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
	 * @returns
	 */
	function usePassiveState(onChange, getInitialValue) {
	    const valueRef = s(Unset$1);
	    const warningRef = s(false);
	    const cleanupCallbackRef = s(undefined);
	    // Make sure that the provided functions are perfectly stable across renders
	    useEnsureStability("usePassiveState", onChange, getInitialValue);
	    // Shared between "dependency changed" and "component unmounted".
	    const onShouldCleanUp = F(() => {
	        const cleanupCallback = cleanupCallbackRef.current;
	        if (cleanupCallback)
	            cleanupCallback();
	    }, []);
	    // There are a couple places where we'd like to use our initial
	    // value in place of having no value at all yet.
	    // This is the shared code for that, used on mount and whenever
	    // getValue is called.
	    const tryEnsureValue = F(() => {
	        if (valueRef.current === Unset$1 && getInitialValue != undefined) {
	            try {
	                const initialValue = getInitialValue();
	                valueRef.current = initialValue;
	                cleanupCallbackRef.current = (onChange?.(initialValue, undefined) ?? undefined);
	            }
	            catch (ex) {
	                // Exceptions are intentional to allow bailout (without exposing the Unset symbol)
	            }
	        }
	    }, [ /* getInitialValue and onChange intentionally omitted */]);
	    const getValue = F(() => {
	        if (warningRef.current)
	            console.warn("During onChange, prefer using the (value, prevValue) arguments instead of getValue -- it's ambiguous as to if you're asking for the old or new value at this point in time for this component.");
	        // The first time we call getValue, if we haven't been given a value yet,
	        // (and we were given an initial value to use)
	        // return the initial value instead of nothing.
	        if (valueRef.current === Unset$1)
	            tryEnsureValue();
	        return (valueRef.current === Unset$1 ? undefined : valueRef.current);
	    }, []);
	    h(() => {
	        // Make sure we've run our effect at least once on mount.
	        // (If we have an initial value, of course)
	        tryEnsureValue();
	    }, []);
	    // The actual code the user calls to (possibly) run a new effect.
	    const setValue = F((arg) => {
	        const prevDep = valueRef.current === Unset$1 ? undefined : getValue();
	        const dep = arg instanceof Function ? arg(prevDep) : arg;
	        if (dep !== valueRef.current) {
	            // Indicate to the user that they shouldn't call getValue during onChange
	            warningRef.current = true;
	            // Call any registerd cleanup function
	            onShouldCleanUp();
	            cleanupCallbackRef.current = (onChange?.(dep, prevDep) ?? undefined);
	            valueRef.current = dep;
	            // Allow the user to normally call getValue again
	            warningRef.current = false;
	        }
	    }, []);
	    return [getValue, setValue];
	}
	const Unset$1 = Symbol();
	// Easy constants for getInitialValue
	function returnTrue() { return true; }
	function returnFalse() { return false; }
	function returnNull$1() { return null; }

	function useMergedChildren(lhsProps, rhsProps) {
	    const lhs = lhsProps?.children;
	    const rhs = rhsProps?.children;
	    if (lhs == null && rhs == null) {
	        return undefined;
	    }
	    else if (lhs == null) {
	        return rhs;
	    }
	    else if (rhs == null) {
	        return lhs;
	    }
	    else {
	        const ret = v$1(d$1, {}, lhs, rhs);
	        return ret;
	    }
	}

	/**
	 * Given two sets of props, merges their `class` and `className` properties.
	 * Duplicate classes are removed (order doesn't matter anyway).
	 *
	 * @param lhs Classes of the first component
	 * @param rhs Classes of the second component
	 * @returns A string representing all combined classes from both arguments.
	 */
	function useMergedClasses(lhs, rhs) {
	    // Note: For the sake of forward compatibility, this function is labelled as
	    // a hook, but as it uses no other hooks it technically isn't one.
	    return mergeClasses(lhs, rhs);
	}
	function mergeClasses(lhs, rhs) {
	    const lhsClass = lhs?.class;
	    const lhsClassName = lhs?.className;
	    const rhsClass = rhs?.class;
	    const rhsClassName = rhs?.className;
	    if (lhsClass || rhsClass || lhsClassName || rhsClassName) {
	        const lhsClasses = clsx(lhsClass, lhsClassName).split(" ");
	        const rhsClasses = clsx(rhsClass, rhsClassName).split(" ");
	        const allClasses = new Set([...Array.from(lhsClasses), ...Array.from(rhsClasses)]);
	        return Array.from(allClasses).join(" ");
	    }
	    else {
	        return undefined;
	    }
	}

	function processRef(instance, ref) {
	    if (typeof ref === "function") {
	        ref(instance);
	    }
	    else if (ref != null) {
	        ref.current = instance;
	    }
	    else {
	        /* eslint-disable no-debugger */
	        debugger;
	        console.assert(false, "Unknown ref type found that was neither a RefCallback nor a RefObject");
	    }
	}
	/**
	 * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
	 * @param lhs
	 * @param rhs
	 * @returns
	 */
	function useMergedRefs() {
	    return function (lhsProps, rhsProps) {
	        const lhs = lhsProps?.ref;
	        const rhs = rhsProps?.ref;
	        const combined = F((current) => {
	            processRef(current, lhs);
	            processRef(current, rhs);
	        }, [lhs, rhs]);
	        if (lhs == null && rhs == null) {
	            return undefined;
	        }
	        else if (lhs == null) {
	            return rhs;
	        }
	        else if (rhs == null) {
	            return lhs;
	        }
	        else {
	            return combined;
	        }
	    };
	}

	function styleStringToObject(style) {
	    // TODO: This sucks D:
	    return Object.fromEntries(style.split(";").map(statement => statement.split(":")));
	}
	/**
	 * Merges two style objects, returning the result.
	 *
	 * @param style The user-given style prop for this component
	 * @param obj The CSS properties you want added to the user-given style
	 * @returns A CSS object containing the properties of both objects.
	 */
	function useMergedStyles(lhs, rhs) {
	    // Easy case, when there are no styles to merge return nothing.
	    if (!lhs?.style && !rhs?.style)
	        return undefined;
	    if (typeof lhs != typeof rhs) {
	        // Easy cases, when one is null and the other isn't.
	        if (lhs?.style && !rhs?.style)
	            return lhs.style;
	        if (!lhs?.style && rhs?.style)
	            return rhs.style;
	        // They're both non-null but different types.
	        // Convert the string type to an object bag type and run it again.
	        if (lhs?.style && rhs?.style) {
	            // (useMergedStyles isn't a true hook -- this isn't a violation)
	            if (typeof lhs?.style == "string")
	                return useMergedStyles({ style: styleStringToObject(lhs?.style) }, rhs);
	            if (typeof rhs?.style == "string")
	                return useMergedStyles(lhs, { style: styleStringToObject(rhs?.style) });
	        }
	        // Logic???
	        return undefined;
	    }
	    // They're both strings, just concatenate them.
	    if (typeof lhs?.style == "string") {
	        return `${lhs.style};${rhs?.style ?? ""}`;
	    }
	    // They're both objects, just merge them.
	    return {
	        ...(lhs?.style ?? {}),
	        ...(rhs?.style ?? {})
	    };
	}

	let log = console.warn;
	/**
	 * Given two sets of props, merges them and returns the result.
	 *
	 * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
	 * @param lhs2
	 * @param rhs2
	 * @returns
	 */
	function useMergedProps() {
	    return function (lhsAll, rhsAll) {
	        // First, separate the props we were given into two groups:
	        // lhsAll and rhsAll contain all the props we were given, and
	        // lhsMisc and rhsMisc contain all props *except* for the easy ones
	        // like className and style that we already know how to merge.
	        const { children: _lhsChildren, class: _lhsClass, className: _lhsClassName, style: _lhsStyle, ref: _lhsRef, ...lhsMisc } = lhsAll;
	        const { children: _rhsChildren, class: _rhsClass, className: _rhsClassName, style: _rhsStyle, ref: _rhsRef, ...rhsMisc } = rhsAll;
	        const ret = {
	            ...lhsMisc,
	            ref: useMergedRefs()(lhsAll, rhsAll),
	            style: useMergedStyles(lhsAll, rhsAll),
	            className: useMergedClasses(lhsAll, rhsAll),
	            children: useMergedChildren(lhsAll, rhsAll),
	        };
	        if (ret.ref === undefined)
	            delete ret.ref;
	        if (ret.style === undefined)
	            delete ret.style;
	        if (ret.className === undefined)
	            delete ret.className;
	        if (ret.children === undefined)
	            delete ret.children;
	        // Now, do *everything* else
	        // Merge every remaining existing entry in lhs with what we've already put in ret.
	        //const lhsEntries = Object.entries(lhs) as [keyof T, T[keyof T]][];
	        const rhsEntries = Object.entries(rhsMisc);
	        for (const [rhsKey, rhsValue] of rhsEntries) {
	            const lhsValue = lhsMisc[rhsKey];
	            if (typeof lhsValue === "function" || typeof rhsValue === "function") {
	                // They're both functions that can be merged (or one's a function and the other's null).
	                // Not an *easy* case, but a well-defined one.
	                const merged = mergeFunctions(lhsValue, rhsValue);
	                ret[rhsKey] = merged;
	            }
	            else {
	                // Uh...we're here because one of them's null, right?
	                if (lhsValue == null && rhsValue == null) {
	                    if (rhsValue === null && lhsValue === undefined)
	                        ret[rhsKey] = rhsValue;
	                    else
	                        ret[rhsKey] = lhsValue;
	                }
	                if (lhsValue == null)
	                    ret[rhsKey] = rhsValue;
	                else if (rhsValue == null)
	                    ret[rhsKey] = lhsValue;
	                else if (rhsValue == lhsValue) ;
	                else {
	                    // Ugh.
	                    // No good strategies here, just log it if requested
	                    log?.(`The prop "${typeof rhsKey == "symbol" ? "<symbol>" : rhsKey}" cannot simultaneously be the values ${lhsValue} and ${rhsValue}. One must be chosen outside of useMergedProps.`);
	                    ret[rhsKey] = rhsValue;
	                }
	            }
	        }
	        return ret;
	    };
	}
	function mergeFunctions(lhs, rhs) {
	    if (!lhs)
	        return rhs;
	    if (!rhs)
	        return lhs;
	    return (...args) => {
	        const lv = lhs(...args);
	        const rv = rhs(...args);
	        if (lv instanceof Promise || rv instanceof Promise)
	            return Promise.all([lv, rv]);
	    };
	}
	/*
	function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

	    const id0: GenericGet<{}, "id", string> = "";
	    const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
	    //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
	    const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

	    type M1 = GenericGet<P, "style", string>;
	    type M2 = GenericGet<{}, "style", string>;
	    const m1: M1 = "";
	    const m2: M1 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m3: M1 = 0;

	    const m4: M2 = "";
	    const m5: M2 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m6: M2 = 0;

	    const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
	    const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
	    const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
	    const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
	    const p5 = useMergedProps<HTMLInputElement>()(props, {});
	    const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
	    const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


	    p1.id?.concat("");
	    p2.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p3.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p4.id?.concat("");


	    p5.id?.concat("");
	    p6.id?.concat("");
	    p7.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    p5.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p6.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p7.id.concat("");


	    if (p5.allowFullScreen === undefined) {}
	    else if (p5.allowFullScreen === false) {}
	    else if (p5.allowFullScreen === true) {}
	    else {
	        acceptsNever(p5.allowFullScreen);
	    }


	    if (p6.allowFullScreen === undefined) {}
	    else if (p6.allowFullScreen === false) {}
	    else if (p6.allowFullScreen === true) {}
	    else {
	        acceptsNever(p6.allowFullScreen);
	    }


	    if (p7.allowFullScreen === undefined) {}
	    else if (p7.allowFullScreen === false) {}
	    else if (p7.allowFullScreen === true) {}
	    else {
	        acceptsNever(p7.allowFullScreen);
	    }


	    // Make sure it works recursively
	    const r1a = useMergedProps<HTMLInputElement>()({}, p1);
	    const r1b = useMergedProps<HTMLInputElement>()(props, p1);
	    const r2a = useMergedProps<HTMLInputElement>()({}, p2);
	    const r2b = useMergedProps<HTMLInputElement>()(props, p2);
	    const r3a = useMergedProps<HTMLInputElement>()({}, p3);
	    const r3b = useMergedProps<HTMLInputElement>()(props, p3);
	    const r4a = useMergedProps<HTMLInputElement>()({}, p4);
	    const r4b = useMergedProps<HTMLInputElement>()(props, p4);
	    const r5a = useMergedProps<HTMLInputElement>()({}, p5);
	    const r5b = useMergedProps<HTMLInputElement>()(props, p5);
	    const r6a = useMergedProps<HTMLInputElement>()({}, p6);
	    const r6b = useMergedProps<HTMLInputElement>()(props, p6);
	    const r7a = useMergedProps<HTMLInputElement>()({}, p7);
	    const r7b = useMergedProps<HTMLInputElement>()(props, p7);


	    r1a.id?.concat("");
	    r1b.id?.concat("");
	    r2a.id?.concat("");
	    r2b.id?.concat("");
	    // @ts-expect-error    id can't be anything but undefined
	    r3a.id?.concat("");
	    r3b.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    r4a.id?.concat("");
	    r4b.id?.concat("");


	    r5a.id?.concat("");
	    r5b.id?.concat("");
	    r6a.id?.concat("");
	    r6b.id?.concat("");
	    r7a.id?.concat("");
	    r7b.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    r5a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r5b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7b.id.concat("");


	    if (r5a.allowFullScreen === undefined) {}
	    else if (r5a.allowFullScreen === false) {}
	    else if (r5a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5a.allowFullScreen);
	    }


	    if (r5b.allowFullScreen === undefined) {}
	    else if (r5b.allowFullScreen === false) {}
	    else if (r5b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5b.allowFullScreen);
	    }


	    if (r6a.allowFullScreen === undefined) {}
	    else if (r6a.allowFullScreen === false) {}
	    else if (r6a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6a.allowFullScreen);
	    }


	    if (r6b.allowFullScreen === undefined) {}
	    else if (r6b.allowFullScreen === false) {}
	    else if (r6b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6b.allowFullScreen);
	    }


	    if (r7a.allowFullScreen === undefined) {}
	    else if (r7a.allowFullScreen === false) {}
	    else if (r7a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7a.allowFullScreen);
	    }


	    if (r7b.allowFullScreen === undefined) {}
	    else if (r7b.allowFullScreen === false) {}
	    else if (r7b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7b.allowFullScreen);
	    }

	}
	function acceptsNever(n: never) {}
	*/

	function returnNull() { return null; }
	/**
	 * Allows accessing the element a ref references as soon as it does so.
	 * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
	 * adding a RefCallback and merging it with any existing ref that existed on the props.
	 *
	 * Don't forget to provide the Element as the type argument!
	 *
	 * @returns The element, and the sub-hook that makes it retrievable.
	 */
	function useRefElement(args) {
	    const { onElementChange, onMount, onUnmount } = (args ?? {});
	    useEnsureStability("useRefElement", onElementChange, onMount, onUnmount);
	    // Called (indirectly) by the ref that the element receives.
	    const handler = F((e, prevValue) => {
	        onElementChange?.(e, prevValue);
	        if (prevValue)
	            onUnmount?.(prevValue);
	        if (e)
	            onMount?.(e);
	    }, []);
	    // Let us store the actual (reference to) the element we capture
	    const [getElement, setElement] = usePassiveState(handler, returnNull);
	    // Create a RefCallback that's fired when mounted 
	    // and that notifies us of our element when we have it
	    const myRef = F((e) => {
	        if (e)
	            setElement(() => e);
	    }, []);
	    const useRefElementProps = F((props) => useMergedProps()({ ref: myRef }, props), []);
	    // Return both the element and the hook that modifies 
	    // the props and allows us to actually find the element
	    return {
	        useRefElementProps,
	        getElement
	    };
	}

	function useElementSize({ getObserveBox, onSizeChange }) {
	    useEnsureStability("useElementSize", getObserveBox, onSizeChange);
	    const [getSize, setSize] = usePassiveState(onSizeChange, returnNull$1);
	    const currentObserveBox = s(undefined);
	    const needANewObserver = F((element, observeBox) => {
	        if (element) {
	            const document = getDocument(element);
	            const window = document.defaultView;
	            const handleUpdate = () => {
	                if (element.isConnected) {
	                    const { clientWidth, scrollWidth, offsetWidth, clientHeight, scrollHeight, offsetHeight, clientLeft, scrollLeft, offsetLeft, clientTop, scrollTop, offsetTop } = element;
	                    setSize({ clientWidth, scrollWidth, offsetWidth, clientHeight, scrollHeight, offsetHeight, clientLeft, scrollLeft, offsetLeft, clientTop, scrollTop, offsetTop });
	                }
	            };
	            if (window && ("ResizeObserver" in window)) {
	                const observer = new ResizeObserver((_entries) => { handleUpdate(); });
	                observer.observe(element, { box: observeBox });
	                return () => observer.disconnect();
	            }
	            else {
	                document.addEventListener("resize", handleUpdate, { passive: true });
	                return () => document.removeEventListener("resize", handleUpdate);
	            }
	        }
	    }, []);
	    const { getElement, useRefElementProps } = useRefElement({ onElementChange: F((e) => needANewObserver(e, getObserveBox?.()), []) });
	    y(() => {
	        if (getObserveBox) {
	            if (currentObserveBox.current !== getObserveBox())
	                needANewObserver(getElement(), getObserveBox());
	        }
	    });
	    return {
	        getElement,
	        getSize,
	        useElementSizeProps: useRefElementProps
	    };
	}

	function capitalize(str) {
	    return (str[0].toUpperCase() + str.substr(1));
	}
	/**
	 * Inspects the element's style and determines the logical direction that text flows.
	 *
	 * Certain CSS properties, like `block-size`, respect the current writing mode and text direction.
	 * But `transform`, `clip`, etc. don't.
	 *
	 * This is provided so that CSS properties can consistently use those logical properties.
	 *
	 * See https://drafts.csswg.org/css-writing-modes/#logical-to-physical
	 *
	 * @returns An object containing the following functions:
	 * * `getLogicalDirection`: retrieves a `LogicalDirectionInfo` representing the current state of the element. (Function is constant between renders)
	 * * `convertElementSize`: When used in conjunction with `useElementSize`, allows you to retrieve the logical size of an element instead of the physical size.
	 * * `convertToLogicalOrientation`: Based on the current direction, converts "horizontal" or "vertical" to "inline" or "block".
	 * * `convertToPhysicalOrientation`:  Based on the current direction, converts "inline" or "block" to "horizontal" or "vertical".
	 */
	function useLogicalDirection({ onLogicalDirectionChange }) {
	    useEnsureStability("useLogicalDirection", onLogicalDirectionChange);
	    const [getComputedStyles, setComputedStyles] = usePassiveState(null, returnNull$1);
	    const { getElement, useRefElementProps } = useRefElement({
	        onElementChange: F((element) => {
	            if (element) {
	                setComputedStyles(window.getComputedStyle(element));
	            }
	        }, [])
	    });
	    // TODO: There's no way to refresh which writing mode we have once mounted.
	    //   A. There's no way to watch for CSS style changes
	    //   B. Calling getComputedStyle after every render for every element gets expensive fast and
	    //   C. Is not necessary for most use cases that will never switch writing-mode within a single component
	    //      (Those that do will need to mount and unmount the component that uses it)
	    //
	    // As a solution, here's a cheap workaround that checks when the element's size has changed,
	    // and if so, tests if the writing mode has changed too.
	    //
	    // This will work for at least some number of cases, but a better solution is still needed.
	    const { useElementSizeProps } = useElementSize({ onSizeChange: F(_ => onLogicalDirectionChange?.(getLogicalDirectionInfo()), []) });
	    const getLogicalDirectionInfo = F(() => {
	        const computedStyles = getComputedStyles();
	        if (computedStyles) {
	            const w = computedStyles.writingMode;
	            let d = computedStyles.direction;
	            const t = computedStyles.textOrientation;
	            if (t == "upright")
	                d = "ltr";
	            return ({ ...WritingModes[w || "horizontal-tb"][d || "ltr"] });
	        }
	        return null;
	    }, []);
	    //const [getLogicalDirectionInfo, setLogicalDirectionInfo] = usePassiveState<LogicalDirectionInfo>(onLogicalDirectionChange);
	    const convertToLogicalOrientation = F((elementOrientation, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        if (direction?.inlineOrientation === elementOrientation)
	            return "inline";
	        return "block";
	    }, []);
	    const convertToPhysicalSide = F((side, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        switch (side) {
	            case "block-start":
	                return M[(direction?.blockDirection ?? "ttb")[0]];
	            case "block-end":
	                return M[(direction?.blockDirection ?? "ttb")[2]];
	            case "inline-start":
	                return M[(direction?.inlineDirection ?? "ltr")[0]];
	            case "inline-end":
	                return M[(direction?.inlineDirection ?? "ltr")[2]];
	        }
	    }, []);
	    const convertToLogicalSide = F((side, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        if (direction?.inlineOrientation === "vertical") {
	            switch (side) {
	                case "top":
	                    return direction.inlineDirection === "ttb" ? "inline-start" : "inline-end";
	                case "bottom":
	                    return direction.inlineDirection === "btt" ? "inline-start" : "inline-end";
	                case "left":
	                    return direction.blockDirection === "ltr" ? "block-start" : "block-end";
	                case "right":
	                    return direction.blockDirection === "rtl" ? "block-start" : "block-end";
	            }
	        }
	        else if (direction?.inlineOrientation === "horizontal") {
	            switch (side) {
	                case "top":
	                    return direction.blockDirection === "ttb" ? "block-start" : "block-end";
	                case "bottom":
	                    return direction.blockDirection === "btt" ? "block-start" : "block-end";
	                case "left":
	                    return direction.inlineDirection === "ltr" ? "inline-start" : "inline-end";
	                case "right":
	                    return direction.inlineDirection === "rtl" ? "inline-start" : "inline-end";
	            }
	        }
	        /* eslint-disable no-debugger */
	        debugger;
	        console.assert(false);
	        return "inline-start";
	    }, []);
	    const convertToPhysicalOrientation = F((elementOrientation, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        if (elementOrientation == "inline") {
	            if (direction?.inlineOrientation == "horizontal")
	                return "horizontal";
	            return "vertical";
	        }
	        else {
	            if (direction?.blockOrientation == "vertical")
	                return "vertical";
	            return "horizontal";
	        }
	    }, []);
	    const convertElementSize = F((elementSize, direction) => {
	        direction ??= getLogicalDirectionInfo();
	        if (direction) {
	            const { inlineSize, blockSize, inlineDirection, blockDirection } = direction;
	            // Size is relatively simple
	            const clientInlineSize = elementSize[`client${capitalize(inlineSize)}`];
	            const clientBlockSize = elementSize[`client${capitalize(blockSize)}`];
	            const offsetInlineSize = elementSize[`offset${capitalize(inlineSize)}`];
	            const offsetBlockSize = elementSize[`offset${capitalize(blockSize)}`];
	            const scrollInlineSize = elementSize[`scroll${capitalize(inlineSize)}`];
	            const scrollBlockSize = elementSize[`scroll${capitalize(blockSize)}`];
	            const f1 = getPhysicalLeftTop(inlineDirection);
	            const f2 = getPhysicalRightBottom(inlineDirection);
	            const f3 = getPhysicalLeftTop(blockDirection);
	            const f4 = getPhysicalRightBottom(blockDirection);
	            const clientInlineInset = elementSize[`client${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`client${capitalize(f2)}`]);
	            const scrollInlineInset = elementSize[`scroll${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`scroll${capitalize(f2)}`]);
	            const offsetInlineInset = elementSize[`offset${capitalize(f1)}`] == undefined ? undefined : (elementSize[`offset${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`offset${capitalize(f2)}`]));
	            const clientBlockInset = elementSize[`client${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`client${capitalize(f4)}`]);
	            const scrollBlockInset = elementSize[`scroll${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`scroll${capitalize(f4)}`]);
	            const offsetBlockInset = elementSize[`offset${capitalize(f3)}`] == undefined ? undefined : (elementSize[`offset${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`offset${capitalize(f4)}`]));
	            return {
	                clientInlineSize,
	                scrollInlineSize,
	                offsetInlineSize,
	                clientBlockSize,
	                scrollBlockSize,
	                offsetBlockSize,
	                clientInlineInset,
	                scrollInlineInset,
	                offsetInlineInset,
	                clientBlockInset,
	                scrollBlockInset,
	                offsetBlockInset,
	            };
	        }
	        return null;
	    }, []);
	    return {
	        useLogicalDirectionProps: F((props) => useRefElementProps(useElementSizeProps(props)), []),
	        getElement,
	        getLogicalDirectionInfo,
	        convertToLogicalSize: convertElementSize,
	        convertToLogicalOrientation,
	        convertToPhysicalOrientation,
	        convertToLogicalSide,
	        convertToPhysicalSide
	    };
	}
	// Position requires us to sometimes use one property (like `left`)
	// or sometimes two (like `left` + `width`)
	function getPhysicalLeftTop(dir) { if (dir === "ltr" || dir == "rtl")
	    return "left"; return "top"; }
	function getPhysicalRightBottom(dir) { if (dir === "rtl")
	    return "width"; if (dir === "btt")
	    return "height"; return null; }
	// Helper for extracting info from "ltr", "ttb", etc.
	const M = {
	    t: "top",
	    b: "bottom",
	    l: "left",
	    r: "right"
	};
	const HorizontalTbLtr = {
	    inlineDirection: "ltr",
	    blockDirection: "ttb",
	    inlineOrientation: "horizontal",
	    blockOrientation: "vertical",
	    inlineSize: "width",
	    blockSize: "height",
	    leftRightDirection: "ltr",
	    overUnderDirection: "ttb"
	};
	const HorizontalTbRtl = {
	    ...HorizontalTbLtr,
	    inlineDirection: "rtl",
	};
	const VerticalRlLtr = {
	    inlineDirection: "ttb",
	    blockDirection: "rtl",
	    inlineOrientation: "vertical",
	    blockOrientation: "horizontal",
	    inlineSize: "height",
	    blockSize: "width",
	    leftRightDirection: "ttb",
	    overUnderDirection: "rtl"
	};
	const VerticalRlRtl = {
	    ...VerticalRlLtr,
	    inlineDirection: "btt"
	};
	const SidewaysRlLtr = { ...VerticalRlLtr };
	const SidewaysRlRtl = { ...VerticalRlRtl };
	const VerticalLrLtr = {
	    ...VerticalRlLtr,
	    blockDirection: "ltr",
	};
	const VerticalLrRtl = {
	    ...VerticalRlRtl,
	    blockDirection: "ltr",
	};
	const SidewaysLtLtr = {
	    ...VerticalLrLtr,
	    inlineDirection: "btt",
	    leftRightDirection: "btt",
	    overUnderDirection: "ltr"
	};
	const SidewaysLtRtl = {
	    ...SidewaysLtLtr,
	    inlineDirection: "ttb"
	};
	const HorizontalTb = {
	    ltr: HorizontalTbLtr,
	    rtl: HorizontalTbRtl
	};
	const VerticalRl = {
	    ltr: VerticalRlLtr,
	    rtl: VerticalRlRtl
	};
	const VerticalLr = {
	    ltr: VerticalLrLtr,
	    rtl: VerticalLrRtl
	};
	const SidewaysRl = {
	    ltr: SidewaysRlLtr,
	    rtl: SidewaysRlRtl
	};
	const SidewaysLr = {
	    ltr: SidewaysLtLtr,
	    rtl: SidewaysLtRtl
	};
	const WritingModes = {
	    "horizontal-tb": HorizontalTb,
	    "vertical-lr": VerticalLr,
	    "vertical-rl": VerticalRl,
	    "sideways-lr": SidewaysLr,
	    "sideways-rl": SidewaysRl
	};

	/**
	 * Slightly enhanced version of `useState` that includes a getter that remains constant
	 * (i.e. you can use it in `useEffect` and friends without it being a dependency).
	 *
	 * @param initialState
	 * @returns
	 */
	function useState(initialState) {
	    // We keep both, but overrride the `setState` functionality
	    const [state, setStateP] = d(initialState);
	    const ref = s(state);
	    // Hijack the normal setter function 
	    // to also set our ref to the new value
	    const setState = F(value => {
	        if (typeof value === "function") {
	            const callback = value;
	            setStateP(prevValue => {
	                const nextValue = callback(prevValue);
	                ref.current = nextValue;
	                return nextValue;
	            });
	        }
	        else {
	            ref.current = value;
	            setStateP(value);
	        }
	    }, []);
	    const getState = () => { return ref.current; };
	    console.assert(ref.current === state || (typeof state === "number" && isNaN(state)));
	    return [state, setState, getState];
	}

	const Table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";
	function base64(value) {
	    return Table[value];
	}
	function random6Bits() {
	    return Math.floor(Math.random() * 0b1000000);
	}
	function random64Bits() {
	    return [random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits()];
	}
	/**
	 * Returns a randomly-generated ID with an optional prefix.
	 * Note that if the prefix is *explicitly* set to "", then
	 * IDs that are not valid under HTML4 may be generated. Oh no.
	 */
	function generateRandomId(prefix) {
	    return `${prefix ?? "id-"}${random64Bits().map(n => base64(n)).join("")}`;
	}

	const previousInputs = new Map();
	const toRun = new Map();
	// TODO: Whether this goes in options.diffed or options._commit
	// is a post-suspense question.
	// Right now, using options._commit has the problem of running
	// *after* refs are applied, but we need to come before even that
	// so `ref={someStableFunction}` works.
	// 
	// Also it's private.
	//
	// ...
	// Well, useEvent or whatever is finally, finally 4 years later finally here
	// which is cool and means we won't need this at all soon.
	// So for now we'll stick with diff to prevent any weirdness with
	// commit being private and all.
	const commitName = "diffed";
	const originalCommit = l$1[commitName];
	const newCommit = (...args) => {
	    for (const [id, effectInfo] of toRun) {
	        const oldInputs = previousInputs.get(id);
	        if (argsChanged(oldInputs, effectInfo.inputs)) {
	            effectInfo.cleanup?.();
	            effectInfo.cleanup = effectInfo.effect();
	            previousInputs.set(id, effectInfo.inputs);
	        }
	    }
	    toRun.clear();
	    originalCommit?.(...args);
	};
	l$1[commitName] = newCommit;
	/**
	 * Semi-private function to allow stable callbacks even within `useLayoutEffect` and ref assignment.
	 *
	 * Every render, we send the arguments to be evaluated after diffing has completed,
	 * which happens before.
	 *
	 * @param effect
	 * @param inputs
	 */
	function useBeforeLayoutEffect(effect, inputs) {
	    /*(() => {
	        const cleanup = useRef<void | (() => void) | null>(null);
	        const prevArgsRef = useRef<Inputs>(null!);
	        if (argsChanged(inputs, prevArgsRef.current)) {
	            prevArgsRef.current = inputs!;
	            if (cleanup.current)
	                cleanup.current();
	            cleanup.current = effect();
	        }
	    })();*/
	    const [id] = d(() => generateRandomId());
	    toRun.set(id, { effect, inputs, cleanup: null });
	    y(() => {
	        return () => {
	            toRun.delete(id);
	            previousInputs.delete(id);
	        };
	    }, [id]);
	}
	function argsChanged(oldArgs, newArgs) {
	    return !!(!oldArgs ||
	        oldArgs.length !== newArgs?.length ||
	        newArgs?.some((arg, index) => arg !== oldArgs[index]));
	}

	const Unset = Symbol("unset");
	/**
	 * Given an input value, returns a constant getter function that can be used
	 * inside of `useEffect` and friends without including it in the dependency array.
	 *
	 * This uses `options.diffed` in order to run before everything, even
	 * ref assignment. This means this getter is safe to use anywhere ***except the render phase***.
	 *
	 * @param value
	 * @returns
	 */
	function useStableGetter(value) {
	    const ref = s(Unset);
	    useBeforeLayoutEffect(() => { ref.current = value; }, [value]);
	    return F(() => {
	        if (ref.current === Unset) {
	            throw new Error('Value retrieved from useStableGetter() cannot be called during render.');
	        }
	        return ref.current;
	    }, []);
	}

	/**
	 * Alternate useCallback() which always returns the same (wrapped) function reference
	 * so that it can be excluded from the dependency arrays of `useEffect` and friends.
	 *
	 * Do not use during the render phase!  `useLayoutEffect` is fine though.
	 */
	function useStableCallback(fn) {
	    const currentCallbackGetter = useStableGetter(fn);
	    return F((...args) => {
	        return currentCallbackGetter()(...args);
	    }, []);
	}

	/**
	 * Wrap the native `useEffect` to add arguments
	 * that allow accessing the previous value as the first argument,
	 * as well as the changes that caused the hook to be called as the second argument.
	 *
	 * @param effect
	 * @param inputs
	 * @param impl You can choose whether to use `useEffect` or `useLayoutEffect` by
	 * passing one of them as this argument. By default, it's `useEffect`.
	 */
	function useEffect(effect, inputs, impl = y) {
	    const prevInputs = s(undefined);
	    const effect2 = () => {
	        const changes = [];
	        if (inputs && prevInputs.current) {
	            for (let i = 0; i < Math.max(prevInputs.current.length, inputs.length); ++i) {
	                if (prevInputs.current[i] != inputs[i])
	                    changes[i] = { from: prevInputs.current[i], to: inputs[i] };
	            }
	        }
	        const ret = effect(prevInputs.current, changes);
	        prevInputs.current = inputs;
	        return ret;
	    };
	    impl(effect2, inputs);
	}

	/**
	 * Wrap the native `useLayoutEffect` to add arguments
	 * that allow accessing the previous value as the first argument,
	 * as well as the changes that caused the hook to be called as the second argument.
	 *
	 * @param effect
	 * @param inputs
	 */
	function useLayoutEffect(effect, inputs) {
	    return useEffect(effect, inputs, h);
	}

	function useTimeout({ timeout, callback, triggerIndex }) {
	    const stableCallback = useStableCallback(() => { startTimeRef.current = null; callback(); });
	    const getTimeout = useStableGetter(timeout);
	    // Set any time we start timeout.
	    // Unset any time the timeout completes
	    const startTimeRef = s(null);
	    const timeoutIsNull = (timeout == null);
	    // Any time the triggerIndex changes (including on mount)
	    // restart the timeout.  The timeout does NOT reset
	    // when the duration or callback changes, only triggerIndex.
	    y(() => {
	        if (!timeoutIsNull) {
	            const timeout = getTimeout();
	            console.assert(timeoutIsNull == (timeout == null));
	            if (timeout != null) {
	                startTimeRef.current = +(new Date());
	                const handle = setTimeout(stableCallback, timeout);
	                return () => clearTimeout(handle);
	            }
	        }
	    }, [triggerIndex, timeoutIsNull]);
	    const getElapsedTime = F(() => {
	        return (+(new Date())) - (+(startTimeRef.current ?? new Date()));
	    }, []);
	    const getRemainingTime = F(() => {
	        const timeout = getTimeout();
	        return timeout == null ? null : Math.max(0, timeout - getElapsedTime());
	    }, []);
	    return { getElapsedTime, getRemainingTime };
	}

	function useAsync({ debounce }) {
	    // Always represents whatever promise is currently being waited on, or null if none.
	    const [promise, setPromise, getPromise] = useState(null);
	    // Keep track of how many times we've actually called the async handler
	    const [runCount, setRunCount] = useState(0);
	    const [resolveCount, setResolveCount] = useState(0);
	    const [rejectCount, setRejectCount] = useState(0);
	    // Keep track of whether we're acting on a sync or async handler, just in case that's important.
	    // This can change if the handler switches between being sync or async, technically, and will be
	    // null until the first time the handler is called.
	    const [currentType, setCurrentType] = useState(null);
	    // If we're set to use a debounce, then when the timeout finishes,
	    // the promise from this state object is transferred over to either 
	    // the current promise or the pending promise.
	    const [debouncedPromiseStarter, setDebouncedPromiseStarter, getDebouncedPromiseStarter] = useState(null);
	    // When we want to start a new promise, we won't allow it to start if one is still running.
	    // In that case, we store the promise (or rather, a way to start the promise) in state.
	    const [pendingPromiseStarter, setPendingPromiseStarter, _getPendingPromiseStarter] = useState(null);
	    // We need to differentiate between `undefined` and "no error has been thrown",
	    // so we have two separate error state variables.
	    const [error, setError, _getError] = useState(undefined);
	    const [hasError, setHasError, _getHasError] = useState(false);
	    // When the debounce timer is up (or the user manually requests the debounce to end)
	    // run the normal "please consider running this promise" routine that we would
	    // have just run immediately if we weren't debouncing our promises.
	    const onDebounceTimeUp = F(() => {
	        const debouncedPromiseStarter = getDebouncedPromiseStarter();
	        if (debouncedPromiseStarter)
	            wantToStartANewPromise(debouncedPromiseStarter);
	        setDebouncedPromiseStarter(null);
	    }, [wantToStartANewPromise, setDebouncedPromiseStarter]);
	    // Handle the debounce. Logically this happens before the main step as a sort of step 0.
	    // Resets the timeout any time the handler was requested to be called again
	    // and when it finishes, actually call the handler (or set it as the pending promise)
	    useTimeout({
	        timeout: debounce ?? null,
	        callback: onDebounceTimeUp,
	        triggerIndex: debouncedPromiseStarter
	    });
	    // See if we should set our current promise to be whatever the pending promise is
	    // (usually because the current promise finished and became null).
	    useLayoutEffect(() => {
	        // Our current promise just finished and there's one waiting?
	        if (promise == null && pendingPromiseStarter != null) {
	            wantToStartANewPromise(pendingPromiseStarter);
	            setPendingPromiseStarter(null);
	        }
	    }, [promise, pendingPromiseStarter]);
	    const ret = {
	        useSyncHandler,
	        callCount: runCount,
	        pending: (promise != null),
	        hasError,
	        error,
	        resolveCount,
	        rejectCount,
	        flushDebouncedPromise: onDebounceTimeUp,
	        promise,
	        currentType,
	        settleCount: rejectCount + resolveCount
	    };
	    return ret;
	    // Called any time the async handler is about to be called for whatever reason,
	    // except for debounce, which comes first, as a sort of "step 0".
	    // Handles all the necessary boilerplate related to choosing whether to
	    // run or set as pending, resetting state variables, etc.
	    function wantToStartANewPromise(startPromise) {
	        const alreadyRunningPromise = (getPromise() != null);
	        // Boilerplate wrapper around the given promise starter
	        const startPromiseWithBoilerplate = () => {
	            // When it starts, notify the caller
	            setRunCount(r => ++r);
	            // When it completes, notify the caller
	            // When it fails, save the error and notify the caller
	            // When it settles, reset our state so we can run a pending promise if it exists
	            const onThen = (value) => { setResolveCount(c => ++c); return value; };
	            const onCatch = (ex) => { setError(ex); setHasError(true); setRejectCount(c => ++c); };
	            const onFinally = () => { setPromise(null); };
	            // Handle the special case where the handler is synchronous
	            let result;
	            try {
	                result = startPromise();
	                const isPromise = (result != null && typeof result == "object" && "then" in result);
	                if (result == null || !isPromise) {
	                    // It's synchronous and returned successfully.
	                    // Bail out early.
	                    onThen((result ?? undefined));
	                    onFinally();
	                    setCurrentType("sync");
	                }
	                else {
	                    result.then(onThen).catch(onCatch).finally(onFinally);
	                    setCurrentType("async");
	                }
	                return result;
	                //console.assert("then" in (result as Promise<any>));
	            }
	            catch (ex) {
	                // It's synchronous (or asynchronous but didn't await anything yet) and threw an error.
	                // Bail out early.
	                onCatch(ex);
	                onFinally();
	                setCurrentType("sync");
	                return;
	            }
	            // The handler is asynchronous
	            //setCurrentType("async");
	            //return (async () => { await result; })().then(onThen).catch(onCatch).finally(onFinally);
	        };
	        if (!alreadyRunningPromise) {
	            // Start the promise immediately, because there wasn't one running already.
	            const nextPromise = startPromiseWithBoilerplate();
	            const isPromise = (nextPromise != null && typeof nextPromise == "object" && "then" in nextPromise);
	            if (nextPromise == null || !isPromise) ;
	            else {
	                setError(undefined);
	                setHasError(false);
	                setPromise(nextPromise);
	            }
	        }
	        else {
	            // Don't start the promise yet, 
	            // and allow it to start in the future instead.
	            setPendingPromiseStarter(_ => startPromiseWithBoilerplate);
	        }
	    }
	    function useSyncHandler(asyncHandler) {
	        const syncHandler = useStableCallback(function syncHandler(...args) {
	            if (asyncHandler == null)
	                return;
	            const startPromise = () => asyncHandler(...args);
	            if (debounce == null) {
	                wantToStartANewPromise(startPromise);
	            }
	            else {
	                setDebouncedPromiseStarter(_ => startPromise);
	            }
	        });
	        return syncHandler;
	    }
	}

	/**
	 * Given an asyncronous event handler, returns a syncronous one that works on the DOM,
	 * along with some other information related to the current state.
	 * Does not modify any props.
	 *
	 * Note that because the handler you provide may be called with a delay, and
	 * because the value of, e.g., an `<input>` element will likely be stale by the
	 * time the delay is over, a `capture` function is necessary in order to
	 * capture the relevant information from the DOM. Any other simple event data,
	 * like `mouseX` or `shiftKey` can stay on the event itself and don't
	 * need to be captured &ndash; it's never stale.
	 *
	 * ```tsx
	 * const syncOnInput = async (value: number, e: Event) => {
	 *     [...] // Ex. send to a server and setState when done
	 * };
	 * const {
	 *     // When called, returns the synchronous event handler
	 *     useSyncHandler,
	 *     // True while the handler is running
	 *     pending,
	 *     // The error thrown, if any
	 *     error,
	 *     // Show this value while the operation's pending
	 *     currentCapture,
	 *     // And others, see `UseAsyncHandlerReturnType`
	 *     ...rest
	 * } = useAsyncHandler<HTMLInputElement>()({
	 *     // Pass in the capture function that saves event data
	 *     // from being stale.  Note that the async event handler
	 *     // isn't passed here, it's passed to `useSyncHandler` above.
	 *     capture: e => {
	 *         e.preventDefault();
	 *
	 *         // Save this value so that it's never stale
	 *         return e.currentTarget.valueAsNumber;
	 *     }
	 * });
	 *
	 * const onInput = useSyncHandler(someAsyncFunction);
	 * // OR the following, if you want the input entirely disabled while pending:
	 * const onInput = useSyncHandler(pending? null : someAsyncFunction);
	 * ```
	 *
	 * The handler is automatically throttled to only run one at a time.
	 * If the handler is called, and then before it finishes, is called again,
	 * it will be put on hold until the current one finishes, at which point
	 * the second one will run.  If the handler is called a third time before
	 * the first has finished, it will *replace* the second, so only the most
	 * recently called iteration of the handler will run.
	 *
	 *
	 * You may optionally *also* specify a debounce parameter that waits until the
	 * syncronous handler has not been called for the specified number of
	 * milliseconds, at which point we *actually* run the asyncronous handler
	 * according to the logic in the previous paragraph. This is in
	 * *addition* to throttling the handler, and does not replace that behavior.
	 */
	function useAsyncHandler() {
	    return function ({ capture, debounce }) {
	        const { callCount, currentType, error, flushDebouncedPromise, useSyncHandler, hasError, pending, rejectCount, resolveCount, settleCount, promise } = useAsync({ debounce });
	        // We need to differentiate between "nothing captured yet" and "`undefined` was captured"
	        const [currentCapture, setCurrentCapture, getCurrentCapture] = useState(undefined);
	        const [hasCapture, setHasCapture] = useState(false);
	        const ret = {
	            useSyncHandler: useSyncHandlerWithCapture,
	            getCurrentCapture,
	            callCount,
	            currentCapture,
	            hasCapture,
	            pending,
	            hasError,
	            error,
	            promise,
	            currentType,
	            flushDebouncedPromise,
	            resolveCount,
	            rejectCount,
	            settleCount
	        };
	        return ret;
	        function useSyncHandlerWithCapture(asyncHandler) {
	            const syncHandlerWrapper = useSyncHandler(asyncHandler);
	            const syncHandler = useStableCallback(function syncHandler(e) {
	                // Get the most significant information from the event at this time,
	                // which is necessary since the promise could actually be called much later
	                // when the element's value (etc.) has changed.
	                const captured = capture(e);
	                if (syncHandlerWrapper == null)
	                    return;
	                setCurrentCapture(captured);
	                setHasCapture(true);
	                syncHandlerWrapper(captured, e);
	            });
	            return syncHandler;
	        }
	    };
	}

	/**
	 * When used in tandem with `useRovingTabIndex`, allows control of
	 * the tabbable index with the arrow keys.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */
	function useLinearNavigation({ index, navigateToFirst, navigateToLast, navigateToNext, navigateToPrev, managedChildren, navigationDirection, disableArrowKeys, disableHomeEndKeys }) {
	    navigationDirection ??= "either";
	    const childCount = managedChildren.length;
	    // Make sure the tabbable index never escapes the bounds of all available children
	    // TODO: Keep track of the original index and keep it, at least until keyboard navigation.
	    useLayoutEffect(() => {
	        if (index !== null) {
	            if (index < 0) {
	                navigateToFirst();
	            }
	            else if (childCount > 0 && index >= childCount) {
	                navigateToLast();
	            }
	        }
	    }, [index, childCount, navigateToFirst, navigateToLast]);
	    const { getLogicalDirectionInfo, useLogicalDirectionProps } = useLogicalDirection({});
	    const onKeyDown = (e) => {
	        // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	        if (e.ctrlKey || e.metaKey)
	            return;
	        const info = getLogicalDirectionInfo();
	        const allowsBlockNavigation = (navigationDirection == "block" || navigationDirection == "either");
	        const allowsInlineNavigation = (navigationDirection == "inline" || navigationDirection == "either");
	        switch (e.key) {
	            case "ArrowUp": {
	                const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
	                const directionAllowed = (!disableArrowKeys && (info?.blockOrientation === "vertical" ? allowsBlockNavigation : allowsInlineNavigation));
	                if (directionAllowed) {
	                    if (info?.[propName] === "btt") {
	                        navigateToNext();
	                    }
	                    else {
	                        navigateToPrev();
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	            }
	            case "ArrowDown": {
	                const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
	                const directionAllowed = (!disableArrowKeys && (info?.blockOrientation === "vertical" ? allowsBlockNavigation : allowsInlineNavigation));
	                if (directionAllowed) {
	                    if (info?.[propName] === "btt") {
	                        navigateToPrev();
	                    }
	                    else {
	                        navigateToNext();
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	            }
	            case "ArrowLeft": {
	                const propName = (info?.inlineOrientation === "horizontal" ? "inlineDirection" : "blockDirection");
	                const directionAllowed = (!disableArrowKeys && (info?.inlineOrientation === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation));
	                if (directionAllowed) {
	                    if (info?.[propName] === "rtl") {
	                        navigateToNext();
	                    }
	                    else {
	                        navigateToPrev();
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	            }
	            case "ArrowRight": {
	                const propName = (info?.inlineOrientation === "horizontal" ? "inlineDirection" : "blockDirection");
	                const directionAllowed = (!disableArrowKeys && (info?.inlineOrientation === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation));
	                if (directionAllowed) {
	                    if (info?.[propName] === "rtl") {
	                        navigateToPrev();
	                    }
	                    else {
	                        navigateToNext();
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                e.preventDefault();
	                e.stopPropagation();
	                break;
	            }
	            case "Home":
	                if (!disableHomeEndKeys) {
	                    navigateToFirst();
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	            case "End":
	                if (!disableHomeEndKeys) {
	                    navigateToLast();
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	        }
	    };
	    return {
	        useLinearNavigationProps: F((props) => { return useLogicalDirectionProps(useMergedProps()({ onKeyDown }, props)); }, []),
	    };
	}
	/**
	 * Allows for the selection of a managed child by typing the given text associated with it.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */
	function useTypeaheadNavigation({ collator, getIndex, typeaheadTimeout, setIndex }) {
	    // For typeahead, keep track of what our current "search" string is (if we have one)
	    // and also clear it every 1000 ms since the last time it changed.
	    // Next, keep a mapping of typeahead values to indices for faster searching.
	    // And, for the user's sake, let them know when their typeahead can't match anything anymore
	    const [currentTypeahead, setCurrentTypeahead, getCurrentTypeahead] = useState(null);
	    useTimeout({ timeout: typeaheadTimeout ?? 1000, callback: () => { setCurrentTypeahead(null); setInvalidTypeahead(null); }, triggerIndex: currentTypeahead });
	    const sortedTypeaheadInfo = s([]);
	    const [invalidTypeahead, setInvalidTypeahead] = useState(false);
	    // Handle typeahead for input method editors as well
	    // Essentially, when active, ignore further keys 
	    // because we're waiting for a CompositionEnd event
	    const [, setImeActive, getImeActive] = useState(false);
	    // Because composition events fire *after* keydown events 
	    // (but within the same task, which, TODO, could be browser-dependent),
	    // we can use this to keep track of which event we're listening for on the first keydown.
	    const [nextTypeaheadChar, setNextTypeaheadChar] = useState(null);
	    useLayoutEffect(() => {
	        if (nextTypeaheadChar !== null) {
	            setCurrentTypeahead(typeahead => ((typeahead ?? "") + nextTypeaheadChar));
	            setNextTypeaheadChar(null);
	        }
	    }, [nextTypeaheadChar]);
	    const comparatorShared = useStableCallback((safeLhs, safeRhs) => {
	        let compare;
	        // For the purposes of typeahead, only compare a string of the same size as our currently typed string.
	        // By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.
	        safeLhs = safeLhs.normalize("NFD");
	        safeRhs = safeRhs.normalize("NFD");
	        if (collator)
	            compare = collator.compare(safeLhs, safeRhs);
	        else
	            compare = safeLhs.toLowerCase().localeCompare(safeRhs.toLowerCase() ?? "");
	        return compare;
	    });
	    const insertingComparator = useStableCallback((lhs, rhs) => {
	        if (typeof lhs === "string" && typeof rhs.text === "string") {
	            return comparatorShared(lhs, rhs.text);
	        }
	        return lhs - rhs;
	    });
	    const typeaheadComparator = useStableCallback((lhs, rhs) => {
	        if (typeof lhs === "string" && typeof rhs.text === "string") {
	            // During typeahead, all strings longer than ours should be truncated
	            // so that they're all considered equally by that point.
	            return comparatorShared(lhs, rhs.text.substring(0, lhs.length));
	        }
	        return lhs - rhs;
	    });
	    const useTypeaheadNavigationProps = F(function ({ ...props }) {
	        const onCompositionStart = (_e) => { setImeActive(true); };
	        const onCompositionEnd = (e) => {
	            setNextTypeaheadChar(e.data);
	            setImeActive(false);
	        };
	        const onKeyDown = (e) => {
	            const imeActive = getImeActive();
	            const key = e.key;
	            // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	            if (e.ctrlKey || e.metaKey)
	                return;
	            if (!imeActive && e.key === "Backspace") {
	                // Remove the last character in a way that doesn't split UTF-16 surrogates.
	                setCurrentTypeahead(t => t === null ? null : [...t].reverse().slice(1).reverse().join(""));
	                e.preventDefault();
	                e.stopPropagation();
	                return;
	            }
	            // The key property represents the typed character OR the "named key attribute" of the key pressed.
	            // There's no definite way to tell the difference, but for all intents and purposes
	            // there are no one-character names, and there are no non-ASCII-alpha names.
	            // Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.
	            const isCharacterKey = (key.length === 1 || !/^[A-Za-z]/.test(key));
	            if (isCharacterKey) {
	                if (key == " " && (getCurrentTypeahead() ?? "").trim().length == 0) ;
	                else {
	                    e.preventDefault();
	                    e.stopPropagation();
	                    // Note: Won't be true for the first keydown
	                    // but will be overwritten before useLayoutEffect is called
	                    // to actually apply the change
	                    if (!imeActive)
	                        setNextTypeaheadChar(key);
	                }
	            }
	        };
	        return useMergedProps()({ onKeyDown, onCompositionStart, onCompositionEnd, }, props);
	    }, []);
	    // Handle changes in typeahead that cause changes to the tabbable index
	    y(() => {
	        if (currentTypeahead && sortedTypeaheadInfo.current.length) {
	            const sortedTypeaheadIndex = binarySearch(sortedTypeaheadInfo.current, currentTypeahead, typeaheadComparator);
	            if (sortedTypeaheadIndex < 0) {
	                // The user has typed an entry that doesn't exist in the list
	                // (or more specifically "for which there is no entry that starts with that input")
	                setInvalidTypeahead(true);
	            }
	            else {
	                setInvalidTypeahead(false);
	                /*
	                  We know roughly where, in the sorted array of strings, our next typeahead location is.
	                  But roughly isn't good enough if there are multiple matches.
	                  To convert our sorted index to the unsorted index we need, we have to find the first
	                  element that matches us *and* (if any such exist) is *after* our current selection.

	                  In other words, the only way typeahead moves backwards relative to our current
	                  position is if the only other option is behind us.

	                  It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
	                  Though there's also a case for just going upwards to the nearest to prevent jumpiness.
	                  But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
	                  I dunno. Going back to the start is the simplist though.

	                  Basically what this does: Starting from where we found ourselves after our binary search,
	                  scan backwards and forwards through all adjacent entries that also compare equally so that
	                  we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
	                  (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).

	                  TODO: The binary search starts this off with a solid O(log n), but one-character
	                  searches are, thanks to pigeonhole principal, eventually guaranteed to become
	                  O(n*log n). This is annoying but probably not easily solvable? There could be an
	                  exception for one-character strings, but that's just kicking the can down
	                  the road. Maybe one or two characters would be good enough though.
	                */
	                // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.
	                let lowestUnsortedIndexAll = null;
	                let lowestSortedIndexAll = sortedTypeaheadIndex;
	                // These two are only set for elements that are ahead of us, but the principle's the same otherwise
	                let lowestUnsortedIndexNext = null;
	                let lowestSortedIndexNext = sortedTypeaheadIndex;
	                const updateBestFit = (u) => {
	                    if (lowestUnsortedIndexAll == null || u < lowestUnsortedIndexAll) {
	                        lowestUnsortedIndexAll = u;
	                        lowestSortedIndexAll = i;
	                    }
	                    if ((lowestUnsortedIndexNext == null || u < lowestUnsortedIndexNext) && u > (getIndex() ?? -Infinity)) {
	                        lowestUnsortedIndexNext = u;
	                        lowestSortedIndexNext = i;
	                    }
	                };
	                let i = sortedTypeaheadIndex;
	                while (i >= 0 && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	                    updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	                    --i;
	                }
	                i = sortedTypeaheadIndex;
	                while (i < sortedTypeaheadInfo.current.length && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	                    updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	                    ++i;
	                }
	                if (lowestUnsortedIndexNext !== null)
	                    setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex);
	                else if (lowestUnsortedIndexAll !== null)
	                    setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex);
	            }
	        }
	    }, [currentTypeahead]);
	    const useTypeaheadNavigationChild = F(({ text, ...i }) => {
	        y(() => {
	            if (text) {
	                // Find where to insert this item.
	                // Because all index values should be unique, the returned sortedIndex
	                // should always refer to a new location (i.e. be negative)                
	                const sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, insertingComparator);
	                console.assert(sortedIndex < 0 || sortedTypeaheadInfo.current[sortedIndex].text == text);
	                if (sortedIndex < 0) {
	                    sortedTypeaheadInfo.current.splice(-sortedIndex - 1, 0, { text, unsortedIndex: i.index });
	                }
	                else {
	                    sortedTypeaheadInfo.current.splice(sortedIndex, 0, { text, unsortedIndex: i.index });
	                }
	                return () => {
	                    // When unmounting, find where we were and remove ourselves.
	                    // Again, we should always find ourselves because there should be no duplicate values if each index is unique.
	                    const sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, insertingComparator);
	                    console.assert(sortedIndex < 0 || sortedTypeaheadInfo.current[sortedIndex].text == text);
	                    if (sortedIndex >= 0) {
	                        sortedTypeaheadInfo.current.splice(sortedIndex, 1);
	                    }
	                };
	            }
	        }, [text]);
	        return {};
	    }, []);
	    return {
	        useTypeaheadNavigationChild,
	        useTypeaheadNavigationProps,
	        currentTypeahead,
	        invalidTypeahead,
	    };
	}
	/**
	 * Your usual binary search implementation.
	 *
	 * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
	 * @param array The array to search through
	 * @param wanted The value you'd like to find
	 * @param comparator Compares `wanted` with the current value in `array`
	 * @returns A non-negative value if `wanted` was found, and a negative number if not.
	 * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
	 */
	function binarySearch(array, wanted, comparator) {
	    let firstIndex = 0;
	    let lastIndex = array.length - 1;
	    while (firstIndex <= lastIndex) {
	        const testIndex = (lastIndex + firstIndex) >> 1;
	        const comparisonResult = comparator(wanted, array[testIndex]);
	        if (comparisonResult > 0) {
	            firstIndex = testIndex + 1;
	        }
	        else if (comparisonResult < 0) {
	            lastIndex = testIndex - 1;
	        }
	        else {
	            return testIndex;
	        }
	    }
	    return -firstIndex - 1;
	}

	/**
	 * Allows a parent component to access information about certain
	 * child components once they have rendered.
	 *
	 * This hook is slightly more complicated in that it returns both a
	 * prop-modifying hook, but also a hook that each child will need
	 * to use: `useManagedChild`.  It's stable across renders, so just
	 * toss it into a `Context` so the children can have access to it.
	 * This function registers the child with the parent and provides
	 * it with any requested information, but doesn't do anything else
	 * until it unmounts and retracts that information.
	 */
	function useChildManager() {
	    // This is blindly updated any time a child mounts or unmounts itself.
	    // Used to make sure that any time the array of managed children updates,
	    // we also re-render.
	    const [_childUpdateIndex, setChildUpdateIndex] = useState(0);
	    const [totalChildrenMounted, setTotalChildrenMounted, getTotalChildrenMounted] = useState(0);
	    const [totalChildrenUnounted, setTotalChildrenUnounted, _getTotalChildrenUnounted] = useState(0);
	    const childrenCurrentlyMounted = totalChildrenMounted - totalChildrenUnounted;
	    const managedChildren = s([] /** TODO: Any problems caused by using an array when it should be an object? */);
	    const mountedChildren = s([]);
	    const mountOrder = s(new Map());
	    const indicesByElement = s(new Map());
	    const deletedIndices = s(new Set());
	    // Used to keep track of indices that have "over-mounted" and by how much.
	    // We need this so that we don't erase saved information when a component
	    // "overmounts" over another which then, correctly, switches *itself* to something else.
	    // In general, this should only happen when components are swapping between indices.
	    // By the time they're done, this map should be all 0s again, at which point
	    // it's okay to actually run the unmount code.
	    // 
	    // TODO: throw a console.assert somewhere to make up for the lost 
	    // "are you sure you want to overwrite this child's index!" assertion.
	    // Namely, is this map all 0s when the parent element re-renders? 
	    // Probably not because of setChildUpdateIndex
	    const overmountCount = s(new Map());
	    const getMountIndex = F((index) => { return mountOrder.current.get(index); }, []);
	    const useManagedChild = F((info) => {
	        const { getElement, useRefElementProps } = useRefElement({ onElementChange: F((element) => {
	                if (element) {
	                    indicesByElement.current.set(element, info.index);
	                    deletedIndices.current.delete(info.index);
	                    if (managedChildren.current[info.index] != undefined) {
	                        overmountCount.current.set(info.index, (overmountCount.current.get(info.index) ?? 0) + 1);
	                    }
	                    setChildUpdateIndex(c => ++c);
	                    managedChildren.current[info.index] = { ...info };
	                    return () => {
	                        setChildUpdateIndex(c => ++c);
	                        if ((overmountCount.current.get(info.index) ?? 0) > 0) {
	                            overmountCount.current.set(info.index, (overmountCount.current.get(info.index) ?? 0) - 1);
	                        }
	                        else {
	                            delete managedChildren.current[info.index];
	                            deletedIndices.current.add(info.index);
	                            if (typeof info.index === "number") {
	                                while (managedChildren.current.length && managedChildren.current[managedChildren.current.length - 1] === undefined)
	                                    managedChildren.current.length -= 1;
	                            }
	                            indicesByElement.current.delete(element);
	                        }
	                    };
	                }
	            }, []) });
	        useLayoutEffect(() => {
	            const index = getTotalChildrenMounted();
	            mountOrder.current.set(info.index, index);
	            mountedChildren.current[index] = info;
	            setTotalChildrenMounted(t => ++t);
	            return () => {
	                mountOrder.current.delete(info.index);
	                mountedChildren.current[index] = null;
	                setTotalChildrenUnounted(t => ++t);
	            };
	        }, [info.index]);
	        // Any time our child props change, make that information available generally.
	        // *Don't re-render*, otherwise we'd be stuck in an
	        // infinite loop every time an anonymous function is passed.
	        // It comes in from the props so the child was already updated by it --
	        // we don't need the parent to re-render every single child any time
	        // "onClick" updates or whatever.  The relevant child already knows,
	        // and that's what matters.
	        useLayoutEffect(() => {
	            if (managedChildren.current[info.index] != undefined)
	                managedChildren.current[info.index] = { ...info };
	        }, [...Object.entries(info).flat()]);
	        return { getElement, useManagedChildProps: useRefElementProps };
	    }, []);
	    return {
	        useManagedChild,
	        childCount: childrenCurrentlyMounted,
	        managedChildren: managedChildren.current,
	        mountedChildren: mountedChildren.current,
	        indicesByElement: indicesByElement.current,
	        totalChildrenMounted,
	        totalChildrenUnounted,
	        getMountIndex,
	        deletedIndices: deletedIndices.current
	    };
	}
	/**
	 * Helper function for letting children know when they are or are not the
	 * current selected/expanded/focused/whatever child.
	 *
	 * Automatically handles when children are mounted & unmounted and such.
	 *
	 * While it will be called once for every child on mount, after that setFlag
	 * is guaranteed to only be called once on activation and once on deactivation,
	 * so it's generally safe to put side effects inside if necessary.
	 * It's also safe to make it non-stable.
	 *
	 * @param activatedIndex What index the current selected (etc.) child is
	 * @param length How many children exist (as managedChildren.length)
	 * @param setFlag A function that probably looks like (i, flag) => managedChildren[i].setActive(flag)
	 * @param useEffect Which version of useEffect to use. Default is `useLayoutEffect`.
	 */
	function useChildFlag({ activatedIndex, closestFit, managedChildren, setChildFlag, getChildFlag, useEffect }) {
	    useEffect ??= useLayoutEffect;
	    if (closestFit)
	        console.assert(typeof activatedIndex == "number" || activatedIndex == null);
	    // Whenever we re-render, make sure that any children that have mounted
	    // have their flags properly set.  We know it's unset if it was null,
	    // in which case we just set it to true or false.
	    //
	    // And, I mean, as long as we're already iterating through every child
	    // on every render to check for newly mounted children, might as well
	    // just handle changed in the activatedIndex here too.
	    useEffect(() => {
	        // TODO: We have limited information about when a child mounts or unmounts
	        // and so we don't know where to look for any null entries that need changing.
	        // We know when activatedIndex changes and what it was, but not much else.
	        // Looping over every child *works*, and it's not an expensive loop by any means,
	        // but, like, eugh.
	        // Also, before we do anything, see if we need to "correct" activatedIndex.
	        // It could be pointing to a child that doesn't exist, and if closestFit is given,
	        // we need to adjust activatedIndex to point to a valid child.
	        if (typeof activatedIndex == "number" && Array.isArray(managedChildren) && managedChildren[activatedIndex] == null) {
	            // Oh dear. Are we actively correcting this?
	            if (closestFit) {
	                // Oh dear.
	                // Search up and down the list of children for any that actually exist.
	                let searchHigh = activatedIndex + 1;
	                let searchLow = activatedIndex - 1;
	                while ((searchLow >= 0 && managedChildren[searchLow] == null) || (searchHigh < managedChildren.length && managedChildren[searchHigh] == null)) {
	                    ++searchHigh;
	                    --searchLow;
	                }
	                if (searchLow >= 0 && managedChildren[searchLow] != null) {
	                    activatedIndex = searchLow;
	                }
	                else if (searchHigh < managedChildren.length && managedChildren[searchHigh] != null) {
	                    activatedIndex = searchHigh;
	                }
	                // Now that we've done that, if any valid children exist, we've reset activatedIndex to point to it instead.
	                // Now we'll fall through to the for loop set and unset our flags based on this "corrected" value.
	                //
	                // We don't correct it or save it anywhere because we'd very much like to return to it
	                // if the child remounts itself.
	            }
	        }
	        if (Array.isArray(managedChildren)) {
	            for (let i = 0; i < managedChildren.length; ++i) {
	                const shouldBeSet = (i == activatedIndex);
	                if (getChildFlag(i) != shouldBeSet) {
	                    setChildFlag(i, shouldBeSet);
	                }
	            }
	        }
	        else {
	            Object.entries(managedChildren).forEach(([i, _info]) => {
	                const shouldBeSet = (i == activatedIndex);
	                if (getChildFlag(i) != shouldBeSet) {
	                    setChildFlag(i, shouldBeSet);
	                }
	            });
	        }
	    });
	}

	/**
	 * Returns a function that will, when called, force the component
	 * that uses this hook to re-render itself.
	 *
	 * It's a bit smelly, so best to use sparingly.
	 */
	function useForceUpdate() {
	    const [, set] = d(0);
	    return s(() => set(i => ++i)).current;
	}

	/**
	 * Implements a roving tabindex system where only one "focusable"
	 * component in a set is able to receive a tab focus. *Which*
	 * of those elements receives focus is determined by you, but it's
	 * recommended to offload that logic then to another hook, like
	 * `useLinearNavigation`, which lets you change the tabbable
	 * element with the arrow keys, `useTypeaheadNavigation`, which
	 * lets you change the tabbable index with typeahead, or
	 * `useListNavigation` if you just want everything bundled together.
	 *
	 * Note that the child hook returned by this function must be used
	 * by every child that uses this roving tabindex logic.  The
	 * prop-modifying hook *that* hook returns should then be used
	 * on the child's element, as well as any other elements you'd like
	 * to be explicitly made untabbable too.
	 *
	 * `shouldFocusOnChange` should return true if focus is
	 * contained within whatever element contains the roving tab index.
	 * Generally as simple as the following:
	 * ```
	 * const [focusedInner, setFocusedInner] = useState(false);
	 * const { useHasFocusProps } = useHasFocus<ParentElement>({ setFocusedInner });
	 * const focusOnChange = (focusedInner != false);
	 * ```
	 * It's not included here because `useRovingTabIndex` doesn't know
	 * anything about the container element, only children elements.
	 * And just as well! Children should be allowed at the root,
	 * regardless of if it's the whole app or just a given component.
	 */
	function useRovingTabIndex({ shouldFocusOnChange: foc, tabbableIndex }) {
	    const getShouldFocusOnChange = useStableGetter(foc);
	    const getTabbableIndex = useStableGetter(tabbableIndex);
	    // Call the hook that allows us to collect information from children who provide it
	    const { managedChildren, childCount, useManagedChild, indicesByElement, ...rest } = useChildManager();
	    // Any time the tabbable index changes,
	    // notify the previous child that it's no longer tabbable,
	    // and notify the next child that is allowed to be tabbed to.
	    useChildFlag({
	        activatedIndex: tabbableIndex,
	        managedChildren,
	        closestFit: true,
	        setChildFlag: (index, tabbable) => {
	            if (index != null)
	                managedChildren[index]?.setTabbable(tabbable);
	        },
	        getChildFlag: (index) => (managedChildren[index]?.getTabbable() ?? null)
	    });
	    const useRovingTabIndexChild = F((info) => {
	        const [rrafIndex, setRrafIndex] = useState(1);
	        const rerenderAndFocus = F(() => { setRrafIndex(i => ++i); }, []);
	        const [tabbable, setTabbable, getTabbable] = useState(null);
	        const newInfo = {
	            ...info,
	            rerenderAndFocus,
	            setTabbable: F((tabbable) => { setTabbable(tabbable); }, []),
	            getTabbable
	        };
	        const { getElement, useManagedChildProps } = useManagedChild(newInfo);
	        y(() => {
	            const element = getElement();
	            if (tabbable) {
	                const shouldFocusOnChange = getShouldFocusOnChange()();
	                if (shouldFocusOnChange && "focus" in element) {
	                    requestAnimationFrame(() => {
	                        queueMicrotask(() => {
	                            element.focus();
	                        });
	                    });
	                }
	            }
	        }, [tabbable, rrafIndex]);
	        function useRovingTabIndexSiblingProps({ tabIndex, ...props }) {
	            if (tabIndex == null) {
	                if (tabbable)
	                    tabIndex = 0;
	                else
	                    tabIndex = -1;
	            }
	            return useMergedProps()({ tabIndex }, props);
	        }
	        function useRovingTabIndexChildProps({ tabIndex, ...props }) {
	            if (tabIndex == null) {
	                if (tabbable)
	                    tabIndex = 0;
	                else
	                    tabIndex = -1;
	            }
	            return useMergedProps()(useManagedChildProps({ tabIndex }), props);
	        }
	        return {
	            useRovingTabIndexChildProps,
	            useRovingTabIndexSiblingProps,
	            tabbable
	        };
	    }, [useManagedChild]);
	    return {
	        useRovingTabIndexChild,
	        childCount,
	        managedChildren,
	        indicesByElement,
	        focusCurrent: F(() => {
	            if (managedChildren[getTabbableIndex() ?? 0].getTabbable()) {
	                managedChildren[getTabbableIndex() ?? 0]?.rerenderAndFocus();
	            }
	            else {
	                // For whatever reason, the previously tabbable child
	                // is no longer tabbable without us knowing about it.
	                // Maybe it unmounted?
	                // Either way, try to find the newly-selected child.
	                // (I don't think this code path has ever been run)
	                /* eslint-disable no-debugger */
	                debugger;
	                let i = getTabbableIndex() ?? 0;
	                let j = i + 1;
	                while (i >= 0) {
	                    --i;
	                    if (managedChildren[getTabbableIndex() ?? 0].getTabbable()) {
	                        managedChildren[getTabbableIndex() ?? 0]?.rerenderAndFocus();
	                        return;
	                    }
	                }
	                while (j < managedChildren.length) {
	                    ++j;
	                    if (managedChildren[getTabbableIndex() ?? 0].getTabbable()) {
	                        managedChildren[getTabbableIndex() ?? 0]?.rerenderAndFocus();
	                        return;
	                    }
	                }
	            }
	        }, []),
	        ...rest
	    };
	}

	function identity$1(t) { return t; }
	/**
	 * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
	 *
	 * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
	 * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any any text for typeahead to focus the next item that matches.
	 */
	function useListNavigation({ initialIndex, shouldFocusOnChange, collator, keyNavigation, indexMangler, indexDemangler }) {
	    indexMangler ??= identity$1;
	    indexDemangler ??= identity$1;
	    keyNavigation ??= "either";
	    useEnsureStability("useListNavigation", indexMangler, indexDemangler);
	    // Keep track of three things related to the currently tabbable element's index:
	    // What it is, and whether, when we render this component and it's changed, to also focus the element that was made tabbable.
	    const [tabbableIndex, setTabbableIndex, getTabbableIndex] = useState(initialIndex === undefined ? 0 : initialIndex);
	    const { managedChildren, indicesByElement, useRovingTabIndexChild, focusCurrent, ...rest } = useRovingTabIndex({ shouldFocusOnChange, tabbableIndex });
	    /*const navigateToIndex = useCallback((i: number | null) => { setTabbableIndex(i); }, []);
	    const navigateToFirst = useCallback(() => { tryNavigateToIndex(managedChildren,) setTabbableIndex(indexMangler!(0)); }, []);
	    const navigateToLast = useCallback(() => { setTabbableIndex(indexMangler!(managedChildren.length - 1)); }, []);
	    const navigateToPrev = useCallback(() => { setTabbableIndex(i => indexMangler!(indexDemangler!(i ?? 0) - 1)) }, [indexDemangler, indexMangler]);
	    const navigateToNext = useCallback(() => { setTabbableIndex(i => indexMangler!(indexDemangler!(i ?? 0) + 1)) }, [indexDemangler, indexMangler]);
	*/
	    const navigateToIndex = F((i) => {
	        setTabbableIndex(i == null ? null : tryNavigateToIndex(managedChildren, 0, i, 1, indexMangler ?? identity$1, indexDemangler ?? identity$1));
	    }, []);
	    const navigateToFirst = F(() => {
	        setTabbableIndex(tryNavigateToIndex(managedChildren, 0, 0, 1, indexMangler ?? identity$1, indexDemangler ?? identity$1));
	    }, []);
	    const navigateToLast = F(() => { setTabbableIndex(tryNavigateToIndex(managedChildren, managedChildren.length, managedChildren.length, -1, indexMangler ?? identity$1, indexDemangler ?? identity$1)); }, []);
	    const navigateToPrev = F(() => {
	        setTabbableIndex(c => {
	            return tryNavigateToIndex(managedChildren, c ?? 0, (c ?? 0) - 1, -1, indexMangler ?? identity$1, indexDemangler ?? identity$1);
	        });
	    }, []);
	    const navigateToNext = F(() => {
	        setTabbableIndex(c => {
	            return tryNavigateToIndex(managedChildren, c ?? 0, (c ?? 0) + 1, 1, indexMangler ?? identity$1, indexDemangler ?? identity$1);
	        });
	    }, []);
	    const setIndex = F((index) => {
	        setTabbableIndex(index);
	    }, []);
	    const { currentTypeahead, invalidTypeahead, useTypeaheadNavigationChild, useTypeaheadNavigationProps } = useTypeaheadNavigation({ collator, getIndex: getTabbableIndex, setIndex, typeaheadTimeout: 1000 });
	    const { useLinearNavigationProps } = useLinearNavigation({ navigationDirection: keyNavigation, index: getTabbableIndex() ?? 0, managedChildren, navigateToPrev, navigateToNext, navigateToFirst, navigateToLast });
	    const useListNavigationProps = F((props) => {
	        return useLinearNavigationProps(useTypeaheadNavigationProps(props));
	    }, [useLinearNavigationProps, useTypeaheadNavigationProps]);
	    const useListNavigationChild = F((info) => {
	        useTypeaheadNavigationChild(info);
	        //const { useLinearNavigationChildProps } = useLinearNavigationChild(info as I);
	        const { useRovingTabIndexChildProps, useRovingTabIndexSiblingProps, tabbable } = useRovingTabIndexChild(info);
	        const useListNavigationChildProps = function ({ ...props }) {
	            return useMergedProps()(useRovingTabIndexChildProps((({ onClick: roveToSelf, hidden: info.hidden }))), props);
	        };
	        const roveToSelf = F(() => { navigateToIndex(info.index); }, []);
	        return {
	            useListNavigationChildProps,
	            useListNavigationSiblingProps: useRovingTabIndexSiblingProps,
	            tabbable
	        };
	    }, [useTypeaheadNavigationChild, useRovingTabIndexChild, navigateToIndex]);
	    return {
	        useListNavigationChild,
	        useListNavigationProps,
	        currentTypeahead,
	        invalidTypeahead,
	        tabbableIndex,
	        managedChildren,
	        indicesByElement,
	        navigateToIndex,
	        navigateToNext,
	        navigateToPrev,
	        navigateToFirst,
	        navigateToLast,
	        focusCurrent,
	        ...rest
	    };
	}
	function tryNavigateToIndex(managedCells, initial, target, searchDirection, indexMangler, indexDemangler) {
	    function helper() {
	        if (searchDirection === -1) {
	            while (target >= 0 && (managedCells[target] == null || !!managedCells[target]?.hidden))
	                target = indexMangler(indexDemangler(target) - 1);
	            return target < 0 ? initial : target;
	        }
	        else if (searchDirection === 1) {
	            while (target < managedCells.length && managedCells[target] == null || !!managedCells[target]?.hidden)
	                target = indexMangler(indexDemangler(target) + 1);
	            return target >= managedCells.length ? initial : target;
	        }
	        else {
	            return initial;
	        }
	    }
	    return (helper());
	}

	function identity(t) { return t; }
	function useGridNavigation({ shouldFocusOnChange, indexMangler, indexDemangler }) {
	    indexMangler ??= identity;
	    indexDemangler ??= identity;
	    const getFocusCellOnRowChange = useStableCallback(shouldFocusOnChange);
	    // Keep track of our currently tabbable row and column.
	    // These are mangled, and so relative to the DOM order, not component order.
	    // Any operations done on these numbers need to be demangled first,
	    // otherwise they'll be incorrect.
	    const [currentRow, setCurrentRow2, getCurrentRow] = useState(0);
	    const [currentColumn, setCurrentColumn2, getCurrentColumn] = useState(0);
	    // Functions used for navigating to different rows.
	    // Each row has its own useRovingTabIndex -- if it's not the 
	    // current row, then all of its children are non-tabbable.
	    // Otherwise, it is tabbable, with the tabbable cell being currentColumn.
	    // This happens automatically when these functions are called.
	    const navigateToFirstRow = F(() => { setCurrentRow2(c => tryNavigateToIndex(managedRows, c ?? 0, 0, 1, indexMangler, indexDemangler)); }, [indexMangler, indexDemangler]);
	    const navigateToLastRow = F(() => { setCurrentRow2(c => tryNavigateToIndex(managedRows, c ?? 0, managedRows.length - 1, -1, indexMangler, indexDemangler)); }, [indexMangler, indexDemangler]);
	    const navigateToPrevRow = F(() => { setCurrentRow2(c => { return tryNavigateToIndex(managedRows, c ?? 0, indexMangler(Math.max(0, indexDemangler(c ?? 0) - 1)), -1, indexMangler, indexDemangler); }); }, [indexMangler, indexDemangler]);
	    const navigateToNextRow = F(() => { setCurrentRow2(c => { return tryNavigateToIndex(managedRows, c ?? 0, indexMangler(Math.min((managedRows.length - 1), indexDemangler(c ?? 0) + 1)), 1, indexMangler, indexDemangler); }); }, [indexMangler, indexDemangler]);
	    // Track child rows and manage keyboard navigation among them.
	    const { childCount, managedChildren: managedRows, useManagedChild: useManagedRow } = useChildManager();
	    const { useLinearNavigationProps: useLinearNavigationRowProps } = useLinearNavigation({
	        managedChildren: managedRows,
	        index: indexMangler(getCurrentRow() ?? 0),
	        navigateToFirst: navigateToFirstRow,
	        navigateToLast: navigateToLastRow,
	        navigateToNext: navigateToNextRow,
	        navigateToPrev: navigateToPrevRow,
	        navigationDirection: "block"
	    });
	    // Actually handle notifying the relevant rows when they
	    // change from untabbable to tabbable or vice-versa.
	    useChildFlag({
	        activatedIndex: currentRow,
	        managedChildren: managedRows,
	        setChildFlag: (index, tabbable) => { managedRows[index]?.setIsTabbableRow(tabbable); },
	        getChildFlag: (index) => (managedRows[index]?.getIsTabbableRow() ?? null),
	        useEffect: useEffect
	    });
	    /**
	     * Optional, but provides typeahead for each column in the table.
	     */
	    const useGridNavigationColumn = F(() => {
	        const { currentTypeahead, invalidTypeahead, useTypeaheadNavigationChild } = useTypeaheadNavigation({ getIndex: getCurrentRow, setIndex: setCurrentRow2 });
	        const useGridNavigationColumnChild = F(({ index: rowIndex, text, hidden }) => {
	            useTypeaheadNavigationChild({ index: rowIndex, text: hidden ? null : text });
	        }, [useTypeaheadNavigationChild]);
	        return { useGridNavigationColumnChild, currentTypeahead, invalidTypeahead };
	    }, []);
	    // Last thing before we return -- here's the hook for individual rows and their cells.
	    const useGridNavigationRow = F(({ index: rowIndex, hidden, ...info }) => {
	        // When we change the current column, we send that information
	        // to the parent via setState, but that doesn't do anything
	        // for us.  The parent doesn't ever manage rows' cells for them.
	        // 
	        // So to get us to also update alongside the parent,
	        // we just use forceUpdate.
	        // We could also keep a copy of, like, "what this row thinks
	        // the current column is" that *should* always be kept in-
	        // sync with "getCurrentColumn()" as a state variable,
	        // but it *just* being used for that is arguably *more* confusing.
	        //
	        // Basically, information regarding the currently selected column
	        // "belongs" to *both* this row and the parent, conceptually,
	        // but for cleanliness' sake, just one of them gets it,
	        // and the other is manually updated whenever it changes.
	        const forceUpdate = useForceUpdate();
	        // "Shortcut" for any given row to know that it should or should not
	        // consider one of its cells tabbable.  Also used to determine
	        // if a change to the current selected cell should also
	        // trigger focusing that cell.
	        const [isTabbableRow, setIsTabbableRow, getIsTabbableRow] = useState(null);
	        // If we're not the tabbable row, then for the purposes of tabIndex
	        // calculations, we don't have a tabbable child cell.
	        const currentColumn = isTabbableRow ? getCurrentColumn() : null;
	        // Track child cells and manage keyboard navigation among them.
	        const { managedChildren: managedCells, useRovingTabIndexChild: useRovingTabIndexCell, childCount: cellCount } = useRovingTabIndex({
	            shouldFocusOnChange: F(() => { return !!getFocusCellOnRowChange() && !!getIsTabbableRow(); }, []),
	            tabbableIndex: currentColumn
	        });
	        // More navigation stuff
	        const navigateToFirstColumn = F(() => {
	            setCurrentColumn2(tryNavigateToIndex(managedCells, 0, 0, 1, identity, identity));
	            forceUpdate();
	        }, []);
	        const navigateToLastColumn = F(() => { setCurrentColumn2(tryNavigateToIndex(managedCells, managedCells.length, managedCells.length, -1, identity, identity)); forceUpdate(); }, []);
	        const navigateToPrevColumn = F(() => {
	            setCurrentColumn2(c => {
	                return tryNavigateToIndex(managedCells, c, c - 1, -1, identity, identity);
	            });
	            forceUpdate();
	        }, []);
	        const navigateToNextColumn = F(() => {
	            setCurrentColumn2(c => {
	                return tryNavigateToIndex(managedCells, c, c + 1, 1, identity, identity);
	            });
	            forceUpdate();
	        }, []);
	        const { useLinearNavigationProps: useLinearNavigationCellProps } = useLinearNavigation({
	            managedChildren: managedCells,
	            navigationDirection: "inline",
	            index: currentColumn ?? 0,
	            disableHomeEndKeys: true,
	            navigateToFirst: navigateToFirstColumn,
	            navigateToLast: navigateToLastColumn,
	            navigateToPrev: navigateToPrevColumn,
	            navigateToNext: navigateToNextColumn
	        });
	        // Notify the relevant child cells when they should/should not be tabbable
	        useChildFlag({
	            activatedIndex: currentColumn,
	            managedChildren: managedCells,
	            setChildFlag: (cellIndex, cellIsTabbable) => {
	                if (cellIndex != null && managedCells[cellIndex]) {
	                    managedCells[cellIndex].setTabbable(cellIsTabbable);
	                    if (cellIsTabbable)
	                        managedCells[cellIndex].rerenderAndFocus();
	                }
	            },
	            getChildFlag: (cellIndex) => (managedCells[cellIndex]?.getTabbable() ?? null),
	            useEffect
	        });
	        // Any time we become the currently tabbable row,
	        // make sure that we're in a valid cell, and shift left/right if not to find one.
	        // TODO: Seems kinda janky? Is there no cleaner way to accomplish this,
	        // especially since it's similar to other code?
	        useEffect(() => {
	            if (isTabbableRow) {
	                let cellIndex = getCurrentColumn();
	                while (cellIndex >= 0 && managedCells[cellIndex] == null) {
	                    --cellIndex;
	                }
	                if (cellIndex < 0) {
	                    cellIndex = getCurrentColumn();
	                    while (cellIndex < managedCells.length && managedCells[cellIndex] == null) {
	                        ++cellIndex;
	                    }
	                    if (cellIndex == managedCells.length)
	                        cellIndex = getCurrentColumn();
	                }
	                if (cellIndex != getCurrentColumn())
	                    setCurrentColumn2(cellIndex);
	            }
	        }, [isTabbableRow]);
	        const { useManagedChildProps: useManagedRowProps } = useManagedRow({
	            index: rowIndex,
	            setIsTabbableRow,
	            getIsTabbableRow: getIsTabbableRow,
	            hidden,
	            ...info
	        });
	        //const { useLinearNavigationChildProps: useLinearNavigationChildRowProps } = useLinearNavigationChildRow(info as IR)
	        const useGridNavigationRowProps = F((props) => useManagedRowProps(useLinearNavigationCellProps(useMergedProps()({ hidden: !!hidden, "data-index": rowIndex }, props))), [useManagedRowProps, !!hidden]);
	        const getRowIndex = useStableGetter(rowIndex);
	        const useGridNavigationCell = F((info) => {
	            const getTabbable = useStableCallback(() => tabbable);
	            const { tabbable, useRovingTabIndexChildProps } = useRovingTabIndexCell({ ...info, getTabbable });
	            //const { useLinearNavigationChildProps: useLinearNavigationChildCellProps } = useLinearNavigationChildCell(info as IC);
	            // Any time we interact with this cell, set it to be
	            // our "currently tabbable" cell, regardless of
	            // any previously selected row/column.
	            //
	            // TODO: Mouseup/down might be preferable,
	            // but it doesn't fire on label elements here?????
	            const onClick = F(() => {
	                setCurrentRow2(getRowIndex());
	                setCurrentColumn2(info.index);
	            }, [info.index]);
	            const useGridNavigationCellProps = F((props) => useRovingTabIndexChildProps((useMergedProps()({ onClick }, props))), [useRovingTabIndexChildProps]);
	            return { tabbable, useGridNavigationCellProps };
	        }, []);
	        return {
	            currentColumn,
	            useGridNavigationRowProps,
	            useGridNavigationCell,
	            cellCount,
	            isTabbableRow,
	            managedCells: managedCells
	        };
	    }, [useManagedRow, indexDemangler, indexMangler]);
	    return {
	        useGridNavigationProps: useLinearNavigationRowProps,
	        useGridNavigationRow,
	        useGridNavigationColumn,
	        rowCount: childCount,
	        cellIndex: currentColumn,
	        rowIndex: currentRow,
	        managedRows
	    };
	}

	const SharedAnimationFrameContext = D(null);
	/**
	 * The (optionally non-stable) `callback` you provide will start running every frame after the component mounts.
	 *
	 * Passing `null` is fine and simply stops the effect until you restart it by providing a non-null callback.
	 *
	 * **This hook does not return anything at all, including no prop-modifying hooks**
	 */
	function useAnimationFrame({ callback }) {
	    // Get a wrapper around the given callback that's stable
	    const stableCallback = useStableCallback(callback ?? noop);
	    const hasCallback = (callback != null);
	    const sharedAnimationFrameContext = T$1(SharedAnimationFrameContext);
	    y(() => {
	        if (sharedAnimationFrameContext) {
	            if (hasCallback) {
	                sharedAnimationFrameContext.addCallback(stableCallback);
	            }
	            else {
	                sharedAnimationFrameContext.removeCallback(stableCallback);
	            }
	        }
	        else {
	            if (hasCallback) {
	                // Get a wrapper around the wrapper around the callback
	                // that also calls `requestAnimationFrame` again.
	                const rafCallback = (ms) => {
	                    handle = requestAnimationFrame(rafCallback);
	                    stableCallback(ms);
	                };
	                let handle = requestAnimationFrame(rafCallback);
	                return () => cancelAnimationFrame(handle);
	            }
	        }
	    }, [sharedAnimationFrameContext, hasCallback]);
	}
	// eslint-disable @typescript-eslint/no-empty-function
	function noop() { }

	function useDraggable({ effectAllowed, data, dragImage, dragImageXOffset, dragImageYOffset }) {
	    const [dragging, setDragging, getDragging] = useState(false);
	    const [lastDropEffect, setLastDropEffect, getLastDropEffect] = useState(null);
	    const useDraggableProps = F((p) => {
	        const ref = s(null);
	        const onDragStart = (e) => {
	            //e.preventDefault();
	            setDragging(true);
	            if (e.dataTransfer) {
	                e.dataTransfer.effectAllowed = (effectAllowed ?? "all");
	                if (dragImage)
	                    e.dataTransfer.setDragImage(dragImage, dragImageXOffset ?? 0, dragImageYOffset ?? 0);
	                const entries = Object.entries(data);
	                for (const [mimeType, data] of entries) {
	                    e.dataTransfer.setData(mimeType, data);
	                }
	            }
	        };
	        const onDragEnd = (e) => {
	            e.preventDefault();
	            setDragging(false);
	            if (e.dataTransfer) {
	                if (e.dataTransfer.dropEffect != "none") {
	                    setLastDropEffect(e.dataTransfer.dropEffect);
	                }
	                else {
	                    setLastDropEffect(null);
	                }
	            }
	        };
	        return useMergedProps()({
	            draggable: true,
	            onDragStart,
	            onDragEnd,
	            ref
	        }, p);
	    }, [effectAllowed, dragImage, dragImageXOffset, dragImageYOffset, ...Object.entries(data).flat()]);
	    // Return both the element and the hook that modifies 
	    // the props and allows us to actually find the element
	    const ret = {
	        useDraggableProps,
	        dragging,
	        getDragging,
	        // Set once a drag has completed with the resulting action
	        // Useful for removing the element afterwards if it was "move"
	        lastDropEffect,
	        /**
	         * Test
	         */
	        getLastDropEffect
	    };
	    return ret;
	}

	class DroppableFileError extends Error {
	    fileName;
	    errorType;
	    constructor(fileName, base) {
	        super(base?.message ?? "An unspecified error occurred reading the file.");
	        this.fileName = fileName;
	        this.errorType = base?.name;
	    }
	}
	//MergedProps<UseRefElementPropsReturnType<E, Pick<h.JSX.HTMLAttributes<E>, "onDragEnter" | "onDragLeave" | "onDragOver" | "onDrop">>, P>;
	function useDroppable({ effect }) {
	    const [filesForConsideration, setFilesForConsideration] = useState(null);
	    const [stringsForConsideration, setStringsForConsideration] = useState(null);
	    const [droppedFiles, setDroppedFiles] = useState(null);
	    const [droppedStrings, setDroppedStrings] = useState(null);
	    const [dropError, setDropError] = useState(undefined);
	    // All the promises generated from the drop events.
	    // Used to process multiple drop events in succession
	    const dropPromisesRef = s([]);
	    const [currentPromiseIndex, setCurrentPromiseIndex, getCurrentPromiseIndex] = useState(-1);
	    const [promiseCount, setPromiseCount, getPromiseCount] = useState(0);
	    // Any time we add a new promise, if there's no current promise running, we need to start one.
	    // If there is one, then we don't need to do anything, since it runs the same check.
	    y(() => {
	        const currentPromiseIndex = getCurrentPromiseIndex();
	        const promiseCount = getPromiseCount();
	        if (promiseCount > 0) {
	            if ((currentPromiseIndex + 1) < promiseCount) {
	                setCurrentPromiseIndex(i => ++i);
	            }
	        }
	    }, [promiseCount]);
	    // Anytime our current promise changes,
	    // wait for it to finish, then set our state to its result.
	    // Finally, check to see if there are anymore promises.
	    // If there are, then increase currentPromiseCount,
	    // which will trigger this again.
	    //
	    // This shouldn't happen *often*, but maybe in the case of
	    // individually dropping a bunch of large files or something.
	    y(() => {
	        if (currentPromiseIndex >= 0) {
	            const currentPromise = dropPromisesRef.current[currentPromiseIndex];
	            currentPromise.then((info) => {
	                if (info !== null) {
	                    const { files, strings } = info;
	                    setDroppedFiles(files);
	                    setDroppedStrings(strings);
	                }
	                // Now that we're done, are there more promises in the queue?
	                const currentPromiseIndex = getCurrentPromiseIndex();
	                const promiseCount = getPromiseCount();
	                if ((currentPromiseIndex + 1) < promiseCount) {
	                    // Since this promise has started, more have been added.
	                    // Run this effect again.
	                    setCurrentPromiseIndex(i => ++i);
	                }
	            });
	        }
	    }, [currentPromiseIndex]);
	    const useDroppableProps = (p) => {
	        //const ref = useRef<E>(null);
	        // Handle collecting the current file metadata or MIME types.
	        const onDragEnter = (e) => {
	            e.preventDefault();
	            if (e.dataTransfer) {
	                // Is there a default? I can't find one anywhere.
	                e.dataTransfer.dropEffect = (effect ?? "move");
	                const newMimeTypes = new Set();
	                const newFiles = new Array();
	                for (const item of e.dataTransfer?.items ?? []) {
	                    const { kind, type } = item;
	                    if (kind === "string") {
	                        newMimeTypes.add(type);
	                    }
	                    else if (kind === "file") {
	                        newFiles.push({ type: item.type });
	                    }
	                }
	                setFilesForConsideration(newFiles);
	                setStringsForConsideration(newMimeTypes);
	            }
	        };
	        // Handle resetting the current file metadata or MIME types
	        const onDragLeave = (e) => {
	            e.preventDefault();
	            setFilesForConsideration(null);
	            setStringsForConsideration(null);
	        };
	        // Boilerplate, I guess
	        const onDragOver = (e) => {
	            e.preventDefault();
	        };
	        // Handle getting the drop data asynchronously
	        const onDrop = (e) => {
	            e.preventDefault();
	            setFilesForConsideration(null);
	            setStringsForConsideration(null);
	            const allPromises = new Array();
	            const dropData = {};
	            const dropFile = [];
	            for (const item of e.dataTransfer?.items ?? []) {
	                const { kind, type } = item;
	                if (kind === "string") {
	                    allPromises.push((new Promise((resolve, _reject) => item.getAsString(resolve))).then(str => dropData[type] = str));
	                }
	                else if (kind === "file") {
	                    const file = item.getAsFile();
	                    if (file) {
	                        allPromises.push(new Promise((resolve, reject) => {
	                            const reader = new FileReader();
	                            reader.onload = (_) => {
	                                resolve();
	                                const data = reader.result;
	                                dropFile.push({ data, name: file.name, type: file.type, size: data.byteLength, lastModified: file.lastModified });
	                            };
	                            reader.onerror = (_) => { reject(new DroppableFileError(file.name, reader.error)); };
	                            reader.onabort = (_) => { reject(new DroppableFileError(file.name, reader.error)); };
	                            reader.readAsArrayBuffer(file);
	                        }));
	                        dropFile.push();
	                    }
	                }
	            }
	            dropPromisesRef.current.push(Promise.all(allPromises).then(() => {
	                setPromiseCount(i => ++i);
	                setDropError(null);
	                return {
	                    strings: dropData,
	                    files: dropFile
	                };
	            }).catch(ex => {
	                /* eslint-disable no-debugger */
	                debugger;
	                setPromiseCount(i => ++i);
	                setDropError(ex);
	                return null;
	            }));
	        };
	        return useMergedProps()({ onDragEnter, onDragLeave, onDragOver, onDrop }, p);
	    };
	    return {
	        useDroppableProps,
	        filesForConsideration,
	        stringsForConsideration,
	        droppedFiles,
	        droppedStrings,
	        dropError
	    };
	}

	const activeElementUpdaters = new Map();
	const lastActiveElementUpdaters = new Map();
	const windowFocusedUpdaters = new Map();
	const windowsFocusedUpdaters = new Map();
	function forEachUpdater(window, map, value) {
	    for (const [otherWindow, updaters] of map) {
	        if (window === otherWindow) {
	            for (const updater of updaters) {
	                updater?.(value);
	            }
	        }
	    }
	}
	function focusout(e) {
	    const window = e.target.ownerDocument.defaultView;
	    if (e.relatedTarget == null) {
	        forEachUpdater(window, activeElementUpdaters, null);
	    }
	}
	function focusin(e) {
	    const window = e.target.ownerDocument.defaultView;
	    const currentlyFocusedElement = e.target;
	    forEachUpdater(window, activeElementUpdaters, currentlyFocusedElement);
	    forEachUpdater(window, lastActiveElementUpdaters, currentlyFocusedElement);
	}
	function windowFocus(e) {
	    const window = (e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView);
	    windowsFocusedUpdaters.set(window, true);
	    forEachUpdater(window, windowFocusedUpdaters, true);
	}
	function windowBlur(e) {
	    const window = (e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView);
	    windowsFocusedUpdaters.set(window, false);
	    forEachUpdater(window, windowFocusedUpdaters, false);
	}
	/**
	 * Allows you to inspect which element in the `document` currently has focus, which was most recently focused if none are currently, and whether or not the window has focus by returning the following functions:
	 * * `getActiveElement()`
	 * * `getLastActiveElement()`
	 * * `getWindowFocused()`
	 *
	 * (The document's body receiving focus, like it does when you click on an empty area, is counted as no element having focus for all intents and purposes)
	 *
	 * This is a passive hook, so by default it returns getter functions that report this information but the component will not re-render by default when the active element changes.
	 *
	 * If you need the component to re-render when the active element changes, use the `on*Change` arguments to set some state on your end.
	 */
	function useActiveElement({ onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, onMount, onUnmount, onMountChange }) {
	    useEnsureStability("useActiveElement", onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, onMountChange, onMount, onUnmount);
	    const { getElement, useRefElementProps } = useRefElement({
	        onMount,
	        onUnmount,
	        onElementChange: F((element, prevValue) => {
	            onMountChange?.(element, prevValue);
	            if (element) {
	                const document = element.ownerDocument;
	                const window = document?.defaultView;
	                if ((activeElementUpdaters.get(window)?.size ?? 0) === 0) {
	                    document?.addEventListener("focusin", focusin, { passive: true });
	                    document?.addEventListener("focusout", focusout, { passive: true });
	                    window?.addEventListener("focus", windowFocus, { passive: true });
	                    window?.addEventListener("blur", windowBlur, { passive: true });
	                }
	                // Add them even if they're undefined to more easily
	                // manage the ">0 means don't add handlers" logic.
	                const localActiveElementUpdaters = activeElementUpdaters.get(window) ?? new Set();
	                const localLastActiveElementUpdaters = lastActiveElementUpdaters.get(window) ?? new Set();
	                const localWindowFocusedUpdaters = windowFocusedUpdaters.get(window) ?? new Set();
	                localActiveElementUpdaters.add(setActiveElement);
	                localLastActiveElementUpdaters.add(setLastActiveElement);
	                localWindowFocusedUpdaters.add(setWindowFocused);
	                activeElementUpdaters.set(window, localActiveElementUpdaters);
	                lastActiveElementUpdaters.set(window, localLastActiveElementUpdaters);
	                windowFocusedUpdaters.set(window, localWindowFocusedUpdaters);
	                return () => {
	                    activeElementUpdaters.get(window).delete(setActiveElement);
	                    lastActiveElementUpdaters.get(window).delete(setLastActiveElement);
	                    windowFocusedUpdaters.get(window).delete(setWindowFocused);
	                    if (activeElementUpdaters.size === 0) {
	                        document?.removeEventListener("focusin", focusin);
	                        document?.removeEventListener("focusout", focusout);
	                        window?.removeEventListener("focus", windowFocus);
	                        window?.removeEventListener("blur", windowBlur);
	                    }
	                };
	            }
	        }, [])
	    });
	    const [getActiveElement, setActiveElement] = usePassiveState(onActiveElementChange, returnNull$1);
	    const [getLastActiveElement, setLastActiveElement] = usePassiveState(onLastActiveElementChange, returnNull$1);
	    const [getWindowFocused, setWindowFocused] = usePassiveState(onWindowFocusedChange, returnTrue);
	    return { getElement, useActiveElementProps: useRefElementProps, getActiveElement, getLastActiveElement, getWindowFocused };
	}

	function useHasFocus({ onFocusedChanged, onFocusedInnerChanged, onLastFocusedChanged, onLastFocusedInnerChanged, onLastActiveElementChange, onActiveElementChange, onWindowFocusedChange }) {
	    useEnsureStability("useHasFocus", onFocusedChanged, onFocusedInnerChanged, onLastFocusedChanged, onLastFocusedInnerChanged, onLastActiveElementChange, onActiveElementChange, onWindowFocusedChange);
	    const [getFocused, setFocused] = usePassiveState(onFocusedChanged, returnFalse);
	    const [getFocusedInner, setFocusedInner] = usePassiveState(onFocusedInnerChanged, returnFalse);
	    const [getLastFocused, setLastFocused] = usePassiveState(onLastFocusedChanged, returnFalse);
	    const [getLastFocusedInner, setLastFocusedInner] = usePassiveState(onLastFocusedInnerChanged, returnFalse);
	    const { getActiveElement, getLastActiveElement, getWindowFocused, useActiveElementProps, getElement } = useActiveElement({
	        onActiveElementChange: F((activeElement, prevActiveElement) => {
	            const selfElement = getElement();
	            const focused = (selfElement != null && (selfElement == activeElement));
	            const focusedInner = (!!selfElement?.contains(activeElement));
	            setFocused(focused);
	            setFocusedInner(focusedInner);
	            onActiveElementChange?.(activeElement, prevActiveElement);
	        }, []),
	        onLastActiveElementChange: F((lastActiveElement, prevLastActiveElement) => {
	            const selfElement = getElement();
	            const focused = (selfElement != null && (selfElement == lastActiveElement));
	            const focusedInner = (!!selfElement?.contains(lastActiveElement));
	            setLastFocused(focused);
	            setLastFocusedInner(focusedInner);
	            onLastActiveElementChange?.(lastActiveElement, prevLastActiveElement);
	        }, []),
	        onWindowFocusedChange
	    });
	    const useHasFocusProps = F((props) => { return useActiveElementProps(props); }, [useActiveElementProps]);
	    return { useHasFocusProps, getElement, getFocused, getFocusedInner, getLastFocused, getLastFocusedInner, getActiveElement, getLastActiveElement, getWindowFocused };
	}

	function useInterval({ interval, callback }) {
	    // Get a wrapper around the given callback that's stable
	    const stableCallback = useStableCallback(callback);
	    const getInterval = useStableGetter(interval);
	    y(() => {
	        const interval = getInterval();
	        let lastDelayUsed = interval;
	        if (interval == null)
	            return;
	        // Get a wrapper around the wrapper around the callback
	        // that clears and resets the interval if it changes.
	        const adjustableCallback = () => {
	            stableCallback();
	            const currentInterval = getInterval();
	            if (currentInterval != lastDelayUsed) {
	                clearInterval(handle);
	                if (currentInterval != null)
	                    handle = setInterval(adjustableCallback, lastDelayUsed = currentInterval);
	            }
	        };
	        let handle = setInterval(adjustableCallback, interval);
	        return () => clearInterval(handle);
	    }, []);
	}

	/*!
	* tabbable 5.3.3
	* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
	*/
	var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
	var NoElement = typeof Element === 'undefined';
	var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
	var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
	  return element.getRootNode();
	} : function (element) {
	  return element.ownerDocument;
	};

	var isInput = function isInput(node) {
	  return node.tagName === 'INPUT';
	};

	var isHiddenInput = function isHiddenInput(node) {
	  return isInput(node) && node.type === 'hidden';
	};

	var isDetailsWithSummary = function isDetailsWithSummary(node) {
	  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
	    return child.tagName === 'SUMMARY';
	  });
	  return r;
	};

	var isZeroArea = function isZeroArea(node) {
	  var _node$getBoundingClie = node.getBoundingClientRect(),
	      width = _node$getBoundingClie.width,
	      height = _node$getBoundingClie.height;

	  return width === 0 && height === 0;
	};

	var isHidden = function isHidden(node, _ref) {
	  var displayCheck = _ref.displayCheck,
	      getShadowRoot = _ref.getShadowRoot;

	  // NOTE: visibility will be `undefined` if node is detached from the document
	  //  (see notes about this further down), which means we will consider it visible
	  //  (this is legacy behavior from a very long way back)
	  // NOTE: we check this regardless of `displayCheck="none"` because this is a
	  //  _visibility_ check, not a _display_ check
	  if (getComputedStyle(node).visibility === 'hidden') {
	    return true;
	  }

	  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
	  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

	  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
	    return true;
	  } // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
	  //  (but NOT _the_ document; see second 'If' comment below for more).
	  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
	  //  is attached, and the one we need to check if it's in the document or not (because the
	  //  shadow, and all nodes it contains, is never considered in the document since shadows
	  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
	  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
	  //  visibility, including all the nodes it contains). The host could be any normal node,
	  //  or a custom element (i.e. web component). Either way, that's the one that is considered
	  //  part of the document, not the shadow root, nor any of its children (i.e. the node being
	  //  tested).
	  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
	  //  document (per the docs) and while it's a Document-type object, that document does not
	  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
	  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
	  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
	  //  node is actually detached.


	  var nodeRootHost = getRootNode(node).host;
	  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);

	  if (!displayCheck || displayCheck === 'full') {
	    if (typeof getShadowRoot === 'function') {
	      // figure out if we should consider the node to be in an undisclosed shadow and use the
	      //  'non-zero-area' fallback
	      var originalNode = node;

	      while (node) {
	        var parentElement = node.parentElement;
	        var rootNode = getRootNode(node);

	        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
	        ) {
	          // node has an undisclosed shadow which means we can only treat it as a black box, so we
	          //  fall back to a non-zero-area test
	          return isZeroArea(node);
	        } else if (node.assignedSlot) {
	          // iterate up slot
	          node = node.assignedSlot;
	        } else if (!parentElement && rootNode !== node.ownerDocument) {
	          // cross shadow boundary
	          node = rootNode.host;
	        } else {
	          // iterate up normal dom
	          node = parentElement;
	        }
	      }

	      node = originalNode;
	    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
	    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
	    //  it might be a falsy value, which means shadow DOM support is disabled
	    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
	    //  now we can just test to see if it would normally be visible or not, provided it's
	    //  attached to the main document.
	    // NOTE: We must consider case where node is inside a shadow DOM and given directly to
	    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.


	    if (nodeIsAttached) {
	      // this works wherever the node is: if there's at least one client rect, it's
	      //  somehow displayed; it also covers the CSS 'display: contents' case where the
	      //  node itself is hidden in place of its contents; and there's no need to search
	      //  up the hierarchy either
	      return !node.getClientRects().length;
	    } // Else, the node isn't attached to the document, which means the `getClientRects()`
	    //  API will __always__ return zero rects (this can happen, for example, if React
	    //  is used to render nodes onto a detached tree, as confirmed in this thread:
	    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
	    //
	    // It also means that even window.getComputedStyle(node).display will return `undefined`
	    //  because styles are only computed for nodes that are in the document.
	    //
	    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
	    //  somehow. Though it was never stated officially, anyone who has ever used tabbable
	    //  APIs on nodes in detached containers has actually implicitly used tabbable in what
	    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
	    //  considering __everything__ to be visible because of the innability to determine styles.

	  } else if (displayCheck === 'non-zero-area') {
	    // NOTE: Even though this tests that the node's client rect is non-zero to determine
	    //  whether it's displayed, and that a detached node will __always__ have a zero-area
	    //  client rect, we don't special-case for whether the node is attached or not. In
	    //  this mode, we do want to consider nodes that have a zero area to be hidden at all
	    //  times, and that includes attached or not.
	    return isZeroArea(node);
	  } // visible, as far as we can tell, or per current `displayCheck` mode


	  return false;
	}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
	//  unless they are in the _first_ <legend> element of the top-most disabled
	//  fieldset


	var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
	  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
	    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>

	    while (parentNode) {
	      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
	        // look for the first <legend> among the children of the disabled <fieldset>
	        for (var i = 0; i < parentNode.children.length; i++) {
	          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found

	          if (child.tagName === 'LEGEND') {
	            // if its parent <fieldset> is not nested in another disabled <fieldset>,
	            // return whether `node` is a descendant of its first <legend>
	            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
	          }
	        } // the disabled <fieldset> containing `node` has no <legend>


	        return true;
	      }

	      parentNode = parentNode.parentElement;
	    }
	  } // else, node's tabbable/focusable state should not be affected by a fieldset's
	  //  enabled/disabled state


	  return false;
	};

	var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
	  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
	  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
	    return false;
	  }

	  return true;
	};

	var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

	var isFocusable = function isFocusable(node, options) {
	  options = options || {};

	  if (!node) {
	    throw new Error('No node provided');
	  }

	  if (matches.call(node, focusableCandidateSelector) === false) {
	    return false;
	  }

	  return isNodeMatchingSelectorFocusable(options, node);
	};

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	(function (module, exports) {
		(function (global, factory) {
		  factory() ;
		}(commonjsGlobal, (function () {
		  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		  /**
		   * This work is licensed under the W3C Software and Document License
		   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
		   */

		  (function () {
		    // Return early if we're not running inside of the browser.
		    if (typeof window === 'undefined') {
		      return;
		    }

		    // Convenience function for converting NodeLists.
		    /** @type {typeof Array.prototype.slice} */
		    var slice = Array.prototype.slice;

		    /**
		     * IE has a non-standard name for "matches".
		     * @type {typeof Element.prototype.matches}
		     */
		    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;

		    /** @type {string} */
		    var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');

		    /**
		     * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
		     * attribute.
		     *
		     * Its main functions are:
		     *
		     * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
		     *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
		     *   each focusable node in the subtree with the singleton `InertManager` which manages all known
		     *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
		     *   instance exists for each focusable node which has at least one inert root as an ancestor.
		     *
		     * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
		     *   attribute is removed from the root node). This is handled in the destructor, which calls the
		     *   `deregister` method on `InertManager` for each managed inert node.
		     */

		    var InertRoot = function () {
		      /**
		       * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.
		       * @param {!InertManager} inertManager The global singleton InertManager object.
		       */
		      function InertRoot(rootElement, inertManager) {
		        _classCallCheck(this, InertRoot);

		        /** @type {!InertManager} */
		        this._inertManager = inertManager;

		        /** @type {!HTMLElement} */
		        this._rootElement = rootElement;

		        /**
		         * @type {!Set<!InertNode>}
		         * All managed focusable nodes in this InertRoot's subtree.
		         */
		        this._managedNodes = new Set();

		        // Make the subtree hidden from assistive technology
		        if (this._rootElement.hasAttribute('aria-hidden')) {
		          /** @type {?string} */
		          this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
		        } else {
		          this._savedAriaHidden = null;
		        }
		        this._rootElement.setAttribute('aria-hidden', 'true');

		        // Make all focusable elements in the subtree unfocusable and add them to _managedNodes
		        this._makeSubtreeUnfocusable(this._rootElement);

		        // Watch for:
		        // - any additions in the subtree: make them unfocusable too
		        // - any removals from the subtree: remove them from this inert root's managed nodes
		        // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
		        //   element, make that node a managed node.
		        this._observer = new MutationObserver(this._onMutation.bind(this));
		        this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });
		      }

		      /**
		       * Call this whenever this object is about to become obsolete.  This unwinds all of the state
		       * stored in this object and updates the state of all of the managed nodes.
		       */


		      _createClass(InertRoot, [{
		        key: 'destructor',
		        value: function destructor() {
		          this._observer.disconnect();

		          if (this._rootElement) {
		            if (this._savedAriaHidden !== null) {
		              this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
		            } else {
		              this._rootElement.removeAttribute('aria-hidden');
		            }
		          }

		          this._managedNodes.forEach(function (inertNode) {
		            this._unmanageNode(inertNode.node);
		          }, this);

		          // Note we cast the nulls to the ANY type here because:
		          // 1) We want the class properties to be declared as non-null, or else we
		          //    need even more casts throughout this code. All bets are off if an
		          //    instance has been destroyed and a method is called.
		          // 2) We don't want to cast "this", because we want type-aware optimizations
		          //    to know which properties we're setting.
		          this._observer = /** @type {?} */null;
		          this._rootElement = /** @type {?} */null;
		          this._managedNodes = /** @type {?} */null;
		          this._inertManager = /** @type {?} */null;
		        }

		        /**
		         * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
		         */

		      }, {
		        key: '_makeSubtreeUnfocusable',


		        /**
		         * @param {!Node} startNode
		         */
		        value: function _makeSubtreeUnfocusable(startNode) {
		          var _this2 = this;

		          composedTreeWalk(startNode, function (node) {
		            return _this2._visitNode(node);
		          });

		          var activeElement = document.activeElement;

		          if (!document.body.contains(startNode)) {
		            // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
		            var node = startNode;
		            /** @type {!ShadowRoot|undefined} */
		            var root = undefined;
		            while (node) {
		              if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
		                root = /** @type {!ShadowRoot} */node;
		                break;
		              }
		              node = node.parentNode;
		            }
		            if (root) {
		              activeElement = root.activeElement;
		            }
		          }
		          if (startNode.contains(activeElement)) {
		            activeElement.blur();
		            // In IE11, if an element is already focused, and then set to tabindex=-1
		            // calling blur() will not actually move the focus.
		            // To work around this we call focus() on the body instead.
		            if (activeElement === document.activeElement) {
		              document.body.focus();
		            }
		          }
		        }

		        /**
		         * @param {!Node} node
		         */

		      }, {
		        key: '_visitNode',
		        value: function _visitNode(node) {
		          if (node.nodeType !== Node.ELEMENT_NODE) {
		            return;
		          }
		          var element = /** @type {!HTMLElement} */node;

		          // If a descendant inert root becomes un-inert, its descendants will still be inert because of
		          // this inert root, so all of its managed nodes need to be adopted by this InertRoot.
		          if (element !== this._rootElement && element.hasAttribute('inert')) {
		            this._adoptInertRoot(element);
		          }

		          if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
		            this._manageNode(element);
		          }
		        }

		        /**
		         * Register the given node with this InertRoot and with InertManager.
		         * @param {!Node} node
		         */

		      }, {
		        key: '_manageNode',
		        value: function _manageNode(node) {
		          var inertNode = this._inertManager.register(node, this);
		          this._managedNodes.add(inertNode);
		        }

		        /**
		         * Unregister the given node with this InertRoot and with InertManager.
		         * @param {!Node} node
		         */

		      }, {
		        key: '_unmanageNode',
		        value: function _unmanageNode(node) {
		          var inertNode = this._inertManager.deregister(node, this);
		          if (inertNode) {
		            this._managedNodes['delete'](inertNode);
		          }
		        }

		        /**
		         * Unregister the entire subtree starting at `startNode`.
		         * @param {!Node} startNode
		         */

		      }, {
		        key: '_unmanageSubtree',
		        value: function _unmanageSubtree(startNode) {
		          var _this3 = this;

		          composedTreeWalk(startNode, function (node) {
		            return _this3._unmanageNode(node);
		          });
		        }

		        /**
		         * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
		         * @param {!HTMLElement} node
		         */

		      }, {
		        key: '_adoptInertRoot',
		        value: function _adoptInertRoot(node) {
		          var inertSubroot = this._inertManager.getInertRoot(node);

		          // During initialisation this inert root may not have been registered yet,
		          // so register it now if need be.
		          if (!inertSubroot) {
		            this._inertManager.setInert(node, true);
		            inertSubroot = this._inertManager.getInertRoot(node);
		          }

		          inertSubroot.managedNodes.forEach(function (savedInertNode) {
		            this._manageNode(savedInertNode.node);
		          }, this);
		        }

		        /**
		         * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
		         * @param {!Array<!MutationRecord>} records
		         * @param {!MutationObserver} self
		         */

		      }, {
		        key: '_onMutation',
		        value: function _onMutation(records, self) {
		          records.forEach(function (record) {
		            var target = /** @type {!HTMLElement} */record.target;
		            if (record.type === 'childList') {
		              // Manage added nodes
		              slice.call(record.addedNodes).forEach(function (node) {
		                this._makeSubtreeUnfocusable(node);
		              }, this);

		              // Un-manage removed nodes
		              slice.call(record.removedNodes).forEach(function (node) {
		                this._unmanageSubtree(node);
		              }, this);
		            } else if (record.type === 'attributes') {
		              if (record.attributeName === 'tabindex') {
		                // Re-initialise inert node if tabindex changes
		                this._manageNode(target);
		              } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {
		                // If a new inert root is added, adopt its managed nodes and make sure it knows about the
		                // already managed nodes from this inert subroot.
		                this._adoptInertRoot(target);
		                var inertSubroot = this._inertManager.getInertRoot(target);
		                this._managedNodes.forEach(function (managedNode) {
		                  if (target.contains(managedNode.node)) {
		                    inertSubroot._manageNode(managedNode.node);
		                  }
		                });
		              }
		            }
		          }, this);
		        }
		      }, {
		        key: 'managedNodes',
		        get: function get() {
		          return new Set(this._managedNodes);
		        }

		        /** @return {boolean} */

		      }, {
		        key: 'hasSavedAriaHidden',
		        get: function get() {
		          return this._savedAriaHidden !== null;
		        }

		        /** @param {?string} ariaHidden */

		      }, {
		        key: 'savedAriaHidden',
		        set: function set(ariaHidden) {
		          this._savedAriaHidden = ariaHidden;
		        }

		        /** @return {?string} */
		        ,
		        get: function get() {
		          return this._savedAriaHidden;
		        }
		      }]);

		      return InertRoot;
		    }();

		    /**
		     * `InertNode` initialises and manages a single inert node.
		     * A node is inert if it is a descendant of one or more inert root elements.
		     *
		     * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
		     * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
		     * is intrinsically focusable or not.
		     *
		     * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
		     * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
		     * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
		     * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
		     * or removes the `tabindex` attribute if the element is intrinsically focusable.
		     */


		    var InertNode = function () {
		      /**
		       * @param {!Node} node A focusable element to be made inert.
		       * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
		       */
		      function InertNode(node, inertRoot) {
		        _classCallCheck(this, InertNode);

		        /** @type {!Node} */
		        this._node = node;

		        /** @type {boolean} */
		        this._overrodeFocusMethod = false;

		        /**
		         * @type {!Set<!InertRoot>} The set of descendant inert roots.
		         *    If and only if this set becomes empty, this node is no longer inert.
		         */
		        this._inertRoots = new Set([inertRoot]);

		        /** @type {?number} */
		        this._savedTabIndex = null;

		        /** @type {boolean} */
		        this._destroyed = false;

		        // Save any prior tabindex info and make this node untabbable
		        this.ensureUntabbable();
		      }

		      /**
		       * Call this whenever this object is about to become obsolete.
		       * This makes the managed node focusable again and deletes all of the previously stored state.
		       */


		      _createClass(InertNode, [{
		        key: 'destructor',
		        value: function destructor() {
		          this._throwIfDestroyed();

		          if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
		            var element = /** @type {!HTMLElement} */this._node;
		            if (this._savedTabIndex !== null) {
		              element.setAttribute('tabindex', this._savedTabIndex);
		            } else {
		              element.removeAttribute('tabindex');
		            }

		            // Use `delete` to restore native focus method.
		            if (this._overrodeFocusMethod) {
		              delete element.focus;
		            }
		          }

		          // See note in InertRoot.destructor for why we cast these nulls to ANY.
		          this._node = /** @type {?} */null;
		          this._inertRoots = /** @type {?} */null;
		          this._destroyed = true;
		        }

		        /**
		         * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
		         * If the object has been destroyed, any attempt to access it will cause an exception.
		         */

		      }, {
		        key: '_throwIfDestroyed',


		        /**
		         * Throw if user tries to access destroyed InertNode.
		         */
		        value: function _throwIfDestroyed() {
		          if (this.destroyed) {
		            throw new Error('Trying to access destroyed InertNode');
		          }
		        }

		        /** @return {boolean} */

		      }, {
		        key: 'ensureUntabbable',


		        /** Save the existing tabindex value and make the node untabbable and unfocusable */
		        value: function ensureUntabbable() {
		          if (this.node.nodeType !== Node.ELEMENT_NODE) {
		            return;
		          }
		          var element = /** @type {!HTMLElement} */this.node;
		          if (matches.call(element, _focusableElementsString)) {
		            if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {
		              return;
		            }

		            if (element.hasAttribute('tabindex')) {
		              this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
		            }
		            element.setAttribute('tabindex', '-1');
		            if (element.nodeType === Node.ELEMENT_NODE) {
		              element.focus = function () {};
		              this._overrodeFocusMethod = true;
		            }
		          } else if (element.hasAttribute('tabindex')) {
		            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
		            element.removeAttribute('tabindex');
		          }
		        }

		        /**
		         * Add another inert root to this inert node's set of managing inert roots.
		         * @param {!InertRoot} inertRoot
		         */

		      }, {
		        key: 'addInertRoot',
		        value: function addInertRoot(inertRoot) {
		          this._throwIfDestroyed();
		          this._inertRoots.add(inertRoot);
		        }

		        /**
		         * Remove the given inert root from this inert node's set of managing inert roots.
		         * If the set of managing inert roots becomes empty, this node is no longer inert,
		         * so the object should be destroyed.
		         * @param {!InertRoot} inertRoot
		         */

		      }, {
		        key: 'removeInertRoot',
		        value: function removeInertRoot(inertRoot) {
		          this._throwIfDestroyed();
		          this._inertRoots['delete'](inertRoot);
		          if (this._inertRoots.size === 0) {
		            this.destructor();
		          }
		        }
		      }, {
		        key: 'destroyed',
		        get: function get() {
		          return (/** @type {!InertNode} */this._destroyed
		          );
		        }
		      }, {
		        key: 'hasSavedTabIndex',
		        get: function get() {
		          return this._savedTabIndex !== null;
		        }

		        /** @return {!Node} */

		      }, {
		        key: 'node',
		        get: function get() {
		          this._throwIfDestroyed();
		          return this._node;
		        }

		        /** @param {?number} tabIndex */

		      }, {
		        key: 'savedTabIndex',
		        set: function set(tabIndex) {
		          this._throwIfDestroyed();
		          this._savedTabIndex = tabIndex;
		        }

		        /** @return {?number} */
		        ,
		        get: function get() {
		          this._throwIfDestroyed();
		          return this._savedTabIndex;
		        }
		      }]);

		      return InertNode;
		    }();

		    /**
		     * InertManager is a per-document singleton object which manages all inert roots and nodes.
		     *
		     * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
		     * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
		     * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
		     * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
		     * is created for each such node, via the `_managedNodes` map.
		     */


		    var InertManager = function () {
		      /**
		       * @param {!Document} document
		       */
		      function InertManager(document) {
		        _classCallCheck(this, InertManager);

		        if (!document) {
		          throw new Error('Missing required argument; InertManager needs to wrap a document.');
		        }

		        /** @type {!Document} */
		        this._document = document;

		        /**
		         * All managed nodes known to this InertManager. In a map to allow looking up by Node.
		         * @type {!Map<!Node, !InertNode>}
		         */
		        this._managedNodes = new Map();

		        /**
		         * All inert roots known to this InertManager. In a map to allow looking up by Node.
		         * @type {!Map<!Node, !InertRoot>}
		         */
		        this._inertRoots = new Map();

		        /**
		         * Observer for mutations on `document.body`.
		         * @type {!MutationObserver}
		         */
		        this._observer = new MutationObserver(this._watchForInert.bind(this));

		        // Add inert style.
		        addInertStyle(document.head || document.body || document.documentElement);

		        // Wait for document to be loaded.
		        if (document.readyState === 'loading') {
		          document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
		        } else {
		          this._onDocumentLoaded();
		        }
		      }

		      /**
		       * Set whether the given element should be an inert root or not.
		       * @param {!HTMLElement} root
		       * @param {boolean} inert
		       */


		      _createClass(InertManager, [{
		        key: 'setInert',
		        value: function setInert(root, inert) {
		          if (inert) {
		            if (this._inertRoots.has(root)) {
		              // element is already inert
		              return;
		            }

		            var inertRoot = new InertRoot(root, this);
		            root.setAttribute('inert', '');
		            this._inertRoots.set(root, inertRoot);
		            // If not contained in the document, it must be in a shadowRoot.
		            // Ensure inert styles are added there.
		            if (!this._document.body.contains(root)) {
		              var parent = root.parentNode;
		              while (parent) {
		                if (parent.nodeType === 11) {
		                  addInertStyle(parent);
		                }
		                parent = parent.parentNode;
		              }
		            }
		          } else {
		            if (!this._inertRoots.has(root)) {
		              // element is already non-inert
		              return;
		            }

		            var _inertRoot = this._inertRoots.get(root);
		            _inertRoot.destructor();
		            this._inertRoots['delete'](root);
		            root.removeAttribute('inert');
		          }
		        }

		        /**
		         * Get the InertRoot object corresponding to the given inert root element, if any.
		         * @param {!Node} element
		         * @return {!InertRoot|undefined}
		         */

		      }, {
		        key: 'getInertRoot',
		        value: function getInertRoot(element) {
		          return this._inertRoots.get(element);
		        }

		        /**
		         * Register the given InertRoot as managing the given node.
		         * In the case where the node has a previously existing inert root, this inert root will
		         * be added to its set of inert roots.
		         * @param {!Node} node
		         * @param {!InertRoot} inertRoot
		         * @return {!InertNode} inertNode
		         */

		      }, {
		        key: 'register',
		        value: function register(node, inertRoot) {
		          var inertNode = this._managedNodes.get(node);
		          if (inertNode !== undefined) {
		            // node was already in an inert subtree
		            inertNode.addInertRoot(inertRoot);
		          } else {
		            inertNode = new InertNode(node, inertRoot);
		          }

		          this._managedNodes.set(node, inertNode);

		          return inertNode;
		        }

		        /**
		         * De-register the given InertRoot as managing the given inert node.
		         * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
		         * node from the InertManager's set of managed nodes if it is destroyed.
		         * If the node is not currently managed, this is essentially a no-op.
		         * @param {!Node} node
		         * @param {!InertRoot} inertRoot
		         * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
		         */

		      }, {
		        key: 'deregister',
		        value: function deregister(node, inertRoot) {
		          var inertNode = this._managedNodes.get(node);
		          if (!inertNode) {
		            return null;
		          }

		          inertNode.removeInertRoot(inertRoot);
		          if (inertNode.destroyed) {
		            this._managedNodes['delete'](node);
		          }

		          return inertNode;
		        }

		        /**
		         * Callback used when document has finished loading.
		         */

		      }, {
		        key: '_onDocumentLoaded',
		        value: function _onDocumentLoaded() {
		          // Find all inert roots in document and make them actually inert.
		          var inertElements = slice.call(this._document.querySelectorAll('[inert]'));
		          inertElements.forEach(function (inertElement) {
		            this.setInert(inertElement, true);
		          }, this);

		          // Comment this out to use programmatic API only.
		          this._observer.observe(this._document.body || this._document.documentElement, { attributes: true, subtree: true, childList: true });
		        }

		        /**
		         * Callback used when mutation observer detects attribute changes.
		         * @param {!Array<!MutationRecord>} records
		         * @param {!MutationObserver} self
		         */

		      }, {
		        key: '_watchForInert',
		        value: function _watchForInert(records, self) {
		          var _this = this;
		          records.forEach(function (record) {
		            switch (record.type) {
		              case 'childList':
		                slice.call(record.addedNodes).forEach(function (node) {
		                  if (node.nodeType !== Node.ELEMENT_NODE) {
		                    return;
		                  }
		                  var inertElements = slice.call(node.querySelectorAll('[inert]'));
		                  if (matches.call(node, '[inert]')) {
		                    inertElements.unshift(node);
		                  }
		                  inertElements.forEach(function (inertElement) {
		                    this.setInert(inertElement, true);
		                  }, _this);
		                }, _this);
		                break;
		              case 'attributes':
		                if (record.attributeName !== 'inert') {
		                  return;
		                }
		                var target = /** @type {!HTMLElement} */record.target;
		                var inert = target.hasAttribute('inert');
		                _this.setInert(target, inert);
		                break;
		            }
		          }, this);
		        }
		      }]);

		      return InertManager;
		    }();

		    /**
		     * Recursively walk the composed tree from |node|.
		     * @param {!Node} node
		     * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,
		     *     before descending into child nodes.
		     * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
		     */


		    function composedTreeWalk(node, callback, shadowRootAncestor) {
		      if (node.nodeType == Node.ELEMENT_NODE) {
		        var element = /** @type {!HTMLElement} */node;
		        if (callback) {
		          callback(element);
		        }

		        // Descend into node:
		        // If it has a ShadowRoot, ignore all child elements - these will be picked
		        // up by the <content> or <shadow> elements. Descend straight into the
		        // ShadowRoot.
		        var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;
		        if (shadowRoot) {
		          composedTreeWalk(shadowRoot, callback);
		          return;
		        }

		        // If it is a <content> element, descend into distributed elements - these
		        // are elements from outside the shadow root which are rendered inside the
		        // shadow DOM.
		        if (element.localName == 'content') {
		          var content = /** @type {!HTMLContentElement} */element;
		          // Verifies if ShadowDom v0 is supported.
		          var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];
		          for (var i = 0; i < distributedNodes.length; i++) {
		            composedTreeWalk(distributedNodes[i], callback);
		          }
		          return;
		        }

		        // If it is a <slot> element, descend into assigned nodes - these
		        // are elements from outside the shadow root which are rendered inside the
		        // shadow DOM.
		        if (element.localName == 'slot') {
		          var slot = /** @type {!HTMLSlotElement} */element;
		          // Verify if ShadowDom v1 is supported.
		          var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];
		          for (var _i = 0; _i < _distributedNodes.length; _i++) {
		            composedTreeWalk(_distributedNodes[_i], callback);
		          }
		          return;
		        }
		      }

		      // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
		      // element, nor a <shadow> element recurse normally.
		      var child = node.firstChild;
		      while (child != null) {
		        composedTreeWalk(child, callback);
		        child = child.nextSibling;
		      }
		    }

		    /**
		     * Adds a style element to the node containing the inert specific styles
		     * @param {!Node} node
		     */
		    function addInertStyle(node) {
		      if (node.querySelector('style#inert-style, link#inert-style')) {
		        return;
		      }
		      var style = document.createElement('style');
		      style.setAttribute('id', 'inert-style');
		      style.textContent = '\n' + '[inert] {\n' + '  pointer-events: none;\n' + '  cursor: default;\n' + '}\n' + '\n' + '[inert], [inert] * {\n' + '  -webkit-user-select: none;\n' + '  -moz-user-select: none;\n' + '  -ms-user-select: none;\n' + '  user-select: none;\n' + '}\n';
		      node.appendChild(style);
		    }

		    if (!HTMLElement.prototype.hasOwnProperty('inert')) {
		      /** @type {!InertManager} */
		      var inertManager = new InertManager(document);

		      Object.defineProperty(HTMLElement.prototype, 'inert', {
		        enumerable: true,
		        /** @this {!HTMLElement} */
		        get: function get() {
		          return this.hasAttribute('inert');
		        },
		        /** @this {!HTMLElement} */
		        set: function set(inert) {
		          inertManager.setInert(this, inert);
		        }
		      });
		    }
		  })();

		})));
	} ());

	/**
	 * @license
	 * Copyright 2016 Google Inc. All rights reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	(() => {
	    var _a, _b, _c;
	    /* Symbols for private properties */
	    const _blockingElements = Symbol();
	    const _alreadyInertElements = Symbol();
	    const _topElParents = Symbol();
	    const _siblingsToRestore = Symbol();
	    const _parentMO = Symbol();
	    /* Symbols for private static methods */
	    const _topChanged = Symbol();
	    const _swapInertedSibling = Symbol();
	    const _inertSiblings = Symbol();
	    const _restoreInertedSiblings = Symbol();
	    const _getParents = Symbol();
	    const _getDistributedChildren = Symbol();
	    const _isInertable = Symbol();
	    const _handleMutations = Symbol();
	    class BlockingElementsImpl {
	        constructor() {
	            /**
	             * The blocking elements.
	             */
	            this[_a] = [];
	            /**
	             * Used to keep track of the parents of the top element, from the element
	             * itself up to body. When top changes, the old top might have been removed
	             * from the document, so we need to memoize the inerted parents' siblings
	             * in order to restore their inerteness when top changes.
	             */
	            this[_b] = [];
	            /**
	             * Elements that are already inert before the first blocking element is
	             * pushed.
	             */
	            this[_c] = new Set();
	        }
	        destructor() {
	            // Restore original inertness.
	            this[_restoreInertedSiblings](this[_topElParents]);
	            // Note we don't want to make these properties nullable on the class,
	            // since then we'd need non-null casts in many places. Calling a method on
	            // a BlockingElements instance after calling destructor will result in an
	            // exception.
	            const nullable = this;
	            nullable[_blockingElements] = null;
	            nullable[_topElParents] = null;
	            nullable[_alreadyInertElements] = null;
	        }
	        get top() {
	            const elems = this[_blockingElements];
	            return elems[elems.length - 1] || null;
	        }
	        push(element) {
	            if (!element || element === this.top) {
	                return;
	            }
	            // Remove it from the stack, we'll bring it to the top.
	            this.remove(element);
	            this[_topChanged](element);
	            this[_blockingElements].push(element);
	        }
	        remove(element) {
	            const i = this[_blockingElements].indexOf(element);
	            if (i === -1) {
	                return false;
	            }
	            this[_blockingElements].splice(i, 1);
	            // Top changed only if the removed element was the top element.
	            if (i === this[_blockingElements].length) {
	                this[_topChanged](this.top);
	            }
	            return true;
	        }
	        pop() {
	            const top = this.top;
	            top && this.remove(top);
	            return top;
	        }
	        has(element) {
	            return this[_blockingElements].indexOf(element) !== -1;
	        }
	        /**
	         * Sets `inert` to all document elements except the new top element, its
	         * parents, and its distributed content.
	         */
	        [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
	            const toKeepInert = this[_alreadyInertElements];
	            const oldParents = this[_topElParents];
	            // No new top, reset old top if any.
	            if (!newTop) {
	                this[_restoreInertedSiblings](oldParents);
	                toKeepInert.clear();
	                this[_topElParents] = [];
	                return;
	            }
	            const newParents = this[_getParents](newTop);
	            // New top is not contained in the main document!
	            if (newParents[newParents.length - 1].parentNode !== document.body) {
	                throw Error('Non-connected element cannot be a blocking element');
	            }
	            // Cast here because we know we'll call _inertSiblings on newParents
	            // below.
	            this[_topElParents] = newParents;
	            const toSkip = this[_getDistributedChildren](newTop);
	            // No previous top element.
	            if (!oldParents.length) {
	                this[_inertSiblings](newParents, toSkip, toKeepInert);
	                return;
	            }
	            let i = oldParents.length - 1;
	            let j = newParents.length - 1;
	            // Find common parent. Index 0 is the element itself (so stop before it).
	            while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
	                i--;
	                j--;
	            }
	            // If up the parents tree there are 2 elements that are siblings, swap
	            // the inerted sibling.
	            if (oldParents[i] !== newParents[j]) {
	                this[_swapInertedSibling](oldParents[i], newParents[j]);
	            }
	            // Restore old parents siblings inertness.
	            i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i));
	            // Make new parents siblings inert.
	            j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
	        }
	        /**
	         * Swaps inertness between two sibling elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_swapInertedSibling](oldInert, newInert) {
	            const siblingsToRestore = oldInert[_siblingsToRestore];
	            // oldInert is not contained in siblings to restore, so we have to check
	            // if it's inertable and if already inert.
	            if (this[_isInertable](oldInert) && !oldInert.inert) {
	                oldInert.inert = true;
	                siblingsToRestore.add(oldInert);
	            }
	            // If newInert was already between the siblings to restore, it means it is
	            // inertable and must be restored.
	            if (siblingsToRestore.has(newInert)) {
	                newInert.inert = false;
	                siblingsToRestore.delete(newInert);
	            }
	            newInert[_parentMO] = oldInert[_parentMO];
	            newInert[_siblingsToRestore] = siblingsToRestore;
	            oldInert[_parentMO] = undefined;
	            oldInert[_siblingsToRestore] = undefined;
	        }
	        /**
	         * Restores original inertness to the siblings of the elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_restoreInertedSiblings](elements) {
	            for (const element of elements) {
	                const mo = element[_parentMO];
	                mo.disconnect();
	                element[_parentMO] = undefined;
	                const siblings = element[_siblingsToRestore];
	                for (const sibling of siblings) {
	                    sibling.inert = false;
	                }
	                element[_siblingsToRestore] = undefined;
	            }
	        }
	        /**
	         * Inerts the siblings of the elements except the elements to skip. Stores
	         * the inerted siblings into the element's symbol `_siblingsToRestore`.
	         * Pass `toKeepInert` to collect the already inert elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_inertSiblings](elements, toSkip, toKeepInert) {
	            for (const element of elements) {
	                // Assume element is not a Document, so it must have a parentNode.
	                const parent = element.parentNode;
	                const children = parent.children;
	                const inertedSiblings = new Set();
	                for (let j = 0; j < children.length; j++) {
	                    const sibling = children[j];
	                    // Skip the input element, if not inertable or to be skipped.
	                    if (sibling === element || !this[_isInertable](sibling) ||
	                        (toSkip && toSkip.has(sibling))) {
	                        continue;
	                    }
	                    // Should be collected since already inerted.
	                    if (toKeepInert && sibling.inert) {
	                        toKeepInert.add(sibling);
	                    }
	                    else {
	                        sibling.inert = true;
	                        inertedSiblings.add(sibling);
	                    }
	                }
	                // Store the siblings that were inerted.
	                element[_siblingsToRestore] = inertedSiblings;
	                // Observe only immediate children mutations on the parent.
	                const mo = new MutationObserver(this[_handleMutations].bind(this));
	                element[_parentMO] = mo;
	                let parentToObserve = parent;
	                // If we're using the ShadyDOM polyfill, then our parent could be a
	                // shady root, which is an object that acts like a ShadowRoot, but isn't
	                // actually a node in the real DOM. Observe the real DOM parent instead.
	                const maybeShadyRoot = parentToObserve;
	                if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
	                    parentToObserve = maybeShadyRoot.host;
	                }
	                mo.observe(parentToObserve, {
	                    childList: true,
	                });
	            }
	        }
	        /**
	         * Handles newly added/removed nodes by toggling their inertness.
	         * It also checks if the current top Blocking Element has been removed,
	         * notifying and removing it.
	         */
	        [_handleMutations](mutations) {
	            const parents = this[_topElParents];
	            const toKeepInert = this[_alreadyInertElements];
	            for (const mutation of mutations) {
	                // If the target is a shadowRoot, get its host as we skip shadowRoots when
	                // computing _topElParents.
	                const target = mutation.target.host || mutation.target;
	                const idx = target === document.body ?
	                    parents.length :
	                    parents.indexOf(target);
	                const inertedChild = parents[idx - 1];
	                const inertedSiblings = inertedChild[_siblingsToRestore];
	                // To restore.
	                for (let i = 0; i < mutation.removedNodes.length; i++) {
	                    const sibling = mutation.removedNodes[i];
	                    if (sibling === inertedChild) {
	                        console.info('Detected removal of the top Blocking Element.');
	                        this.pop();
	                        return;
	                    }
	                    if (inertedSiblings.has(sibling)) {
	                        sibling.inert = false;
	                        inertedSiblings.delete(sibling);
	                    }
	                }
	                // To inert.
	                for (let i = 0; i < mutation.addedNodes.length; i++) {
	                    const sibling = mutation.addedNodes[i];
	                    if (!this[_isInertable](sibling)) {
	                        continue;
	                    }
	                    if (toKeepInert && sibling.inert) {
	                        toKeepInert.add(sibling);
	                    }
	                    else {
	                        sibling.inert = true;
	                        inertedSiblings.add(sibling);
	                    }
	                }
	            }
	        }
	        /**
	         * Returns if the element is inertable.
	         */
	        [_isInertable](element) {
	            return false === /^(style|template|script)$/.test(element.localName);
	        }
	        /**
	         * Returns the list of newParents of an element, starting from element
	         * (included) up to `document.body` (excluded).
	         */
	        [_getParents](element) {
	            const parents = [];
	            let current = element;
	            // Stop to body.
	            while (current && current !== document.body) {
	                // Skip shadow roots.
	                if (current.nodeType === Node.ELEMENT_NODE) {
	                    parents.push(current);
	                }
	                // ShadowDom v1
	                if (current.assignedSlot) {
	                    // Collect slots from deepest slot to top.
	                    while (current = current.assignedSlot) {
	                        parents.push(current);
	                    }
	                    // Continue the search on the top slot.
	                    current = parents.pop();
	                    continue;
	                }
	                current = current.parentNode ||
	                    current.host;
	            }
	            return parents;
	        }
	        /**
	         * Returns the distributed children of the element's shadow root.
	         * Returns null if the element doesn't have a shadow root.
	         */
	        [_getDistributedChildren](element) {
	            const shadowRoot = element.shadowRoot;
	            if (!shadowRoot) {
	                return null;
	            }
	            const result = new Set();
	            let i;
	            let j;
	            let nodes;
	            const slots = shadowRoot.querySelectorAll('slot');
	            if (slots.length && slots[0].assignedNodes) {
	                for (i = 0; i < slots.length; i++) {
	                    nodes = slots[i].assignedNodes({
	                        flatten: true,
	                    });
	                    for (j = 0; j < nodes.length; j++) {
	                        if (nodes[j].nodeType === Node.ELEMENT_NODE) {
	                            result.add(nodes[j]);
	                        }
	                    }
	                }
	                // No need to search for <content>.
	            }
	            return result;
	        }
	    }
	    document.$blockingElements =
	        new BlockingElementsImpl();
	})();

	function blockingElements() { return getDocument().$blockingElements; }
	/**
	 * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
	 *
	 * Automatically handles consecutive calls with a loosely applied stack operation
	 * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
	 * it'll take to find its way into the spec, if ever)
	 * @param target
	 */
	function useBlockingElement(enabled, getTarget) {
	    const stableGetTarget = useStableCallback(getTarget);
	    /**
	     * Push/pop the element from the blockingElements stack.
	     */
	    h(() => {
	        const target = stableGetTarget();
	        if (enabled) {
	            // Sometimes blockingElements will fail if, for example,
	            // the target element isn't connected to document.body.
	            // This is rare, but it's better to fail silently with weird tabbing behavior
	            // than to crash the entire application.
	            try {
	                blockingElements().push(target);
	                return () => {
	                    blockingElements().remove(target);
	                };
	            }
	            catch (ex) {
	                // Well, semi-silently.
	                console.error(ex);
	            }
	        }
	    }, [enabled]);
	}
	function getTopElement() {
	    return blockingElements().top;
	}

	const elementsToRestoreFocusTo = new Map();
	function useFocusTrap({ trapActive }) {
	    const handleActiveChange = F((trapActive, element) => {
	        if (trapActive && element) {
	            let rafHandle = requestAnimationFrame(() => {
	                // TODO: This extra queueMicrotask is needed for
	                // ...reasons?
	                queueMicrotask(() => {
	                    findFirstFocusable(element)?.focus();
	                    rafHandle = 0;
	                });
	            });
	            return () => {
	                if (rafHandle)
	                    cancelAnimationFrame(rafHandle);
	            };
	        }
	        else if (element) {
	            // Restore the focus to the element
	            // that has returned to the top of the stack
	            let rafHandle = requestAnimationFrame(() => {
	                queueMicrotask(() => {
	                    elementsToRestoreFocusTo.get(getTopElement())?.focus();
	                    rafHandle = 0;
	                });
	            });
	            return () => {
	                if (rafHandle)
	                    cancelAnimationFrame(rafHandle);
	            };
	        }
	    }, []);
	    const { getLastActiveElement, useActiveElementProps, getElement } = useActiveElement({ onMountChange: useStableCallback((element) => handleActiveChange(trapActive, element)) });
	    // When the trap becomes active, before we let the blockingElements hook run,
	    // keep track of whatever's currently focused and save it.
	    h(() => {
	        const element = getElement();
	        if (trapActive && element) {
	            const document = getDocument(element);
	            // Save the currently focused element
	            // to whatever's currently at the top of the stack
	            elementsToRestoreFocusTo.set(getTopElement(), getLastActiveElement() ?? document.body);
	        }
	    }, [trapActive]);
	    useBlockingElement(trapActive, getElement);
	    /**
	     * Any time we activate or deactivate the trap,
	     * change focus to something else (something in
	     * the trap if it's active, or whatever we've
	     * tracked in elementsToRestoreFocusTo if not)
	     */
	    h(() => {
	        handleActiveChange(trapActive, getElement());
	    }, [trapActive]);
	    const useFocusTrapProps = ((props) => {
	        const p1 = useActiveElementProps(props);
	        const p2 = { "aria-modal": trapActive ? "true" : undefined };
	        return useMergedProps()(p1, p2);
	    });
	    return {
	        useFocusTrapProps,
	        getElement
	    };
	}
	/**
	 * Returns the first focusable element contained within the given node, or null if none are found.
	 * @param element
	 * @returns
	 */
	function findFirstFocusable(element) {
	    const treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, { acceptNode: (node) => (node instanceof Element && isFocusable(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP) });
	    const firstFocusable = treeWalker.firstChild();
	    return firstFocusable;
	}

	const RandomWords$1 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
	const RovingChildContext = D(null);
	const DemoUseRovingTabIndex = g(() => {
	    const [lastFocusedInner, setLastFocusedInner, getLastFocusedInner] = useState(false);
	    const { useHasFocusProps } = useHasFocus({ onLastFocusedInnerChanged: setLastFocusedInner });
	    const { useListNavigationChild, currentTypeahead, tabbableIndex, useListNavigationProps, navigateToIndex } = useListNavigation({ shouldFocusOnChange: getLastFocusedInner });
	    //const { useRovingTabIndexChild, useRovingTabIndexProps } = useRovingTabIndex<HTMLUListElement, RovingTabIndexChildInfo>({ tabbableIndex, focusOnChange: false });
	    return (e$1("div", { className: "demo", children: [e$1("h2", { children: "Keyboard & List Navigation" }), e$1("h3", { children: e$1("code", { children: "useRovingTabIndex" }) }), e$1("p", { children: ["Native HTML elements offer fantastic keyboard accessability, but cover a relatively limited number of use cases. There is no native HTML tree element, for example, that allows keyboard navigation of its items, nor is it possible to combine the keyboard navigation behavior of a ", e$1("code", { children: "<select>" }), " menu with the menu in a drawer component."] }), e$1("p", { children: ["When coming across a List or a Menu or a RadioGroup or a ToggleButtonGroup or any other \"one component made up of child components\", the usual expected behavior, at least natively, is that tabbing into the component is one action, and tabbing out is another.  Navigating ", e$1("em", { children: "within" }), " the component is done with the arrow keys or other methods."] }), e$1("p", { children: ["This is important both for accessability, but also just for general usability.  When tabbing back and forth, the ability to skip a long list without needing to trudge through ", e$1("em", { children: "every one" }), " of its child elements is extremely important."] }), e$1("p", { children: [e$1("code", { children: "useListNavigation" }), " wraps up the functionality of a few hooks (", e$1("code", { children: "useRovingTabIndex" }), ", ", e$1("code", { children: "useLinearNavigation" }), ", ", e$1("code", { children: "useTypeaheadNavigation" }), "to allow for ARIA-compliant navigation of lists and other similar components.  For more advanced use cases, you can use the other hooks individually."] }), e$1("p", { children: [e$1("code", { children: "useListNavigation" }), " (and ", e$1("code", { children: "useRovingTabIndex" }), ") internally use ", e$1("code", { children: "useChildManager" }), ", which is how the child elements and the parent communicate with each other. This means there are virtually no restrictions on how the DOM is set up as long as you can provide the children with the ", e$1("code", { children: "useListNavigationChild" }), " hook that's returned, usually with a simple ", e$1("code", { children: "Context" }), ". If the child element itself has a focusable element, like a button, it can also be wired up to disable itself Feel free to nest them too, as long as you are aware of your ", e$1("code", { children: "Context" }), " management (i.e. remember that you need to create a new ", e$1("code", { children: "Context" }), " for each use case)."] }), e$1("label", { children: ["Tabbable index: ", e$1("input", { type: "number", value: tabbableIndex ?? undefined, onInput: e => { e.preventDefault(); navigateToIndex(e.currentTarget.valueAsNumber); } })] }), e$1("ul", { ...useHasFocusProps(useListNavigationProps({})), children: e$1(RovingChildContext.Provider, { value: useListNavigationChild, children: Array.from((function* () {
	                        for (let i = 0; i < 10; ++i) {
	                            yield e$1(DemoUseRovingTabIndexChild, { index: i }, i);
	                        }
	                    })()) }) }), currentTypeahead && e$1("div", { children: ["Typeahead: ", currentTypeahead] })] }));
	});
	const DemoUseRovingTabIndexChild = g((({ index }) => {
	    const [randomWord] = useState(() => RandomWords$1[index /*Math.floor(Math.random() * (RandomWords.length - 1))*/]);
	    const useRovingTabIndexChild = T$1(RovingChildContext);
	    const text = `${randomWord} This is item #${index + 1}`;
	    const { useListNavigationChildProps, useListNavigationSiblingProps, tabbable } = useRovingTabIndexChild({ index, text, hidden: (index == 5) });
	    const props = useListNavigationChildProps({});
	    return (e$1("li", { ...props, children: [text, " (", tabbable ? "Tabbable" : "Not tabbable", ")", e$1("input", { ...useListNavigationSiblingProps({ type: "checkbox" }) })] }));
	}));

	const DemoUseInterval = () => {
	    const [interval, setInterval] = d(1000);
	    const [fireCount, setFireCount] = d(0);
	    useInterval({ interval, callback: () => setFireCount(i => ++i) });
	    return (e$1("div", { class: "demo", children: [e$1("label", { children: ["Interval duration: ", e$1("input", { type: "number", value: interval, onInput: e => setInterval(e.currentTarget.valueAsNumber) })] }), e$1("div", { children: ["The callback has been called ", fireCount, " time", fireCount === 1 ? "" : "s", "."] })] }));
	};

	const DemoUseTimeout = () => {
	    const [timeout, setTimeout] = d(1000);
	    const [triggerIndex, setTriggerIndex] = d("");
	    const [fireCount, setFireCount] = d(0);
	    useTimeout({ timeout, triggerIndex, callback: () => setFireCount(i => ++i) });
	    return (e$1("div", { class: "demo", children: [e$1("label", { children: ["Timeout duration: ", e$1("input", { type: "number", value: timeout, onInput: e => setTimeout(e.currentTarget.valueAsNumber) })] }), e$1("label", { children: ["Refresh key: ", e$1("input", { type: "text", value: triggerIndex, onInput: e => setTriggerIndex(e.currentTarget.value) })] }), e$1("div", { children: ["The callback has been called ", fireCount, " time", fireCount === 1 ? "" : "s", "."] })] }));
	};

	const RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
	const DemoUseDroppable = () => {
	    const { droppedFiles, droppedStrings, filesForConsideration, stringsForConsideration, useDroppableProps, dropError } = useDroppable({ effect: "copy" });
	    useMergedProps()({}, { ref: s(null) });
	    const p = useDroppableProps({ className: "demo droppable" });
	    p.ref;
	    return (e$1("div", { ...p, children: [droppedStrings != null && e$1("div", { children: ["Data dropped: ", e$1("ul", { children: Object.entries(droppedStrings).map(([type, value]) => e$1("li", { children: [type, ": ", value] })) })] }), droppedFiles != null && e$1("div", { children: ["Files dropped: ", e$1("table", { children: [e$1("thead", { children: e$1("tr", { children: [e$1("th", { children: "Name" }), e$1("th", { children: "Size" }), e$1("th", { children: "Type" }), e$1("th", { children: "Last modified" })] }) }), e$1("tbody", { children: droppedFiles.map(f => e$1("tr", { children: [e$1("td", { children: f.name }), f.data.byteLength, e$1("td", { children: f.type }), e$1("td", { children: new Date(f.lastModified ?? 0) })] })) })] })] }), e$1("hr", {}), stringsForConsideration != null && e$1("div", { children: ["Data being considered: ", e$1("ul", { children: Array.from(stringsForConsideration).map(type => e$1("li", { children: type })) })] }), filesForConsideration != null && e$1("div", { children: ["Files being considered: ", e$1("ul", { children: filesForConsideration.map(f => e$1("li", { children: JSON.stringify(f) })) })] }), e$1("hr", {}), dropError && e$1("div", { children: dropError instanceof Error ? dropError.message : JSON.stringify(dropError) })] }));
	};
	const DemoUseDraggable = () => {
	    const { dragging, useDraggableProps, lastDropEffect, getLastDropEffect, getDragging } = useDraggable({ data: { "text/plain": "This is custom draggable content of type text/plain." } });
	    return (e$1("div", { ...useDraggableProps({ className: "demo" }), children: "Draggable content" }));
	};
	const DemoUseElementSizeAnimation = () => {
	    const [height, setHeight] = useState(0);
	    const [angle, setAngle] = useState(0);
	    useAnimationFrame({
	        callback: (ms) => {
	            setAngle(a => a + 0.01);
	            setHeight((Math.sin(angle) + 1) / 0.5);
	        }
	    });
	    const [elementSize, setElementSize] = useState(null);
	    const { useElementSizeProps } = useElementSize({ onSizeChange: setElementSize });
	    return (e$1("div", { ...useElementSizeProps({ ref: undefined, className: "demo", style: { height: `${(height * 100) + 100}px` } }), children: e$1("pre", { children: JSON.stringify(elementSize, null, 2) }) }));
	};
	const DemoUseFocusTrap = g(({ depth }) => {
	    const [active, setActive] = useState(false);
	    const { useFocusTrapProps } = useFocusTrap({ trapActive: active });
	    //const { useRovingTabIndexChild, useRovingTabIndexProps } = useRovingTabIndex<HTMLUListElement, RovingTabIndexChildInfo>({ tabbableIndex, focusOnChange: false });
	    const divProps = useFocusTrapProps({ ref: undefined, className: "focus-trap-demo" });
	    if (depth == 2)
	        return e$1("div", {});
	    return (e$1("div", { className: "demo", children: [e$1("label", { children: ["Active: ", e$1("input", { type: "checkbox", checked: active, onInput: e => { e.preventDefault(); setActive(e.currentTarget.checked); } })] }), e$1("div", { ...divProps, children: e$1(DemoUseFocusTrapChild, { active: active, setActive: setActive, depth: depth ?? 0 }) })] }));
	});
	const DemoUseFocusTrapChild = g(({ setActive, active, depth }) => {
	    return (e$1(d$1, { children: [e$1("button", { children: "Button 1" }), e$1("button", { children: "Button 2" }), e$1("button", { children: "Button 3" }), e$1("label", { children: ["Active: ", e$1("input", { type: "checkbox", checked: active, onInput: e => { e.preventDefault(); setActive(e.currentTarget.checked); } })] })] }));
	});
	const DemoUseAsyncHandler1 = g(() => {
	    const [timeout, setTimeout] = useState(1000);
	    const [debounce, setDebounce] = useState(0);
	    const [shouldThrow, setShouldThrow, getShouldThrow] = useState(false);
	    const [disableConsecutive, setDisableConsecutive] = useState(false);
	    const { callCount, settleCount, getCurrentCapture, hasCapture, useSyncHandler, currentCapture, pending, error, hasError, rejectCount, resolveCount } = useAsyncHandler()({ capture: () => { }, debounce: debounce == 0 ? undefined : debounce });
	    const asyncOnClick = ((v, e) => new Promise((resolve, reject) => window.setTimeout(() => getShouldThrow() ? reject() : resolve(), timeout)));
	    const onClick = useSyncHandler(pending ? null : asyncOnClick);
	    return (e$1("div", { className: "demo", children: [e$1("button", { disabled: pending && disableConsecutive, onClick: onClick, children: "Click me!" }), e$1("label", { children: ["Sleep for: ", e$1("input", { type: "number", value: timeout, onInput: e => setTimeout(e.currentTarget.valueAsNumber) })] }), e$1("label", { children: ["Throw an error ", e$1("input", { type: "checkbox", checked: shouldThrow, onInput: e => setShouldThrow(e.currentTarget.checked) })] }), e$1("label", { children: ["Disabled while pending ", e$1("input", { type: "checkbox", checked: disableConsecutive, onInput: e => setDisableConsecutive(e.currentTarget.checked) })] }), e$1("label", { children: ["Debounce: ", e$1("input", { type: "number", value: debounce, onInput: e => setDebounce(e.currentTarget.valueAsNumber) })] }), e$1("table", { children: [e$1("thead", { children: e$1("tr", { children: [e$1("th", { children: "Field" }), e$1("th", { children: "Value" })] }) }), e$1("tbody", { children: [e$1("tr", { children: [e$1("td", { children: "callCount" }), e$1("td", { children: callCount })] }), e$1("tr", { children: [e$1("td", { children: "settleCount" }), e$1("td", { children: settleCount })] }), e$1("tr", { children: [e$1("td", { children: "resolveCount" }), e$1("td", { children: resolveCount })] }), e$1("tr", { children: [e$1("td", { children: "rejectCount" }), e$1("td", { children: rejectCount })] }), e$1("tr", { children: [e$1("td", { children: "hasError" }), e$1("td", { children: hasError.toString() })] }), e$1("tr", { children: [e$1("td", { children: "hasCapture" }), e$1("td", { children: hasCapture.toString() })] })] })] })] }));
	});
	const DemoUseAsyncHandler2 = g(() => {
	    const [timeout, setTimeout] = useState(1000);
	    const [debounce, setDebounce] = useState(0);
	    const [shouldThrow, setShouldThrow, getShouldThrow] = useState(false);
	    const [disableConsecutive, setDisableConsecutive] = useState(false);
	    const [text, setText] = useState("");
	    const { callCount, settleCount, getCurrentCapture, hasCapture, useSyncHandler, currentCapture, pending, error, hasError, rejectCount, resolveCount } = useAsyncHandler()({ capture: e => { e.preventDefault(); return e.currentTarget.value; }, debounce: debounce == 0 ? undefined : debounce });
	    const onInput = useSyncHandler(async (v, e) => new Promise((resolve, reject) => window.setTimeout(() => {
	        if (getShouldThrow()) {
	            reject();
	        }
	        else {
	            setText(v);
	            resolve();
	        }
	    }, timeout)));
	    return (e$1("div", { className: "demo", children: [e$1("label", { children: ["Demo text: ", e$1("input", { value: hasCapture ? currentCapture : text, disabled: pending && disableConsecutive, onInput: onInput })] }), e$1("hr", {}), e$1("label", { children: ["Sleep for: ", e$1("input", { type: "number", value: timeout, onInput: e => setTimeout(e.currentTarget.valueAsNumber) })] }), e$1("label", { children: ["Throw an error ", e$1("input", { type: "checkbox", checked: shouldThrow, onInput: e => setShouldThrow(e.currentTarget.checked) })] }), e$1("label", { children: ["Disabled while pending ", e$1("input", { type: "checkbox", checked: disableConsecutive, onInput: e => setDisableConsecutive(e.currentTarget.checked) })] }), e$1("label", { children: ["Debounce: ", e$1("input", { type: "number", value: debounce, onInput: e => setDebounce(e.currentTarget.valueAsNumber) })] }), e$1("table", { children: [e$1("thead", { children: e$1("tr", { children: [e$1("th", { children: "Field" }), e$1("th", { children: "Value" })] }) }), e$1("tbody", { children: [e$1("tr", { children: [e$1("td", { children: "callCount" }), e$1("td", { children: callCount })] }), e$1("tr", { children: [e$1("td", { children: "settleCount" }), e$1("td", { children: settleCount })] }), e$1("tr", { children: [e$1("td", { children: "resolveCount" }), e$1("td", { children: resolveCount })] }), e$1("tr", { children: [e$1("td", { children: "rejectCount" }), e$1("td", { children: rejectCount })] }), e$1("tr", { children: [e$1("td", { children: "hasError" }), e$1("td", { children: hasError.toString() })] }), e$1("tr", { children: [e$1("td", { children: "currentCapture" }), e$1("td", { children: currentCapture })] }), e$1("tr", { children: [e$1("td", { children: "\"Saved\" input" }), e$1("td", { children: text })] })] })] })] }));
	});
	const DemoFocus = g(() => {
	    const [lastActiveElement, setLastActiveElement, getLastActiveElement] = useState(null);
	    const [activeElement, setActiveElement, getActiveElement] = useState(null);
	    const [windowFocused, setWindowFocused, getWindowFocused] = useState(false);
	    const [focused, setFocused, getFocused] = useState(false);
	    const [focusedInner, setFocusedInner, getFocusedInner] = useState(false);
	    const [lastFocused, setLastFocused, getLastFocused] = useState(false);
	    const [lastFocusedInner, setLastFocusedInner, getLastFocusedInner] = useState(false);
	    const { useHasFocusProps } = useHasFocus({
	        onFocusedChanged: setFocused,
	        onFocusedInnerChanged: setFocusedInner,
	        onLastFocusedChanged: setLastFocused,
	        onLastFocusedInnerChanged: setLastFocusedInner,
	        onActiveElementChange: setActiveElement,
	        onLastActiveElementChange: setLastActiveElement,
	        onWindowFocusedChange: setWindowFocused
	    });
	    return (e$1("div", { class: "demo", children: [e$1("h2", { children: "useHasFocus" }), e$1("div", { ...useHasFocusProps({ style: { border: "1px solid black" }, tabIndex: 0 }), children: ["Outer ", e$1("div", { tabIndex: 0, style: { border: "1px solid black" }, children: "Inner element" })] }), e$1("div", { children: e$1("ul", { children: [e$1("li", { children: ["Strictly focused: ", focused.toString(), ", ", lastFocused.toString()] }), e$1("li", { children: ["Inner focused: ", focusedInner.toString(), ", ", lastFocusedInner.toString()] }), e$1("li", { children: ["Window focused: ", windowFocused.toString()] }), e$1("li", { children: ["activeElement: ", activeElement?.textContent] }), e$1("li", { children: ["lastActiveElement: ", lastActiveElement?.textContent] })] }) })] }));
	});
	const GridRowContext = D(null);
	const GridCellContext = D(null);
	const DemoUseGrid = g(() => {
	    const [lastFocusedInner, setLastFocusedInner, getLastFocusedInner] = useState(false);
	    const { useHasFocusProps } = useHasFocus({ onLastFocusedInnerChanged: setLastFocusedInner });
	    const { useGridNavigationRow, useGridNavigationColumn, rowCount, cellIndex, rowIndex, useGridNavigationProps } = useGridNavigation({ shouldFocusOnChange: getLastFocusedInner });
	    return (e$1("div", { className: "demo", children: [e$1("div", { children: [cellIndex, "+", rowIndex, "/", rowCount] }), e$1("div", { ...useHasFocusProps(useGridNavigationProps({})), children: e$1(GridRowContext.Provider, { value: useGridNavigationRow, children: Array.from((function* () {
	                        for (let i = 0; i < 10; ++i) {
	                            yield e$1(DemoUseGridRow, { index: i }, i);
	                        }
	                    })()) }) })] }));
	});
	const DemoUseGridRow = g((({ index }) => {
	    useState(() => RandomWords[index /*Math.floor(Math.random() * (RandomWords.length - 1))*/]);
	    const useGridRow = T$1(GridRowContext);
	    const { isTabbableRow, cellCount, useGridNavigationRowProps, useGridNavigationCell, managedCells, currentColumn } = useGridRow({ index });
	    const props = useGridNavigationRowProps({});
	    return (e$1("div", { ...props, children: [e$1("div", { children: [`${isTabbableRow}`, " (", currentColumn, "/", cellCount - 1, ")"] }), e$1("div", { style: "display: flex", children: e$1(GridCellContext.Provider, { value: useGridNavigationCell, children: Array.from((function* () {
	                        for (let i = 0; i < 3; ++i) {
	                            yield e$1(DemoUseGridCell, { index: i }, i);
	                        }
	                    })()) }) })] }));
	}));
	const DemoUseGridCell = (({ index }) => {
	    const useGridCell = T$1(GridCellContext);
	    const { useGridNavigationCellProps } = useGridCell({ index });
	    const props = useGridNavigationCellProps({});
	    if (index === 0)
	        return e$1("div", { ...props, children: ["Grid cell #", index + 1] });
	    else
	        return e$1("label", { children: [e$1("input", { ...props, type: "checkbox" }), " Test input"] });
	});
	const Component = () => {
	    return e$1("div", { class: "flex", style: { flexWrap: "wrap" }, children: [e$1(DemoFocus, {}), e$1("hr", {}), e$1(DemoUseGrid, {}), e$1("hr", {}), e$1(DemoUseTimeout, {}), e$1("hr", {}), e$1(DemoUseInterval, {}), e$1("hr", {}), e$1(DemoUseRovingTabIndex, {}), e$1("hr", {}), e$1(DemoUseFocusTrap, {}), e$1("hr", {}), e$1(DemoUseAsyncHandler1, {}), e$1("hr", {}), e$1(DemoUseAsyncHandler2, {}), e$1("hr", {}), e$1(DemoUseDroppable, {}), e$1("hr", {}), e$1(DemoUseDraggable, {}), e$1("hr", {}), e$1(DemoUseElementSizeAnimation, {}), e$1("hr", {}), e$1("input", {})] });
	};
	requestAnimationFrame(() => {
	    S$1(e$1(Component, {}), document.getElementById("root"));
	});

	exports.DemoUseGrid = DemoUseGrid;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
